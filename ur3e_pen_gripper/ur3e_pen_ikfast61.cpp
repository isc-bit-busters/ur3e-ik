/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004a generated on 2025-03-27 14:37:01.100456
/// Generated using solver transform6d
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x1000004a);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[2]);
x4=IKsin(j[1]);
x5=IKcos(j[3]);
x6=IKsin(j[3]);
x7=IKcos(j[5]);
x8=IKsin(j[5]);
x9=IKcos(j[4]);
x10=IKsin(j[4]);
x11=IKsin(j[0]);
x12=((0.244)*x1);
x13=((1.0)*x11);
x14=((0.085)*x3);
x15=((0.185)*x5);
x16=((1.0)*x9);
x17=((0.213)*x11);
x18=((1.0)*x5);
x19=((0.085)*x11);
x20=((0.213)*x0);
x21=((1.0)*x0);
x22=((0.085)*x0);
x23=((0.185)*x6);
x24=(x0*x9);
x25=(x2*x4);
x26=(x3*x4);
x27=(x1*x3);
x28=(x0*x10);
x29=(x1*x2);
x30=(x10*x13);
x31=(x21*x27);
x32=(x13*x27);
x33=(x26+x29);
x34=((((-1.0)*x25))+(((1.0)*x27)));
x35=(x33*x5);
x36=(x34*x6);
x37=((((-1.0)*x31))+((x0*x25)));
x38=((((-1.0)*x32))+((x11*x25)));
x39=(x21*((x26+x29)));
x40=(x13*((x26+x29)));
x41=(x37*x5);
x42=(x40*x6);
x43=(x39*x6);
x44=(((x34*x5))+((x6*(((((-1.0)*x26))+(((-1.0)*x29)))))));
x45=(x43+x41);
x46=(x42+((x38*x5)));
x47=(((x6*(((((-1.0)*x21*x25))+x31))))+((x39*x5)));
x48=(((x6*(((((-1.0)*x13*x25))+x32))))+((x40*x5)));
x49=(x46*x9);
eerot[0]=(((x47*x8))+((x7*(((((-1.0)*x30))+((x45*x9)))))));
eerot[1]=(((x47*x7))+((x8*(((((-1.0)*x16*x45))+x30)))));
eerot[2]=(((x10*(((((-1.0)*x18*x37))+(((-1.0)*x43))))))+(((-1.0)*x13*x9)));
IkReal x50=((1.0)*x0*x14);
eetrans[0]=(((x0*x12))+((x6*((((x22*x25))+(((-1.0)*x1*x50))))))+((x5*(((((-1.0)*x4*x50))+(((-1.0)*x22*x29))))))+(((-0.131)*x11))+(((-0.185)*x11*x9))+((x10*(((((-1.0)*x23*x39))+(((-1.0)*x15*x37))))))+((x20*x27))+(((-1.0)*x20*x25)));
eerot[3]=(((x7*((x49+x28))))+((x48*x8)));
eerot[4]=(((x48*x7))+((x8*(((((-1.0)*x16*x46))+(((-1.0)*x10*x21)))))));
eerot[5]=(x24+((x10*(((((-1.0)*x18*x38))+(((-1.0)*x42)))))));
IkReal x51=((1.0)*x11*x14);
eetrans[1]=((((0.131)*x0))+((x10*(((((-1.0)*x23*x40))+(((-1.0)*x15*x38))))))+(((-1.0)*x17*x25))+((x17*x27))+((x11*x12))+((x5*(((((-1.0)*x19*x29))+(((-1.0)*x4*x51))))))+((x6*((((x19*x25))+(((-1.0)*x1*x51))))))+(((0.185)*x24)));
eerot[6]=(((x7*x9*((x36+x35))))+((x44*x8)));
eerot[7]=(((x8*x9*(((((-1.0)*x36))+(((-1.0)*x35))))))+((x44*x7)));
eerot[8]=(x10*(((((-1.0)*x36))+(((-1.0)*x18*x33)))));
eetrans[2]=((0.152)+((x6*((((x14*x4))+(((0.085)*x29))))))+(((-0.244)*x4))+((x5*(((((-1.0)*x1*x14))+(((0.085)*x25))))))+((x10*(((((-1.0)*x23*x34))+(((-1.0)*x15*x33))))))+(((-0.213)*x29))+(((-0.213)*x26)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=(px+(((-0.185)*r02)));
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((((-0.185)*r12))+py);
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((-0.152)+(((-0.185)*r22))+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x52=((1.0)*px);
IkReal x53=((1.0)*pz);
IkReal x54=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x54))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x53)));
rxp0_2=((((-1.0)*r10*x52))+((py*r00)));
rxp1_0=((((-1.0)*r21*x54))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x53)));
rxp1_2=((((-1.0)*r11*x52))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x54)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x53)));
rxp2_2=((((-1.0)*r12*x52))+((py*r02)));
IkReal IKFAST_ALIGNED16(matrixinvcoeffs[256]);
IkReal x55=((0.17)*npx);
IkReal x56=((0.17)*npy);
IkReal x57=((0.085)*r22);
IkReal x58=((0.085)*r21);
IkReal x59=((-0.085)*r20);
IkReal x60=((-1.0)*r20);
IkReal x61=((-1.0)*rxp0_2);
IkReal x62=((-0.085)*r21);
IkReal x63=((-1.0)*r21);
IkReal x64=((-1.0)*rxp1_2);
IkReal x65=((-1.0)*npx);
IkReal x66=((-1.0)*r22);
IkReal x67=((-1.0)*npz);
matrixinvcoeffs[0]=x59;
matrixinvcoeffs[1]=x55;
matrixinvcoeffs[2]=0;
matrixinvcoeffs[3]=0;
matrixinvcoeffs[4]=0;
matrixinvcoeffs[5]=0;
matrixinvcoeffs[6]=0;
matrixinvcoeffs[7]=0;
matrixinvcoeffs[8]=0;
matrixinvcoeffs[9]=npx;
matrixinvcoeffs[10]=x60;
matrixinvcoeffs[11]=0;
matrixinvcoeffs[12]=0;
matrixinvcoeffs[13]=0;
matrixinvcoeffs[14]=0;
matrixinvcoeffs[15]=x61;
matrixinvcoeffs[16]=0;
matrixinvcoeffs[17]=0;
matrixinvcoeffs[18]=x59;
matrixinvcoeffs[19]=x55;
matrixinvcoeffs[20]=0;
matrixinvcoeffs[21]=0;
matrixinvcoeffs[22]=0;
matrixinvcoeffs[23]=0;
matrixinvcoeffs[24]=npx;
matrixinvcoeffs[25]=0;
matrixinvcoeffs[26]=0;
matrixinvcoeffs[27]=x60;
matrixinvcoeffs[28]=0;
matrixinvcoeffs[29]=0;
matrixinvcoeffs[30]=x61;
matrixinvcoeffs[31]=0;
matrixinvcoeffs[32]=x62;
matrixinvcoeffs[33]=x56;
matrixinvcoeffs[34]=0;
matrixinvcoeffs[35]=0;
matrixinvcoeffs[36]=0;
matrixinvcoeffs[37]=0;
matrixinvcoeffs[38]=0;
matrixinvcoeffs[39]=0;
matrixinvcoeffs[40]=0;
matrixinvcoeffs[41]=npy;
matrixinvcoeffs[42]=x63;
matrixinvcoeffs[43]=0;
matrixinvcoeffs[44]=0;
matrixinvcoeffs[45]=0;
matrixinvcoeffs[46]=0;
matrixinvcoeffs[47]=x64;
matrixinvcoeffs[48]=0;
matrixinvcoeffs[49]=0;
matrixinvcoeffs[50]=x62;
matrixinvcoeffs[51]=x56;
matrixinvcoeffs[52]=0;
matrixinvcoeffs[53]=0;
matrixinvcoeffs[54]=0;
matrixinvcoeffs[55]=0;
matrixinvcoeffs[56]=npy;
matrixinvcoeffs[57]=0;
matrixinvcoeffs[58]=0;
matrixinvcoeffs[59]=x63;
matrixinvcoeffs[60]=0;
matrixinvcoeffs[61]=0;
matrixinvcoeffs[62]=x64;
matrixinvcoeffs[63]=0;
matrixinvcoeffs[64]=0;
matrixinvcoeffs[65]=0;
matrixinvcoeffs[66]=0;
matrixinvcoeffs[67]=0;
matrixinvcoeffs[68]=0;
matrixinvcoeffs[69]=0;
matrixinvcoeffs[70]=0;
matrixinvcoeffs[71]=0;
matrixinvcoeffs[72]=npz;
matrixinvcoeffs[73]=0;
matrixinvcoeffs[74]=0;
matrixinvcoeffs[75]=x66;
matrixinvcoeffs[76]=x57;
matrixinvcoeffs[77]=0;
matrixinvcoeffs[78]=((-1.0)*rxp2_2);
matrixinvcoeffs[79]=0;
matrixinvcoeffs[80]=0;
matrixinvcoeffs[81]=0;
matrixinvcoeffs[82]=0;
matrixinvcoeffs[83]=0;
matrixinvcoeffs[84]=0;
matrixinvcoeffs[85]=0;
matrixinvcoeffs[86]=0;
matrixinvcoeffs[87]=0;
matrixinvcoeffs[88]=0;
matrixinvcoeffs[89]=x67;
matrixinvcoeffs[90]=r22;
matrixinvcoeffs[91]=0;
matrixinvcoeffs[92]=0;
matrixinvcoeffs[93]=x57;
matrixinvcoeffs[94]=0;
matrixinvcoeffs[95]=rxp2_2;
matrixinvcoeffs[96]=0;
matrixinvcoeffs[97]=0;
matrixinvcoeffs[98]=0;
matrixinvcoeffs[99]=0;
matrixinvcoeffs[100]=r21;
matrixinvcoeffs[101]=npy;
matrixinvcoeffs[102]=0;
matrixinvcoeffs[103]=0;
matrixinvcoeffs[104]=0;
matrixinvcoeffs[105]=0;
matrixinvcoeffs[106]=0;
matrixinvcoeffs[107]=0;
matrixinvcoeffs[108]=x64;
matrixinvcoeffs[109]=0;
matrixinvcoeffs[110]=x62;
matrixinvcoeffs[111]=0;
matrixinvcoeffs[112]=0;
matrixinvcoeffs[113]=0;
matrixinvcoeffs[114]=0;
matrixinvcoeffs[115]=0;
matrixinvcoeffs[116]=0;
matrixinvcoeffs[117]=0;
matrixinvcoeffs[118]=r21;
matrixinvcoeffs[119]=npy;
matrixinvcoeffs[120]=0;
matrixinvcoeffs[121]=0;
matrixinvcoeffs[122]=0;
matrixinvcoeffs[123]=0;
matrixinvcoeffs[124]=0;
matrixinvcoeffs[125]=x64;
matrixinvcoeffs[126]=0;
matrixinvcoeffs[127]=x58;
matrixinvcoeffs[128]=0;
matrixinvcoeffs[129]=0;
matrixinvcoeffs[130]=0;
matrixinvcoeffs[131]=0;
matrixinvcoeffs[132]=x60;
matrixinvcoeffs[133]=x65;
matrixinvcoeffs[134]=0;
matrixinvcoeffs[135]=0;
matrixinvcoeffs[136]=0;
matrixinvcoeffs[137]=0;
matrixinvcoeffs[138]=0;
matrixinvcoeffs[139]=0;
matrixinvcoeffs[140]=rxp0_2;
matrixinvcoeffs[141]=0;
matrixinvcoeffs[142]=((0.085)*r20);
matrixinvcoeffs[143]=0;
matrixinvcoeffs[144]=0;
matrixinvcoeffs[145]=0;
matrixinvcoeffs[146]=0;
matrixinvcoeffs[147]=0;
matrixinvcoeffs[148]=0;
matrixinvcoeffs[149]=0;
matrixinvcoeffs[150]=x60;
matrixinvcoeffs[151]=x65;
matrixinvcoeffs[152]=0;
matrixinvcoeffs[153]=0;
matrixinvcoeffs[154]=0;
matrixinvcoeffs[155]=0;
matrixinvcoeffs[156]=0;
matrixinvcoeffs[157]=rxp0_2;
matrixinvcoeffs[158]=0;
matrixinvcoeffs[159]=x59;
matrixinvcoeffs[160]=0;
matrixinvcoeffs[161]=0;
matrixinvcoeffs[162]=0;
matrixinvcoeffs[163]=0;
matrixinvcoeffs[164]=x66;
matrixinvcoeffs[165]=x67;
matrixinvcoeffs[166]=0;
matrixinvcoeffs[167]=0;
matrixinvcoeffs[168]=0;
matrixinvcoeffs[169]=0;
matrixinvcoeffs[170]=0;
matrixinvcoeffs[171]=0;
matrixinvcoeffs[172]=rxp2_2;
matrixinvcoeffs[173]=0;
matrixinvcoeffs[174]=x57;
matrixinvcoeffs[175]=0;
matrixinvcoeffs[176]=0;
matrixinvcoeffs[177]=0;
matrixinvcoeffs[178]=0;
matrixinvcoeffs[179]=0;
matrixinvcoeffs[180]=0;
matrixinvcoeffs[181]=0;
matrixinvcoeffs[182]=x66;
matrixinvcoeffs[183]=x67;
matrixinvcoeffs[184]=0;
matrixinvcoeffs[185]=0;
matrixinvcoeffs[186]=0;
matrixinvcoeffs[187]=0;
matrixinvcoeffs[188]=0;
matrixinvcoeffs[189]=rxp2_2;
matrixinvcoeffs[190]=0;
matrixinvcoeffs[191]=((-0.085)*r22);
matrixinvcoeffs[192]=0;
matrixinvcoeffs[193]=0;
matrixinvcoeffs[194]=0;
matrixinvcoeffs[195]=0;
matrixinvcoeffs[196]=0;
matrixinvcoeffs[197]=0;
matrixinvcoeffs[198]=0;
matrixinvcoeffs[199]=0;
matrixinvcoeffs[200]=npy;
matrixinvcoeffs[201]=0;
matrixinvcoeffs[202]=0;
matrixinvcoeffs[203]=x63;
matrixinvcoeffs[204]=x58;
matrixinvcoeffs[205]=0;
matrixinvcoeffs[206]=x64;
matrixinvcoeffs[207]=0;
matrixinvcoeffs[208]=0;
matrixinvcoeffs[209]=0;
matrixinvcoeffs[210]=0;
matrixinvcoeffs[211]=0;
matrixinvcoeffs[212]=0;
matrixinvcoeffs[213]=0;
matrixinvcoeffs[214]=0;
matrixinvcoeffs[215]=0;
matrixinvcoeffs[216]=0;
matrixinvcoeffs[217]=((-1.0)*npy);
matrixinvcoeffs[218]=r21;
matrixinvcoeffs[219]=0;
matrixinvcoeffs[220]=0;
matrixinvcoeffs[221]=x58;
matrixinvcoeffs[222]=0;
matrixinvcoeffs[223]=rxp1_2;
matrixinvcoeffs[224]=0;
matrixinvcoeffs[225]=0;
matrixinvcoeffs[226]=0;
matrixinvcoeffs[227]=0;
matrixinvcoeffs[228]=0;
matrixinvcoeffs[229]=0;
matrixinvcoeffs[230]=0;
matrixinvcoeffs[231]=0;
matrixinvcoeffs[232]=x65;
matrixinvcoeffs[233]=0;
matrixinvcoeffs[234]=0;
matrixinvcoeffs[235]=r20;
matrixinvcoeffs[236]=x59;
matrixinvcoeffs[237]=0;
matrixinvcoeffs[238]=rxp0_2;
matrixinvcoeffs[239]=0;
matrixinvcoeffs[240]=0;
matrixinvcoeffs[241]=0;
matrixinvcoeffs[242]=0;
matrixinvcoeffs[243]=0;
matrixinvcoeffs[244]=0;
matrixinvcoeffs[245]=0;
matrixinvcoeffs[246]=0;
matrixinvcoeffs[247]=0;
matrixinvcoeffs[248]=0;
matrixinvcoeffs[249]=npx;
matrixinvcoeffs[250]=x60;
matrixinvcoeffs[251]=0;
matrixinvcoeffs[252]=0;
matrixinvcoeffs[253]=x59;
matrixinvcoeffs[254]=0;
matrixinvcoeffs[255]=x61;
if( !matrixinverse<16>(matrixinvcoeffs) ) {
continue;
}
IkReal gclwh0_0=matrixinvcoeffs[0], gclwh0_1=matrixinvcoeffs[16], gclwh1_2=matrixinvcoeffs[33], gclwh1_3=matrixinvcoeffs[49], gclwh2_0=matrixinvcoeffs[2], gclwh2_1=matrixinvcoeffs[18], gclwh3_2=matrixinvcoeffs[35], gclwh3_3=matrixinvcoeffs[51], gclwh4_2=matrixinvcoeffs[36], gclwh4_3=matrixinvcoeffs[52], gclwh4_4=matrixinvcoeffs[68], gclwh4_8=matrixinvcoeffs[132], gclwh4_11=matrixinvcoeffs[180], gclwh4_14=matrixinvcoeffs[228], gclwh5_0=matrixinvcoeffs[5], gclwh5_1=matrixinvcoeffs[21], gclwh5_6=matrixinvcoeffs[101], gclwh5_9=matrixinvcoeffs[149], gclwh5_10=matrixinvcoeffs[165], gclwh5_15=matrixinvcoeffs[245], gclwh6_2=matrixinvcoeffs[38], gclwh6_4=matrixinvcoeffs[70], gclwh6_5=matrixinvcoeffs[86], gclwh6_11=matrixinvcoeffs[182], gclwh6_12=matrixinvcoeffs[198], gclwh7_0=matrixinvcoeffs[7], gclwh7_1=matrixinvcoeffs[23], gclwh7_6=matrixinvcoeffs[103], gclwh7_7=matrixinvcoeffs[119], gclwh7_10=matrixinvcoeffs[167], gclwh7_13=matrixinvcoeffs[215], gclwh8_2=matrixinvcoeffs[40], gclwh8_4=matrixinvcoeffs[72], gclwh8_5=matrixinvcoeffs[88], gclwh8_11=matrixinvcoeffs[184], gclwh8_12=matrixinvcoeffs[200], gclwh9_0=matrixinvcoeffs[9], gclwh9_6=matrixinvcoeffs[105], gclwh9_7=matrixinvcoeffs[121], gclwh9_10=matrixinvcoeffs[169], gclwh9_13=matrixinvcoeffs[217], gclwh10_2=matrixinvcoeffs[42], gclwh10_3=matrixinvcoeffs[58], gclwh10_4=matrixinvcoeffs[74], gclwh10_5=matrixinvcoeffs[90], gclwh10_11=matrixinvcoeffs[186], gclwh10_12=matrixinvcoeffs[202], gclwh11_0=matrixinvcoeffs[11], gclwh11_1=matrixinvcoeffs[27], gclwh11_6=matrixinvcoeffs[107], gclwh11_7=matrixinvcoeffs[123], gclwh11_10=matrixinvcoeffs[171], gclwh11_13=matrixinvcoeffs[219], gclwh12_2=matrixinvcoeffs[44], gclwh12_3=matrixinvcoeffs[60], gclwh12_4=matrixinvcoeffs[76], gclwh12_8=matrixinvcoeffs[140], gclwh12_11=matrixinvcoeffs[188], gclwh12_14=matrixinvcoeffs[236], gclwh13_0=matrixinvcoeffs[13], gclwh13_1=matrixinvcoeffs[29], gclwh13_6=matrixinvcoeffs[109], gclwh13_9=matrixinvcoeffs[157], gclwh13_10=matrixinvcoeffs[173], gclwh13_15=matrixinvcoeffs[253], gclwh14_2=matrixinvcoeffs[46], gclwh14_3=matrixinvcoeffs[62], gclwh14_4=matrixinvcoeffs[78], gclwh14_8=matrixinvcoeffs[142], gclwh14_11=matrixinvcoeffs[190], gclwh14_14=matrixinvcoeffs[238], gclwh15_0=matrixinvcoeffs[15], gclwh15_1=matrixinvcoeffs[31], gclwh15_6=matrixinvcoeffs[111], gclwh15_9=matrixinvcoeffs[159], gclwh15_10=matrixinvcoeffs[175], gclwh15_15=matrixinvcoeffs[255];
IkReal op[72], zeror[48];
int numroots;;
IkReal x68=pz*pz;
IkReal x69=pp*pp;
IkReal x70=((0.17)*pz);
IkReal x71=(pp*r21);
IkReal x72=((0.852)*pz);
IkReal x73=(gclwh4_2*npz);
IkReal x74=(npy*pz);
IkReal x75=((0.262)*gclwh13_15);
IkReal x76=(npx*pz);
IkReal x77=(gclwh6_2*rxp1_2);
IkReal x78=(gclwh3_2*npy);
IkReal x79=((0.17)*rxp1_2);
IkReal x80=(gclwh12_2*pz);
IkReal x81=((0.0061557)*r21);
IkReal x82=((0.00527)*rxp2_2);
IkReal x83=(gclwh7_0*r21);
IkReal x84=((0.914)*pp);
IkReal x85=(gclwh11_0*r22);
IkReal x86=(gclwh3_3*r21);
IkReal x87=((0.00307785)*r21);
IkReal x88=((0.000946475)*r21);
IkReal x89=(gclwh9_13*r20);
IkReal x90=(gclwh15_15*rxp0_2);
IkReal x91=(gclwh5_0*rxp2_2);
IkReal x92=(gclwh8_2*r20);
IkReal x93=(pp*r20);
IkReal x94=(gclwh13_15*rxp1_2);
IkReal x95=(gclwh9_13*rxp0_2);
IkReal x96=(gclwh12_3*r21);
IkReal x97=(npz*pz);
IkReal x98=((0.262)*gclwh15_15);
IkReal x99=((7.8730825e-5)*r22);
IkReal x100=((0.0289)*r20);
IkReal x101=((4.0)*gclwh7_10);
IkReal x102=(gclwh7_1*pp);
IkReal x103=(pp*r22);
IkReal x104=(gclwh5_0*npz);
IkReal x105=(gclwh8_2*rxp0_2);
IkReal x106=((0.34)*rxp0_2);
IkReal x107=((0.003301825)*r22);
IkReal x108=((0.000946475)*r22);
IkReal x109=(gclwh15_9*rxp0_2);
IkReal x110=(gclwh15_0*rxp0_2);
IkReal x111=(gclwh6_2*r21);
IkReal x112=((2.0)*gclwh9_10);
IkReal x113=((0.00185249)*rxp0_2);
IkReal x114=((0.000223975)*r22);
IkReal x115=(gclwh5_0*r22);
IkReal x116=((2.0)*gclwh15_10);
IkReal x117=((0.17)*rxp0_2);
IkReal x118=(gclwh14_3*pp);
IkReal x119=((2.0)*gclwh13_10);
IkReal x120=(gclwh11_10*r22);
IkReal x121=(gclwh14_14*rxp0_2);
IkReal x122=((0.000614125)*r20);
IkReal x123=(gclwh4_3*rxp2_2);
IkReal x124=(gclwh10_11*r22);
IkReal x125=((0.08296)*rxp2_2);
IkReal x126=((0.07769)*rxp2_2);
IkReal x127=(gclwh7_0*pz);
IkReal x128=(gclwh7_1*rxp1_2);
IkReal x129=((4.0)*gclwh8_11);
IkReal x130=((0.000614125)*r22);
IkReal x131=(gclwh9_0*r20);
IkReal x132=(gclwh1_3*r20);
IkReal x133=((0.001580721625)*r20);
IkReal x134=((0.07242)*rxp1_2);
IkReal x135=((0.15538)*rxp1_2);
IkReal x136=(gclwh4_2*rxp2_2);
IkReal x137=((2.0)*gclwh7_10);
IkReal x138=(gclwh10_2*rxp2_2);
IkReal x139=((2.0)*pp);
IkReal x140=((0.262)*gclwh14_14);
IkReal x141=((0.02227)*rxp1_2);
IkReal x142=(gclwh2_0*npy);
IkReal x143=((0.34)*rxp2_2);
IkReal x144=((1.0)*pz);
IkReal x145=((4.0)*gclwh11_10);
IkReal x146=(gclwh5_10*rxp2_2);
IkReal x147=(gclwh14_14*r20);
IkReal x148=(gclwh12_11*rxp1_2);
IkReal x149=((0.00189295)*r22);
IkReal x150=((0.01445)*r21);
IkReal x151=((0.08296)*rxp1_2);
IkReal x152=((0.01445)*rxp2_2);
IkReal x153=(gclwh6_11*r21);
IkReal x154=(gclwh10_2*npz);
IkReal x155=(gclwh14_11*r20);
IkReal x156=(gclwh12_8*rxp1_2);
IkReal x157=((0.04454)*rxp2_2);
IkReal x158=((0.000223975)*r21);
IkReal x159=((0.00185249)*rxp1_2);
IkReal x160=((0.007225)*pz);
IkReal x161=((0.062)*pp);
IkReal x162=((0.00189295)*r21);
IkReal x163=(gclwh10_2*r22);
IkReal x164=((4.0)*gclwh9_10);
IkReal x165=(gclwh15_9*r20);
IkReal x166=(gclwh13_0*pz);
IkReal x167=(gclwh5_1*rxp2_2);
IkReal x168=((0.02227)*rxp0_2);
IkReal x169=(gclwh12_14*rxp1_2);
IkReal x170=((0.00307785)*r20);
IkReal x171=(gclwh11_0*npz);
IkReal x172=(gclwh4_2*r22);
IkReal x173=(gclwh9_0*rxp0_2);
IkReal x174=(gclwh1_2*npx);
IkReal x175=(gclwh8_12*r20);
IkReal x176=(gclwh9_10*r20);
IkReal x177=((0.262)*gclwh5_15);
IkReal x178=(gclwh15_15*r20);
IkReal x179=(gclwh14_8*rxp0_2);
IkReal x180=(gclwh15_10*r20);
IkReal x181=((2.0)*gclwh6_11);
IkReal x182=(gclwh15_0*npx);
IkReal x183=((0.001580721625)*r21);
IkReal x184=((0.00527)*rxp1_2);
IkReal x185=((0.34)*rxp1_2);
IkReal x186=((0.01445)*r22);
IkReal x187=((2.0)*gclwh12_11);
IkReal x188=((0.003301825)*r21);
IkReal x189=((0.000946475)*r20);
IkReal x190=(gclwh14_2*rxp0_2);
IkReal x191=((0.007225)*r21);
IkReal x192=(gclwh9_0*npx);
IkReal x193=((0.03719345)*rxp2_2);
IkReal x194=((0.262)*gclwh4_14);
IkReal x195=((0.001580721625)*r22);
IkReal x196=((0.03719345)*rxp0_2);
IkReal x197=((2.0)*gclwh8_11);
IkReal x198=(gclwh7_0*npy);
IkReal x199=((4.0)*gclwh10_11);
IkReal x200=(gclwh13_9*rxp1_2);
IkReal x201=(gclwh14_2*npx);
IkReal x202=((0.02227)*rxp2_2);
IkReal x203=((7.8730825e-5)*r20);
IkReal x204=((0.03719345)*rxp1_2);
IkReal x205=(gclwh6_2*npy);
IkReal x206=((4.0)*gclwh6_11);
IkReal x207=(gclwh12_8*r21);
IkReal x208=((0.08908)*rxp2_2);
IkReal x209=(pp*pz);
IkReal x210=(gclwh11_0*rxp2_2);
IkReal x211=((0.01054)*rxp1_2);
IkReal x212=(gclwh0_0*npx);
IkReal x213=((0.0061557)*r22);
IkReal x214=((0.0035258)*r22);
IkReal x215=((0.07769)*rxp1_2);
IkReal x216=(gclwh14_8*r20);
IkReal x217=((0.262)*gclwh12_14);
IkReal x218=(gclwh8_12*rxp0_2);
IkReal x219=((7.8730825e-5)*r21);
IkReal x220=((0.00185249)*rxp2_2);
IkReal x221=((0.007225)*r22);
IkReal x222=(gclwh12_2*npy);
IkReal x223=((0.17)*rxp2_2);
IkReal x224=(gclwh13_9*r21);
IkReal x225=((0.68)*rxp0_2);
IkReal x226=((0.426)*pp);
IkReal x227=(gclwh8_11*r20);
IkReal x228=((2.0)*gclwh14_11);
IkReal x229=(gclwh8_2*npx);
IkReal x230=(gclwh13_0*npy);
IkReal x231=((0.02227)*x121);
IkReal x232=(gclwh6_5*x88);
IkReal x233=(gclwh12_14*x141);
IkReal x234=(gclwh8_5*x189);
IkReal x235=(gclwh4_14*x202);
IkReal x236=(gclwh10_5*x108);
IkReal x237=(gclwh12_11*x79);
IkReal x238=(gclwh4_11*x223);
IkReal x239=(gclwh4_8*x152);
IkReal x240=((0.007225)*x153);
IkReal x241=((0.01445)*x156);
IkReal x242=(gclwh14_11*x117);
IkReal x243=((0.007225)*x124);
IkReal x244=((0.01445)*x179);
IkReal x245=((0.007225)*x227);
IkReal x246=(gclwh5_9*x152);
IkReal x247=((0.01445)*x200);
IkReal x248=((0.007225)*x176);
IkReal x249=((0.007225)*x120);
IkReal x250=(gclwh15_10*x117);
IkReal x251=((0.17)*x146);
IkReal x252=((0.01445)*x109);
IkReal x253=(gclwh7_10*x191);
IkReal x254=(gclwh13_10*x79);
IkReal x255=(gclwh7_7*x88);
IkReal x256=((0.02227)*x90);
IkReal x257=((0.02227)*x94);
IkReal x258=(gclwh9_7*x189);
IkReal x259=(gclwh5_15*x202);
IkReal x260=(gclwh11_7*x108);
IkReal x261=((0.000946475)*x147);
IkReal x262=(gclwh8_5*x168);
IkReal x263=(gclwh10_5*x202);
IkReal x264=(gclwh4_14*x108);
IkReal x265=(gclwh12_14*x88);
IkReal x266=(gclwh6_5*x141);
IkReal x267=(gclwh4_11*x221);
IkReal x268=(gclwh4_8*x130);
IkReal x269=((0.000614125)*x207);
IkReal x270=(gclwh10_11*x223);
IkReal x271=(gclwh12_11*x191);
IkReal x272=(gclwh8_11*x117);
IkReal x273=(gclwh14_8*x122);
IkReal x274=((0.007225)*x155);
IkReal x275=(gclwh6_11*x79);
IkReal x276=(gclwh5_10*x221);
IkReal x277=(gclwh15_9*x122);
IkReal x278=(gclwh9_10*x117);
IkReal x279=(gclwh13_10*x191);
IkReal x280=(gclwh11_10*x223);
IkReal x281=((0.007225)*x180);
IkReal x282=(gclwh5_9*x130);
IkReal x283=(gclwh7_10*x79);
IkReal x284=((0.000614125)*x224);
IkReal x285=(gclwh13_15*x88);
IkReal x286=(gclwh5_15*x108);
IkReal x287=(gclwh7_7*x141);
IkReal x288=((0.000946475)*x178);
IkReal x289=(gclwh9_7*x168);
IkReal x290=(gclwh11_7*x202);
IkReal x291=(gclwh14_11*x106);
IkReal x292=((0.01445)*x124);
IkReal x293=((0.01445)*x227);
IkReal x294=((0.04454)*x121);
IkReal x295=(gclwh4_14*x157);
IkReal x296=((0.04454)*x169);
IkReal x297=(gclwh4_11*x143);
IkReal x298=(gclwh6_11*x150);
IkReal x299=((0.34)*x148);
IkReal x300=(gclwh5_15*x157);
IkReal x301=((0.04454)*x94);
IkReal x302=((0.04454)*x90);
IkReal x303=(gclwh15_10*x106);
IkReal x304=((0.01445)*x176);
IkReal x305=((0.01445)*x120);
IkReal x306=(r20*x160);
IkReal x307=(gclwh14_2*x93);
IkReal x308=(r20*x69);
IkReal x309=((2.0)*x97);
IkReal x310=((2.0)*x68);
IkReal x311=(pp*x223);
IkReal x312=(r21*x69);
IkReal x313=((0.262)*gclwh8_5*x76);
IkReal x314=((0.131)*gclwh6_5*x71);
IkReal x315=((0.262)*gclwh10_5*x97);
IkReal x316=((0.131)*gclwh8_5*x93);
IkReal x317=((0.131)*gclwh10_5*x103);
IkReal x318=((0.262)*gclwh6_5*x74);
IkReal x319=(x190*x70);
IkReal x320=(gclwh10_11*x309);
IkReal x321=(x160*x92);
IkReal x322=(x197*x76);
IkReal x323=(gclwh10_2*pz*x103);
IkReal x324=(x160*x163);
IkReal x325=(gclwh12_3*pp*x79);
IkReal x326=(x209*x92);
IkReal x327=((0.17)*pp*x123);
IkReal x328=(x117*x118);
IkReal x329=(x181*x74);
IkReal x330=(x111*x160);
IkReal x331=(gclwh12_2*rxp1_2*x70);
IkReal x332=(x136*x70);
IkReal x333=((0.17)*pp*x167);
IkReal x334=(x131*x160);
IkReal x335=(gclwh7_1*x312);
IkReal x336=(gclwh13_1*pp*x79);
IkReal x337=(x160*x85);
IkReal x338=(x209*x85);
IkReal x339=(x110*x70);
IkReal x340=(x137*x74);
IkReal x341=(gclwh9_0*pz*x93);
IkReal x342=(gclwh13_0*rxp1_2*x70);
IkReal x343=(gclwh11_10*x309);
IkReal x344=(gclwh15_1*pp*x117);
IkReal x345=(x112*x76);
IkReal x346=(x160*x83);
IkReal x347=(x70*x91);
IkReal x348=((0.262)*gclwh11_7*x97);
IkReal x349=((0.262)*gclwh9_7*x76);
IkReal x350=((0.131)*gclwh7_7*x71);
IkReal x351=((0.131)*gclwh9_7*x93);
IkReal x352=((0.262)*gclwh7_7*x74);
IkReal x353=((0.131)*gclwh11_7*x103);
IkReal x354=(x194*x97);
IkReal x355=(x217*x74);
IkReal x356=((0.131)*gclwh14_14*x93);
IkReal x357=((0.131)*gclwh4_14*x103);
IkReal x358=((0.131)*gclwh12_14*x71);
IkReal x359=(x140*x76);
IkReal x360=(pz*x307);
IkReal x361=(gclwh3_2*r21*x160);
IkReal x362=(x70*x77);
IkReal x363=(x69*x96);
IkReal x364=((0.085)*gclwh12_8*x71);
IkReal x365=(gclwh10_3*x311);
IkReal x366=(x69*x86);
IkReal x367=(x132*x69);
IkReal x368=(gclwh14_8*npx*x70);
IkReal x369=(gclwh1_2*x306);
IkReal x370=(x228*x76);
IkReal x371=(gclwh4_3*r22*x69);
IkReal x372=((0.085)*gclwh4_8*x103);
IkReal x373=(gclwh14_2*x306);
IkReal x374=(gclwh4_8*npz*x70);
IkReal x375=(x191*x80);
IkReal x376=(gclwh4_11*x309);
IkReal x377=(gclwh12_8*npy*x70);
IkReal x378=(x105*x70);
IkReal x379=(x138*x70);
IkReal x380=(x160*x172);
IkReal x381=((0.085)*gclwh14_8*x93);
IkReal x382=(x187*x74);
IkReal x383=(x115*x160);
IkReal x384=(gclwh15_1*x308);
IkReal x385=(gclwh2_0*r21*x160);
IkReal x386=(gclwh5_0*pz*x103);
IkReal x387=(x166*x71);
IkReal x388=((0.085)*gclwh15_9*x93);
IkReal x389=(gclwh0_0*x306);
IkReal x390=(gclwh13_0*r21*x160);
IkReal x391=(gclwh5_9*npz*x70);
IkReal x392=(x116*x76);
IkReal x393=(gclwh2_1*x312);
IkReal x394=(x210*x70);
IkReal x395=(x173*x70);
IkReal x396=(gclwh13_9*npy*x70);
IkReal x397=(x102*x79);
IkReal x398=(gclwh0_1*x308);
IkReal x399=(gclwh15_0*x306);
IkReal x400=((0.085)*gclwh5_9*x103);
IkReal x401=(gclwh11_1*x311);
IkReal x402=(gclwh15_9*npx*x70);
IkReal x403=((0.085)*gclwh13_9*x71);
IkReal x404=(gclwh5_10*x309);
IkReal x405=(x119*x74);
IkReal x406=(gclwh7_0*rxp1_2*x70);
IkReal x407=((0.131)*gclwh13_15*x71);
IkReal x408=(x76*x98);
IkReal x409=((0.131)*gclwh5_15*x103);
IkReal x410=((0.131)*gclwh15_15*x93);
IkReal x411=(x177*x97);
IkReal x412=(x74*x75);
IkReal x413=(x197*x93);
IkReal x414=((2.0)*gclwh10_11*x103);
IkReal x415=(x206*x74);
IkReal x416=(x129*x76);
IkReal x417=(x181*x71);
IkReal x418=(x199*x97);
IkReal x419=((2.0)*gclwh11_10*x103);
IkReal x420=(x101*x74);
IkReal x421=(x112*x93);
IkReal x422=((1.0)*r22*x69);
IkReal x423=(x205*x310);
IkReal x424=(gclwh10_3*x139*x97);
IkReal x425=(gclwh10_3*x422);
IkReal x426=(gclwh6_2*x144*x71);
IkReal x427=(x154*x310);
IkReal x428=(x229*x310);
IkReal x429=(gclwh11_1*x139*x97);
IkReal x430=(x198*x310);
IkReal x431=(x192*x310);
IkReal x432=(gclwh11_1*x422);
IkReal x433=((2.0)*x102*x74);
IkReal x434=(x171*x310);
IkReal x435=((1.0)*x127*x71);
IkReal x436=(x222*x310);
IkReal x437=(x310*x78);
IkReal x438=(x174*x310);
IkReal x439=((2.0)*x118*x76);
IkReal x440=(x310*x73);
IkReal x441=(gclwh4_3*x139*x97);
IkReal x442=((1.0)*x71*x80);
IkReal x443=(gclwh1_2*x144*x93);
IkReal x444=(gclwh3_3*x139*x74);
IkReal x445=(gclwh4_2*x103*x144);
IkReal x446=(gclwh1_3*x139*x76);
IkReal x447=(gclwh3_2*x144*x71);
IkReal x448=(gclwh12_3*x139*x74);
IkReal x449=(x201*x310);
IkReal x450=((1.0)*gclwh14_3*x308);
IkReal x451=(x212*x310);
IkReal x452=(x142*x310);
IkReal x453=(gclwh5_1*x139*x97);
IkReal x454=(gclwh13_1*x139*x74);
IkReal x455=(x182*x310);
IkReal x456=(gclwh2_1*x139*x74);
IkReal x457=(gclwh0_1*x139*x76);
IkReal x458=(x104*x310);
IkReal x459=(x230*x310);
IkReal x460=(gclwh0_0*x144*x93);
IkReal x461=(gclwh15_0*x144*x93);
IkReal x462=(gclwh2_0*x144*x71);
IkReal x463=((1.0)*gclwh13_1*x312);
IkReal x464=(gclwh5_1*x422);
IkReal x465=(gclwh15_1*x139*x76);
IkReal x466=(x233+x235);
IkReal x467=(x295+x296);
IkReal x468=(x300+x301);
IkReal x469=(x259+x257);
IkReal x470=(x263+x262);
IkReal x471=(x290+x289);
IkReal x472=(x340+x250+x249+x248);
IkReal x473=(x329+x243+x242+x245);
IkReal x474=(x382+x376+x274+x275);
IkReal x475=(x283+x281+x405+x404);
IkReal x476=(x315+x314+x313+x232);
IkReal x477=(x288+x412+x410+x411);
IkReal x478=(x355+x354+x356+x261);
IkReal x479=(x350+x348+x349+x255);
IkReal x480=(x392+x276+x278+x279+x280);
IkReal x481=(x370+x267+x272+x270+x271);
IkReal x482=(x320+x322+x238+x237+x240);
IkReal x483=(x343+x345+x254+x251+x253);
IkReal x484=(x351+x353+x352+x258+x260);
IkReal x485=(x318+x317+x316+x236+x234);
IkReal x486=(x357+x359+x358+x265+x264);
IkReal x487=(x286+x285+x407+x409+x408);
IkReal x488=(x298+x299+x297+x416+x417+x418);
IkReal x489=(((gclwh13_10*x185))+((x145*x97))+((x164*x76))+((gclwh5_10*x143))+((x137*x71))+((gclwh7_10*x150)));
IkReal x490=(x291+x292+x293+x413+x414+x415);
IkReal x491=(x304+x305+x303+x419+x421+x420);
IkReal x492=(x332+x331+x330+x328+x244+x428+x427+x426+x425);
IkReal x493=(x342+x346+x347+x344+x252+x431+x432+x433+x434+x435);
IkReal x494=(x324+x325+x326+x327+x321+x323+x319+x239+x241+x424+x423);
IkReal x495=(x339+x338+x333+x337+x336+x335+x334+x341+x247+x246+x429+x430);
IkReal x496=(x399+x284+x282+x401+x400+x403+x402+x406+x458+x459+x456+x457+x463+x462+x461+x460+x465+x464);
IkReal x497=(x380+x381+x379+x378+x377+x375+x374+x273+x449+x448+x445+x444+x447+x446+x441+x443+x442+x450);
IkReal x498=(x373+x372+x371+x368+x369+x360+x361+x362+x363+x364+x365+x366+x367+x269+x268+x438+x439+x436+x437+x440+x70);
IkReal x499=(x386+x387+x384+x385+x383+x388+x389+x395+x394+x397+x396+x391+x390+x393+x398+x277+x454+x455+x452+x453+x451+x70);
op[0]=(((gclwh6_12*x188))+(((0.07769)*x179))+(((-1.0)*gclwh10_12*x107))+(((-1.0)*x485))+(((-0.457)*gclwh8_12*x93))+(((-1.0)*x231))+(((-0.914)*gclwh6_12*x74))+(((-1.0)*gclwh4_8*x126))+x466+x476+(((-0.07769)*x156))+(((0.914)*gclwh10_12*x97))+(((0.914)*gclwh8_12*x76))+(((-0.003301825)*x175))+(((0.457)*gclwh6_12*x71))+(((-0.457)*gclwh10_12*x103)));
op[1]=((((0.21156)*gclwh10_3*x103))+(((-1.0)*x492))+(((-0.03719345)*x123))+(((-1.0)*x482))+(((-1.0)*gclwh12_3*x204))+((gclwh10_11*x103))+x494+x473+((gclwh10_3*x195))+(((-1.0)*gclwh6_11*x71))+((gclwh14_3*x196))+((gclwh8_11*x93))+(((-0.43757)*gclwh10_3*x97)));
op[2]=((-0.111612)+(((-1.0)*x488))+x490);
op[3]=((((-1.0)*x229*x72))+(((0.07242)*x190))+(((-1.0)*gclwh12_2*x134))+(((-1.0)*x467))+((gclwh12_8*x151))+(((0.00307785)*x163))+x294+((x205*x72))+(((0.00307785)*x92))+(((-0.08296)*x179))+((x226*x92))+(((0.426)*gclwh10_2*x103))+(((-1.0)*gclwh6_2*x87))+(((-0.426)*gclwh6_2*x71))+((gclwh4_8*x125))+(((-0.07242)*x136))+(((-1.0)*x154*x72)));
op[4]=((((0.00527)*x156))+(((0.031)*gclwh6_12*x71))+((gclwh6_12*x158))+(((-0.00527)*x179))+(((-1.0)*x485))+(((0.062)*gclwh10_12*x97))+(((-1.0)*gclwh10_12*x114))+(((-1.0)*x466))+(((-0.000223975)*x175))+(((-0.031)*gclwh10_12*x103))+x231+(((0.062)*gclwh8_12*x76))+(((-0.031)*gclwh8_12*x93))+x476+((gclwh4_8*x82))+(((-0.062)*gclwh6_12*x74)));
op[5]=(((gclwh6_11*x71))+(((-1.0)*x492))+(((-1.0)*gclwh8_11*x93))+((gclwh14_3*x113))+(((-0.021794)*gclwh10_3*x97))+(((-1.0)*x473))+(((-1.0)*gclwh10_11*x103))+((gclwh10_3*x99))+x482+x494+(((-0.00185249)*x123))+(((0.003672)*gclwh10_3*x103))+(((-1.0)*gclwh12_3*x159)));
op[6]=((((0.21156)*gclwh11_1*x103))+((gclwh7_10*x71))+(((-1.0)*x493))+(((-1.0)*gclwh13_1*x204))+(((-1.0)*gclwh7_1*x183))+(((-0.43757)*gclwh11_1*x97))+(((-1.0)*x472))+(((-0.03719345)*x167))+((gclwh15_1*x196))+x483+x495+((gclwh11_1*x195))+(((-1.0)*gclwh9_10*x93))+(((-1.0)*gclwh11_10*x103))+(((0.43757)*gclwh7_1*x74))+(((-0.21156)*gclwh7_1*x71)));
op[7]=((((0.457)*gclwh7_13*x71))+(((-0.457)*pp*x89))+(((-0.07769)*x200))+(((-1.0)*x484))+(((-1.0)*gclwh5_9*x126))+(((0.07769)*x109))+(((-1.0)*gclwh11_13*x107))+((gclwh7_13*x188))+(((0.914)*gclwh9_13*x76))+(((-0.914)*gclwh7_13*x74))+(((-0.003301825)*x89))+x469+x479+(((-0.457)*gclwh11_13*x103))+(((0.914)*gclwh11_13*x97))+(((-1.0)*x256)));
op[8]=((((0.426)*gclwh9_0*x93))+(((-1.0)*gclwh13_0*x134))+((x198*x72))+(((-0.07242)*x91))+(((-1.0)*gclwh5_9*x125))+(((-1.0)*gclwh13_9*x151))+(((-1.0)*x192*x72))+(((0.00307785)*x131))+(((-0.426)*gclwh7_0*x71))+x468+(((0.07242)*x110))+(((0.00307785)*x85))+(((-1.0)*x171*x72))+((x226*x85))+(((0.08296)*x109))+(((-1.0)*x302))+(((-0.00307785)*x83)));
op[9]=((-0.111612)+(((-1.0)*x489))+x491);
op[10]=(((gclwh11_1*x99))+(((-1.0)*x493))+(((-1.0)*x483))+(((-0.021794)*gclwh11_1*x97))+(((-1.0)*gclwh7_1*x219))+(((-1.0)*gclwh7_10*x71))+((gclwh15_1*x113))+(((0.003672)*gclwh11_1*x103))+x495+x472+((gclwh11_10*x103))+(((-1.0)*gclwh13_1*x159))+((gclwh9_10*x93))+(((0.021794)*gclwh7_1*x74))+(((-0.00185249)*x167))+(((-0.003672)*gclwh7_1*x71)));
op[11]=((((0.031)*gclwh7_13*x71))+(((0.062)*gclwh11_13*x97))+(((-1.0)*x484))+(((-1.0)*gclwh11_13*x114))+(((-0.031)*pp*x89))+((gclwh7_13*x158))+(((-1.0)*x469))+(((-0.000223975)*x89))+x256+((gclwh13_9*x184))+x479+(((0.062)*gclwh9_13*x76))+((gclwh5_9*x82))+(((-0.00527)*x109))+(((-0.031)*gclwh11_13*x103))+(((-0.062)*gclwh7_13*x74)));
op[12]=((((0.003301825)*x216))+(((0.914)*gclwh12_8*x74))+(((0.914)*gclwh4_8*x97))+((gclwh10_12*x126))+(((-1.0)*x478))+(((-1.0)*gclwh4_8*x107))+(((-0.457)*gclwh12_8*x71))+(((-1.0)*gclwh12_8*x188))+x486+x470+(((0.07769)*x218))+(((-1.0)*gclwh6_12*x215))+(((-0.457)*gclwh4_8*x103))+(((-0.914)*gclwh14_8*x76))+(((-1.0)*x266))+(((0.457)*gclwh14_8*x93)));
op[13]=((-0.22601)+(((-0.001580721625)*x96))+(((-0.43757)*gclwh14_3*x76))+(((-0.21156)*gclwh4_3*x103))+(((0.21156)*gclwh14_3*x93))+(((0.43757)*gclwh1_3*x76))+(((-1.0)*x497))+(((-0.21156)*gclwh12_3*x71))+(((-1.0)*x481))+(((0.001580721625)*x86))+(((-0.22601)*gclwh3_3*x71))+((gclwh14_3*x133))+(((-1.0)*gclwh12_11*x71))+(((-0.22601)*gclwh1_3*x93))+(((-1.0)*gclwh10_3*x193))+((gclwh14_11*x93))+x498+x474+(((-1.0)*gclwh4_11*x103))+(((0.43757)*gclwh4_3*x97))+(((0.43757)*gclwh12_3*x74))+(((0.43757)*gclwh3_3*x74))+(((-1.0)*gclwh4_3*x195))+(((0.001580721625)*x132)));
op[14]=((-0.062656)+((gclwh6_11*x185))+((x228*x93))+(((-1.0)*gclwh8_11*x106))+(((0.01445)*x155))+(((-2.0)*gclwh4_11*x103))+(((-4.0)*gclwh14_11*x76))+(((4.0)*gclwh12_11*x74))+(((-1.0)*gclwh12_11*x150))+(((-1.0)*gclwh10_11*x143))+(((-1.0)*gclwh4_11*x186))+(((4.0)*gclwh4_11*x97))+(((-1.0)*x187*x71)));
op[15]=(((gclwh1_2*x170))+(((0.524)*gclwh12_14*x74))+(((0.524)*gclwh4_14*x97))+(((0.07242)*x77))+((x174*x72))+(((0.0035258)*x207))+(((-1.0)*gclwh12_2*x87))+(((0.976)*gclwh14_8*x76))+(((-1.0)*gclwh4_14*x149))+(((-0.488)*gclwh14_8*x93))+(((-0.524)*gclwh14_14*x76))+((gclwh3_2*x87))+(((-1.0)*x201*x72))+((x222*x72))+(((-1.0)*x217*x71))+((x140*x93))+(((-0.426)*gclwh3_2*x71))+(((-0.426)*gclwh4_2*x103))+(((-1.0)*gclwh12_14*x162))+(((-0.976)*gclwh4_8*x97))+(((-0.976)*gclwh12_8*x74))+((gclwh4_8*x214))+(((-0.0035258)*x216))+(((-0.426)*gclwh1_2*x93))+((x72*x78))+((x72*x73))+((gclwh14_2*x170))+(((0.488)*gclwh12_8*x71))+(((0.426)*x307))+(((-1.0)*x103*x194))+(((0.488)*gclwh4_8*x103))+(((-0.00307785)*x172))+(((0.00189295)*x147))+(((-0.07242)*x138))+(((-0.426)*gclwh12_2*x71))+(((-0.07242)*x105)));
op[16]=((((-0.000223975)*x216))+(((-0.031)*gclwh14_8*x93))+(((-1.0)*gclwh6_12*x184))+(((-0.062)*gclwh12_8*x74))+(((-1.0)*x486))+(((-0.062)*gclwh4_8*x97))+(((0.031)*gclwh4_8*x103))+((gclwh10_12*x82))+((gclwh12_8*x158))+(((0.031)*gclwh12_8*x71))+x470+x478+((gclwh4_8*x114))+(((0.062)*gclwh14_8*x76))+(((-1.0)*x266))+(((0.00527)*x218)));
op[17]=((0.018122)+(((0.021794)*gclwh12_3*x74))+(((-0.018122)*gclwh3_3*x71))+(((-1.0)*gclwh4_3*x99))+(((7.8730825e-5)*x86))+(((-1.0)*x497))+(((0.021794)*gclwh1_3*x76))+(((-1.0)*gclwh14_11*x93))+(((-0.003672)*gclwh12_3*x71))+(((0.021794)*gclwh3_3*x74))+(((-0.003672)*gclwh4_3*x103))+(((-1.0)*x474))+(((0.021794)*gclwh4_3*x97))+((gclwh12_11*x71))+(((7.8730825e-5)*x132))+((gclwh4_11*x103))+(((0.003672)*gclwh14_3*x93))+x481+x498+(((-0.018122)*gclwh1_3*x93))+(((-0.021794)*gclwh14_3*x76))+((gclwh14_3*x203))+(((-7.8730825e-5)*x96))+(((-1.0)*gclwh10_3*x220)));
op[18]=((0.22601)+((gclwh0_1*x133))+(((-1.0)*gclwh13_10*x71))+(((-1.0)*x496))+(((-0.03719345)*x128))+(((-1.0)*x480))+(((0.43757)*gclwh0_1*x76))+(((-0.22601)*gclwh0_1*x93))+(((0.43757)*gclwh2_1*x74))+(((-1.0)*gclwh15_1*x133))+x499+x475+((gclwh11_1*x193))+(((-0.43757)*gclwh5_1*x97))+(((0.43757)*gclwh15_1*x76))+(((-0.21156)*gclwh15_1*x93))+(((-0.22601)*gclwh2_1*x71))+(((0.21156)*gclwh5_1*x103))+((gclwh2_1*x183))+(((-0.43757)*gclwh13_1*x74))+((gclwh13_1*x183))+(((0.21156)*gclwh13_1*x71))+((gclwh5_1*x195))+((gclwh15_10*x93))+(((-1.0)*gclwh5_10*x103)));
op[19]=((((-1.0)*gclwh11_13*x126))+(((-1.0)*x487))+(((-0.914)*gclwh5_9*x97))+((gclwh7_13*x215))+(((0.457)*gclwh5_9*x103))+((gclwh5_9*x107))+(((-1.0)*x471))+(((-0.457)*gclwh15_9*x93))+x287+((gclwh13_9*x188))+x477+(((0.914)*gclwh15_9*x76))+(((-0.07769)*x95))+(((0.457)*gclwh13_9*x71))+(((-0.003301825)*x165))+(((-0.914)*gclwh13_9*x74)));
op[20]=((((-0.426)*gclwh15_0*x93))+(((0.07242)*x173))+((x182*x72))+(((-1.0)*gclwh7_0*x134))+((x142*x72))+((gclwh2_0*x87))+(((0.426)*gclwh5_0*x103))+((gclwh5_9*x214))+(((-0.976)*gclwh5_9*x97))+(((-0.976)*gclwh13_9*x74))+(((0.00307785)*x115))+(((0.0035258)*x224))+(((0.07242)*x210))+(((0.426)*gclwh13_0*x71))+(((-1.0)*gclwh13_15*x162))+(((-0.426)*gclwh0_0*x93))+(((0.524)*gclwh13_15*x74))+((x93*x98))+(((-1.0)*x71*x75))+((x212*x72))+(((-0.0035258)*x165))+(((-1.0)*x103*x177))+(((-0.488)*gclwh15_9*x93))+(((-1.0)*gclwh15_0*x170))+(((0.976)*gclwh15_9*x76))+(((0.524)*gclwh5_15*x97))+(((0.488)*gclwh5_9*x103))+(((0.488)*gclwh13_9*x71))+(((-1.0)*x104*x72))+(((-0.426)*gclwh2_0*x71))+(((0.00189295)*x178))+(((-1.0)*x230*x72))+((gclwh0_0*x170))+((gclwh13_0*x87))+(((-0.524)*gclwh15_15*x76))+(((-1.0)*gclwh5_15*x149)));
op[21]=((-0.062656)+(((-4.0)*gclwh5_10*x97))+((gclwh13_10*x150))+(((2.0)*gclwh5_10*x103))+((gclwh11_10*x143))+(((-0.01445)*x180))+(((-4.0)*gclwh13_10*x74))+((gclwh5_10*x186))+((x119*x71))+(((4.0)*gclwh15_10*x76))+(((-1.0)*x116*x93))+((gclwh9_10*x106))+(((-1.0)*gclwh7_10*x185)));
op[22]=((-0.018122)+((gclwh2_1*x219))+(((-1.0)*x496))+((gclwh0_1*x203))+((gclwh13_10*x71))+((gclwh5_10*x103))+(((-1.0)*x475))+((gclwh5_1*x99))+(((-0.018122)*gclwh0_1*x93))+(((-0.003672)*gclwh15_1*x93))+(((-0.021794)*gclwh13_1*x74))+(((0.021794)*gclwh2_1*x74))+x480+x499+(((-0.00185249)*x128))+(((-1.0)*gclwh15_1*x203))+(((0.021794)*gclwh0_1*x76))+((gclwh13_1*x219))+(((0.021794)*gclwh15_1*x76))+(((-1.0)*gclwh15_10*x93))+(((0.003672)*gclwh5_1*x103))+(((-0.021794)*gclwh5_1*x97))+(((0.003672)*gclwh13_1*x71))+(((-0.018122)*gclwh2_1*x71))+((gclwh11_1*x220)));
op[23]=((((-0.031)*gclwh13_9*x71))+(((-1.0)*gclwh13_9*x158))+(((-1.0)*gclwh5_9*x114))+(((-0.062)*gclwh15_9*x76))+((gclwh7_13*x184))+(((-1.0)*x477))+(((-1.0)*x471))+(((-0.00527)*x95))+(((-1.0)*gclwh11_13*x82))+x287+x487+(((0.062)*gclwh13_9*x74))+(((0.031)*gclwh15_9*x93))+(((0.062)*gclwh5_9*x97))+(((-0.031)*gclwh5_9*x103))+(((0.000223975)*x165)));
op[24]=((-0.239468)+(((-1.0)*x488))+x490);
op[25]=((((-1.828)*gclwh10_2*x97))+((x163*x84))+(((0.00660365)*x92))+(((0.15538)*x190))+(((1.828)*gclwh6_2*x74))+(((-1.0)*gclwh12_2*x135))+(((-0.00660365)*x111))+(((-1.0)*x467))+x294+(((-0.15538)*x136))+(((-1.828)*gclwh8_2*x76))+(((-0.914)*gclwh6_2*x71))+((x84*x92))+(((0.00660365)*x163)));
op[26]=((((0.08908)*x121))+(((-0.08908)*x169))+(((0.852)*gclwh10_12*x103))+(((0.852)*gclwh8_12*x93))+(((-0.852)*gclwh6_12*x71))+(((0.0061557)*x175))+(((-1.0)*gclwh4_14*x208))+(((-1.704)*gclwh8_12*x76))+(((1.704)*gclwh6_12*x74))+(((-1.704)*gclwh10_12*x97))+((gclwh10_12*x213))+(((-1.0)*gclwh6_12*x81)));
op[27]=((((-1.0)*gclwh14_11*x225))+((x206*x71))+(((-1.0)*gclwh8_11*x100))+(((0.68)*gclwh4_11*rxp2_2))+(((8.0)*gclwh8_11*x76))+(((-0.0289)*x124))+(((8.0)*gclwh10_11*x97))+(((0.68)*x148))+(((0.0289)*x153))+(((-8.0)*gclwh6_11*x74))+(((-1.0)*x103*x199))+(((-1.0)*x129*x93)));
op[28]=((-0.016244)+(((-1.0)*x490))+x488);
op[29]=((((0.01054)*x190))+(((-0.01054)*x136))+(((-0.062)*gclwh6_2*x71))+((x161*x92))+(((-1.0)*x294))+(((0.00044795)*x92))+(((0.062)*gclwh10_2*x103))+x467+(((-1.0)*gclwh12_2*x211))+(((-0.124)*gclwh10_2*x97))+(((0.00044795)*x163))+(((-0.124)*gclwh8_2*x76))+(((-0.00044795)*x111))+(((0.124)*gclwh6_2*x74)));
op[30]=(((x84*x85))+(((-0.00660365)*x83))+(((-1.0)*gclwh13_0*x135))+(((0.00660365)*x85))+(((0.00660365)*x131))+(((-1.828)*gclwh9_0*x76))+(((0.15538)*x110))+((x131*x84))+x468+(((1.828)*gclwh7_0*x74))+(((-1.0)*x302))+(((-1.828)*gclwh11_0*x97))+(((-0.15538)*x91))+(((-0.914)*gclwh7_0*x71)));
op[31]=((-0.239468)+(((-1.0)*x489))+x491);
op[32]=(((x103*x145))+(((0.0289)*x120))+((x164*x93))+(((-8.0)*gclwh9_10*x76))+(((-0.0289)*gclwh7_10*r21))+(((-0.68)*x146))+(((8.0)*gclwh7_10*x74))+(((-1.0)*x101*x71))+((gclwh15_10*x225))+((gclwh9_10*x100))+(((-0.68)*gclwh13_10*rxp1_2))+(((-8.0)*gclwh11_10*x97)));
op[33]=(((gclwh11_13*x213))+(((-1.704)*gclwh9_13*x76))+(((-1.0)*gclwh7_13*x81))+(((0.852)*pp*x89))+(((0.0061557)*x89))+(((1.704)*gclwh7_13*x74))+(((-0.852)*gclwh7_13*x71))+(((-1.704)*gclwh11_13*x97))+(((-0.08908)*x94))+(((-1.0)*gclwh5_15*x208))+(((0.08908)*x90))+(((0.852)*gclwh11_13*x103)));
op[34]=((((0.124)*gclwh7_0*x74))+(((0.01054)*x110))+((x161*x85))+(((-0.124)*gclwh11_0*x97))+(((0.00044795)*x131))+(((0.062)*gclwh9_0*x93))+(((-1.0)*x468))+(((0.00044795)*x85))+x302+(((-0.01054)*x91))+(((-0.00044795)*x83))+(((-0.124)*gclwh9_0*x76))+(((-1.0)*gclwh13_0*x211))+(((-0.062)*gclwh7_0*x71)));
IkReal x500=pz*pz;
IkReal x501=pp*pp;
IkReal x502=((0.17)*pz);
IkReal x503=(gclwh14_14*r20);
IkReal x504=(npz*pz);
IkReal x505=(pp*r21);
IkReal x506=(npy*pz);
IkReal x507=((0.262)*gclwh13_15);
IkReal x508=(gclwh8_2*rxp0_2);
IkReal x509=((4.0)*gclwh12_11);
IkReal x510=(pp*r20);
IkReal x511=(gclwh6_2*rxp1_2);
IkReal x512=(gclwh12_2*rxp1_2);
IkReal x513=((0.00527)*rxp2_2);
IkReal x514=(npx*pz);
IkReal x515=(gclwh10_2*rxp2_2);
IkReal x516=(gclwh15_1*r20);
IkReal x517=(gclwh15_15*r20);
IkReal x518=((2.0)*pp);
IkReal x519=((7.8730825e-5)*r21);
IkReal x520=((0.00307785)*r21);
IkReal x521=((0.000946475)*r21);
IkReal x522=((0.17)*rxp1_2);
IkReal x523=(gclwh11_0*rxp2_2);
IkReal x524=((0.003301825)*r20);
IkReal x525=(gclwh15_15*rxp0_2);
IkReal x526=(gclwh5_0*rxp2_2);
IkReal x527=(gclwh8_11*rxp0_2);
IkReal x528=(gclwh9_13*rxp0_2);
IkReal x529=((0.001580721625)*r21);
IkReal x530=((0.262)*gclwh15_15);
IkReal x531=((7.8730825e-5)*r22);
IkReal x532=((0.00660365)*r20);
IkReal x533=(gclwh11_10*r22);
IkReal x534=((0.34)*rxp2_2);
IkReal x535=((0.00044795)*r20);
IkReal x536=((0.003301825)*r22);
IkReal x537=((0.000946475)*r22);
IkReal x538=(gclwh15_9*rxp0_2);
IkReal x539=(gclwh5_1*pp);
IkReal x540=((0.21156)*r22);
IkReal x541=((0.17)*rxp2_2);
IkReal x542=(gclwh4_3*pp);
IkReal x543=(gclwh8_12*rxp0_2);
IkReal x544=(gclwh4_2*r22);
IkReal x545=((2.0)*gclwh9_10);
IkReal x546=((0.00185249)*rxp0_2);
IkReal x547=(gclwh10_12*r22);
IkReal x548=((2.0)*gclwh15_10);
IkReal x549=(pp*r22);
IkReal x550=((4.0)*gclwh14_11);
IkReal x551=(gclwh9_0*rxp0_2);
IkReal x552=((0.17)*rxp0_2);
IkReal x553=((2.0)*gclwh13_10);
IkReal x554=((0.0289)*r21);
IkReal x555=((0.000614125)*r20);
IkReal x556=(gclwh4_3*rxp2_2);
IkReal x557=(gclwh10_11*r22);
IkReal x558=((0.08296)*rxp2_2);
IkReal x559=((0.07769)*rxp2_2);
IkReal x560=((0.003301825)*r21);
IkReal x561=((0.001580721625)*r22);
IkReal x562=(gclwh7_0*rxp1_2);
IkReal x563=(gclwh7_1*rxp1_2);
IkReal x564=((0.262)*gclwh12_14);
IkReal x565=(gclwh1_3*r20);
IkReal x566=(gclwh14_3*r20);
IkReal x567=((0.00660365)*r21);
IkReal x568=((0.524)*gclwh5_15);
IkReal x569=((2.0)*gclwh7_10);
IkReal x570=((0.02227)*rxp1_2);
IkReal x571=((0.01445)*r21);
IkReal x572=((0.34)*rxp0_2);
IkReal x573=((1.0)*pz);
IkReal x574=((4.0)*gclwh15_10);
IkReal x575=((0.34)*rxp1_2);
IkReal x576=(gclwh14_14*rxp0_2);
IkReal x577=((0.08296)*rxp1_2);
IkReal x578=((0.01445)*rxp2_2);
IkReal x579=(gclwh5_0*pz);
IkReal x580=(gclwh14_11*r20);
IkReal x581=((0.04454)*rxp2_2);
IkReal x582=((0.262)*gclwh5_15);
IkReal x583=((0.68)*rxp1_2);
IkReal x584=((0.68)*rxp2_2);
IkReal x585=((0.00185249)*rxp1_2);
IkReal x586=((0.007225)*r22);
IkReal x587=((0.00189295)*r21);
IkReal x588=((0.00044795)*r21);
IkReal x589=((0.00307785)*r22);
IkReal x590=((0.007225)*r21);
IkReal x591=(gclwh13_0*rxp1_2);
IkReal x592=(gclwh5_1*rxp2_2);
IkReal x593=((0.02227)*rxp0_2);
IkReal x594=(gclwh5_0*r22);
IkReal x595=((0.04454)*rxp1_2);
IkReal x596=((0.00307785)*r20);
IkReal x597=(gclwh15_0*rxp0_2);
IkReal x598=((4.0)*gclwh4_11);
IkReal x599=((0.0037859)*r21);
IkReal x600=(gclwh9_10*r20);
IkReal x601=(gclwh14_8*rxp0_2);
IkReal x602=(gclwh12_8*rxp1_2);
IkReal x603=(gclwh15_10*r20);
IkReal x604=((2.0)*gclwh6_11);
IkReal x605=(gclwh4_11*r22);
IkReal x606=((0.000223975)*r22);
IkReal x607=((0.524)*gclwh12_14);
IkReal x608=((4.0)*gclwh5_10);
IkReal x609=(gclwh10_3*pp);
IkReal x610=((2.0)*gclwh12_11);
IkReal x611=(gclwh12_8*r21);
IkReal x612=((0.000946475)*r20);
IkReal x613=(gclwh5_10*r22);
IkReal x614=((0.003672)*r22);
IkReal x615=(gclwh14_2*rxp0_2);
IkReal x616=(gclwh11_1*pp);
IkReal x617=(gclwh5_15*r22);
IkReal x618=((0.03719345)*rxp2_2);
IkReal x619=(gclwh10_2*pz);
IkReal x620=((0.262)*gclwh4_14);
IkReal x621=((0.03719345)*rxp0_2);
IkReal x622=(gclwh6_12*rxp1_2);
IkReal x623=((2.0)*gclwh8_11);
IkReal x624=((0.000223975)*r21);
IkReal x625=((0.14484)*rxp2_2);
IkReal x626=(gclwh13_9*rxp1_2);
IkReal x627=((0.524)*gclwh4_14);
IkReal x628=((0.524)*gclwh13_15);
IkReal x629=((4.0)*gclwh13_10);
IkReal x630=((0.02227)*rxp2_2);
IkReal x631=(gclwh0_1*r20);
IkReal x632=(gclwh4_2*rxp2_2);
IkReal x633=(gclwh4_14*r22);
IkReal x634=((0.524)*gclwh15_15);
IkReal x635=((0.000223975)*r20);
IkReal x636=(gclwh11_0*pz);
IkReal x637=(gclwh5_9*r22);
IkReal x638=((0.0035258)*r20);
IkReal x639=((0.00185249)*rxp2_2);
IkReal x640=((0.03719345)*rxp1_2);
IkReal x641=(gclwh7_13*rxp1_2);
IkReal x642=(gclwh13_9*r21);
IkReal x643=(gclwh4_8*r22);
IkReal x644=(gclwh13_0*pz);
IkReal x645=(gclwh8_11*r20);
IkReal x646=((2.0)*gclwh14_11);
IkReal x647=(gclwh10_11*x534);
IkReal x648=(gclwh12_11*x571);
IkReal x649=((0.01445)*x605);
IkReal x650=((0.34)*x527);
IkReal x651=(gclwh6_11*x575);
IkReal x652=((0.01445)*x580);
IkReal x653=(gclwh12_14*x587);
IkReal x654=((0.00189295)*x633);
IkReal x655=((0.00189295)*x503);
IkReal x656=((0.00189295)*x617);
IkReal x657=(gclwh13_15*x587);
IkReal x658=((0.00189295)*x517);
IkReal x659=(gclwh7_10*x575);
IkReal x660=((0.01445)*x603);
IkReal x661=((0.01445)*x613);
IkReal x662=(gclwh11_10*x534);
IkReal x663=(gclwh13_10*x571);
IkReal x664=(gclwh9_10*x572);
IkReal x665=(gclwh12_14*x570);
IkReal x666=(gclwh4_14*x630);
IkReal x667=(gclwh6_5*x521);
IkReal x668=((0.02227)*x576);
IkReal x669=(gclwh8_5*x612);
IkReal x670=(gclwh10_5*x537);
IkReal x671=(gclwh14_11*x552);
IkReal x672=(gclwh4_8*x578);
IkReal x673=((0.007225)*x557);
IkReal x674=((0.007225)*x645);
IkReal x675=((0.01445)*x602);
IkReal x676=(gclwh12_11*x522);
IkReal x677=(gclwh4_11*x541);
IkReal x678=((0.01445)*x601);
IkReal x679=(gclwh6_11*x590);
IkReal x680=(gclwh13_10*x575);
IkReal x681=(gclwh7_10*x571);
IkReal x682=(gclwh5_10*x534);
IkReal x683=(gclwh5_9*x578);
IkReal x684=((0.01445)*x626);
IkReal x685=(gclwh5_10*x541);
IkReal x686=(gclwh7_10*x590);
IkReal x687=(gclwh13_10*x522);
IkReal x688=((0.007225)*x600);
IkReal x689=((0.007225)*x533);
IkReal x690=((0.01445)*x538);
IkReal x691=(gclwh15_10*x552);
IkReal x692=(gclwh13_15*x570);
IkReal x693=(gclwh7_7*x521);
IkReal x694=(gclwh5_15*x630);
IkReal x695=(gclwh9_7*x612);
IkReal x696=(gclwh11_7*x537);
IkReal x697=((0.02227)*x525);
IkReal x698=(gclwh4_14*x537);
IkReal x699=(gclwh12_14*x521);
IkReal x700=(gclwh8_5*x593);
IkReal x701=(gclwh10_5*x630);
IkReal x702=((0.000946475)*x503);
IkReal x703=(gclwh6_5*x570);
IkReal x704=((0.000614125)*x643);
IkReal x705=((0.007225)*x580);
IkReal x706=((0.000614125)*x611);
IkReal x707=(gclwh6_11*x522);
IkReal x708=(gclwh14_8*x555);
IkReal x709=(gclwh4_11*x586);
IkReal x710=(gclwh10_11*x541);
IkReal x711=(gclwh12_11*x590);
IkReal x712=((0.17)*x527);
IkReal x713=((0.007225)*x603);
IkReal x714=(gclwh15_9*x555);
IkReal x715=(gclwh7_10*x522);
IkReal x716=(gclwh5_10*x586);
IkReal x717=(gclwh9_10*x552);
IkReal x718=((0.000614125)*x637);
IkReal x719=((0.000614125)*x642);
IkReal x720=(gclwh13_10*x590);
IkReal x721=(gclwh11_10*x541);
IkReal x722=(gclwh9_0*pz*r20);
IkReal x723=((2.0)*x500);
IkReal x724=((0.007225)*pz*r20);
IkReal x725=(r21*x501);
IkReal x726=(x518*x605);
IkReal x727=(x505*x610);
IkReal x728=(x514*x550);
IkReal x729=(x510*x646);
IkReal x730=(x506*x509);
IkReal x731=(x504*x598);
IkReal x732=(x549*x620);
IkReal x733=(x505*x564);
IkReal x734=((0.524)*gclwh14_14*x514);
IkReal x735=(x504*x627);
IkReal x736=((0.262)*pp*x503);
IkReal x737=(x506*x607);
IkReal x738=(x549*x582);
IkReal x739=(x514*x634);
IkReal x740=(x505*x507);
IkReal x741=(x504*x568);
IkReal x742=(x510*x530);
IkReal x743=(x506*x628);
IkReal x744=(x510*x548);
IkReal x745=(x504*x608);
IkReal x746=(x506*x629);
IkReal x747=(x505*x553);
IkReal x748=(x514*x574);
IkReal x749=(x518*x613);
IkReal x750=((0.262)*gclwh8_5*x514);
IkReal x751=((0.131)*gclwh6_5*x505);
IkReal x752=((0.262)*gclwh10_5*x504);
IkReal x753=((0.131)*gclwh8_5*x510);
IkReal x754=((0.131)*gclwh10_5*x549);
IkReal x755=((0.262)*gclwh6_5*x506);
IkReal x756=(x502*x615);
IkReal x757=(x506*x604);
IkReal x758=(gclwh8_2*x724);
IkReal x759=(x549*x619);
IkReal x760=(x586*x619);
IkReal x761=(gclwh12_3*pp*x522);
IkReal x762=(gclwh8_2*pz*x510);
IkReal x763=(x541*x542);
IkReal x764=(gclwh14_3*pp*x552);
IkReal x765=((2.0)*gclwh10_11*x504);
IkReal x766=(x514*x623);
IkReal x767=(gclwh6_2*pz*x590);
IkReal x768=(x502*x512);
IkReal x769=(x502*x632);
IkReal x770=(x505*x569);
IkReal x771=((4.0)*gclwh9_10*x514);
IkReal x772=((4.0)*gclwh11_10*x504);
IkReal x773=((2.0)*gclwh11_10*x504);
IkReal x774=(x539*x541);
IkReal x775=(x514*x545);
IkReal x776=((0.007225)*x722);
IkReal x777=(gclwh7_1*x725);
IkReal x778=(gclwh13_1*pp*x522);
IkReal x779=(x586*x636);
IkReal x780=(x549*x636);
IkReal x781=(x502*x597);
IkReal x782=(gclwh9_0*pz*x510);
IkReal x783=(x502*x591);
IkReal x784=(gclwh15_1*pp*x552);
IkReal x785=(gclwh7_0*pz*x590);
IkReal x786=(x502*x526);
IkReal x787=(x506*x569);
IkReal x788=((0.262)*gclwh11_7*x504);
IkReal x789=((0.262)*gclwh9_7*x514);
IkReal x790=((0.131)*gclwh7_7*x505);
IkReal x791=((0.131)*gclwh9_7*x510);
IkReal x792=((0.262)*gclwh7_7*x506);
IkReal x793=((0.131)*gclwh11_7*x549);
IkReal x794=((0.131)*gclwh4_14*x549);
IkReal x795=((0.131)*gclwh12_14*x505);
IkReal x796=((0.262)*gclwh14_14*x514);
IkReal x797=(x504*x620);
IkReal x798=(x506*x564);
IkReal x799=((0.131)*pp*x503);
IkReal x800=(gclwh14_2*pz*x510);
IkReal x801=(gclwh3_2*pz*x590);
IkReal x802=(x502*x511);
IkReal x803=(gclwh12_3*x725);
IkReal x804=((0.085)*gclwh12_8*x505);
IkReal x805=(x541*x609);
IkReal x806=((2.0)*gclwh4_11*x504);
IkReal x807=(gclwh3_3*x725);
IkReal x808=(x501*x565);
IkReal x809=(gclwh14_8*npx*x502);
IkReal x810=(gclwh1_2*x724);
IkReal x811=(gclwh4_3*r22*x501);
IkReal x812=(x506*x610);
IkReal x813=((0.085)*gclwh4_8*x549);
IkReal x814=(gclwh14_2*x724);
IkReal x815=(gclwh4_8*npz*x502);
IkReal x816=(gclwh12_2*pz*x590);
IkReal x817=(gclwh12_8*npy*x502);
IkReal x818=(x502*x508);
IkReal x819=(x502*x515);
IkReal x820=((0.007225)*pz*x544);
IkReal x821=(x514*x646);
IkReal x822=((0.085)*gclwh14_8*x510);
IkReal x823=(x579*x586);
IkReal x824=(x501*x516);
IkReal x825=(gclwh2_0*pz*x590);
IkReal x826=(x549*x579);
IkReal x827=(x505*x644);
IkReal x828=((0.085)*gclwh15_9*x510);
IkReal x829=(gclwh0_0*x724);
IkReal x830=(x590*x644);
IkReal x831=(gclwh5_9*npz*x502);
IkReal x832=(gclwh2_1*x725);
IkReal x833=(x502*x523);
IkReal x834=((2.0)*gclwh5_10*x504);
IkReal x835=(x502*x551);
IkReal x836=(gclwh13_9*npy*x502);
IkReal x837=(x506*x553);
IkReal x838=(gclwh7_1*pp*x522);
IkReal x839=(x501*x631);
IkReal x840=(gclwh15_0*x724);
IkReal x841=((0.085)*gclwh5_9*x549);
IkReal x842=(x541*x616);
IkReal x843=(gclwh15_9*npx*x502);
IkReal x844=((0.085)*gclwh13_9*x505);
IkReal x845=(x514*x548);
IkReal x846=(x502*x562);
IkReal x847=((1.0)*r22*x501);
IkReal x848=(gclwh6_2*npy*x723);
IkReal x849=(gclwh10_3*x504*x518);
IkReal x850=(gclwh10_3*x847);
IkReal x851=(gclwh6_2*x505*x573);
IkReal x852=(gclwh10_2*npz*x723);
IkReal x853=(gclwh8_2*npx*x723);
IkReal x854=(gclwh11_1*x504*x518);
IkReal x855=(gclwh7_0*npy*x723);
IkReal x856=(gclwh9_0*npx*x723);
IkReal x857=(gclwh11_1*x847);
IkReal x858=(gclwh7_1*x506*x518);
IkReal x859=(gclwh11_0*npz*x723);
IkReal x860=(gclwh7_0*x505*x573);
IkReal x861=(gclwh12_2*npy*x723);
IkReal x862=(gclwh3_2*npy*x723);
IkReal x863=(gclwh1_2*npx*x723);
IkReal x864=(gclwh14_3*x514*x518);
IkReal x865=(gclwh4_2*npz*x723);
IkReal x866=(gclwh4_3*x504*x518);
IkReal x867=(gclwh12_2*x505*x573);
IkReal x868=(gclwh1_2*x510*x573);
IkReal x869=(gclwh3_3*x506*x518);
IkReal x870=(pp*x544*x573);
IkReal x871=(gclwh1_3*x514*x518);
IkReal x872=(gclwh3_2*x505*x573);
IkReal x873=(gclwh12_3*x506*x518);
IkReal x874=(gclwh14_2*npx*x723);
IkReal x875=((1.0)*x501*x566);
IkReal x876=(gclwh0_0*npx*x723);
IkReal x877=(gclwh2_0*npy*x723);
IkReal x878=(gclwh5_1*x504*x518);
IkReal x879=(gclwh13_1*x506*x518);
IkReal x880=(gclwh15_0*npx*x723);
IkReal x881=(gclwh2_1*x506*x518);
IkReal x882=(gclwh0_1*x514*x518);
IkReal x883=(gclwh5_0*npz*x723);
IkReal x884=(gclwh13_0*npy*x723);
IkReal x885=(gclwh0_0*x510*x573);
IkReal x886=(gclwh15_0*x510*x573);
IkReal x887=(gclwh2_0*x505*x573);
IkReal x888=((1.0)*gclwh13_1*x725);
IkReal x889=(gclwh5_1*x847);
IkReal x890=(gclwh15_1*x514*x518);
IkReal x891=(x665+x666);
IkReal x892=(x700+x701);
IkReal x893=(x694+x692);
IkReal x894=(x673+x671+x674+x757);
IkReal x895=(x689+x688+x691+x787);
IkReal x896=(x713+x715+x834+x837);
IkReal x897=(x707+x705+x812+x806);
IkReal x898=(x667+x751+x750+x752);
IkReal x899=(x702+x797+x799+x798);
IkReal x900=(x693+x790+x788+x789);
IkReal x901=(x655+x737+x736+x735);
IkReal x902=(x658+x742+x743+x741);
IkReal x903=(x717+x716+x720+x721+x845);
IkReal x904=(x711+x710+x712+x709+x821);
IkReal x905=(x687+x686+x685+x773+x775);
IkReal x906=(x679+x676+x677+x765+x766);
IkReal x907=(x651+x652+x731+x730+x729);
IkReal x908=(x653+x654+x734+x733+x732);
IkReal x909=(x669+x670+x755+x754+x753);
IkReal x910=(x659+x660+x746+x744+x745);
IkReal x911=(x698+x699+x795+x794+x796);
IkReal x912=(x695+x696+x791+x793+x792);
IkReal x913=(x656+x657+x739+x738+x740);
IkReal x914=(((gclwh15_10*x572))+(((0.01445)*x600))+((x518*x533))+((x510*x545))+(((0.01445)*x533))+(((4.0)*gclwh7_10*x506)));
IkReal x915=(x682+x681+x680+x772+x771+x770);
IkReal x916=(x661+x663+x662+x664+x747+x748+x749);
IkReal x917=(x647+x649+x648+x650+x726+x727+x728);
IkReal x918=(x678+x768+x769+x764+x767+x852+x853+x850+x851);
IkReal x919=(x672+x675+x756+x759+x758+x760+x761+x762+x763+x849+x848);
IkReal x920=(x690+x783+x786+x784+x785+x856+x857+x858+x859+x860);
IkReal x921=(x683+x684+x777+x776+x774+x779+x778+x782+x780+x781+x854+x855);
IkReal x922=(x719+x718+x885+x884+x887+x886+x881+x883+x882+x889+x888+x890+x841+x840+x843+x842+x844+x846);
IkReal x923=(x708+x869+x868+x867+x866+x870+x871+x872+x873+x874+x875+x818+x819+x816+x817+x815+x822+x820);
IkReal x924=(x502+x706+x704+x865+x864+x863+x862+x861+x814+x813+x810+x811+x809+x808+x805+x804+x807+x801+x800+x803+x802);
IkReal x925=(x502+x714+x878+x879+x876+x877+x880+x829+x828+x823+x827+x826+x825+x824+x835+x836+x830+x831+x832+x833+x838+x839);
op[35]=((-0.016244)+(((-1.0)*x914))+x915);
op[36]=((0.383376)+(((-1.0)*x917))+x907);
op[37]=(((gclwh3_2*x567))+(((-1.0)*gclwh12_2*x567))+(((-0.914)*gclwh1_2*x510))+(((-1.828)*gclwh14_2*x514))+(((-1.0)*x908))+(((-0.914)*gclwh12_2*x505))+(((1.828)*gclwh3_2*x506))+(((-0.15538)*x508))+(((0.15538)*x511))+((gclwh14_2*x532))+((gclwh1_2*x532))+(((1.828)*gclwh4_2*x504))+(((-0.00660365)*x544))+(((-0.914)*pp*x544))+(((1.828)*gclwh1_2*x514))+(((0.914)*gclwh14_2*x510))+(((1.828)*gclwh12_2*x506))+(((-0.15538)*x515))+x901+(((-0.914)*gclwh3_2*x505)));
op[38]=((((-1.0)*gclwh10_12*x625))+(((0.0037859)*x503))+(((0.14484)*x622))+(((-1.048)*gclwh14_14*x514))+(((1.048)*gclwh12_14*x506))+(((-0.14484)*x543))+(((-1.0)*x549*x627))+(((-0.0037859)*x633))+(((-1.0)*gclwh12_14*x599))+(((0.524)*pp*x503))+(((1.048)*gclwh4_14*x504))+(((-1.0)*x505*x607)));
op[39]=((0.011976)+(((8.0)*gclwh14_11*x514))+((gclwh12_11*x554))+(((-1.0)*gclwh6_11*x583))+(((-0.0289)*x580))+((x505*x509))+((x549*x598))+(((0.0289)*x605))+((gclwh10_11*x584))+(((-8.0)*gclwh4_11*x504))+(((-1.0)*x510*x550))+(((-8.0)*gclwh12_11*x506))+(((0.68)*x527)));
op[40]=((0.0324)+(((-1.0)*x907))+x917);
op[41]=((((-0.062)*gclwh3_2*x505))+(((-0.124)*gclwh14_2*x514))+(((-0.00044795)*x544))+(((-0.01054)*x515))+(((-1.0)*x901))+(((-1.0)*gclwh12_2*x588))+(((-0.062)*gclwh1_2*x510))+((gclwh14_2*x535))+((gclwh1_2*x535))+(((0.124)*gclwh12_2*x506))+(((0.062)*gclwh14_2*x510))+(((-0.01054)*x508))+(((0.124)*gclwh4_2*x504))+(((-0.062)*pp*x544))+x908+((gclwh3_2*x588))+(((-0.062)*gclwh12_2*x505))+(((0.124)*gclwh1_2*x514))+(((0.01054)*x511))+(((0.124)*gclwh3_2*x506)));
op[42]=((((0.15538)*x523))+(((0.00660365)*x594))+(((0.15538)*x551))+(((-0.914)*gclwh0_0*x510))+(((0.914)*gclwh5_0*x549))+(((1.828)*gclwh15_0*x514))+(((-1.0)*x913))+(((0.914)*gclwh13_0*x505))+(((-1.0)*gclwh15_0*x532))+(((-0.914)*gclwh2_0*x505))+(((1.828)*gclwh2_0*x506))+(((-1.828)*gclwh5_0*x504))+(((-0.15538)*x562))+(((1.828)*gclwh0_0*x514))+(((-1.828)*gclwh13_0*x506))+((gclwh13_0*x567))+((gclwh2_0*x567))+(((-0.914)*gclwh15_0*x510))+((gclwh0_0*x532))+x902);
op[43]=((0.383376)+(((-1.0)*x910))+x916);
op[44]=((-0.011976)+(((-1.0)*gclwh7_10*x583))+((gclwh13_10*x554))+(((-0.0289)*x603))+(((-1.0)*x510*x574))+(((0.68)*gclwh9_10*rxp0_2))+((x505*x629))+(((-8.0)*gclwh5_10*x504))+((gclwh11_10*x584))+(((-8.0)*gclwh13_10*x506))+(((0.0289)*x613))+(((8.0)*gclwh15_10*x514))+((x549*x608)));
op[45]=((((-0.0037859)*x517))+(((-1.048)*gclwh5_15*x504))+(((-0.14484)*x641))+((x505*x628))+((x549*x568))+((gclwh11_13*x625))+(((0.14484)*x528))+(((0.0037859)*x617))+(((1.048)*gclwh15_15*x514))+(((-1.0)*x510*x634))+(((-1.048)*gclwh13_15*x506))+((gclwh13_15*x599)));
op[46]=((((0.062)*gclwh5_0*x549))+(((0.01054)*x523))+(((-0.01054)*x562))+(((-0.062)*gclwh0_0*x510))+(((-0.124)*gclwh13_0*x506))+((gclwh13_0*x588))+(((-1.0)*x902))+((gclwh2_0*x588))+(((-1.0)*gclwh15_0*x535))+(((0.062)*gclwh13_0*x505))+(((0.00044795)*x594))+(((-0.062)*gclwh15_0*x510))+((gclwh0_0*x535))+(((-0.062)*gclwh2_0*x505))+(((0.01054)*x551))+(((0.124)*gclwh15_0*x514))+x913+(((0.124)*gclwh0_0*x514))+(((-0.124)*gclwh5_0*x504))+(((0.124)*gclwh2_0*x506)));
op[47]=((0.0324)+(((-1.0)*x916))+x910);
op[48]=((((-0.457)*gclwh6_12*x505))+((gclwh10_12*x536))+(((0.914)*gclwh6_12*x506))+(((-0.914)*gclwh8_12*x514))+((gclwh8_12*x524))+(((-1.0)*gclwh4_8*x559))+(((-1.0)*gclwh6_12*x560))+(((-1.0)*x909))+(((-0.07769)*x602))+(((-1.0)*x891))+x668+(((-0.914)*gclwh10_12*x504))+(((0.457)*pp*x547))+x898+(((0.07769)*x601))+(((0.457)*gclwh8_12*x510)));
op[49]=(((gclwh10_3*x561))+(((-1.0)*gclwh8_11*x510))+((x540*x609))+(((-1.0)*x894))+(((-1.0)*x918))+(((-1.0)*gclwh12_3*x640))+(((-0.43757)*gclwh10_3*x504))+(((-1.0)*gclwh10_11*x549))+((gclwh6_11*x505))+x919+x906+(((-0.03719345)*x556))+((gclwh14_3*x621)));
op[50]=((0.111612)+((gclwh6_11*x571))+(((-4.0)*gclwh6_11*x506))+(((-0.01445)*x557))+((gclwh12_11*x575))+(((4.0)*gclwh10_11*x504))+((x505*x604))+(((-1.0)*x518*x557))+((gclwh4_11*x534))+(((-1.0)*gclwh14_11*x572))+(((-0.01445)*x645))+(((-1.0)*x510*x623))+(((4.0)*gclwh8_11*x514)));
op[51]=((((-0.852)*gclwh6_2*x506))+((gclwh4_14*x581))+((gclwh4_8*x558))+(((-0.07242)*x615))+(((-0.08296)*x601))+(((0.07242)*x632))+(((-0.426)*gclwh10_2*x549))+(((0.07242)*x512))+(((-1.0)*gclwh10_2*x589))+((gclwh6_2*x520))+(((0.852)*gclwh8_2*x514))+(((-0.04454)*x576))+(((-1.0)*gclwh8_2*x596))+((gclwh12_8*x577))+((gclwh12_14*x595))+(((0.852)*gclwh10_2*x504))+(((0.426)*gclwh6_2*x505))+(((-0.426)*gclwh8_2*x510)));
op[52]=((((-0.062)*gclwh10_12*x504))+(((-0.031)*gclwh6_12*x505))+(((-0.00527)*x601))+(((0.000223975)*x547))+((gclwh8_12*x635))+(((-1.0)*x909))+((gclwh4_8*x513))+(((0.00527)*x602))+(((-1.0)*x668))+(((0.062)*gclwh6_12*x506))+(((0.031)*gclwh8_12*x510))+x891+x898+(((-0.062)*gclwh8_12*x514))+(((-1.0)*gclwh6_12*x624))+(((0.031)*pp*x547)));
op[53]=((((0.003672)*gclwh10_3*x549))+(((-1.0)*gclwh6_11*x505))+(((-0.00185249)*x556))+(((-1.0)*x906))+(((-1.0)*x918))+((gclwh8_11*x510))+(((-0.021794)*gclwh10_3*x504))+(((-1.0)*gclwh12_3*x585))+((gclwh14_3*x546))+((gclwh10_3*x531))+x894+((gclwh10_11*x549))+x919);
op[54]=((((-1.0)*gclwh13_1*x640))+(((-1.0)*x920))+(((-1.0)*gclwh7_1*x529))+((gclwh11_1*x561))+((pp*x533))+((gclwh15_1*x621))+((x540*x616))+(((-0.03719345)*x592))+(((-1.0)*x905))+(((0.43757)*gclwh7_1*x506))+(((-1.0)*gclwh7_10*x505))+((gclwh9_10*x510))+x895+(((-0.43757)*gclwh11_1*x504))+x921+(((-0.21156)*gclwh7_1*x505)));
op[55]=((((0.457)*gclwh9_13*x510))+(((-1.0)*gclwh7_13*x560))+(((-1.0)*gclwh5_9*x559))+(((0.07769)*x538))+(((-1.0)*x893))+(((-1.0)*x912))+(((-0.914)*gclwh11_13*x504))+(((-0.457)*gclwh7_13*x505))+((gclwh11_13*x536))+x697+(((-0.914)*gclwh9_13*x514))+(((0.457)*gclwh11_13*x549))+x900+(((0.914)*gclwh7_13*x506))+((gclwh9_13*x524))+(((-0.07769)*x626)));
op[56]=((((0.852)*gclwh9_0*x514))+(((-0.07242)*x597))+(((-1.0)*gclwh5_9*x558))+(((-1.0)*gclwh5_15*x581))+(((-1.0)*gclwh11_0*x589))+(((0.426)*gclwh7_0*x505))+(((-1.0)*gclwh9_0*x596))+(((0.07242)*x526))+(((-0.426)*gclwh9_0*x510))+((gclwh7_0*x520))+(((-0.426)*gclwh11_0*x549))+(((0.08296)*x538))+(((-1.0)*gclwh13_15*x595))+(((0.04454)*x525))+(((-1.0)*gclwh13_9*x577))+(((-0.852)*gclwh7_0*x506))+(((0.07242)*x591))+(((0.852)*gclwh11_0*x504)));
op[57]=((0.111612)+(((-1.0)*x914))+x915);
op[58]=(((gclwh15_1*x546))+(((-1.0)*gclwh13_1*x585))+(((-1.0)*x920))+(((-1.0)*gclwh9_10*x510))+(((0.021794)*gclwh7_1*x506))+(((-1.0)*pp*x533))+((gclwh7_10*x505))+(((-1.0)*x895))+(((-0.021794)*gclwh11_1*x504))+(((0.003672)*gclwh11_1*x549))+(((-1.0)*gclwh7_1*x519))+(((-0.003672)*gclwh7_1*x505))+((gclwh11_1*x531))+x921+x905+(((-0.00185249)*x592)));
op[59]=(((gclwh11_13*x606))+(((-1.0)*gclwh7_13*x624))+(((0.031)*gclwh11_13*x549))+(((0.00527)*x626))+(((0.031)*gclwh9_13*x510))+(((-0.031)*gclwh7_13*x505))+(((-0.00527)*x538))+(((-0.062)*gclwh9_13*x514))+(((-1.0)*x912))+(((0.062)*gclwh7_13*x506))+((gclwh9_13*x635))+(((-1.0)*x697))+(((-0.062)*gclwh11_13*x504))+x893+x900+((gclwh5_9*x513)));
op[60]=((((-1.0)*gclwh4_8*x536))+(((0.07769)*x622))+(((-1.0)*x911))+(((0.914)*gclwh12_8*x506))+(((0.914)*gclwh4_8*x504))+(((-0.457)*gclwh4_8*x549))+(((-0.07769)*x543))+(((-1.0)*x703))+((gclwh14_8*x524))+(((-1.0)*gclwh10_12*x559))+(((-0.914)*gclwh14_8*x514))+(((0.457)*gclwh14_8*x510))+x892+x899+(((-1.0)*gclwh12_8*x560))+(((-0.457)*gclwh12_8*x505)));
op[61]=((0.22601)+(((-1.0)*gclwh4_3*x561))+(((-1.0)*x923))+(((-1.0)*gclwh10_3*x618))+(((0.43757)*gclwh1_3*x514))+(((-0.21156)*gclwh12_3*x505))+(((-0.43757)*gclwh14_3*x514))+(((0.21156)*gclwh14_3*x510))+(((0.43757)*gclwh12_3*x506))+(((-0.22601)*gclwh3_3*x505))+(((-1.0)*x897))+(((-1.0)*x540*x542))+(((0.001580721625)*x566))+(((0.001580721625)*x565))+(((0.43757)*gclwh4_3*x504))+(((-0.22601)*gclwh1_3*x510))+((gclwh4_11*x549))+((gclwh12_11*x505))+(((0.43757)*gclwh3_3*x506))+(((-1.0)*gclwh12_3*x529))+x924+x904+((gclwh3_3*x529))+(((-1.0)*gclwh14_11*x510)));
op[62]=((0.062656)+(((-1.0)*x907))+x917);
op[63]=((((-0.852)*gclwh1_2*x514))+(((0.488)*gclwh12_8*x505))+(((0.426)*pp*x544))+(((0.976)*gclwh14_8*x514))+(((0.426)*gclwh1_2*x510))+(((0.852)*gclwh14_2*x514))+(((0.07242)*x515))+(((-1.0)*x901))+(((-0.976)*gclwh12_8*x506))+(((-1.0)*gclwh14_2*x596))+(((-1.0)*gclwh1_2*x596))+(((-1.0)*gclwh3_2*x520))+(((0.488)*gclwh4_8*x549))+(((0.0035258)*x611))+(((0.426)*gclwh12_2*x505))+(((-0.07242)*x511))+(((-0.488)*gclwh14_8*x510))+(((-0.426)*gclwh14_2*x510))+((gclwh12_2*x520))+(((0.0035258)*x643))+(((0.00307785)*x544))+(((-0.852)*gclwh4_2*x504))+(((0.426)*gclwh3_2*x505))+(((-0.852)*gclwh12_2*x506))+x908+(((-1.0)*gclwh14_8*x638))+(((-0.976)*gclwh4_8*x504))+(((0.07242)*x508))+(((-0.852)*gclwh3_2*x506)));
op[64]=((((-1.0)*gclwh10_12*x513))+(((0.031)*gclwh4_8*x549))+(((0.00527)*x622))+(((-0.062)*gclwh4_8*x504))+(((0.031)*gclwh12_8*x505))+(((-1.0)*x899))+(((-0.00527)*x543))+(((-0.062)*gclwh12_8*x506))+(((0.000223975)*x611))+((gclwh4_8*x606))+(((-0.031)*gclwh14_8*x510))+(((-1.0)*x703))+x892+x911+(((-1.0)*gclwh14_8*x635))+(((0.062)*gclwh14_8*x514)));
op[65]=((-0.018122)+(((-1.0)*x923))+(((-1.0)*gclwh12_11*x505))+(((7.8730825e-5)*x565))+(((7.8730825e-5)*x566))+(((0.003672)*gclwh14_3*x510))+(((0.021794)*gclwh3_3*x506))+(((-1.0)*x904))+(((0.021794)*gclwh12_3*x506))+(((-0.021794)*gclwh14_3*x514))+(((-1.0)*gclwh10_3*x639))+(((0.021794)*gclwh4_3*x504))+(((-1.0)*gclwh4_11*x549))+(((-1.0)*gclwh4_3*x531))+((gclwh3_3*x519))+(((-0.003672)*gclwh12_3*x505))+(((-1.0)*x542*x614))+((gclwh14_11*x510))+x897+x924+(((0.021794)*gclwh1_3*x514))+(((-1.0)*gclwh12_3*x519))+(((-0.018122)*gclwh3_3*x505))+(((-0.018122)*gclwh1_3*x510)));
op[66]=((-0.22601)+((x539*x540))+(((-1.0)*x922))+(((-0.22601)*gclwh0_1*x510))+(((0.21156)*gclwh13_1*x505))+(((0.001580721625)*x631))+(((0.43757)*gclwh15_1*x514))+(((-1.0)*x896))+((gclwh2_1*x529))+(((0.43757)*gclwh0_1*x514))+((gclwh5_10*x549))+(((-0.43757)*gclwh5_1*x504))+(((-0.03719345)*x563))+(((-0.21156)*gclwh15_1*x510))+((gclwh11_1*x618))+(((-0.22601)*gclwh2_1*x505))+((gclwh13_10*x505))+x925+x903+(((0.43757)*gclwh2_1*x506))+(((-0.001580721625)*x516))+(((-0.43757)*gclwh13_1*x506))+((gclwh5_1*x561))+(((-1.0)*gclwh15_10*x510))+((gclwh13_1*x529)));
op[67]=((((-1.0)*x506*x507))+((gclwh7_7*x570))+(((-0.131)*gclwh15_15*x510))+(((-1.0)*gclwh9_7*x593))+((gclwh13_9*x560))+((gclwh5_15*x537))+(((0.07769)*x528))+(((-1.0)*gclwh11_7*x630))+(((-1.0)*x504*x582))+(((0.457)*gclwh13_9*x505))+(((0.131)*gclwh13_15*x505))+((gclwh11_13*x559))+(((0.457)*gclwh5_9*x549))+(((0.914)*gclwh15_9*x514))+(((-1.0)*gclwh15_9*x524))+(((-0.07769)*x641))+(((0.131)*gclwh5_15*x549))+((gclwh13_15*x521))+((x514*x530))+(((-0.914)*gclwh13_9*x506))+(((-0.457)*gclwh15_9*x510))+((gclwh5_9*x536))+(((-0.914)*gclwh5_9*x504))+(((-0.000946475)*x517)));
op[68]=((((0.426)*gclwh0_0*x510))+(((-0.976)*gclwh5_9*x504))+(((-0.976)*gclwh13_9*x506))+(((-0.852)*gclwh15_0*x514))+(((0.976)*gclwh15_9*x514))+(((0.0035258)*x637))+(((-1.0)*gclwh15_9*x638))+(((0.07242)*x562))+(((-0.852)*gclwh0_0*x514))+(((-1.0)*x902))+(((-1.0)*gclwh5_0*x589))+(((0.426)*gclwh2_0*x505))+(((-1.0)*gclwh2_0*x520))+(((-1.0)*gclwh0_0*x596))+(((-0.488)*gclwh15_9*x510))+(((0.426)*gclwh15_0*x510))+(((-0.852)*gclwh2_0*x506))+(((0.488)*gclwh5_9*x549))+(((0.0035258)*x642))+((gclwh15_0*x596))+(((0.852)*gclwh13_0*x506))+(((0.488)*gclwh13_9*x505))+(((-0.07242)*x551))+(((-0.426)*gclwh13_0*x505))+x913+(((0.852)*gclwh5_0*x504))+(((-0.426)*gclwh5_0*x549))+(((-1.0)*gclwh13_0*x520))+(((-0.07242)*x523)));
op[69]=((0.062656)+(((-1.0)*x916))+x910);
op[70]=((0.018122)+(((-0.018122)*gclwh2_1*x505))+(((-1.0)*x922))+((gclwh11_1*x639))+(((7.8730825e-5)*x631))+(((-0.018122)*gclwh0_1*x510))+(((-0.003672)*gclwh15_1*x510))+(((0.021794)*gclwh15_1*x514))+(((-1.0)*x903))+(((-1.0)*gclwh5_10*x549))+((gclwh13_1*x519))+(((0.003672)*gclwh13_1*x505))+((gclwh15_10*x510))+(((-0.021794)*gclwh13_1*x506))+((gclwh5_1*x531))+((x539*x614))+(((-7.8730825e-5)*x516))+(((-0.00185249)*x563))+(((0.021794)*gclwh2_1*x506))+x896+(((-1.0)*gclwh13_10*x505))+((gclwh2_1*x519))+x925+(((-0.021794)*gclwh5_1*x504))+(((0.021794)*gclwh0_1*x514)));
IkReal x926=(gclwh15_15*r20);
IkReal x927=(npy*pz);
IkReal x928=(gclwh13_15*r21);
IkReal x929=((0.031)*pp);
IkReal x930=(gclwh13_9*r21);
IkReal x931=(gclwh5_9*r22);
IkReal x932=((0.062)*pz);
IkReal x933=(gclwh15_9*r20);
IkReal x934=((0.131)*pp);
IkReal x935=((0.262)*pz);
IkReal x936=(gclwh5_15*r22);
op[71]=((((0.062)*gclwh13_9*x927))+((gclwh5_15*npz*x935))+(((0.00527)*gclwh9_13*rxp0_2))+(((-1.0)*gclwh15_15*npx*x935))+((gclwh5_9*npz*x932))+(((-1.0)*x928*x934))+(((-0.000223975)*x931))+(((-0.000223975)*x930))+(((-0.000946475)*x936))+(((0.000223975)*x933))+(((-0.000946475)*x928))+(((-1.0)*x934*x936))+(((-0.00527)*gclwh7_13*rxp1_2))+(((-0.02227)*gclwh11_7*rxp2_2))+(((0.262)*gclwh13_15*x927))+(((-1.0)*x929*x930))+(((-1.0)*x929*x931))+(((-0.02227)*gclwh9_7*rxp0_2))+((x926*x934))+(((-1.0)*gclwh15_9*npx*x932))+(((0.00527)*gclwh11_13*rxp2_2))+((x929*x933))+(((0.02227)*gclwh7_7*rxp1_2))+(((0.000946475)*x926)));
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j1array[16], cj1array[16], sj1array[16], j2array[16], cj2array[16], sj2array[16], j3array[16], cj3array[16], sj3array[16];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ij1 += 3)
{
IkReal htj1 = zeror[ij1+0], htj2 = zeror[ij1+1], htj3 = zeror[ij1+2];
if(isnan(htj1)||isnan(htj2)||isnan(htj3)){
continue;
}
j1array[numsolutions]=((2.0)*(atan(htj1)));
j2array[numsolutions]=((2.0)*(atan(htj2)));
j3array[numsolutions]=((2.0)*(atan(htj3)));
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x937=htj1*htj1;
CheckValue<IkReal> x938=IKPowWithIntegerCheck(((1.0)+x937),-1);
if(!x938.valid){
continue;
}
cj1array[numsolutions]=((x938.value)*(((1.0)+(((-1.0)*x937)))));
CheckValue<IkReal> x939=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x939.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x939.value));
}
if(isinf(htj2)){
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
}
else{
IkReal x940=htj2*htj2;
CheckValue<IkReal> x941=IKPowWithIntegerCheck(((1.0)+x940),-1);
if(!x941.valid){
continue;
}
cj2array[numsolutions]=((x941.value)*(((1.0)+(((-1.0)*x940)))));
CheckValue<IkReal> x942=IKPowWithIntegerCheck(((1.0)+(htj2*htj2)),-1);
if(!x942.valid){
continue;
}
sj2array[numsolutions]=((2.0)*htj2*(x942.value));
}
if(isinf(htj3)){
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
}
else{
IkReal x943=htj3*htj3;
CheckValue<IkReal> x944=IKPowWithIntegerCheck(((1.0)+x943),-1);
if(!x944.valid){
continue;
}
cj3array[numsolutions]=((x944.value)*(((1.0)+(((-1.0)*x943)))));
CheckValue<IkReal> x945=IKPowWithIntegerCheck(((1.0)+(htj3*htj3)),-1);
if(!x945.valid){
continue;
}
sj3array[numsolutions]=((2.0)*htj3*(x945.value));
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j1valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj1 = 16;
_nj2 = 1;
_nj3 = 1;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
_ij2[0] = 0; _ij2[1] = -1;
_ij3[0] = 0; _ij3[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( !j1valid[iij1] ) { continue; }
if( IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj2array[ij1]-cj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij1]-sj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj3array[ij1]-cj3array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij1]-sj3array[iij1]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j1valid[iij1]=false; _ij1[1] = iij1; _ij2[1] = 0; _ij3[1] = 0;  break; 
}
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

    j2 = j2array[ij1]; cj2 = cj2array[ij1]; sj2 = sj2array[ij1];

    j3 = j3array[ij1]; cj3 = cj3array[ij1]; sj3 = sj3array[ij1];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j5eval[2];
j5eval[0]=((1.0)+(((-1.0)*(r22*r22))));
j5eval[1]=((r20*r20)+(r21*r21));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((r20*r20)+(r21*r21));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x946=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x946);
rxp1_0=(pz*r11);
rxp1_1=(r01*x946);
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x947=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x947);
rxp1_0=(pz*r11);
rxp1_1=(r01*x947);
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x948=IKPowWithIntegerCheck(r22,-1);
if(!x948.valid){
continue;
}
CheckValue<IkReal> x949=IKPowWithIntegerCheck(sj3,-1);
if(!x949.valid){
continue;
}
sj4array[0]=((x948.value)*(x949.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x950=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x950);
rxp1_0=(pz*r11);
rxp1_1=(r01*x950);
IkReal x951=((16.0)*sj4);
IkReal x952=(cj1*cj2);
IkReal x953=((4.0)*sj3);
IkReal x954=((8.0)*sj4);
IkReal x955=((4.0)*cj4);
IkReal x956=(sj1*sj2);
IkReal x957=((4.0)*sj4);
IkReal x958=(cj3*r02);
IkReal x959=((16.0)*sj3);
IkReal x960=((8.0)*sj3);
IkReal x961=((12.0)*cj4);
IkReal x962=((12.0)*sj4);
IkReal x963=(cj3*r12);
IkReal x964=(r11*x953);
IkReal x965=(r01*x953);
IkReal x966=(r01*x956);
IkReal x967=(cj3*cj4*r01);
IkReal x968=(cj3*cj4*r11);
IkReal x969=(cj3*r10*x955);
IkReal x970=(x962*x963);
IkReal x971=(cj3*r00*x955);
IkReal x972=(x958*x962);
IkReal x973=(r00*x956*x957);
IkReal x974=(r02*x956*x961);
IkReal x975=(r00*x952*x957);
IkReal x976=(r02*x952*x961);
IkReal x977=(r10*x956*x957);
IkReal x978=(r12*x952*x961);
IkReal x979=(r12*x956*x961);
IkReal x980=(r10*x952*x957);
IkReal x981=(x975+x964);
IkReal x982=(x977+x965);
IkReal x983=(x973+x969);
IkReal x984=(x970+x976);
IkReal x985=(x980+x971);
IkReal x986=(x972+x979);
j5eval[0]=((((0.5)*(IKabs(((((-1.0)*x986))+(((-1.0)*x982))+x985+x978)))))+(IKabs((((r11*x954*x956))+(((-1.0)*r00*x960))+(((-8.0)*x967))+(((-1.0)*r11*x952*x954)))))+(((0.5)*(IKabs(((((-1.0)*x986))+(((-1.0)*x985))+x982+x978)))))+(((0.5)*(IKabs((((r01*x951*x952))+(((-1.0)*r10*x959))+(((-16.0)*x968))+(((-1.0)*x951*x966)))))))+(((0.5)*(IKabs(((((-1.0)*x983))+((r02*x955*x956))+(((-1.0)*r02*x952*x955))+(((-1.0)*x957*x963))+x981)))))+(IKabs(((((-1.0)*r10*x960))+(((-8.0)*x968))+(((-1.0)*x954*x966))+((r01*x952*x954)))))+(((0.5)*(IKabs(((((-1.0)*x984))+(((-1.0)*x983))+x981+x974)))))+(((0.5)*(IKabs((((r11*x951*x956))+(((-1.0)*r00*x959))+(((-16.0)*x967))+(((-1.0)*r11*x951*x952)))))))+(((0.5)*(IKabs(((((-1.0)*x985))+(((-1.0)*x957*x958))+(((-1.0)*r12*x955*x956))+x982+((r12*x952*x955)))))))+(((0.5)*(IKabs(((((-1.0)*x984))+(((-1.0)*x981))+x983+x974))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x987=(r10*sj3);
IkReal x988=(r01*sj4);
IkReal x989=(cj1*cj2);
IkReal x990=(cj3*cj4);
IkReal x991=(sj1*sj2);
IkReal x992=(cj4*r02);
IkReal x993=((4.0)*r11*sj3);
IkReal x994=(cj3*r12*sj4);
IkReal x995=((4.0)*r00*sj4);
IkReal x996=((4.0)*r10*x990);
IkReal x997=((12.0)*x994);
IkReal x998=((4.0)*x994);
IkReal x999=(x989*x995);
IkReal x1000=(x991*x995);
IkReal x1001=((12.0)*x991*x992);
IkReal x1002=((12.0)*x989*x992);
IkReal x1003=((4.0)*x991*x992);
IkReal x1004=((4.0)*x989*x992);
IkReal x1005=(x993+x999);
IkReal x1006=(x1000+x996);
IkReal x1007=(x1004+x998);
IkReal x1008=(x1002+x997);
IkReal x1009=((((-8.0)*r11*x990))+(((-8.0)*x987))+(((-8.0)*x988*x991))+(((8.0)*x988*x989)));
op[0]=(x1005+x1003+(((-1.0)*x1006))+(((-1.0)*x1007)));
op[1]=x1009;
op[2]=(x1005+x1001+(((-1.0)*x1008))+(((-1.0)*x1006)));
op[3]=((((-16.0)*r11*x990))+(((-16.0)*x987))+(((16.0)*x988*x989))+(((-16.0)*x988*x991)));
op[4]=(x1006+x1001+(((-1.0)*x1008))+(((-1.0)*x1005)));
op[5]=x1009;
op[6]=(x1006+x1003+(((-1.0)*x1005))+(((-1.0)*x1007)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x1010=(cj1*cj2);
IkReal x1011=((4.0)*cj4);
IkReal x1012=(sj1*sj2);
IkReal x1013=((4.0)*sj4);
IkReal x1014=(r00*sj3);
IkReal x1015=(cj3*r02);
IkReal x1016=((4.0)*r01*sj3);
IkReal x1017=((16.0)*r11*sj4);
IkReal x1018=(cj3*cj4*r01);
IkReal x1019=((12.0)*cj4*r12);
IkReal x1020=((8.0)*r11*sj4);
IkReal x1021=(cj3*r00*x1011);
IkReal x1022=((12.0)*sj4*x1015);
IkReal x1023=(x1013*x1015);
IkReal x1024=(r10*x1010*x1013);
IkReal x1025=(r10*x1012*x1013);
IkReal x1026=(x1010*x1019);
IkReal x1027=(x1012*x1019);
IkReal x1028=(r12*x1010*x1011);
IkReal x1029=(r12*x1011*x1012);
IkReal x1030=(x1016+x1025);
IkReal x1031=(x1024+x1021);
IkReal x1032=(x1023+x1029);
IkReal x1033=(x1027+x1022);
IkReal x1034=((((-8.0)*x1014))+(((-8.0)*x1018))+((x1012*x1020))+(((-1.0)*x1010*x1020)));
j5evalpoly[0]=((((-1.0)*x1030))+(((-1.0)*x1032))+(((htj5*htj5*htj5)*(((((-16.0)*x1014))+(((-16.0)*x1018))+(((-1.0)*x1010*x1017))+((x1012*x1017))))))+x1031+x1028+(((htj5*htj5)*(((((-1.0)*x1030))+(((-1.0)*x1033))+x1031+x1026))))+(((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-1.0)*x1031))+(((-1.0)*x1032))+x1030+x1028))))+(((htj5*htj5*htj5*htj5)*(((((-1.0)*x1031))+(((-1.0)*x1033))+x1030+x1026))))+((htj5*x1034))+((x1034*(htj5*htj5*htj5*htj5*htj5))));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1035=(cj5*sj4);
IkReal x1036=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+(((-1.0)*r00*x1035))+((r01*x1036)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1035))+(((-1.0)*r11*x1036))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+(((-1.0)*r00*x1035))+((r01*x1036))))+IKsqr((((r10*x1035))+(((-1.0)*r11*x1036))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+(((-1.0)*r00*x1035))+((r01*x1036))), (((r10*x1035))+(((-1.0)*r11*x1036))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1037=IKcos(j0);
IkReal x1038=IKsin(j0);
IkReal x1039=(r02*sj4);
IkReal x1040=((1.0)*sj3);
IkReal x1041=(r12*sj4);
IkReal x1042=((1.0)*cj3);
IkReal x1043=(sj1*sj2);
IkReal x1044=(r11*sj5);
IkReal x1045=(cj5*r01);
IkReal x1046=(r00*sj5);
IkReal x1047=(cj5*r11);
IkReal x1048=(cj1*cj2);
IkReal x1049=(cj2*sj1);
IkReal x1050=((0.244)*cj1);
IkReal x1051=(r10*sj5);
IkReal x1052=((1.0)*cj4);
IkReal x1053=(cj4*cj5*r00);
IkReal x1054=((0.213)*x1037);
IkReal x1055=(cj4*cj5*r10);
IkReal x1056=(cj4*r01*sj5);
IkReal x1057=((1.0)*x1037);
IkReal x1058=((1.0)*x1038);
IkReal x1059=((0.213)*x1038);
IkReal x1060=((1.0)*cj5*sj4);
IkReal x1061=(cj1*x1058);
evalcond[0]=(x1037+(((-1.0)*r10*x1060))+(((-1.0)*r12*x1052))+((sj4*x1044)));
evalcond[1]=((((-1.0)*x1058))+(((-1.0)*r02*x1052))+(((-1.0)*r00*x1060))+((r01*sj4*sj5)));
evalcond[2]=(((x1037*x1050))+(((-0.131)*x1038))+(((-1.0)*x1043*x1054))+((x1048*x1054))+(((-1.0)*px))+(((-0.085)*x1046))+(((-0.085)*x1045)));
evalcond[3]=(((x1038*x1050))+(((-1.0)*x1043*x1059))+((x1048*x1059))+(((-0.085)*x1051))+(((-1.0)*py))+(((-0.085)*x1047))+(((0.131)*x1037)));
evalcond[4]=(((cj3*x1039))+((x1037*x1043))+((sj3*x1045))+((sj3*x1046))+((cj3*x1056))+(((-1.0)*x1042*x1053))+(((-1.0)*x1048*x1057)));
evalcond[5]=(((x1038*x1043))+((sj3*x1051))+((sj3*x1047))+(((-1.0)*x1042*x1055))+((cj3*x1041))+(((-1.0)*x1048*x1058))+((cj3*cj4*x1044)));
evalcond[6]=((((-1.0)*cj1*sj2*x1057))+((sj3*x1053))+(((-1.0)*x1039*x1040))+((cj3*x1046))+((cj3*x1045))+(((-1.0)*x1040*x1056))+(((-1.0)*x1049*x1057)));
evalcond[7]=(((sj3*x1055))+(((-1.0)*sj2*x1061))+((cj3*x1051))+((cj3*x1047))+(((-1.0)*x1040*x1041))+(((-1.0)*x1049*x1058))+(((-1.0)*cj4*x1040*x1044)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1062=IKPowWithIntegerCheck(cj3,-1);
if(!x1062.valid){
continue;
}
CheckValue<IkReal> x1063=IKPowWithIntegerCheck(r22,-1);
if(!x1063.valid){
continue;
}
sj4array[0]=((-1.0)*(x1062.value)*(x1063.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1064=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x1064);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1064);
IkReal x1065=((16.0)*sj4);
IkReal x1066=(cj1*cj2);
IkReal x1067=((4.0)*sj3);
IkReal x1068=((8.0)*sj4);
IkReal x1069=((4.0)*cj4);
IkReal x1070=(sj1*sj2);
IkReal x1071=((4.0)*sj4);
IkReal x1072=(cj3*r02);
IkReal x1073=((16.0)*sj3);
IkReal x1074=((8.0)*sj3);
IkReal x1075=((12.0)*cj4);
IkReal x1076=((12.0)*sj4);
IkReal x1077=(cj3*r12);
IkReal x1078=(r11*x1067);
IkReal x1079=(r01*x1067);
IkReal x1080=(r01*x1070);
IkReal x1081=(cj3*cj4*r01);
IkReal x1082=(cj3*cj4*r11);
IkReal x1083=(cj3*r10*x1069);
IkReal x1084=(x1076*x1077);
IkReal x1085=(cj3*r00*x1069);
IkReal x1086=(x1072*x1076);
IkReal x1087=(r00*x1070*x1071);
IkReal x1088=(r02*x1070*x1075);
IkReal x1089=(r00*x1066*x1071);
IkReal x1090=(r02*x1066*x1075);
IkReal x1091=(r10*x1070*x1071);
IkReal x1092=(r12*x1066*x1075);
IkReal x1093=(r12*x1070*x1075);
IkReal x1094=(r10*x1066*x1071);
IkReal x1095=(x1078+x1089);
IkReal x1096=(x1079+x1091);
IkReal x1097=(x1087+x1083);
IkReal x1098=(x1090+x1084);
IkReal x1099=(x1094+x1085);
IkReal x1100=(x1093+x1086);
j5eval[0]=((IKabs(((((-1.0)*r00*x1074))+(((-8.0)*x1081))+((r11*x1068*x1070))+(((-1.0)*r11*x1066*x1068)))))+(((0.5)*(IKabs((x1097+x1088+(((-1.0)*x1095))+(((-1.0)*x1098)))))))+(IKabs((((r01*x1066*x1068))+(((-1.0)*r10*x1074))+(((-1.0)*x1068*x1080))+(((-8.0)*x1082)))))+(((0.5)*(IKabs(((((-1.0)*r00*x1073))+(((-16.0)*x1081))+((r11*x1065*x1070))+(((-1.0)*r11*x1065*x1066)))))))+(((0.5)*(IKabs((((r01*x1065*x1066))+(((-1.0)*x1065*x1080))+(((-1.0)*r10*x1073))+(((-16.0)*x1082)))))))+(((0.5)*(IKabs((x1096+x1092+(((-1.0)*x1099))+(((-1.0)*x1100)))))))+(((0.5)*(IKabs((x1092+x1099+(((-1.0)*x1096))+(((-1.0)*x1100)))))))+(((0.5)*(IKabs((((r02*x1069*x1070))+x1095+(((-1.0)*r02*x1066*x1069))+(((-1.0)*x1071*x1077))+(((-1.0)*x1097)))))))+(((0.5)*(IKabs(((((-1.0)*r12*x1069*x1070))+x1096+(((-1.0)*x1071*x1072))+(((-1.0)*x1099))+((r12*x1066*x1069)))))))+(((0.5)*(IKabs((x1095+x1088+(((-1.0)*x1097))+(((-1.0)*x1098))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1101=(r10*sj3);
IkReal x1102=(r01*sj4);
IkReal x1103=(cj1*cj2);
IkReal x1104=(cj3*cj4);
IkReal x1105=(sj1*sj2);
IkReal x1106=(cj4*r02);
IkReal x1107=((4.0)*r11*sj3);
IkReal x1108=(cj3*r12*sj4);
IkReal x1109=((4.0)*r00*sj4);
IkReal x1110=((4.0)*r10*x1104);
IkReal x1111=((12.0)*x1108);
IkReal x1112=((4.0)*x1108);
IkReal x1113=(x1103*x1109);
IkReal x1114=(x1105*x1109);
IkReal x1115=((12.0)*x1105*x1106);
IkReal x1116=((12.0)*x1103*x1106);
IkReal x1117=((4.0)*x1105*x1106);
IkReal x1118=((4.0)*x1103*x1106);
IkReal x1119=(x1107+x1113);
IkReal x1120=(x1110+x1114);
IkReal x1121=(x1112+x1118);
IkReal x1122=(x1111+x1116);
IkReal x1123=((((-8.0)*r11*x1104))+(((-8.0)*x1102*x1105))+(((-8.0)*x1101))+(((8.0)*x1102*x1103)));
op[0]=(x1117+x1119+(((-1.0)*x1121))+(((-1.0)*x1120)));
op[1]=x1123;
op[2]=(x1115+x1119+(((-1.0)*x1122))+(((-1.0)*x1120)));
op[3]=((((-16.0)*x1102*x1105))+(((-16.0)*x1101))+(((-16.0)*r11*x1104))+(((16.0)*x1102*x1103)));
op[4]=(x1115+x1120+(((-1.0)*x1122))+(((-1.0)*x1119)));
op[5]=x1123;
op[6]=(x1117+x1120+(((-1.0)*x1121))+(((-1.0)*x1119)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x1124=(cj1*cj2);
IkReal x1125=((4.0)*cj4);
IkReal x1126=(sj1*sj2);
IkReal x1127=((4.0)*sj4);
IkReal x1128=(r00*sj3);
IkReal x1129=(cj3*r02);
IkReal x1130=((4.0)*r01*sj3);
IkReal x1131=((16.0)*r11*sj4);
IkReal x1132=(cj3*cj4*r01);
IkReal x1133=((12.0)*cj4*r12);
IkReal x1134=((8.0)*r11*sj4);
IkReal x1135=(cj3*r00*x1125);
IkReal x1136=((12.0)*sj4*x1129);
IkReal x1137=(x1127*x1129);
IkReal x1138=(r10*x1124*x1127);
IkReal x1139=(r10*x1126*x1127);
IkReal x1140=(x1124*x1133);
IkReal x1141=(x1126*x1133);
IkReal x1142=(r12*x1124*x1125);
IkReal x1143=(r12*x1125*x1126);
IkReal x1144=(x1139+x1130);
IkReal x1145=(x1138+x1135);
IkReal x1146=(x1143+x1137);
IkReal x1147=(x1141+x1136);
IkReal x1148=((((-8.0)*x1132))+((x1126*x1134))+(((-8.0)*x1128))+(((-1.0)*x1124*x1134)));
j5evalpoly[0]=(x1142+x1145+(((-1.0)*x1144))+(((-1.0)*x1146))+(((htj5*htj5*htj5*htj5)*((x1140+x1144+(((-1.0)*x1145))+(((-1.0)*x1147))))))+(((htj5*htj5*htj5*htj5*htj5*htj5)*((x1142+x1144+(((-1.0)*x1145))+(((-1.0)*x1146))))))+(((htj5*htj5*htj5)*(((((-16.0)*x1132))+((x1126*x1131))+(((-1.0)*x1124*x1131))+(((-16.0)*x1128))))))+((htj5*x1148))+((x1148*(htj5*htj5*htj5*htj5*htj5)))+(((htj5*htj5)*((x1140+x1145+(((-1.0)*x1144))+(((-1.0)*x1147)))))));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1149=(cj5*sj4);
IkReal x1150=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x1149))+(((-1.0)*cj4*r02))+((r01*x1150)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1150))+((r10*x1149))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1149))+(((-1.0)*cj4*r02))+((r01*x1150))))+IKsqr(((((-1.0)*r11*x1150))+((r10*x1149))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1149))+(((-1.0)*cj4*r02))+((r01*x1150))), ((((-1.0)*r11*x1150))+((r10*x1149))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1151=IKcos(j0);
IkReal x1152=IKsin(j0);
IkReal x1153=(r02*sj4);
IkReal x1154=((1.0)*sj3);
IkReal x1155=(r12*sj4);
IkReal x1156=((1.0)*cj3);
IkReal x1157=(sj1*sj2);
IkReal x1158=(r11*sj5);
IkReal x1159=(cj5*r01);
IkReal x1160=(r00*sj5);
IkReal x1161=(cj5*r11);
IkReal x1162=(cj1*cj2);
IkReal x1163=(cj2*sj1);
IkReal x1164=((0.244)*cj1);
IkReal x1165=(r10*sj5);
IkReal x1166=((1.0)*cj4);
IkReal x1167=(cj4*cj5*r00);
IkReal x1168=((0.213)*x1151);
IkReal x1169=(cj4*cj5*r10);
IkReal x1170=(cj4*r01*sj5);
IkReal x1171=((1.0)*x1151);
IkReal x1172=((1.0)*x1152);
IkReal x1173=((0.213)*x1152);
IkReal x1174=((1.0)*cj5*sj4);
IkReal x1175=(cj1*x1172);
evalcond[0]=(x1151+(((-1.0)*r12*x1166))+((sj4*x1158))+(((-1.0)*r10*x1174)));
evalcond[1]=((((-1.0)*r02*x1166))+((r01*sj4*sj5))+(((-1.0)*x1172))+(((-1.0)*r00*x1174)));
evalcond[2]=(((x1162*x1168))+(((-0.085)*x1159))+(((-1.0)*px))+(((-0.131)*x1152))+((x1151*x1164))+(((-1.0)*x1157*x1168))+(((-0.085)*x1160)));
evalcond[3]=((((0.131)*x1151))+((x1162*x1173))+(((-1.0)*py))+((x1152*x1164))+(((-1.0)*x1157*x1173))+(((-0.085)*x1165))+(((-0.085)*x1161)));
evalcond[4]=((((-1.0)*x1156*x1167))+((cj3*x1153))+(((-1.0)*x1162*x1171))+((sj3*x1159))+((x1151*x1157))+((cj3*x1170))+((sj3*x1160)));
evalcond[5]=((((-1.0)*x1156*x1169))+((cj3*x1155))+(((-1.0)*x1162*x1172))+((x1152*x1157))+((cj3*cj4*x1158))+((sj3*x1165))+((sj3*x1161)));
evalcond[6]=(((cj3*x1159))+(((-1.0)*x1163*x1171))+(((-1.0)*cj1*sj2*x1171))+((cj3*x1160))+(((-1.0)*x1154*x1170))+(((-1.0)*x1153*x1154))+((sj3*x1167)));
evalcond[7]=((((-1.0)*cj4*x1154*x1158))+(((-1.0)*x1154*x1155))+(((-1.0)*sj2*x1175))+(((-1.0)*x1163*x1172))+((cj3*x1165))+((cj3*x1161))+((sj3*x1169)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x1176=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1176);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1176);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1177=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1177);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1177);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1178=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1178);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1178);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1179=IKPowWithIntegerCheck(r22,-1);
if(!x1179.valid){
continue;
}
sj4array[0]=((-1.0)*(x1179.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1180=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1180);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1180);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1182 = IKatan2WithCheck(IkReal(((-1.0)*cj4*r00)),IkReal((cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1182.valid){
continue;
}
IkReal x1181=x1182.value;
j5array[0]=((-1.0)*x1181);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1181)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r11*(IKsin(j5))))+(((-1.0)*cj4*r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1183=(cj5*sj4);
IkReal x1184=(sj4*sj5);
if( IKabs((((r01*x1184))+(((-1.0)*r00*x1183)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1183))+(((-1.0)*r11*x1184)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1184))+(((-1.0)*r00*x1183))))+IKsqr((((r10*x1183))+(((-1.0)*r11*x1184))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1184))+(((-1.0)*r00*x1183))), (((r10*x1183))+(((-1.0)*r11*x1184))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1185=IKcos(j0);
IkReal x1186=IKsin(j0);
IkReal x1187=(cj5*r01);
IkReal x1188=(sj4*sj5);
IkReal x1189=((0.085)*sj5);
IkReal x1190=((0.244)*cj1);
IkReal x1191=(cj5*r11);
IkReal x1192=((1.0)*cj1*sj2);
IkReal x1193=((1.0)*cj2*sj1);
IkReal x1194=((1.0)*cj5*sj4);
evalcond[0]=(x1185+(((-1.0)*r10*x1194))+((r11*x1188)));
evalcond[1]=((((-1.0)*r00*x1194))+((r01*x1188))+(((-1.0)*x1186)));
evalcond[2]=(((r00*sj5))+x1187+(((-1.0)*x1185*x1192))+(((-1.0)*x1185*x1193)));
evalcond[3]=(x1191+((r10*sj5))+(((-1.0)*x1186*x1193))+(((-1.0)*x1186*x1192)));
evalcond[4]=(((x1185*x1190))+(((-1.0)*px))+(((-0.131)*x1186))+(((-1.0)*r00*x1189))+(((-0.085)*x1187)));
evalcond[5]=((((-0.085)*x1191))+((x1186*x1190))+(((0.131)*x1185))+(((-1.0)*r10*x1189))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1195=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1195);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1195);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1196=IKPowWithIntegerCheck(r22,-1);
if(!x1196.valid){
continue;
}
sj4array[0]=((x1196.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1197=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1197);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1197);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1199 = IKatan2WithCheck(IkReal((cj4*r00)),IkReal(((-1.0)*cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1199.valid){
continue;
}
IkReal x1198=x1199.value;
j5array[0]=((-1.0)*x1198);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1198)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r10*(IKcos(j5))))+(((-1.0)*cj4*r11*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1200=(cj5*sj4);
IkReal x1201=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x1200))+((r01*x1201)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1200))+(((-1.0)*r11*x1201)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1200))+((r01*x1201))))+IKsqr((((r10*x1200))+(((-1.0)*r11*x1201))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1200))+((r01*x1201))), (((r10*x1200))+(((-1.0)*r11*x1201))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1202=IKcos(j0);
IkReal x1203=IKsin(j0);
IkReal x1204=(sj4*sj5);
IkReal x1205=(r00*sj5);
IkReal x1206=((1.0)*cj5);
IkReal x1207=(r10*sj5);
IkReal x1208=((0.244)*cj1);
IkReal x1209=((0.085)*cj5);
IkReal x1210=((1.0)*cj1*sj2);
IkReal x1211=((1.0)*cj2*sj1);
evalcond[0]=(x1202+(((-1.0)*r10*sj4*x1206))+((r11*x1204)));
evalcond[1]=((((-1.0)*r00*sj4*x1206))+(((-1.0)*x1203))+((r01*x1204)));
evalcond[2]=((((-0.085)*x1205))+(((-0.131)*x1203))+(((-1.0)*r01*x1209))+((x1202*x1208))+(((-1.0)*px)));
evalcond[3]=((((-0.085)*x1207))+(((-1.0)*py))+((x1203*x1208))+(((0.131)*x1202))+(((-1.0)*r11*x1209)));
evalcond[4]=((((-1.0)*x1202*x1211))+(((-1.0)*x1202*x1210))+(((-1.0)*r01*x1206))+(((-1.0)*x1205)));
evalcond[5]=((((-1.0)*x1203*x1211))+(((-1.0)*x1203*x1210))+(((-1.0)*x1207))+(((-1.0)*r11*x1206)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1212=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1212);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1212);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1213=IKPowWithIntegerCheck(r22,-1);
if(!x1213.valid){
continue;
}
sj4array[0]=((x1213.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1214=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1214);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1214);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1216 = IKatan2WithCheck(IkReal((cj4*r00)),IkReal(((-1.0)*cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1216.valid){
continue;
}
IkReal x1215=x1216.value;
j5array[0]=((-1.0)*x1215);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1215)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r10*(IKcos(j5))))+(((-1.0)*cj4*r11*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1217=(cj5*sj4);
IkReal x1218=(sj4*sj5);
if( IKabs((((r01*x1218))+(((-1.0)*r00*x1217)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1217))+(((-1.0)*r11*x1218)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1218))+(((-1.0)*r00*x1217))))+IKsqr((((r10*x1217))+(((-1.0)*r11*x1218))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1218))+(((-1.0)*r00*x1217))), (((r10*x1217))+(((-1.0)*r11*x1218))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1219=IKcos(j0);
IkReal x1220=IKsin(j0);
IkReal x1221=(cj5*r01);
IkReal x1222=(sj1*sj2);
IkReal x1223=(sj4*sj5);
IkReal x1224=((0.085)*sj5);
IkReal x1225=(cj1*cj2);
IkReal x1226=((0.244)*cj1);
IkReal x1227=(cj5*r11);
IkReal x1228=((0.213)*x1219);
IkReal x1229=((1.0)*x1220);
IkReal x1230=((0.213)*x1220);
IkReal x1231=((1.0)*cj5*sj4);
evalcond[0]=(x1219+(((-1.0)*r10*x1231))+((r11*x1223)));
evalcond[1]=((((-1.0)*r00*x1231))+((r01*x1223))+(((-1.0)*x1229)));
evalcond[2]=(((r00*sj5))+x1221+((x1219*x1222))+(((-1.0)*x1219*x1225)));
evalcond[3]=(x1227+(((-1.0)*x1225*x1229))+((r10*sj5))+((x1220*x1222)));
evalcond[4]=((((-1.0)*r00*x1224))+((x1219*x1226))+((x1225*x1228))+(((-1.0)*x1222*x1228))+(((-1.0)*px))+(((-0.131)*x1220))+(((-0.085)*x1221)));
evalcond[5]=(((x1225*x1230))+(((-1.0)*x1222*x1230))+(((-1.0)*py))+((x1220*x1226))+(((-1.0)*r10*x1224))+(((0.131)*x1219))+(((-0.085)*x1227)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1232=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1232);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1232);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1233=IKPowWithIntegerCheck(r22,-1);
if(!x1233.valid){
continue;
}
sj4array[0]=((-1.0)*(x1233.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1234=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1234);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1234);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1236 = IKatan2WithCheck(IkReal(((-1.0)*cj4*r00)),IkReal((cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1236.valid){
continue;
}
IkReal x1235=x1236.value;
j5array[0]=((-1.0)*x1235);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1235)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r11*(IKsin(j5))))+(((-1.0)*cj4*r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1237=(cj5*sj4);
IkReal x1238=(sj4*sj5);
if( IKabs((((r01*x1238))+(((-1.0)*r00*x1237)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1238))+((r10*x1237)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1238))+(((-1.0)*r00*x1237))))+IKsqr(((((-1.0)*r11*x1238))+((r10*x1237))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1238))+(((-1.0)*r00*x1237))), ((((-1.0)*r11*x1238))+((r10*x1237))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1239=IKcos(j0);
IkReal x1240=IKsin(j0);
IkReal x1241=(sj1*sj2);
IkReal x1242=(sj4*sj5);
IkReal x1243=(r00*sj5);
IkReal x1244=((1.0)*cj5);
IkReal x1245=(r10*sj5);
IkReal x1246=(cj1*cj2);
IkReal x1247=((0.244)*cj1);
IkReal x1248=((0.085)*cj5);
IkReal x1249=((0.213)*x1239);
IkReal x1250=((1.0)*x1240);
IkReal x1251=((0.213)*x1240);
evalcond[0]=(x1239+((r11*x1242))+(((-1.0)*r10*sj4*x1244)));
evalcond[1]=((((-1.0)*x1250))+((r01*x1242))+(((-1.0)*r00*sj4*x1244)));
evalcond[2]=(((x1239*x1241))+(((-1.0)*x1243))+(((-1.0)*x1239*x1246))+(((-1.0)*r01*x1244)));
evalcond[3]=(((x1240*x1241))+(((-1.0)*x1245))+(((-1.0)*x1246*x1250))+(((-1.0)*r11*x1244)));
evalcond[4]=((((-0.131)*x1240))+((x1239*x1247))+(((-1.0)*px))+((x1246*x1249))+(((-0.085)*x1243))+(((-1.0)*r01*x1248))+(((-1.0)*x1241*x1249)));
evalcond[5]=(((x1246*x1251))+(((0.131)*x1239))+((x1240*x1247))+(((-1.0)*x1241*x1251))+(((-1.0)*r11*x1248))+(((-1.0)*py))+(((-0.085)*x1245)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1252=IKPowWithIntegerCheck(r22,-1);
if(!x1252.valid){
continue;
}
CheckValue<IkReal> x1253=IKPowWithIntegerCheck(sj3,-1);
if(!x1253.valid){
continue;
}
sj4array[0]=((x1252.value)*(x1253.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1254=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1254);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1254);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))+(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))+(IKabs(((((8.0)*cj2*cj3*cj4*r01*sj1))+(((8.0)*cj1*r00*sj2*sj3))+(((8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj4*r01*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r01*sj3))+(((8.0)*cj1*cj3*cj4*r01*sj2))+(((-8.0)*cj1*cj2*cj3*r00)))))+(((0.5)*(IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3)))))))+(((0.5)*(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))))+(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj1*r00*sj2*sj3))+(((16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj1*cj2*cj3*r00))+(((16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj4*r01*sj1*sj2*sj3))+(((16.0)*cj3*r00*sj1*sj2))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1255=((4.0)*r01);
IkReal x1256=((16.0)*r00);
IkReal x1257=(cj3*sj2);
IkReal x1258=((8.0)*r00);
IkReal x1259=(cj2*cj3);
IkReal x1260=(cj4*r01);
IkReal x1261=((16.0)*cj1);
IkReal x1262=((8.0)*sj1);
IkReal x1263=((16.0)*sj1);
IkReal x1264=((8.0)*cj1);
IkReal x1265=(sj2*sj3);
IkReal x1266=(cj2*sj3);
IkReal x1267=(sj1*x1266);
IkReal x1268=((4.0)*cj4*r00);
IkReal x1269=(((sj1*x1265*x1268))+((cj1*x1255*x1265))+((x1255*x1267))+((sj1*x1255*x1257)));
IkReal x1270=(((cj1*x1266*x1268))+((cj1*x1255*x1259))+((sj1*x1259*x1268))+((cj1*x1257*x1268)));
IkReal x1271=(x1270+(((-1.0)*x1269)));
IkReal x1272=(((x1259*x1260*x1262))+((x1257*x1260*x1264))+((x1258*x1267))+((cj1*x1258*x1265))+(((-1.0)*x1260*x1262*x1265))+((sj1*x1257*x1258))+(((-1.0)*cj1*x1258*x1259))+((x1260*x1264*x1266)));
IkReal x1273=(x1269+(((-1.0)*x1270)));
op[0]=x1271;
op[1]=x1272;
op[2]=x1271;
op[3]=(((x1259*x1260*x1263))+((x1257*x1260*x1261))+((cj1*x1256*x1265))+((sj1*x1256*x1257))+((x1256*x1267))+(((-1.0)*x1260*x1263*x1265))+((x1260*x1261*x1266))+(((-1.0)*cj1*x1256*x1259)));
op[4]=x1273;
op[5]=x1272;
op[6]=x1273;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5)*(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+((htj5*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1274=(cj5*sj4);
IkReal x1275=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x1274))+((r01*x1275)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1274))+(((-1.0)*r11*x1275)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1274))+((r01*x1275))))+IKsqr((((r10*x1274))+(((-1.0)*r11*x1275))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1274))+((r01*x1275))), (((r10*x1274))+(((-1.0)*r11*x1275))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1276=IKcos(j0);
IkReal x1277=IKsin(j0);
IkReal x1278=((1.0)*cj3);
IkReal x1279=((0.213)*sj1);
IkReal x1280=((1.0)*cj1);
IkReal x1281=(r11*sj5);
IkReal x1282=(cj5*r01);
IkReal x1283=(r01*sj5);
IkReal x1284=(cj5*r11);
IkReal x1285=(cj3*cj4);
IkReal x1286=(r00*sj5);
IkReal x1287=((0.213)*cj1);
IkReal x1288=((1.0)*sj1);
IkReal x1289=(r10*sj5);
IkReal x1290=((0.244)*cj1);
IkReal x1291=(cj4*cj5*r00);
IkReal x1292=(sj2*x1276);
IkReal x1293=(cj4*cj5*r10);
IkReal x1294=((1.0)*cj4*sj3);
IkReal x1295=(sj2*x1277);
IkReal x1296=(cj2*x1276);
IkReal x1297=((1.0)*cj5*sj4);
IkReal x1298=(cj2*x1277);
evalcond[0]=(x1276+((sj4*x1281))+(((-1.0)*r10*x1297)));
evalcond[1]=((((-1.0)*r00*x1297))+((sj4*x1283))+(((-1.0)*x1277)));
evalcond[2]=((((-1.0)*x1278*x1291))+(((-1.0)*x1280*x1296))+((sj1*x1292))+((x1283*x1285))+((sj3*x1286))+((sj3*x1282)));
evalcond[3]=((((-1.0)*x1278*x1293))+(((-1.0)*x1280*x1298))+((sj1*x1295))+((sj3*x1284))+((sj3*x1289))+((x1281*x1285)));
evalcond[4]=((((-1.0)*x1283*x1294))+((sj3*x1291))+(((-1.0)*x1288*x1296))+(((-1.0)*x1280*x1292))+((cj3*x1286))+((cj3*x1282)));
evalcond[5]=(((sj3*x1293))+(((-1.0)*x1288*x1298))+(((-1.0)*x1280*x1295))+(((-1.0)*x1281*x1294))+((cj3*x1284))+((cj3*x1289)));
evalcond[6]=(((x1276*x1290))+((x1287*x1296))+(((-1.0)*x1279*x1292))+(((-1.0)*px))+(((-0.131)*x1277))+(((-0.085)*x1282))+(((-0.085)*x1286)));
evalcond[7]=((((0.131)*x1276))+((x1287*x1298))+(((-1.0)*x1279*x1295))+(((-1.0)*py))+(((-0.085)*x1289))+(((-0.085)*x1284))+((x1277*x1290)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1299=IKPowWithIntegerCheck(cj3,-1);
if(!x1299.valid){
continue;
}
CheckValue<IkReal> x1300=IKPowWithIntegerCheck(r22,-1);
if(!x1300.valid){
continue;
}
sj4array[0]=((-1.0)*(x1299.value)*(x1300.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1301=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1301);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1301);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))+(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))+(IKabs(((((8.0)*cj2*cj3*cj4*r01*sj1))+(((8.0)*cj1*r00*sj2*sj3))+(((8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj4*r01*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r01*sj3))+(((8.0)*cj1*cj3*cj4*r01*sj2))+(((-8.0)*cj1*cj2*cj3*r00)))))+(((0.5)*(IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3)))))))+(((0.5)*(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))))+(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj1*r00*sj2*sj3))+(((16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj1*cj2*cj3*r00))+(((16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj4*r01*sj1*sj2*sj3))+(((16.0)*cj3*r00*sj1*sj2))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1302=((4.0)*r01);
IkReal x1303=((16.0)*r00);
IkReal x1304=(cj3*sj2);
IkReal x1305=((8.0)*r00);
IkReal x1306=(cj2*cj3);
IkReal x1307=(cj4*r01);
IkReal x1308=((16.0)*cj1);
IkReal x1309=((8.0)*sj1);
IkReal x1310=((16.0)*sj1);
IkReal x1311=((8.0)*cj1);
IkReal x1312=(sj2*sj3);
IkReal x1313=(cj2*sj3);
IkReal x1314=(sj1*x1313);
IkReal x1315=((4.0)*cj4*r00);
IkReal x1316=(((cj1*x1302*x1312))+((sj1*x1312*x1315))+((sj1*x1302*x1304))+((x1302*x1314)));
IkReal x1317=(((sj1*x1306*x1315))+((cj1*x1304*x1315))+((cj1*x1302*x1306))+((cj1*x1313*x1315)));
IkReal x1318=(x1317+(((-1.0)*x1316)));
IkReal x1319=(((x1306*x1307*x1309))+(((-1.0)*x1307*x1309*x1312))+((x1307*x1311*x1313))+((x1305*x1314))+((sj1*x1304*x1305))+((cj1*x1305*x1312))+(((-1.0)*cj1*x1305*x1306))+((x1304*x1307*x1311)));
IkReal x1320=(x1316+(((-1.0)*x1317)));
op[0]=x1318;
op[1]=x1319;
op[2]=x1318;
op[3]=(((cj1*x1303*x1312))+((x1306*x1307*x1310))+(((-1.0)*x1307*x1310*x1312))+((x1307*x1308*x1313))+((sj1*x1303*x1304))+(((-1.0)*cj1*x1303*x1306))+((x1303*x1314))+((x1304*x1307*x1308)));
op[4]=x1320;
op[5]=x1319;
op[6]=x1320;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5)*(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+((htj5*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1321=(cj5*sj4);
IkReal x1322=(sj4*sj5);
if( IKabs((((r01*x1322))+(((-1.0)*r00*x1321)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1322))+((r10*x1321)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1322))+(((-1.0)*r00*x1321))))+IKsqr(((((-1.0)*r11*x1322))+((r10*x1321))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1322))+(((-1.0)*r00*x1321))), ((((-1.0)*r11*x1322))+((r10*x1321))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1323=IKcos(j0);
IkReal x1324=IKsin(j0);
IkReal x1325=((1.0)*cj3);
IkReal x1326=((0.213)*sj1);
IkReal x1327=((1.0)*cj1);
IkReal x1328=(r11*sj5);
IkReal x1329=(cj5*r01);
IkReal x1330=(r01*sj5);
IkReal x1331=(cj5*r11);
IkReal x1332=(cj3*cj4);
IkReal x1333=(r00*sj5);
IkReal x1334=((0.213)*cj1);
IkReal x1335=((1.0)*sj1);
IkReal x1336=(r10*sj5);
IkReal x1337=((0.244)*cj1);
IkReal x1338=(cj4*cj5*r00);
IkReal x1339=(sj2*x1323);
IkReal x1340=(cj4*cj5*r10);
IkReal x1341=((1.0)*cj4*sj3);
IkReal x1342=(sj2*x1324);
IkReal x1343=(cj2*x1323);
IkReal x1344=((1.0)*cj5*sj4);
IkReal x1345=(cj2*x1324);
evalcond[0]=(x1323+((sj4*x1328))+(((-1.0)*r10*x1344)));
evalcond[1]=(((sj4*x1330))+(((-1.0)*x1324))+(((-1.0)*r00*x1344)));
evalcond[2]=((((-1.0)*x1325*x1338))+((sj3*x1329))+((sj3*x1333))+((sj1*x1339))+((x1330*x1332))+(((-1.0)*x1327*x1343)));
evalcond[3]=(((sj1*x1342))+((sj3*x1331))+((sj3*x1336))+(((-1.0)*x1325*x1340))+((x1328*x1332))+(((-1.0)*x1327*x1345)));
evalcond[4]=((((-1.0)*x1327*x1339))+(((-1.0)*x1335*x1343))+((sj3*x1338))+((cj3*x1329))+((cj3*x1333))+(((-1.0)*x1330*x1341)));
evalcond[5]=((((-1.0)*x1335*x1345))+((cj3*x1331))+((cj3*x1336))+(((-1.0)*x1328*x1341))+(((-1.0)*x1327*x1342))+((sj3*x1340)));
evalcond[6]=((((-1.0)*x1326*x1339))+(((-0.131)*x1324))+(((-0.085)*x1333))+(((-0.085)*x1329))+(((-1.0)*px))+((x1334*x1343))+((x1323*x1337)));
evalcond[7]=((((-0.085)*x1331))+(((-0.085)*x1336))+(((-1.0)*py))+((x1334*x1345))+((x1324*x1337))+(((-1.0)*x1326*x1342))+(((0.131)*x1323)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1348 = IKatan2WithCheck(IkReal(((-0.085)*r21)),IkReal(((-0.085)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1348.valid){
continue;
}
IkReal x1346=((1.0)*(x1348.value));
if((((((0.007225)*(r20*r20)))+(((0.007225)*(r21*r21))))) < -0.00001)
continue;
CheckValue<IkReal> x1349=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.007225)*(r20*r20)))+(((0.007225)*(r21*r21)))))),-1);
if(!x1349.valid){
continue;
}
if( (((-1.0)*(x1349.value)*(((((-0.213)*cj2*sj1))+(((-0.213)*cj1*sj2))+(((-1.0)*pz))+(((-0.244)*sj1)))))) < -1-IKFAST_SINCOS_THRESH || (((-1.0)*(x1349.value)*(((((-0.213)*cj2*sj1))+(((-0.213)*cj1*sj2))+(((-1.0)*pz))+(((-0.244)*sj1)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1347=((-1.0)*(IKasin(((-1.0)*(x1349.value)*(((((-0.213)*cj2*sj1))+(((-0.213)*cj1*sj2))+(((-1.0)*pz))+(((-0.244)*sj1))))))));
j5array[0]=((((-1.0)*x1347))+(((-1.0)*x1346)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((1.0)*x1347))+(((-1.0)*x1346)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j4eval[2];
IkReal x1350=cj5*cj5;
IkReal x1351=r21*r21;
IkReal x1352=(sj3*x1350);
IkReal x1353=(((sj3*(r22*r22)))+(((-1.0)*x1351*x1352))+(((-2.0)*cj5*r20*r21*sj3*sj5))+((sj3*x1351))+((x1352*(r20*r20))));
j4eval[0]=x1353;
j4eval[1]=IKsign(x1353);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1354=cj5*cj5;
IkReal x1355=r21*r21;
IkReal x1356=((1.0)*cj3);
IkReal x1357=(cj3*x1354);
IkReal x1358=((((-1.0)*x1356*(r22*r22)))+((x1355*x1357))+(((-1.0)*x1355*x1356))+(((-1.0)*x1354*x1356*(r20*r20)))+(((2.0)*cj3*cj5*r20*r21*sj5)));
j4eval[0]=x1358;
j4eval[1]=IKsign(x1358);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1359=cj1*cj1;
IkReal x1360=cj2*cj2;
IkReal x1361=(cj2*x1359);
IkReal x1362=(cj1*sj1*sj2);
IkReal x1363=(x1359*x1360);
j0eval[0]=((4.41377849932943)+x1359+(((-7.33705089292017)*x1362))+(((-3.2024422954754)*x1360))+(((6.4048845909508)*x1363))+(((-6.4048845909508)*cj2*x1362))+(((7.33705089292017)*x1361)));
j0eval[1]=IKsign(((62530.0)+(((14167.0)*x1359))+(((90738.0)*x1363))+(((-45369.0)*x1360))+(((-103944.0)*x1362))+(((103944.0)*x1361))+(((-90738.0)*cj2*x1362))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1364=((1.0)*cj5);
IkReal x1365=((1.0)*sj5);
IkReal x1366=((((-1.0)*cj1*cj2))+((sj1*sj2)));
j0eval[0]=x1366;
j0eval[1]=((IKabs(((((-1.0)*r11*x1364))+(((-1.0)*r10*x1365)))))+(IKabs(((((-1.0)*r01*x1364))+(((-1.0)*r00*x1365))))));
j0eval[2]=IKsign(x1366);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1367=cj5*cj5;
IkReal x1368=r21*r21;
IkReal x1369=(sj1*sj2);
IkReal x1370=(r21*sj5);
IkReal x1371=(cj5*r20);
IkReal x1372=(cj1*cj2);
IkReal x1373=(x1368+(r22*r22)+((x1367*(r20*r20)))+(((-2.0)*x1370*x1371))+(((-1.0)*x1367*x1368)));
j4eval[0]=x1373;
j4eval[1]=IKsign(x1373);
j4eval[2]=((IKabs(((((-1.0)*x1370*x1372))+((x1371*x1372))+((x1369*x1370))+(((-1.0)*x1369*x1371)))))+(IKabs((((r22*x1369))+(((-1.0)*r22*x1372))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j0eval[0]=((((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((3.1813499876136)*py))+(((-1.7080198703991)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((3.1813499876136)*px))+(((1.7080198703991)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((3.1813499876136)*py))+(((-1.7080198703991)*px))))+IKsqr(((((3.1813499876136)*px))+(((1.7080198703991)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((3.1813499876136)*py))+(((-1.7080198703991)*px))), ((((3.1813499876136)*px))+(((1.7080198703991)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1374=IKsin(j0);
IkReal x1375=IKcos(j0);
evalcond[0]=((((-0.131)*x1374))+(((-1.0)*px))+(((0.244)*x1375)));
evalcond[1]=((((0.131)*x1375))+(((-1.0)*py))+(((0.244)*x1374)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1376=((1.0)*cj5);
IkReal x1377=((((-1.0)*r01*x1376))+(((-1.0)*r00*sj5)));
j4eval[0]=x1377;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1376)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1377);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1378=((1.0)*cj5);
IkReal x1379=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1378)));
j4eval[0]=x1379;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x1378))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x1379);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1380=cj5*cj5;
IkReal x1381=((1.0)*sj5);
IkReal x1382=(cj5*r20);
IkReal x1383=(r11*r21);
IkReal x1384=(x1383+(((-1.0)*x1380*x1383))+(((-1.0)*r11*x1381*x1382))+(((-1.0)*cj5*r10*r21*x1381))+((r12*r22))+((r10*r20*x1380)));
j4eval[0]=x1384;
j4eval[1]=IKsign(x1384);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x1381))+((cj0*x1382)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1385=cj5*cj5;
IkReal x1386=((1.0)*sj5);
IkReal x1387=(cj5*r20);
IkReal x1388=(r11*r21);
CheckValue<IkReal> x1389=IKPowWithIntegerCheck(IKsign((x1388+(((-1.0)*x1385*x1388))+(((-1.0)*r11*x1386*x1387))+(((-1.0)*cj5*r10*r21*x1386))+((r12*r22))+((r10*r20*x1385)))),-1);
if(!x1389.valid){
continue;
}
CheckValue<IkReal> x1390 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x1386))+((cj0*x1387)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1390.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1389.value)))+(x1390.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1391=IKsin(j4);
IkReal x1392=IKcos(j4);
IkReal x1393=((1.0)*sj0);
IkReal x1394=(cj5*r00);
IkReal x1395=(r11*sj5);
IkReal x1396=(cj5*r10);
IkReal x1397=(r21*sj5);
IkReal x1398=(cj5*r20);
IkReal x1399=(r01*sj5);
IkReal x1400=((1.0)*x1392);
IkReal x1401=((1.0)*x1391);
evalcond[0]=((((-1.0)*x1398*x1401))+(((-1.0)*r22*x1400))+((x1391*x1397)));
evalcond[1]=((((-1.0)*r22*x1401))+((x1392*x1398))+(((-1.0)*x1397*x1400)));
evalcond[2]=((((-1.0)*r12*x1400))+cj0+((x1391*x1395))+(((-1.0)*x1396*x1401)));
evalcond[3]=((((-1.0)*r02*x1400))+((x1391*x1399))+(((-1.0)*x1394*x1401))+(((-1.0)*x1393)));
evalcond[4]=((((-1.0)*x1399*x1400))+(((-1.0)*r02*x1401))+((x1392*x1394))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1401))+((x1392*x1396))+(((-1.0)*x1395*x1400))+(((-1.0)*x1393)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1402=((1.0)*cj5);
CheckValue<IkReal> x1403=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1402))+(((-1.0)*r10*sj5)))),-1);
if(!x1403.valid){
continue;
}
CheckValue<IkReal> x1404 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1402)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1404.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1403.value)))+(x1404.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1405=IKsin(j4);
IkReal x1406=IKcos(j4);
IkReal x1407=((1.0)*sj0);
IkReal x1408=(cj5*r00);
IkReal x1409=(r11*sj5);
IkReal x1410=(cj5*r10);
IkReal x1411=(r21*sj5);
IkReal x1412=(cj5*r20);
IkReal x1413=(r01*sj5);
IkReal x1414=((1.0)*x1406);
IkReal x1415=((1.0)*x1405);
evalcond[0]=((((-1.0)*x1412*x1415))+(((-1.0)*r22*x1414))+((x1405*x1411)));
evalcond[1]=((((-1.0)*r22*x1415))+(((-1.0)*x1411*x1414))+((x1406*x1412)));
evalcond[2]=(cj0+((x1405*x1409))+(((-1.0)*x1410*x1415))+(((-1.0)*r12*x1414)));
evalcond[3]=((((-1.0)*r02*x1414))+(((-1.0)*x1407))+((x1405*x1413))+(((-1.0)*x1408*x1415)));
evalcond[4]=((((-1.0)*x1413*x1414))+(((-1.0)*r02*x1415))+((x1406*x1408))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1407))+((x1406*x1410))+(((-1.0)*r12*x1415))+(((-1.0)*x1409*x1414)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1416=((1.0)*cj5);
CheckValue<IkReal> x1417=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1416)))),-1);
if(!x1417.valid){
continue;
}
CheckValue<IkReal> x1418 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1416)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1418.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1417.value)))+(x1418.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1419=IKsin(j4);
IkReal x1420=IKcos(j4);
IkReal x1421=((1.0)*sj0);
IkReal x1422=(cj5*r00);
IkReal x1423=(r11*sj5);
IkReal x1424=(cj5*r10);
IkReal x1425=(r21*sj5);
IkReal x1426=(cj5*r20);
IkReal x1427=(r01*sj5);
IkReal x1428=((1.0)*x1420);
IkReal x1429=((1.0)*x1419);
evalcond[0]=((((-1.0)*x1426*x1429))+((x1419*x1425))+(((-1.0)*r22*x1428)));
evalcond[1]=(((x1420*x1426))+(((-1.0)*x1425*x1428))+(((-1.0)*r22*x1429)));
evalcond[2]=(cj0+(((-1.0)*x1424*x1429))+(((-1.0)*r12*x1428))+((x1419*x1423)));
evalcond[3]=((((-1.0)*x1422*x1429))+((x1419*x1427))+(((-1.0)*r02*x1428))+(((-1.0)*x1421)));
evalcond[4]=(((x1420*x1422))+(((-1.0)*x1427*x1428))+(((-1.0)*r02*x1429))+(((-1.0)*cj0)));
evalcond[5]=(((x1420*x1424))+(((-1.0)*x1423*x1428))+(((-1.0)*r12*x1429))+(((-1.0)*x1421)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((3.1813499876136)*py))+(((-1.7080198703991)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((3.1813499876136)*px))+(((1.7080198703991)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((3.1813499876136)*py))+(((-1.7080198703991)*px))))+IKsqr(((((3.1813499876136)*px))+(((1.7080198703991)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((3.1813499876136)*py))+(((-1.7080198703991)*px))), ((((3.1813499876136)*px))+(((1.7080198703991)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1430=IKsin(j0);
IkReal x1431=IKcos(j0);
evalcond[0]=((((0.244)*x1431))+(((-1.0)*px))+(((-0.131)*x1430)));
evalcond[1]=((((0.131)*x1431))+(((0.244)*x1430))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1432=((1.0)*cj5);
IkReal x1433=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1432)));
j4eval[0]=x1433;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1432)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1433);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1434=cj5*cj5;
IkReal x1435=((1.0)*r21);
IkReal x1436=(cj5*sj5);
IkReal x1437=((1.0)*r20);
IkReal x1438=((((-1.0)*r00*x1435*x1436))+((r01*r21))+(((-1.0)*r01*x1436*x1437))+((r00*r20*x1434))+((r02*r22))+(((-1.0)*r01*x1434*x1435)));
j4eval[0]=x1438;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1437)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1438);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1439=cj5*cj5;
IkReal x1440=(r21*sj5);
IkReal x1441=(r11*r21);
IkReal x1442=((1.0)*cj5*r20);
IkReal x1443=(((r10*r20*x1439))+((r12*r22))+(((-1.0)*x1439*x1441))+x1441+(((-1.0)*cj5*r10*x1440))+(((-1.0)*r11*sj5*x1442)));
j4eval[0]=x1443;
j4eval[1]=((IKabs((((sj0*x1440))+(((-1.0)*sj0*x1442)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1443);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1444=cj5*cj5;
IkReal x1445=(r21*sj5);
IkReal x1446=(r11*r21);
IkReal x1447=((1.0)*cj5*r20);
CheckValue<IkReal> x1448 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x1445))+(((-1.0)*sj0*x1447)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1448.valid){
continue;
}
CheckValue<IkReal> x1449=IKPowWithIntegerCheck(IKsign((((r12*r22))+x1446+(((-1.0)*cj5*r10*x1445))+(((-1.0)*x1444*x1446))+((r10*r20*x1444))+(((-1.0)*r11*sj5*x1447)))),-1);
if(!x1449.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1448.value)+(((1.5707963267949)*(x1449.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1450=IKsin(j4);
IkReal x1451=IKcos(j4);
IkReal x1452=(r11*sj5);
IkReal x1453=(cj5*r00);
IkReal x1454=(cj5*r10);
IkReal x1455=(r21*sj5);
IkReal x1456=(cj5*r20);
IkReal x1457=(r01*sj5);
IkReal x1458=((1.0)*x1451);
IkReal x1459=((1.0)*x1450);
evalcond[0]=((((-1.0)*r22*x1458))+((x1450*x1455))+(((-1.0)*x1456*x1459)));
evalcond[1]=((((-1.0)*r22*x1459))+(((-1.0)*x1455*x1458))+((x1451*x1456)));
evalcond[2]=(cj0+((x1450*x1452))+(((-1.0)*x1454*x1459))+(((-1.0)*r12*x1458)));
evalcond[3]=((((-1.0)*x1457*x1458))+cj0+(((-1.0)*r02*x1459))+((x1451*x1453)));
evalcond[4]=(sj0+(((-1.0)*x1452*x1458))+((x1451*x1454))+(((-1.0)*r12*x1459)));
evalcond[5]=((((-1.0)*sj0))+((x1450*x1457))+(((-1.0)*r02*x1458))+(((-1.0)*x1453*x1459)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1460=cj5*cj5;
IkReal x1461=((1.0)*r21);
IkReal x1462=(cj5*sj5);
IkReal x1463=((1.0)*r20);
CheckValue<IkReal> x1464=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1460*x1461))+(((-1.0)*r01*x1462*x1463))+((r01*r21))+(((-1.0)*r00*x1461*x1462))+((r00*r20*x1460))+((r02*r22)))),-1);
if(!x1464.valid){
continue;
}
CheckValue<IkReal> x1465 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1463)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1465.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1464.value)))+(x1465.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1466=IKsin(j4);
IkReal x1467=IKcos(j4);
IkReal x1468=(r11*sj5);
IkReal x1469=(cj5*r00);
IkReal x1470=(cj5*r10);
IkReal x1471=(r21*sj5);
IkReal x1472=(cj5*r20);
IkReal x1473=(r01*sj5);
IkReal x1474=((1.0)*x1467);
IkReal x1475=((1.0)*x1466);
evalcond[0]=((((-1.0)*r22*x1474))+((x1466*x1471))+(((-1.0)*x1472*x1475)));
evalcond[1]=((((-1.0)*r22*x1475))+(((-1.0)*x1471*x1474))+((x1467*x1472)));
evalcond[2]=((((-1.0)*x1470*x1475))+cj0+(((-1.0)*r12*x1474))+((x1466*x1468)));
evalcond[3]=(cj0+(((-1.0)*r02*x1475))+((x1467*x1469))+(((-1.0)*x1473*x1474)));
evalcond[4]=(sj0+((x1467*x1470))+(((-1.0)*r12*x1475))+(((-1.0)*x1468*x1474)));
evalcond[5]=(((x1466*x1473))+(((-1.0)*sj0))+(((-1.0)*x1469*x1475))+(((-1.0)*r02*x1474)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1476=((1.0)*cj5);
CheckValue<IkReal> x1477=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1476))+(((-1.0)*r00*sj5)))),-1);
if(!x1477.valid){
continue;
}
CheckValue<IkReal> x1478 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1476)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1478.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1477.value)))+(x1478.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1479=IKsin(j4);
IkReal x1480=IKcos(j4);
IkReal x1481=(r11*sj5);
IkReal x1482=(cj5*r00);
IkReal x1483=(cj5*r10);
IkReal x1484=(r21*sj5);
IkReal x1485=(cj5*r20);
IkReal x1486=(r01*sj5);
IkReal x1487=((1.0)*x1480);
IkReal x1488=((1.0)*x1479);
evalcond[0]=((((-1.0)*x1485*x1488))+(((-1.0)*r22*x1487))+((x1479*x1484)));
evalcond[1]=(((x1480*x1485))+(((-1.0)*x1484*x1487))+(((-1.0)*r22*x1488)));
evalcond[2]=(cj0+(((-1.0)*r12*x1487))+(((-1.0)*x1483*x1488))+((x1479*x1481)));
evalcond[3]=(cj0+((x1480*x1482))+(((-1.0)*x1486*x1487))+(((-1.0)*r02*x1488)));
evalcond[4]=(sj0+(((-1.0)*r12*x1488))+(((-1.0)*x1481*x1487))+((x1480*x1483)));
evalcond[5]=((((-1.0)*x1482*x1488))+(((-1.0)*sj0))+(((-1.0)*r02*x1487))+((x1479*x1486)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-7.63358778625954)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((7.63358778625954)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-7.63358778625954)*px))+IKsqr(((7.63358778625954)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-7.63358778625954)*px), ((7.63358778625954)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.131)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.131)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1489=((1.0)*cj5);
IkReal x1490=((((-1.0)*r01*x1489))+(((-1.0)*r00*sj5)));
j4eval[0]=x1490;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1489)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1490);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1491=((1.0)*cj5);
IkReal x1492=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1491)));
j4eval[0]=x1492;
j4eval[1]=((IKabs(((((-1.0)*r20*sj0*x1491))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1492);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1493=cj5*cj5;
IkReal x1494=((1.0)*sj5);
IkReal x1495=(cj5*r20);
IkReal x1496=(r11*r21);
IkReal x1497=(((r10*r20*x1493))+(((-1.0)*x1493*x1496))+(((-1.0)*cj5*r10*r21*x1494))+((r12*r22))+x1496+(((-1.0)*r11*x1494*x1495)));
j4eval[0]=x1497;
j4eval[1]=IKsign(x1497);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x1494))+((cj0*x1495)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1498=cj5*cj5;
IkReal x1499=((1.0)*sj5);
IkReal x1500=(cj5*r20);
IkReal x1501=(r11*r21);
CheckValue<IkReal> x1502 = IKatan2WithCheck(IkReal((((cj0*x1500))+(((-1.0)*cj0*r21*x1499)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1502.valid){
continue;
}
CheckValue<IkReal> x1503=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1498*x1501))+((r10*r20*x1498))+(((-1.0)*cj5*r10*r21*x1499))+(((-1.0)*r11*x1499*x1500))+((r12*r22))+x1501)),-1);
if(!x1503.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1502.value)+(((1.5707963267949)*(x1503.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1504=IKsin(j4);
IkReal x1505=IKcos(j4);
IkReal x1506=((1.0)*sj0);
IkReal x1507=(cj5*r00);
IkReal x1508=(r11*sj5);
IkReal x1509=(cj5*r10);
IkReal x1510=(r21*sj5);
IkReal x1511=(cj5*r20);
IkReal x1512=(r01*sj5);
IkReal x1513=((1.0)*x1505);
IkReal x1514=((1.0)*x1504);
evalcond[0]=((((-1.0)*r22*x1513))+((x1504*x1510))+(((-1.0)*x1511*x1514)));
evalcond[1]=((((-1.0)*r22*x1514))+(((-1.0)*x1510*x1513))+((x1505*x1511)));
evalcond[2]=(cj0+((x1504*x1508))+(((-1.0)*x1509*x1514))+(((-1.0)*r12*x1513)));
evalcond[3]=((((-1.0)*x1506))+((x1504*x1512))+(((-1.0)*x1507*x1514))+(((-1.0)*r02*x1513)));
evalcond[4]=((((-1.0)*r02*x1514))+(((-1.0)*x1512*x1513))+((x1505*x1507))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1506))+((x1505*x1509))+(((-1.0)*x1508*x1513))+(((-1.0)*r12*x1514)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1515=((1.0)*cj5);
CheckValue<IkReal> x1516 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1515)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1516.valid){
continue;
}
CheckValue<IkReal> x1517=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1515)))),-1);
if(!x1517.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1516.value)+(((1.5707963267949)*(x1517.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1518=IKsin(j4);
IkReal x1519=IKcos(j4);
IkReal x1520=((1.0)*sj0);
IkReal x1521=(cj5*r00);
IkReal x1522=(r11*sj5);
IkReal x1523=(cj5*r10);
IkReal x1524=(r21*sj5);
IkReal x1525=(cj5*r20);
IkReal x1526=(r01*sj5);
IkReal x1527=((1.0)*x1519);
IkReal x1528=((1.0)*x1518);
evalcond[0]=((((-1.0)*x1525*x1528))+((x1518*x1524))+(((-1.0)*r22*x1527)));
evalcond[1]=((((-1.0)*x1524*x1527))+((x1519*x1525))+(((-1.0)*r22*x1528)));
evalcond[2]=((((-1.0)*r12*x1527))+cj0+((x1518*x1522))+(((-1.0)*x1523*x1528)));
evalcond[3]=(((x1518*x1526))+(((-1.0)*x1520))+(((-1.0)*r02*x1527))+(((-1.0)*x1521*x1528)));
evalcond[4]=(((x1519*x1521))+(((-1.0)*r02*x1528))+(((-1.0)*x1526*x1527))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1528))+((x1519*x1523))+(((-1.0)*x1520))+(((-1.0)*x1522*x1527)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1529=((1.0)*cj5);
CheckValue<IkReal> x1530 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1529))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1530.valid){
continue;
}
CheckValue<IkReal> x1531=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1529))+(((-1.0)*r00*sj5)))),-1);
if(!x1531.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1530.value)+(((1.5707963267949)*(x1531.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1532=IKsin(j4);
IkReal x1533=IKcos(j4);
IkReal x1534=((1.0)*sj0);
IkReal x1535=(cj5*r00);
IkReal x1536=(r11*sj5);
IkReal x1537=(cj5*r10);
IkReal x1538=(r21*sj5);
IkReal x1539=(cj5*r20);
IkReal x1540=(r01*sj5);
IkReal x1541=((1.0)*x1533);
IkReal x1542=((1.0)*x1532);
evalcond[0]=((((-1.0)*r22*x1541))+((x1532*x1538))+(((-1.0)*x1539*x1542)));
evalcond[1]=((((-1.0)*r22*x1542))+((x1533*x1539))+(((-1.0)*x1538*x1541)));
evalcond[2]=(cj0+((x1532*x1536))+(((-1.0)*x1537*x1542))+(((-1.0)*r12*x1541)));
evalcond[3]=((((-1.0)*x1535*x1542))+(((-1.0)*r02*x1541))+((x1532*x1540))+(((-1.0)*x1534)));
evalcond[4]=((((-1.0)*r02*x1542))+(((-1.0)*x1540*x1541))+((x1533*x1535))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1534))+(((-1.0)*x1536*x1541))+((x1533*x1537))+(((-1.0)*r12*x1542)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-7.63358778625954)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((7.63358778625954)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-7.63358778625954)*px))+IKsqr(((7.63358778625954)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-7.63358778625954)*px), ((7.63358778625954)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.131)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.131)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1543=((1.0)*cj5);
IkReal x1544=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1543)));
j4eval[0]=x1544;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1543)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1544);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1545=cj5*cj5;
IkReal x1546=((1.0)*r21);
IkReal x1547=(cj5*sj5);
IkReal x1548=((1.0)*r20);
IkReal x1549=(((r01*r21))+(((-1.0)*r00*x1546*x1547))+((r00*r20*x1545))+(((-1.0)*r01*x1545*x1546))+((r02*r22))+(((-1.0)*r01*x1547*x1548)));
j4eval[0]=x1549;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1548)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1549);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1550=cj5*cj5;
IkReal x1551=(r21*sj5);
IkReal x1552=(r11*r21);
IkReal x1553=((1.0)*cj5*r20);
IkReal x1554=((((-1.0)*r11*sj5*x1553))+(((-1.0)*x1550*x1552))+(((-1.0)*cj5*r10*x1551))+((r12*r22))+x1552+((r10*r20*x1550)));
j4eval[0]=x1554;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((sj0*x1551))+(((-1.0)*sj0*x1553))))));
j4eval[2]=IKsign(x1554);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1555=cj5*cj5;
IkReal x1556=(r21*sj5);
IkReal x1557=(r11*r21);
IkReal x1558=((1.0)*cj5*r20);
CheckValue<IkReal> x1559 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x1556))+(((-1.0)*sj0*x1558)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1559.valid){
continue;
}
CheckValue<IkReal> x1560=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj5*x1558))+(((-1.0)*x1555*x1557))+(((-1.0)*cj5*r10*x1556))+((r12*r22))+x1557+((r10*r20*x1555)))),-1);
if(!x1560.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1559.value)+(((1.5707963267949)*(x1560.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1561=IKsin(j4);
IkReal x1562=IKcos(j4);
IkReal x1563=(r11*sj5);
IkReal x1564=(cj5*r00);
IkReal x1565=(cj5*r10);
IkReal x1566=(r21*sj5);
IkReal x1567=(cj5*r20);
IkReal x1568=(r01*sj5);
IkReal x1569=((1.0)*x1562);
IkReal x1570=((1.0)*x1561);
evalcond[0]=((((-1.0)*x1567*x1570))+(((-1.0)*r22*x1569))+((x1561*x1566)));
evalcond[1]=((((-1.0)*x1566*x1569))+(((-1.0)*r22*x1570))+((x1562*x1567)));
evalcond[2]=((((-1.0)*x1565*x1570))+cj0+((x1561*x1563))+(((-1.0)*r12*x1569)));
evalcond[3]=((((-1.0)*r02*x1570))+cj0+(((-1.0)*x1568*x1569))+((x1562*x1564)));
evalcond[4]=(sj0+(((-1.0)*x1563*x1569))+((x1562*x1565))+(((-1.0)*r12*x1570)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x1569))+(((-1.0)*x1564*x1570))+((x1561*x1568)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1571=cj5*cj5;
IkReal x1572=((1.0)*r21);
IkReal x1573=(cj5*sj5);
IkReal x1574=((1.0)*r20);
CheckValue<IkReal> x1575=IKPowWithIntegerCheck(IKsign((((r01*r21))+((r00*r20*x1571))+(((-1.0)*r00*x1572*x1573))+(((-1.0)*r01*x1573*x1574))+((r02*r22))+(((-1.0)*r01*x1571*x1572)))),-1);
if(!x1575.valid){
continue;
}
CheckValue<IkReal> x1576 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1574)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1576.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1575.value)))+(x1576.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1577=IKsin(j4);
IkReal x1578=IKcos(j4);
IkReal x1579=(r11*sj5);
IkReal x1580=(cj5*r00);
IkReal x1581=(cj5*r10);
IkReal x1582=(r21*sj5);
IkReal x1583=(cj5*r20);
IkReal x1584=(r01*sj5);
IkReal x1585=((1.0)*x1578);
IkReal x1586=((1.0)*x1577);
evalcond[0]=((((-1.0)*r22*x1585))+((x1577*x1582))+(((-1.0)*x1583*x1586)));
evalcond[1]=((((-1.0)*r22*x1586))+((x1578*x1583))+(((-1.0)*x1582*x1585)));
evalcond[2]=(cj0+((x1577*x1579))+(((-1.0)*x1581*x1586))+(((-1.0)*r12*x1585)));
evalcond[3]=(cj0+(((-1.0)*r02*x1586))+(((-1.0)*x1584*x1585))+((x1578*x1580)));
evalcond[4]=(sj0+(((-1.0)*x1579*x1585))+((x1578*x1581))+(((-1.0)*r12*x1586)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1580*x1586))+(((-1.0)*r02*x1585))+((x1577*x1584)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1587=((1.0)*cj5);
CheckValue<IkReal> x1588 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1587))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1588.valid){
continue;
}
CheckValue<IkReal> x1589=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1587)))),-1);
if(!x1589.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1588.value)+(((1.5707963267949)*(x1589.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1590=IKsin(j4);
IkReal x1591=IKcos(j4);
IkReal x1592=(r11*sj5);
IkReal x1593=(cj5*r00);
IkReal x1594=(cj5*r10);
IkReal x1595=(r21*sj5);
IkReal x1596=(cj5*r20);
IkReal x1597=(r01*sj5);
IkReal x1598=((1.0)*x1591);
IkReal x1599=((1.0)*x1590);
evalcond[0]=(((x1590*x1595))+(((-1.0)*r22*x1598))+(((-1.0)*x1596*x1599)));
evalcond[1]=((((-1.0)*x1595*x1598))+((x1591*x1596))+(((-1.0)*r22*x1599)));
evalcond[2]=(((x1590*x1592))+cj0+(((-1.0)*x1594*x1599))+(((-1.0)*r12*x1598)));
evalcond[3]=(cj0+(((-1.0)*r02*x1599))+((x1591*x1593))+(((-1.0)*x1597*x1598)));
evalcond[4]=(sj0+(((-1.0)*x1592*x1598))+((x1591*x1594))+(((-1.0)*r12*x1599)));
evalcond[5]=((((-1.0)*sj0))+((x1590*x1597))+(((-1.0)*x1593*x1599))+(((-1.0)*r02*x1598)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-3.1813499876136)*py))+(((-1.7080198703991)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-3.1813499876136)*px))+(((1.7080198703991)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.1813499876136)*py))+(((-1.7080198703991)*px))))+IKsqr(((((-3.1813499876136)*px))+(((1.7080198703991)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-3.1813499876136)*py))+(((-1.7080198703991)*px))), ((((-3.1813499876136)*px))+(((1.7080198703991)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1600=IKcos(j0);
IkReal x1601=IKsin(j0);
evalcond[0]=((((-0.131)*x1601))+(((-0.244)*x1600))+(((-1.0)*px)));
evalcond[1]=((((-0.244)*x1601))+(((-1.0)*py))+(((0.131)*x1600)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1602=((1.0)*cj5);
IkReal x1603=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1602)));
j4eval[0]=x1603;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x1602))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1603);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1604=cj5*cj5;
IkReal x1605=((1.0)*r21);
IkReal x1606=(cj5*sj5);
IkReal x1607=((1.0)*r20);
IkReal x1608=(((r00*r20*x1604))+((r01*r21))+((r02*r22))+(((-1.0)*r00*x1605*x1606))+(((-1.0)*r01*x1606*x1607))+(((-1.0)*r01*x1604*x1605)));
j4eval[0]=x1608;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1607)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1608);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1609=cj5*cj5;
IkReal x1610=(r21*sj5);
IkReal x1611=(r11*r21);
IkReal x1612=((1.0)*cj5*r20);
IkReal x1613=(((r10*r20*x1609))+(((-1.0)*x1609*x1611))+x1611+((r12*r22))+(((-1.0)*r11*sj5*x1612))+(((-1.0)*cj5*r10*x1610)));
j4eval[0]=x1613;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x1612))+((sj0*x1610))))));
j4eval[2]=IKsign(x1613);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1614=cj5*cj5;
IkReal x1615=(r21*sj5);
IkReal x1616=(r11*r21);
IkReal x1617=((1.0)*cj5*r20);
CheckValue<IkReal> x1618=IKPowWithIntegerCheck(IKsign((((r10*r20*x1614))+(((-1.0)*x1614*x1616))+x1616+((r12*r22))+(((-1.0)*r11*sj5*x1617))+(((-1.0)*cj5*r10*x1615)))),-1);
if(!x1618.valid){
continue;
}
CheckValue<IkReal> x1619 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1617))+((sj0*x1615)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1619.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1618.value)))+(x1619.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1620=IKsin(j4);
IkReal x1621=IKcos(j4);
IkReal x1622=(r11*sj5);
IkReal x1623=(cj5*r00);
IkReal x1624=(cj5*r10);
IkReal x1625=(r21*sj5);
IkReal x1626=(cj5*r20);
IkReal x1627=(r01*sj5);
IkReal x1628=((1.0)*x1621);
IkReal x1629=((1.0)*x1620);
evalcond[0]=(((x1620*x1625))+(((-1.0)*r22*x1628))+(((-1.0)*x1626*x1629)));
evalcond[1]=((((-1.0)*x1625*x1628))+(((-1.0)*r22*x1629))+((x1621*x1626)));
evalcond[2]=((((-1.0)*r12*x1628))+((x1620*x1622))+cj0+(((-1.0)*x1624*x1629)));
evalcond[3]=(cj0+(((-1.0)*r02*x1629))+(((-1.0)*x1627*x1628))+((x1621*x1623)));
evalcond[4]=((((-1.0)*r12*x1629))+sj0+(((-1.0)*x1622*x1628))+((x1621*x1624)));
evalcond[5]=(((x1620*x1627))+(((-1.0)*sj0))+(((-1.0)*r02*x1628))+(((-1.0)*x1623*x1629)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1630=cj5*cj5;
IkReal x1631=((1.0)*r21);
IkReal x1632=(cj5*sj5);
IkReal x1633=((1.0)*r20);
CheckValue<IkReal> x1634=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1632*x1633))+(((-1.0)*r00*x1631*x1632))+(((-1.0)*r01*x1630*x1631))+((r00*r20*x1630))+((r01*r21))+((r02*r22)))),-1);
if(!x1634.valid){
continue;
}
CheckValue<IkReal> x1635 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1633)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1635.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1634.value)))+(x1635.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1636=IKsin(j4);
IkReal x1637=IKcos(j4);
IkReal x1638=(r11*sj5);
IkReal x1639=(cj5*r00);
IkReal x1640=(cj5*r10);
IkReal x1641=(r21*sj5);
IkReal x1642=(cj5*r20);
IkReal x1643=(r01*sj5);
IkReal x1644=((1.0)*x1637);
IkReal x1645=((1.0)*x1636);
evalcond[0]=(((x1636*x1641))+(((-1.0)*r22*x1644))+(((-1.0)*x1642*x1645)));
evalcond[1]=((((-1.0)*x1641*x1644))+((x1637*x1642))+(((-1.0)*r22*x1645)));
evalcond[2]=(((x1636*x1638))+cj0+(((-1.0)*r12*x1644))+(((-1.0)*x1640*x1645)));
evalcond[3]=(((x1637*x1639))+cj0+(((-1.0)*x1643*x1644))+(((-1.0)*r02*x1645)));
evalcond[4]=(sj0+((x1637*x1640))+(((-1.0)*r12*x1645))+(((-1.0)*x1638*x1644)));
evalcond[5]=(((x1636*x1643))+(((-1.0)*sj0))+(((-1.0)*x1639*x1645))+(((-1.0)*r02*x1644)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1646=((1.0)*cj5);
CheckValue<IkReal> x1647 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1646)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1647.valid){
continue;
}
CheckValue<IkReal> x1648=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1646))+(((-1.0)*r00*sj5)))),-1);
if(!x1648.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1647.value)+(((1.5707963267949)*(x1648.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1649=IKsin(j4);
IkReal x1650=IKcos(j4);
IkReal x1651=(r11*sj5);
IkReal x1652=(cj5*r00);
IkReal x1653=(cj5*r10);
IkReal x1654=(r21*sj5);
IkReal x1655=(cj5*r20);
IkReal x1656=(r01*sj5);
IkReal x1657=((1.0)*x1650);
IkReal x1658=((1.0)*x1649);
evalcond[0]=((((-1.0)*r22*x1657))+(((-1.0)*x1655*x1658))+((x1649*x1654)));
evalcond[1]=(((x1650*x1655))+(((-1.0)*x1654*x1657))+(((-1.0)*r22*x1658)));
evalcond[2]=(cj0+(((-1.0)*x1653*x1658))+(((-1.0)*r12*x1657))+((x1649*x1651)));
evalcond[3]=((((-1.0)*x1656*x1657))+((x1650*x1652))+cj0+(((-1.0)*r02*x1658)));
evalcond[4]=(((x1650*x1653))+sj0+(((-1.0)*r12*x1658))+(((-1.0)*x1651*x1657)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1652*x1658))+((x1649*x1656))+(((-1.0)*r02*x1657)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-3.1813499876136)*py))+(((-1.7080198703991)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-3.1813499876136)*px))+(((1.7080198703991)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.1813499876136)*py))+(((-1.7080198703991)*px))))+IKsqr(((((-3.1813499876136)*px))+(((1.7080198703991)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-3.1813499876136)*py))+(((-1.7080198703991)*px))), ((((-3.1813499876136)*px))+(((1.7080198703991)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1659=IKcos(j0);
IkReal x1660=IKsin(j0);
evalcond[0]=((((-0.244)*x1659))+(((-0.131)*x1660))+(((-1.0)*px)));
evalcond[1]=((((0.131)*x1659))+(((-0.244)*x1660))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1661=((1.0)*cj5);
IkReal x1662=((((-1.0)*r01*x1661))+(((-1.0)*r00*sj5)));
j4eval[0]=x1662;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1661)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1662);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1663=((1.0)*cj5);
IkReal x1664=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1663)));
j4eval[0]=x1664;
j4eval[1]=((IKabs(((((-1.0)*r20*sj0*x1663))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1664);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1665=cj5*cj5;
IkReal x1666=((1.0)*sj5);
IkReal x1667=(cj5*r20);
IkReal x1668=(r11*r21);
IkReal x1669=((((-1.0)*cj5*r10*r21*x1666))+x1668+((r12*r22))+(((-1.0)*x1665*x1668))+(((-1.0)*r11*x1666*x1667))+((r10*r20*x1665)));
j4eval[0]=x1669;
j4eval[1]=IKsign(x1669);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x1666))+((cj0*x1667)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1670=cj5*cj5;
IkReal x1671=((1.0)*sj5);
IkReal x1672=(cj5*r20);
IkReal x1673=(r11*r21);
CheckValue<IkReal> x1674 = IKatan2WithCheck(IkReal((((cj0*x1672))+(((-1.0)*cj0*r21*x1671)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1674.valid){
continue;
}
CheckValue<IkReal> x1675=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1671*x1672))+x1673+((r12*r22))+(((-1.0)*x1670*x1673))+(((-1.0)*cj5*r10*r21*x1671))+((r10*r20*x1670)))),-1);
if(!x1675.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1674.value)+(((1.5707963267949)*(x1675.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1676=IKsin(j4);
IkReal x1677=IKcos(j4);
IkReal x1678=((1.0)*sj0);
IkReal x1679=(cj5*r00);
IkReal x1680=(r11*sj5);
IkReal x1681=(cj5*r10);
IkReal x1682=(r21*sj5);
IkReal x1683=(cj5*r20);
IkReal x1684=(r01*sj5);
IkReal x1685=((1.0)*x1677);
IkReal x1686=((1.0)*x1676);
evalcond[0]=((((-1.0)*x1683*x1686))+((x1676*x1682))+(((-1.0)*r22*x1685)));
evalcond[1]=(((x1677*x1683))+(((-1.0)*x1682*x1685))+(((-1.0)*r22*x1686)));
evalcond[2]=((((-1.0)*r12*x1685))+(((-1.0)*x1681*x1686))+cj0+((x1676*x1680)));
evalcond[3]=(((x1676*x1684))+(((-1.0)*x1679*x1686))+(((-1.0)*r02*x1685))+(((-1.0)*x1678)));
evalcond[4]=((((-1.0)*r02*x1686))+(((-1.0)*cj0))+((x1677*x1679))+(((-1.0)*x1684*x1685)));
evalcond[5]=((((-1.0)*r12*x1686))+((x1677*x1681))+(((-1.0)*x1680*x1685))+(((-1.0)*x1678)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1687=((1.0)*cj5);
CheckValue<IkReal> x1688=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1687))+(((-1.0)*r10*sj5)))),-1);
if(!x1688.valid){
continue;
}
CheckValue<IkReal> x1689 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1687))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1689.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1688.value)))+(x1689.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1690=IKsin(j4);
IkReal x1691=IKcos(j4);
IkReal x1692=((1.0)*sj0);
IkReal x1693=(cj5*r00);
IkReal x1694=(r11*sj5);
IkReal x1695=(cj5*r10);
IkReal x1696=(r21*sj5);
IkReal x1697=(cj5*r20);
IkReal x1698=(r01*sj5);
IkReal x1699=((1.0)*x1691);
IkReal x1700=((1.0)*x1690);
evalcond[0]=(((x1690*x1696))+(((-1.0)*r22*x1699))+(((-1.0)*x1697*x1700)));
evalcond[1]=((((-1.0)*x1696*x1699))+((x1691*x1697))+(((-1.0)*r22*x1700)));
evalcond[2]=(((x1690*x1694))+cj0+(((-1.0)*r12*x1699))+(((-1.0)*x1695*x1700)));
evalcond[3]=(((x1690*x1698))+(((-1.0)*x1692))+(((-1.0)*r02*x1699))+(((-1.0)*x1693*x1700)));
evalcond[4]=((((-1.0)*x1698*x1699))+((x1691*x1693))+(((-1.0)*r02*x1700))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1692))+(((-1.0)*x1694*x1699))+((x1691*x1695))+(((-1.0)*r12*x1700)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1701=((1.0)*cj5);
CheckValue<IkReal> x1702 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1701)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1702.valid){
continue;
}
CheckValue<IkReal> x1703=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1701)))),-1);
if(!x1703.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1702.value)+(((1.5707963267949)*(x1703.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1704=IKsin(j4);
IkReal x1705=IKcos(j4);
IkReal x1706=((1.0)*sj0);
IkReal x1707=(cj5*r00);
IkReal x1708=(r11*sj5);
IkReal x1709=(cj5*r10);
IkReal x1710=(r21*sj5);
IkReal x1711=(cj5*r20);
IkReal x1712=(r01*sj5);
IkReal x1713=((1.0)*x1705);
IkReal x1714=((1.0)*x1704);
evalcond[0]=((((-1.0)*x1711*x1714))+(((-1.0)*r22*x1713))+((x1704*x1710)));
evalcond[1]=((((-1.0)*x1710*x1713))+(((-1.0)*r22*x1714))+((x1705*x1711)));
evalcond[2]=(cj0+(((-1.0)*x1709*x1714))+((x1704*x1708))+(((-1.0)*r12*x1713)));
evalcond[3]=((((-1.0)*x1707*x1714))+(((-1.0)*x1706))+(((-1.0)*r02*x1713))+((x1704*x1712)));
evalcond[4]=((((-1.0)*x1712*x1713))+((x1705*x1707))+(((-1.0)*r02*x1714))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1708*x1713))+(((-1.0)*x1706))+((x1705*x1709))+(((-1.0)*r12*x1714)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-7.63358778625954)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((7.63358778625954)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-7.63358778625954)*px))+IKsqr(((7.63358778625954)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-7.63358778625954)*px), ((7.63358778625954)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.131)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.131)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1715=((1.0)*cj5);
IkReal x1716=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1715)));
j4eval[0]=x1716;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1715)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1716);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1717=cj5*cj5;
IkReal x1718=((1.0)*r21);
IkReal x1719=(cj5*sj5);
IkReal x1720=((1.0)*r20);
IkReal x1721=((((-1.0)*r00*x1718*x1719))+((r00*r20*x1717))+((r01*r21))+(((-1.0)*r01*x1717*x1718))+(((-1.0)*r01*x1719*x1720))+((r02*r22)));
j4eval[0]=x1721;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1720)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1721);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1722=cj5*cj5;
IkReal x1723=(r21*sj5);
IkReal x1724=(r11*r21);
IkReal x1725=((1.0)*cj5*r20);
IkReal x1726=(x1724+(((-1.0)*cj5*r10*x1723))+((r12*r22))+(((-1.0)*x1722*x1724))+(((-1.0)*r11*sj5*x1725))+((r10*r20*x1722)));
j4eval[0]=x1726;
j4eval[1]=((IKabs(((((-1.0)*sj0*x1725))+((sj0*x1723)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1726);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1727=cj5*cj5;
IkReal x1728=(r21*sj5);
IkReal x1729=(r11*r21);
IkReal x1730=((1.0)*cj5*r20);
CheckValue<IkReal> x1731 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1730))+((sj0*x1728)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1731.valid){
continue;
}
CheckValue<IkReal> x1732=IKPowWithIntegerCheck(IKsign((x1729+(((-1.0)*cj5*r10*x1728))+((r12*r22))+(((-1.0)*r11*sj5*x1730))+((r10*r20*x1727))+(((-1.0)*x1727*x1729)))),-1);
if(!x1732.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1731.value)+(((1.5707963267949)*(x1732.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1733=IKsin(j4);
IkReal x1734=IKcos(j4);
IkReal x1735=(r11*sj5);
IkReal x1736=(cj5*r00);
IkReal x1737=(cj5*r10);
IkReal x1738=(r21*sj5);
IkReal x1739=(cj5*r20);
IkReal x1740=(r01*sj5);
IkReal x1741=((1.0)*x1734);
IkReal x1742=((1.0)*x1733);
evalcond[0]=((((-1.0)*r22*x1741))+(((-1.0)*x1739*x1742))+((x1733*x1738)));
evalcond[1]=((((-1.0)*x1738*x1741))+(((-1.0)*r22*x1742))+((x1734*x1739)));
evalcond[2]=((((-1.0)*r12*x1741))+cj0+(((-1.0)*x1737*x1742))+((x1733*x1735)));
evalcond[3]=(cj0+(((-1.0)*x1740*x1741))+((x1734*x1736))+(((-1.0)*r02*x1742)));
evalcond[4]=((((-1.0)*r12*x1742))+sj0+(((-1.0)*x1735*x1741))+((x1734*x1737)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1736*x1742))+((x1733*x1740))+(((-1.0)*r02*x1741)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1743=cj5*cj5;
IkReal x1744=((1.0)*r21);
IkReal x1745=(cj5*sj5);
IkReal x1746=((1.0)*r20);
CheckValue<IkReal> x1747 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1746)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1747.valid){
continue;
}
CheckValue<IkReal> x1748=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x1744*x1745))+((r01*r21))+(((-1.0)*r01*x1745*x1746))+((r00*r20*x1743))+((r02*r22))+(((-1.0)*r01*x1743*x1744)))),-1);
if(!x1748.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1747.value)+(((1.5707963267949)*(x1748.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1749=IKsin(j4);
IkReal x1750=IKcos(j4);
IkReal x1751=(r11*sj5);
IkReal x1752=(cj5*r00);
IkReal x1753=(cj5*r10);
IkReal x1754=(r21*sj5);
IkReal x1755=(cj5*r20);
IkReal x1756=(r01*sj5);
IkReal x1757=((1.0)*x1750);
IkReal x1758=((1.0)*x1749);
evalcond[0]=(((x1749*x1754))+(((-1.0)*r22*x1757))+(((-1.0)*x1755*x1758)));
evalcond[1]=((((-1.0)*r22*x1758))+((x1750*x1755))+(((-1.0)*x1754*x1757)));
evalcond[2]=((((-1.0)*r12*x1757))+((x1749*x1751))+cj0+(((-1.0)*x1753*x1758)));
evalcond[3]=((((-1.0)*x1756*x1757))+cj0+((x1750*x1752))+(((-1.0)*r02*x1758)));
evalcond[4]=(sj0+(((-1.0)*r12*x1758))+((x1750*x1753))+(((-1.0)*x1751*x1757)));
evalcond[5]=((((-1.0)*sj0))+((x1749*x1756))+(((-1.0)*x1752*x1758))+(((-1.0)*r02*x1757)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1759=((1.0)*cj5);
CheckValue<IkReal> x1760 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1759)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1760.valid){
continue;
}
CheckValue<IkReal> x1761=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1759)))),-1);
if(!x1761.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1760.value)+(((1.5707963267949)*(x1761.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1762=IKsin(j4);
IkReal x1763=IKcos(j4);
IkReal x1764=(r11*sj5);
IkReal x1765=(cj5*r00);
IkReal x1766=(cj5*r10);
IkReal x1767=(r21*sj5);
IkReal x1768=(cj5*r20);
IkReal x1769=(r01*sj5);
IkReal x1770=((1.0)*x1763);
IkReal x1771=((1.0)*x1762);
evalcond[0]=(((x1762*x1767))+(((-1.0)*r22*x1770))+(((-1.0)*x1768*x1771)));
evalcond[1]=((((-1.0)*x1767*x1770))+(((-1.0)*r22*x1771))+((x1763*x1768)));
evalcond[2]=(cj0+((x1762*x1764))+(((-1.0)*x1766*x1771))+(((-1.0)*r12*x1770)));
evalcond[3]=(cj0+(((-1.0)*r02*x1771))+(((-1.0)*x1769*x1770))+((x1763*x1765)));
evalcond[4]=(sj0+(((-1.0)*x1764*x1770))+(((-1.0)*r12*x1771))+((x1763*x1766)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x1770))+((x1762*x1769))+(((-1.0)*x1765*x1771)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-7.63358778625954)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((7.63358778625954)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-7.63358778625954)*px))+IKsqr(((7.63358778625954)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-7.63358778625954)*px), ((7.63358778625954)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.131)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.131)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1772=((1.0)*cj5);
IkReal x1773=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1772)));
j4eval[0]=x1773;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1772)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1773);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1774=((1.0)*cj5);
IkReal x1775=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1774)));
j4eval[0]=x1775;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x1774))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x1775);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1776=cj5*cj5;
IkReal x1777=((1.0)*sj5);
IkReal x1778=(cj5*r20);
IkReal x1779=(r11*r21);
IkReal x1780=(x1779+((r12*r22))+((r10*r20*x1776))+(((-1.0)*cj5*r10*r21*x1777))+(((-1.0)*r11*x1777*x1778))+(((-1.0)*x1776*x1779)));
j4eval[0]=x1780;
j4eval[1]=IKsign(x1780);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x1777))+((cj0*x1778)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1781=cj5*cj5;
IkReal x1782=((1.0)*sj5);
IkReal x1783=(cj5*r20);
IkReal x1784=(r11*r21);
CheckValue<IkReal> x1785=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1782*x1783))+x1784+((r10*r20*x1781))+((r12*r22))+(((-1.0)*x1781*x1784))+(((-1.0)*cj5*r10*r21*x1782)))),-1);
if(!x1785.valid){
continue;
}
CheckValue<IkReal> x1786 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x1782))+((cj0*x1783)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1786.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1785.value)))+(x1786.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1787=IKsin(j4);
IkReal x1788=IKcos(j4);
IkReal x1789=((1.0)*sj0);
IkReal x1790=(cj5*r00);
IkReal x1791=(r11*sj5);
IkReal x1792=(cj5*r10);
IkReal x1793=(r21*sj5);
IkReal x1794=(cj5*r20);
IkReal x1795=(r01*sj5);
IkReal x1796=((1.0)*x1788);
IkReal x1797=((1.0)*x1787);
evalcond[0]=((((-1.0)*r22*x1796))+((x1787*x1793))+(((-1.0)*x1794*x1797)));
evalcond[1]=((((-1.0)*r22*x1797))+(((-1.0)*x1793*x1796))+((x1788*x1794)));
evalcond[2]=((((-1.0)*x1792*x1797))+cj0+(((-1.0)*r12*x1796))+((x1787*x1791)));
evalcond[3]=((((-1.0)*x1789))+(((-1.0)*x1790*x1797))+((x1787*x1795))+(((-1.0)*r02*x1796)));
evalcond[4]=((((-1.0)*x1795*x1796))+(((-1.0)*r02*x1797))+((x1788*x1790))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1789))+(((-1.0)*r12*x1797))+((x1788*x1792))+(((-1.0)*x1791*x1796)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1798=((1.0)*cj5);
CheckValue<IkReal> x1799 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1798)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1799.valid){
continue;
}
CheckValue<IkReal> x1800=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1798)))),-1);
if(!x1800.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1799.value)+(((1.5707963267949)*(x1800.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1801=IKsin(j4);
IkReal x1802=IKcos(j4);
IkReal x1803=((1.0)*sj0);
IkReal x1804=(cj5*r00);
IkReal x1805=(r11*sj5);
IkReal x1806=(cj5*r10);
IkReal x1807=(r21*sj5);
IkReal x1808=(cj5*r20);
IkReal x1809=(r01*sj5);
IkReal x1810=((1.0)*x1802);
IkReal x1811=((1.0)*x1801);
evalcond[0]=(((x1801*x1807))+(((-1.0)*x1808*x1811))+(((-1.0)*r22*x1810)));
evalcond[1]=(((x1802*x1808))+(((-1.0)*x1807*x1810))+(((-1.0)*r22*x1811)));
evalcond[2]=(((x1801*x1805))+cj0+(((-1.0)*r12*x1810))+(((-1.0)*x1806*x1811)));
evalcond[3]=(((x1801*x1809))+(((-1.0)*x1804*x1811))+(((-1.0)*r02*x1810))+(((-1.0)*x1803)));
evalcond[4]=(((x1802*x1804))+(((-1.0)*x1809*x1810))+(((-1.0)*r02*x1811))+(((-1.0)*cj0)));
evalcond[5]=(((x1802*x1806))+(((-1.0)*x1805*x1810))+(((-1.0)*x1803))+(((-1.0)*r12*x1811)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1812=((1.0)*cj5);
CheckValue<IkReal> x1813=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1812)))),-1);
if(!x1813.valid){
continue;
}
CheckValue<IkReal> x1814 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1812))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1814.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1813.value)))+(x1814.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1815=IKsin(j4);
IkReal x1816=IKcos(j4);
IkReal x1817=((1.0)*sj0);
IkReal x1818=(cj5*r00);
IkReal x1819=(r11*sj5);
IkReal x1820=(cj5*r10);
IkReal x1821=(r21*sj5);
IkReal x1822=(cj5*r20);
IkReal x1823=(r01*sj5);
IkReal x1824=((1.0)*x1816);
IkReal x1825=((1.0)*x1815);
evalcond[0]=((((-1.0)*r22*x1824))+(((-1.0)*x1822*x1825))+((x1815*x1821)));
evalcond[1]=((((-1.0)*x1821*x1824))+(((-1.0)*r22*x1825))+((x1816*x1822)));
evalcond[2]=(cj0+(((-1.0)*r12*x1824))+((x1815*x1819))+(((-1.0)*x1820*x1825)));
evalcond[3]=((((-1.0)*x1817))+(((-1.0)*x1818*x1825))+(((-1.0)*r02*x1824))+((x1815*x1823)));
evalcond[4]=(((x1816*x1818))+(((-1.0)*x1823*x1824))+(((-1.0)*r02*x1825))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1817))+(((-1.0)*x1819*x1824))+(((-1.0)*r12*x1825))+((x1816*x1820)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1826=(sj1*sj2);
IkReal x1827=(cj5*r01);
IkReal x1828=((128.0)*cj2);
IkReal x1829=(r00*sj5);
IkReal x1830=((1000.0)*px);
IkReal x1831=(cj1*cj2);
IkReal x1832=(cj1*x1829);
CheckValue<IkReal> x1833=IKPowWithIntegerCheck(((((-131.0)*x1831))+(((131.0)*x1826))),-1);
if(!x1833.valid){
continue;
}
CheckValue<IkReal> x1834=IKPowWithIntegerCheck(((((-1.0)*x1831))+x1826),-1);
if(!x1834.valid){
continue;
}
if( IKabs(((x1833.value)*(((((-244.0)*cj1*x1827))+(((-1.0)*x1828*x1832))+(((-1.0)*x1826*x1830))+((x1830*x1831))+(((-244.0)*x1832))+(((-1.0)*cj1*x1827*x1828))+(((128.0)*x1826*x1829))+(((128.0)*x1826*x1827)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1834.value)*(((((-1.0)*x1829))+(((-1.0)*x1827)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1833.value)*(((((-244.0)*cj1*x1827))+(((-1.0)*x1828*x1832))+(((-1.0)*x1826*x1830))+((x1830*x1831))+(((-244.0)*x1832))+(((-1.0)*cj1*x1827*x1828))+(((128.0)*x1826*x1829))+(((128.0)*x1826*x1827))))))+IKsqr(((x1834.value)*(((((-1.0)*x1829))+(((-1.0)*x1827))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1833.value)*(((((-244.0)*cj1*x1827))+(((-1.0)*x1828*x1832))+(((-1.0)*x1826*x1830))+((x1830*x1831))+(((-244.0)*x1832))+(((-1.0)*cj1*x1827*x1828))+(((128.0)*x1826*x1829))+(((128.0)*x1826*x1827))))), ((x1834.value)*(((((-1.0)*x1829))+(((-1.0)*x1827))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1835=IKcos(j0);
IkReal x1836=IKsin(j0);
IkReal x1837=(cj5*r01);
IkReal x1838=(sj1*sj2);
IkReal x1839=((0.085)*sj5);
IkReal x1840=(cj1*cj2);
IkReal x1841=((0.244)*cj1);
IkReal x1842=(cj5*r11);
IkReal x1843=((0.213)*x1835);
IkReal x1844=((0.213)*x1836);
evalcond[0]=(((r00*sj5))+((x1835*x1838))+(((-1.0)*x1835*x1840))+x1837);
evalcond[1]=((((-1.0)*x1836*x1840))+((r10*sj5))+x1842+((x1836*x1838)));
evalcond[2]=((((-1.0)*r00*x1839))+(((-0.131)*x1836))+((x1840*x1843))+(((-1.0)*px))+(((-1.0)*x1838*x1843))+((x1835*x1841))+(((-0.085)*x1837)));
evalcond[3]=(((x1836*x1841))+(((0.131)*x1835))+(((-1.0)*r10*x1839))+((x1840*x1844))+(((-0.085)*x1842))+(((-1.0)*py))+(((-1.0)*x1838*x1844)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1845=((1.0)*cj5);
IkReal x1846=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1845)));
j4eval[0]=x1846;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x1845))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1846);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1847=((1.0)*cj5);
IkReal x1848=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1847)));
j4eval[0]=x1848;
j4eval[1]=((IKabs(((((-1.0)*r20*sj0*x1847))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1848);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1849=((1.0)*sj0);
IkReal x1850=((1.0)*cj0);
IkReal x1851=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x1851;
j4eval[1]=((IKabs(((((-1.0)*r02*x1850))+(((-1.0)*r12*x1849)))))+(IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x1850))+(((-1.0)*r11*sj5*x1849))))));
j4eval[2]=IKsign(x1851);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x1852=((-1.0)*r20);
IkReal x1854 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1854)==0){
continue;
}
IkReal x1853=pow(x1854,-0.5);
CheckValue<IkReal> x1855 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1852),IKFAST_ATAN2_MAGTHRESH);
if(!x1855.valid){
continue;
}
IkReal gconst78=((-1.0)*(x1855.value));
IkReal gconst79=(r21*x1853);
IkReal gconst80=(x1852*x1853);
CheckValue<IkReal> x1856 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1856.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1856.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1857=((-1.0)*r20);
IkReal x1858=x1853;
CheckValue<IkReal> x1860 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1857),IKFAST_ATAN2_MAGTHRESH);
if(!x1860.valid){
continue;
}
IkReal x1859=((-1.0)*(x1860.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1859;
IkReal gconst78=x1859;
IkReal gconst79=(r21*x1858);
IkReal gconst80=(x1857*x1858);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1861=((-1.0)*r20);
IkReal x1862=x1853;
CheckValue<IkReal> x1864 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1861),IKFAST_ATAN2_MAGTHRESH);
if(!x1864.valid){
continue;
}
IkReal x1863=((-1.0)*(x1864.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1863;
IkReal gconst78=x1863;
IkReal gconst79=(r21*x1862);
IkReal gconst80=(x1861*x1862);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1865=((-1.0)*r20);
IkReal x1866=x1853;
CheckValue<IkReal> x1868 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1865),IKFAST_ATAN2_MAGTHRESH);
if(!x1868.valid){
continue;
}
IkReal x1867=((-1.0)*(x1868.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1867;
IkReal gconst78=x1867;
IkReal gconst79=(r21*x1866);
IkReal gconst80=(x1865*x1866);
IkReal x1869=r22*r22;
CheckValue<IkReal> x1872=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x1869))),-1);
if(!x1872.valid){
continue;
}
IkReal x1870=x1872.value;
IkReal x1871=(((x1870*(r20*r20*r20*r20)))+(((2.0)*x1870*(r20*r20)*(r21*r21)))+x1869+((x1870*(r21*r21*r21*r21))));
j4eval[0]=x1871;
j4eval[1]=IKsign(x1871);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1873=(sj1*sj2);
IkReal x1874=(gconst80*r20);
IkReal x1875=(gconst79*r21);
IkReal x1876=(cj1*cj2);
CheckValue<IkReal> x1877=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x1874*x1875))+(x1874*x1874)+(x1875*x1875))),-1);
if(!x1877.valid){
continue;
}
CheckValue<IkReal> x1878 = IKatan2WithCheck(IkReal((((r22*x1873))+(((-1.0)*r22*x1876)))),IkReal((((x1874*x1876))+(((-1.0)*x1873*x1874))+((x1873*x1875))+(((-1.0)*x1875*x1876)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1878.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1877.value)))+(x1878.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1879=IKsin(j4);
IkReal x1880=IKcos(j4);
IkReal x1881=(gconst79*r01);
IkReal x1882=(gconst79*r21);
IkReal x1883=((1.0)*cj2);
IkReal x1884=(gconst79*r11);
IkReal x1885=((1.0)*sj0);
IkReal x1886=(cj1*sj2);
IkReal x1887=((1.0)*x1880);
IkReal x1888=(gconst80*x1880);
IkReal x1889=((1.0)*x1879);
IkReal x1890=(gconst80*x1889);
evalcond[0]=(((x1879*x1882))+(((-1.0)*r22*x1887))+(((-1.0)*r20*x1890)));
evalcond[1]=(((x1879*x1884))+cj0+(((-1.0)*r12*x1887))+(((-1.0)*r10*x1890)));
evalcond[2]=(((x1879*x1881))+(((-1.0)*r02*x1887))+(((-1.0)*r00*x1890))+(((-1.0)*x1885)));
evalcond[3]=((((-1.0)*x1882*x1887))+((r20*x1888))+(((-1.0)*cj1*x1883))+(((-1.0)*r22*x1889))+((sj1*sj2)));
evalcond[4]=((((-1.0)*cj0*sj1*x1883))+(((-1.0)*cj0*x1886))+(((-1.0)*r02*x1889))+((r00*x1888))+(((-1.0)*x1881*x1887)));
evalcond[5]=((((-1.0)*sj0*sj1*x1883))+(((-1.0)*r12*x1889))+((r10*x1888))+(((-1.0)*x1884*x1887))+(((-1.0)*x1885*x1886)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1891=((1.0)*gconst80);
CheckValue<IkReal> x1892 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst79*r21*sj0))+(((-1.0)*r20*sj0*x1891)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1892.valid){
continue;
}
CheckValue<IkReal> x1893=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1891))+(((-1.0)*gconst79*r10)))),-1);
if(!x1893.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1892.value)+(((1.5707963267949)*(x1893.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1894=IKsin(j4);
IkReal x1895=IKcos(j4);
IkReal x1896=(gconst79*r01);
IkReal x1897=(gconst79*r21);
IkReal x1898=((1.0)*cj2);
IkReal x1899=(gconst79*r11);
IkReal x1900=((1.0)*sj0);
IkReal x1901=(cj1*sj2);
IkReal x1902=((1.0)*x1895);
IkReal x1903=(gconst80*x1895);
IkReal x1904=((1.0)*x1894);
IkReal x1905=(gconst80*x1904);
evalcond[0]=((((-1.0)*r22*x1902))+(((-1.0)*r20*x1905))+((x1894*x1897)));
evalcond[1]=(cj0+(((-1.0)*r10*x1905))+(((-1.0)*r12*x1902))+((x1894*x1899)));
evalcond[2]=(((x1894*x1896))+(((-1.0)*r02*x1902))+(((-1.0)*x1900))+(((-1.0)*r00*x1905)));
evalcond[3]=((((-1.0)*cj1*x1898))+(((-1.0)*r22*x1904))+((sj1*sj2))+((r20*x1903))+(((-1.0)*x1897*x1902)));
evalcond[4]=(((r00*x1903))+(((-1.0)*cj0*sj1*x1898))+(((-1.0)*cj0*x1901))+(((-1.0)*x1896*x1902))+(((-1.0)*r02*x1904)));
evalcond[5]=((((-1.0)*x1899*x1902))+(((-1.0)*x1900*x1901))+(((-1.0)*sj0*sj1*x1898))+(((-1.0)*r12*x1904))+((r10*x1903)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1906=((1.0)*gconst80);
CheckValue<IkReal> x1907 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst79*r21))+(((-1.0)*cj0*r20*x1906)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1907.valid){
continue;
}
CheckValue<IkReal> x1908=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst79*r00))+(((-1.0)*r01*x1906)))),-1);
if(!x1908.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1907.value)+(((1.5707963267949)*(x1908.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1909=IKsin(j4);
IkReal x1910=IKcos(j4);
IkReal x1911=(gconst79*r01);
IkReal x1912=(gconst79*r21);
IkReal x1913=((1.0)*cj2);
IkReal x1914=(gconst79*r11);
IkReal x1915=((1.0)*sj0);
IkReal x1916=(cj1*sj2);
IkReal x1917=((1.0)*x1910);
IkReal x1918=(gconst80*x1910);
IkReal x1919=((1.0)*x1909);
IkReal x1920=(gconst80*x1919);
evalcond[0]=((((-1.0)*r22*x1917))+(((-1.0)*r20*x1920))+((x1909*x1912)));
evalcond[1]=(cj0+(((-1.0)*r12*x1917))+((x1909*x1914))+(((-1.0)*r10*x1920)));
evalcond[2]=((((-1.0)*r02*x1917))+(((-1.0)*r00*x1920))+((x1909*x1911))+(((-1.0)*x1915)));
evalcond[3]=((((-1.0)*r22*x1919))+((sj1*sj2))+(((-1.0)*cj1*x1913))+((r20*x1918))+(((-1.0)*x1912*x1917)));
evalcond[4]=((((-1.0)*x1911*x1917))+(((-1.0)*r02*x1919))+((r00*x1918))+(((-1.0)*cj0*sj1*x1913))+(((-1.0)*cj0*x1916)));
evalcond[5]=((((-1.0)*x1914*x1917))+((r10*x1918))+(((-1.0)*r12*x1919))+(((-1.0)*x1915*x1916))+(((-1.0)*sj0*sj1*x1913)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1921=((-1.0)*r21);
IkReal x1923 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1923)==0){
continue;
}
IkReal x1922=pow(x1923,-0.5);
CheckValue<IkReal> x1924 = IKatan2WithCheck(IkReal(x1921),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1924.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x1924.value))));
IkReal gconst82=(x1921*x1922);
IkReal gconst83=((1.0)*r20*x1922);
CheckValue<IkReal> x1925 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1925.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1925.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1926=((-1.0)*r21);
CheckValue<IkReal> x1929 = IKatan2WithCheck(IkReal(x1926),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1929.valid){
continue;
}
IkReal x1927=((1.0)*(x1929.value));
IkReal x1928=x1922;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1927)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1927)));
IkReal gconst82=(x1926*x1928);
IkReal gconst83=((1.0)*r20*x1928);
IkReal x1930=r22*r22;
IkReal x1931=((1.0)*x1930);
CheckValue<IkReal> x1935=IKPowWithIntegerCheck(((-1.0)+x1930),-1);
if(!x1935.valid){
continue;
}
IkReal x1932=x1935.value;
if((((1.0)+(((-1.0)*x1931)))) < -0.00001)
continue;
IkReal x1933=IKsqrt(((1.0)+(((-1.0)*x1931))));
IkReal x1934=(cj0*x1932*x1933);
j4eval[0]=((IKabs((x1934+(((-1.0)*x1931*x1934)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1936=((-1.0)*r21);
CheckValue<IkReal> x1939 = IKatan2WithCheck(IkReal(x1936),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1939.valid){
continue;
}
IkReal x1937=((1.0)*(x1939.value));
IkReal x1938=x1922;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1937)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1937)));
IkReal gconst82=(x1936*x1938);
IkReal gconst83=((1.0)*r20*x1938);
IkReal x1940=r22*r22;
IkReal x1941=((1.0)*x1940);
CheckValue<IkReal> x1945=IKPowWithIntegerCheck(((-1.0)+x1940),-1);
if(!x1945.valid){
continue;
}
IkReal x1942=x1945.value;
if((((1.0)+(((-1.0)*x1941)))) < -0.00001)
continue;
IkReal x1943=IKsqrt(((1.0)+(((-1.0)*x1941))));
IkReal x1944=(sj0*x1942*x1943);
j4eval[0]=((IKabs((x1944+(((-1.0)*x1941*x1944)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x1946=((-1.0)*r21);
CheckValue<IkReal> x1949 = IKatan2WithCheck(IkReal(x1946),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1949.valid){
continue;
}
IkReal x1947=((1.0)*(x1949.value));
IkReal x1948=x1922;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1947)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1947)));
IkReal gconst82=(x1946*x1948);
IkReal gconst83=((1.0)*r20*x1948);
IkReal x1950=r22*r22;
IkReal x1951=(r12*sj0);
IkReal x1952=(cj0*r02);
CheckValue<IkReal> x1956=IKPowWithIntegerCheck(((-1.0)+x1950),-1);
if(!x1956.valid){
continue;
}
IkReal x1953=x1956.value;
if((((1.0)+(((-1.0)*x1950)))) < -0.00001)
continue;
IkReal x1954=IKsqrt(((1.0)+(((-1.0)*x1950))));
IkReal x1955=(r22*x1953*x1954);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x1952))+(((-1.0)*x1951)))))+(IKabs((((x1952*x1955))+((x1951*x1955))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1957=((1.0)*sj0);
IkReal x1958=((1.0)*cj0);
CheckValue<IkReal> x1959=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r20))+(((-1.0)*gconst83*r21)))),-1);
if(!x1959.valid){
continue;
}
CheckValue<IkReal> x1960 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x1958))+(((-1.0)*r12*x1957)))),IkReal(((((-1.0)*gconst82*r01*x1958))+((gconst83*r10*sj0))+(((-1.0)*gconst82*r11*x1957))+((cj0*gconst83*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1960.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1959.value)))+(x1960.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1961=IKsin(j4);
IkReal x1962=IKcos(j4);
IkReal x1963=(gconst82*r11);
IkReal x1964=((1.0)*cj2);
IkReal x1965=((1.0)*sj0);
IkReal x1966=(cj1*sj2);
IkReal x1967=((1.0)*x1962);
IkReal x1968=(gconst83*x1962);
IkReal x1969=(gconst82*x1961);
IkReal x1970=((1.0)*x1961);
evalcond[0]=((((-1.0)*r22*x1967))+((r21*x1969))+(((-1.0)*gconst83*r20*x1970)));
evalcond[1]=(cj0+(((-1.0)*gconst83*r10*x1970))+((x1961*x1963))+(((-1.0)*r12*x1967)));
evalcond[2]=((((-1.0)*r02*x1967))+(((-1.0)*x1965))+((r01*x1969))+(((-1.0)*gconst83*r00*x1970)));
evalcond[3]=((((-1.0)*r22*x1970))+((r20*x1968))+((sj1*sj2))+(((-1.0)*gconst82*r21*x1967))+(((-1.0)*cj1*x1964)));
evalcond[4]=((((-1.0)*cj0*x1966))+(((-1.0)*cj0*sj1*x1964))+(((-1.0)*r02*x1970))+((r00*x1968))+(((-1.0)*gconst82*r01*x1967)));
evalcond[5]=((((-1.0)*sj0*sj1*x1964))+((r10*x1968))+(((-1.0)*x1965*x1966))+(((-1.0)*r12*x1970))+(((-1.0)*x1963*x1967)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1971=((1.0)*gconst83);
CheckValue<IkReal> x1972=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r10))+(((-1.0)*r11*x1971)))),-1);
if(!x1972.valid){
continue;
}
CheckValue<IkReal> x1973 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst82*r21*sj0))+(((-1.0)*r20*sj0*x1971)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1973.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1972.value)))+(x1973.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1974=IKsin(j4);
IkReal x1975=IKcos(j4);
IkReal x1976=(gconst82*r11);
IkReal x1977=((1.0)*cj2);
IkReal x1978=((1.0)*sj0);
IkReal x1979=(cj1*sj2);
IkReal x1980=((1.0)*x1975);
IkReal x1981=(gconst83*x1975);
IkReal x1982=(gconst82*x1974);
IkReal x1983=((1.0)*x1974);
evalcond[0]=(((r21*x1982))+(((-1.0)*gconst83*r20*x1983))+(((-1.0)*r22*x1980)));
evalcond[1]=(cj0+(((-1.0)*r12*x1980))+((x1974*x1976))+(((-1.0)*gconst83*r10*x1983)));
evalcond[2]=((((-1.0)*r02*x1980))+(((-1.0)*gconst83*r00*x1983))+(((-1.0)*x1978))+((r01*x1982)));
evalcond[3]=((((-1.0)*gconst82*r21*x1980))+((sj1*sj2))+(((-1.0)*cj1*x1977))+(((-1.0)*r22*x1983))+((r20*x1981)));
evalcond[4]=((((-1.0)*cj0*x1979))+(((-1.0)*cj0*sj1*x1977))+(((-1.0)*r02*x1983))+(((-1.0)*gconst82*r01*x1980))+((r00*x1981)));
evalcond[5]=((((-1.0)*x1976*x1980))+(((-1.0)*sj0*sj1*x1977))+((r10*x1981))+(((-1.0)*x1978*x1979))+(((-1.0)*r12*x1983)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1984=((1.0)*gconst83);
CheckValue<IkReal> x1985=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r00))+(((-1.0)*r01*x1984)))),-1);
if(!x1985.valid){
continue;
}
CheckValue<IkReal> x1986 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst82*r21))+(((-1.0)*cj0*r20*x1984)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1986.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1985.value)))+(x1986.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1987=IKsin(j4);
IkReal x1988=IKcos(j4);
IkReal x1989=(gconst82*r11);
IkReal x1990=((1.0)*cj2);
IkReal x1991=((1.0)*sj0);
IkReal x1992=(cj1*sj2);
IkReal x1993=((1.0)*x1988);
IkReal x1994=(gconst83*x1988);
IkReal x1995=(gconst82*x1987);
IkReal x1996=((1.0)*x1987);
evalcond[0]=(((r21*x1995))+(((-1.0)*gconst83*r20*x1996))+(((-1.0)*r22*x1993)));
evalcond[1]=((((-1.0)*gconst83*r10*x1996))+((x1987*x1989))+cj0+(((-1.0)*r12*x1993)));
evalcond[2]=((((-1.0)*r02*x1993))+(((-1.0)*x1991))+(((-1.0)*gconst83*r00*x1996))+((r01*x1995)));
evalcond[3]=(((sj1*sj2))+((r20*x1994))+(((-1.0)*r22*x1996))+(((-1.0)*cj1*x1990))+(((-1.0)*gconst82*r21*x1993)));
evalcond[4]=((((-1.0)*gconst82*r01*x1993))+(((-1.0)*cj0*x1992))+(((-1.0)*cj0*sj1*x1990))+(((-1.0)*r02*x1996))+((r00*x1994)));
evalcond[5]=((((-1.0)*sj0*sj1*x1990))+((r10*x1994))+(((-1.0)*x1989*x1993))+(((-1.0)*x1991*x1992))+(((-1.0)*r12*x1996)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1997=((-1.0)*r10);
IkReal x1999 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x1999)==0){
continue;
}
IkReal x1998=pow(x1999,-0.5);
CheckValue<IkReal> x2000 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x1997),IKFAST_ATAN2_MAGTHRESH);
if(!x2000.valid){
continue;
}
IkReal gconst84=((-1.0)*(x2000.value));
IkReal gconst85=(r11*x1998);
IkReal gconst86=(x1997*x1998);
CheckValue<IkReal> x2001 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2001.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2001.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2002=((-1.0)*r10);
IkReal x2003=x1998;
CheckValue<IkReal> x2005 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2002),IKFAST_ATAN2_MAGTHRESH);
if(!x2005.valid){
continue;
}
IkReal x2004=((-1.0)*(x2005.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst85;
cj5=gconst86;
j5=x2004;
IkReal gconst84=x2004;
IkReal gconst85=(r11*x2003);
IkReal gconst86=(x2002*x2003);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2006=((1.0)*sj0);
IkReal x2007=((1.0)*gconst85);
CheckValue<IkReal> x2008 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2006))+(((-1.0)*cj0*r02)))),IkReal((((cj0*gconst86*r00))+(((-1.0)*cj0*r01*x2007))+(((-1.0)*gconst85*r11*x2006))+((gconst86*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2008.valid){
continue;
}
CheckValue<IkReal> x2009=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst86*r21))+(((-1.0)*r20*x2007)))),-1);
if(!x2009.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2008.value)+(((1.5707963267949)*(x2009.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2010=IKsin(j4);
IkReal x2011=IKcos(j4);
IkReal x2012=(gconst85*r21);
IkReal x2013=(gconst86*r00);
IkReal x2014=(gconst86*r10);
IkReal x2015=((1.0)*cj2);
IkReal x2016=(gconst85*r11);
IkReal x2017=(gconst85*r01);
IkReal x2018=((1.0)*sj0);
IkReal x2019=(gconst86*r20);
IkReal x2020=(cj1*sj2);
IkReal x2021=((1.0)*x2011);
IkReal x2022=((1.0)*x2010);
evalcond[0]=((((-1.0)*r22*x2021))+(((-1.0)*x2019*x2022))+((x2010*x2012)));
evalcond[1]=(cj0+(((-1.0)*r12*x2021))+((x2010*x2016))+(((-1.0)*x2014*x2022)));
evalcond[2]=((((-1.0)*x2018))+(((-1.0)*r02*x2021))+(((-1.0)*x2013*x2022))+((x2010*x2017)));
evalcond[3]=((((-1.0)*r22*x2022))+((sj1*sj2))+((x2011*x2019))+(((-1.0)*cj1*x2015))+(((-1.0)*x2012*x2021)));
evalcond[4]=((((-1.0)*cj0*sj1*x2015))+(((-1.0)*r02*x2022))+(((-1.0)*x2017*x2021))+((x2011*x2013))+(((-1.0)*cj0*x2020)));
evalcond[5]=((((-1.0)*x2016*x2021))+(((-1.0)*r12*x2022))+((x2011*x2014))+(((-1.0)*x2018*x2020))+(((-1.0)*sj0*sj1*x2015)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2023=((1.0)*gconst86);
CheckValue<IkReal> x2024 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2023))+((cj0*gconst85*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2024.valid){
continue;
}
CheckValue<IkReal> x2025=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2023))+(((-1.0)*gconst85*r00)))),-1);
if(!x2025.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2024.value)+(((1.5707963267949)*(x2025.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2026=IKsin(j4);
IkReal x2027=IKcos(j4);
IkReal x2028=(gconst85*r21);
IkReal x2029=(gconst86*r00);
IkReal x2030=(gconst86*r10);
IkReal x2031=((1.0)*cj2);
IkReal x2032=(gconst85*r11);
IkReal x2033=(gconst85*r01);
IkReal x2034=((1.0)*sj0);
IkReal x2035=(gconst86*r20);
IkReal x2036=(cj1*sj2);
IkReal x2037=((1.0)*x2027);
IkReal x2038=((1.0)*x2026);
evalcond[0]=((((-1.0)*x2035*x2038))+(((-1.0)*r22*x2037))+((x2026*x2028)));
evalcond[1]=(cj0+((x2026*x2032))+(((-1.0)*r12*x2037))+(((-1.0)*x2030*x2038)));
evalcond[2]=(((x2026*x2033))+(((-1.0)*x2029*x2038))+(((-1.0)*r02*x2037))+(((-1.0)*x2034)));
evalcond[3]=(((x2027*x2035))+(((-1.0)*r22*x2038))+(((-1.0)*cj1*x2031))+((sj1*sj2))+(((-1.0)*x2028*x2037)));
evalcond[4]=((((-1.0)*r02*x2038))+(((-1.0)*cj0*x2036))+(((-1.0)*cj0*sj1*x2031))+((x2027*x2029))+(((-1.0)*x2033*x2037)));
evalcond[5]=(((x2027*x2030))+(((-1.0)*r12*x2038))+(((-1.0)*sj0*sj1*x2031))+(((-1.0)*x2032*x2037))+(((-1.0)*x2034*x2036)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2039=((-1.0)*r11);
IkReal x2041 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2041)==0){
continue;
}
IkReal x2040=pow(x2041,-0.5);
CheckValue<IkReal> x2042 = IKatan2WithCheck(IkReal(x2039),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2042.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x2042.value))));
IkReal gconst88=(x2039*x2040);
IkReal gconst89=((1.0)*r10*x2040);
CheckValue<IkReal> x2043 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2043.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2043.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2044=((-1.0)*r11);
CheckValue<IkReal> x2047 = IKatan2WithCheck(IkReal(x2044),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2047.valid){
continue;
}
IkReal x2045=((1.0)*(x2047.value));
IkReal x2046=x2040;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2045)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2045)));
IkReal gconst88=(x2044*x2046);
IkReal gconst89=((1.0)*r10*x2046);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2048=((-1.0)*r11);
CheckValue<IkReal> x2051 = IKatan2WithCheck(IkReal(x2048),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2051.valid){
continue;
}
IkReal x2049=((1.0)*(x2051.value));
IkReal x2050=x2040;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2049)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2049)));
IkReal gconst88=(x2048*x2050);
IkReal gconst89=((1.0)*r10*x2050);
IkReal x2052=r12*r12;
IkReal x2053=((1.0)*sj0);
IkReal x2054=(cj0*r02);
IkReal x2055=x2040;
j4eval[0]=((IKabs(((((-1.0)*r12*x2053))+(((-1.0)*x2054)))))+(IKabs((((sj0*x2052*x2055))+((r12*x2054*x2055))+(((-1.0)*x2053*x2055))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2056=((-1.0)*r11);
CheckValue<IkReal> x2059 = IKatan2WithCheck(IkReal(x2056),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2059.valid){
continue;
}
IkReal x2057=((1.0)*(x2059.value));
IkReal x2058=x2040;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2057)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2057)));
IkReal gconst88=(x2056*x2058);
IkReal gconst89=((1.0)*r10*x2058);
IkReal x2060=r12*r12;
IkReal x2061=(cj1*cj2*r22);
IkReal x2062=(r22*sj1*sj2);
CheckValue<IkReal> x2066=IKPowWithIntegerCheck(((-1.0)+x2060),-1);
if(!x2066.valid){
continue;
}
IkReal x2063=x2066.value;
if((((1.0)+(((-1.0)*x2060)))) < -0.00001)
continue;
IkReal x2064=IKsqrt(((1.0)+(((-1.0)*x2060))));
IkReal x2065=(r12*x2063*x2064);
j4eval[0]=((IKabs(((((-1.0)*x2062*x2065))+((x2061*x2065)))))+(IKabs((x2062+(((-1.0)*x2061))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2067=(cj1*cj2);
IkReal x2068=(gconst89*r20);
IkReal x2069=(gconst88*r21);
IkReal x2070=(sj1*sj2);
CheckValue<IkReal> x2071 = IKatan2WithCheck(IkReal((((r22*x2070))+(((-1.0)*r22*x2067)))),IkReal((((x2067*x2068))+(((-1.0)*x2067*x2069))+((x2069*x2070))+(((-1.0)*x2068*x2070)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2071.valid){
continue;
}
CheckValue<IkReal> x2072=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x2069*x2069)+(x2068*x2068)+(((-2.0)*x2068*x2069)))),-1);
if(!x2072.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2071.value)+(((1.5707963267949)*(x2072.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2073=IKsin(j4);
IkReal x2074=IKcos(j4);
IkReal x2075=((1.0)*sj0);
IkReal x2076=((1.0)*cj2);
IkReal x2077=(gconst89*r20);
IkReal x2078=(gconst89*r10);
IkReal x2079=(gconst89*r00);
IkReal x2080=(cj1*sj2);
IkReal x2081=((1.0)*x2074);
IkReal x2082=((1.0)*x2073);
IkReal x2083=(gconst88*x2073);
evalcond[0]=((((-1.0)*r22*x2081))+(((-1.0)*x2077*x2082))+((r21*x2083)));
evalcond[1]=(cj0+(((-1.0)*x2078*x2082))+(((-1.0)*r12*x2081))+((r11*x2083)));
evalcond[2]=((((-1.0)*r02*x2081))+(((-1.0)*x2075))+((r01*x2083))+(((-1.0)*x2079*x2082)));
evalcond[3]=((((-1.0)*r22*x2082))+((sj1*sj2))+(((-1.0)*gconst88*r21*x2081))+((x2074*x2077))+(((-1.0)*cj1*x2076)));
evalcond[4]=((((-1.0)*r02*x2082))+(((-1.0)*gconst88*r01*x2081))+(((-1.0)*cj0*x2080))+(((-1.0)*cj0*sj1*x2076))+((x2074*x2079)));
evalcond[5]=((((-1.0)*gconst88*r11*x2081))+(((-1.0)*r12*x2082))+((x2074*x2078))+(((-1.0)*x2075*x2080))+(((-1.0)*cj2*sj1*x2075)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2084=((1.0)*sj0);
IkReal x2085=((1.0)*cj0);
CheckValue<IkReal> x2086 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2085))+(((-1.0)*r12*x2084)))),IkReal(((((-1.0)*gconst88*r11*x2084))+(((-1.0)*gconst88*r01*x2085))+((cj0*gconst89*r00))+((gconst89*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2086.valid){
continue;
}
CheckValue<IkReal> x2087=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst88*r20))+(((-1.0)*gconst89*r21)))),-1);
if(!x2087.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2086.value)+(((1.5707963267949)*(x2087.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2088=IKsin(j4);
IkReal x2089=IKcos(j4);
IkReal x2090=((1.0)*sj0);
IkReal x2091=((1.0)*cj2);
IkReal x2092=(gconst89*r20);
IkReal x2093=(gconst89*r10);
IkReal x2094=(gconst89*r00);
IkReal x2095=(cj1*sj2);
IkReal x2096=((1.0)*x2089);
IkReal x2097=((1.0)*x2088);
IkReal x2098=(gconst88*x2088);
evalcond[0]=((((-1.0)*x2092*x2097))+((r21*x2098))+(((-1.0)*r22*x2096)));
evalcond[1]=(cj0+(((-1.0)*x2093*x2097))+(((-1.0)*r12*x2096))+((r11*x2098)));
evalcond[2]=((((-1.0)*x2090))+(((-1.0)*x2094*x2097))+((r01*x2098))+(((-1.0)*r02*x2096)));
evalcond[3]=((((-1.0)*gconst88*r21*x2096))+((sj1*sj2))+((x2089*x2092))+(((-1.0)*cj1*x2091))+(((-1.0)*r22*x2097)));
evalcond[4]=((((-1.0)*gconst88*r01*x2096))+(((-1.0)*cj0*sj1*x2091))+((x2089*x2094))+(((-1.0)*r02*x2097))+(((-1.0)*cj0*x2095)));
evalcond[5]=((((-1.0)*x2090*x2095))+(((-1.0)*cj2*sj1*x2090))+(((-1.0)*gconst88*r11*x2096))+((x2089*x2093))+(((-1.0)*r12*x2097)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2099=((1.0)*gconst89);
CheckValue<IkReal> x2100=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2099))+(((-1.0)*gconst88*r00)))),-1);
if(!x2100.valid){
continue;
}
CheckValue<IkReal> x2101 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2099))+((cj0*gconst88*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2101.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2100.value)))+(x2101.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2102=IKsin(j4);
IkReal x2103=IKcos(j4);
IkReal x2104=((1.0)*sj0);
IkReal x2105=((1.0)*cj2);
IkReal x2106=(gconst89*r20);
IkReal x2107=(gconst89*r10);
IkReal x2108=(gconst89*r00);
IkReal x2109=(cj1*sj2);
IkReal x2110=((1.0)*x2103);
IkReal x2111=((1.0)*x2102);
IkReal x2112=(gconst88*x2102);
evalcond[0]=(((r21*x2112))+(((-1.0)*r22*x2110))+(((-1.0)*x2106*x2111)));
evalcond[1]=((((-1.0)*x2107*x2111))+cj0+(((-1.0)*r12*x2110))+((r11*x2112)));
evalcond[2]=(((r01*x2112))+(((-1.0)*x2104))+(((-1.0)*x2108*x2111))+(((-1.0)*r02*x2110)));
evalcond[3]=(((x2103*x2106))+(((-1.0)*cj1*x2105))+((sj1*sj2))+(((-1.0)*gconst88*r21*x2110))+(((-1.0)*r22*x2111)));
evalcond[4]=((((-1.0)*cj0*x2109))+((x2103*x2108))+(((-1.0)*r02*x2111))+(((-1.0)*cj0*sj1*x2105))+(((-1.0)*gconst88*r01*x2110)));
evalcond[5]=(((x2103*x2107))+(((-1.0)*gconst88*r11*x2110))+(((-1.0)*r12*x2111))+(((-1.0)*x2104*x2109))+(((-1.0)*cj2*sj1*x2104)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2113=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2113;
j4eval[1]=IKsign(x2113);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2114=((1.0)*cj5);
IkReal x2115=((((-1.0)*r01*x2114))+(((-1.0)*r00*sj5)));
j4eval[0]=x2115;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x2114))+((r21*sj5))))));
j4eval[2]=IKsign(x2115);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2116=cj5*cj5;
IkReal x2117=r11*r11;
IkReal x2118=(r11*sj5);
IkReal x2119=(cj5*r10);
IkReal x2120=((r12*r12)+((x2116*(r10*r10)))+(((-2.0)*x2118*x2119))+x2117+(((-1.0)*x2116*x2117)));
j4eval[0]=x2120;
j4eval[1]=IKsign(x2120);
j4eval[2]=((IKabs(r12))+(IKabs((x2119+(((-1.0)*x2118))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2121=cj5*cj5;
IkReal x2122=r11*r11;
IkReal x2123=(cj5*r10);
IkReal x2124=(r11*sj5);
CheckValue<IkReal> x2125=IKPowWithIntegerCheck(IKsign(((r12*r12)+x2122+(((-1.0)*x2121*x2122))+((x2121*(r10*r10)))+(((-2.0)*x2123*x2124)))),-1);
if(!x2125.valid){
continue;
}
CheckValue<IkReal> x2126 = IKatan2WithCheck(IkReal((x2123+(((-1.0)*x2124)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2126.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2125.value)))+(x2126.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2127=IKsin(j4);
IkReal x2128=IKcos(j4);
IkReal x2129=(cj5*r10);
IkReal x2130=(r01*sj5);
IkReal x2131=((1.0)*cj2);
IkReal x2132=(cj5*r00);
IkReal x2133=(cj5*r20);
IkReal x2134=((1.0)*x2128);
IkReal x2135=((1.0)*x2127);
IkReal x2136=(sj5*x2127);
evalcond[0]=((((-1.0)*r22*x2134))+((r21*x2136))+(((-1.0)*x2133*x2135)));
evalcond[1]=(((x2127*x2130))+(((-1.0)*x2132*x2135))+(((-1.0)*r02*x2134)));
evalcond[2]=((((-1.0)*r12*x2135))+((x2128*x2129))+(((-1.0)*r11*sj5*x2134)));
evalcond[3]=((1.0)+(((-1.0)*r12*x2134))+((r11*x2136))+(((-1.0)*x2129*x2135)));
evalcond[4]=((((-1.0)*r22*x2135))+((sj1*sj2))+(((-1.0)*cj1*x2131))+(((-1.0)*r21*sj5*x2134))+((x2128*x2133)));
evalcond[5]=((((-1.0)*sj1*x2131))+(((-1.0)*cj1*sj2))+((x2128*x2132))+(((-1.0)*x2130*x2134))+(((-1.0)*r02*x2135)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2137=((1.0)*cj5);
CheckValue<IkReal> x2138=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2137))+(((-1.0)*r00*sj5)))),-1);
if(!x2138.valid){
continue;
}
CheckValue<IkReal> x2139 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2137)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2139.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2138.value)))+(x2139.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2140=IKsin(j4);
IkReal x2141=IKcos(j4);
IkReal x2142=(cj5*r10);
IkReal x2143=(r01*sj5);
IkReal x2144=((1.0)*cj2);
IkReal x2145=(cj5*r00);
IkReal x2146=(cj5*r20);
IkReal x2147=((1.0)*x2141);
IkReal x2148=((1.0)*x2140);
IkReal x2149=(sj5*x2140);
evalcond[0]=((((-1.0)*r22*x2147))+((r21*x2149))+(((-1.0)*x2146*x2148)));
evalcond[1]=((((-1.0)*r02*x2147))+((x2140*x2143))+(((-1.0)*x2145*x2148)));
evalcond[2]=((((-1.0)*r11*sj5*x2147))+(((-1.0)*r12*x2148))+((x2141*x2142)));
evalcond[3]=((1.0)+((r11*x2149))+(((-1.0)*x2142*x2148))+(((-1.0)*r12*x2147)));
evalcond[4]=(((sj1*sj2))+((x2141*x2146))+(((-1.0)*r22*x2148))+(((-1.0)*cj1*x2144))+(((-1.0)*r21*sj5*x2147)));
evalcond[5]=((((-1.0)*x2143*x2147))+(((-1.0)*r02*x2148))+(((-1.0)*sj1*x2144))+(((-1.0)*cj1*sj2))+((x2141*x2145)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2150=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2150.valid){
continue;
}
CheckValue<IkReal> x2151 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2151.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2150.value)))+(x2151.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2152=IKsin(j4);
IkReal x2153=IKcos(j4);
IkReal x2154=(cj5*r10);
IkReal x2155=(r01*sj5);
IkReal x2156=((1.0)*cj2);
IkReal x2157=(cj5*r00);
IkReal x2158=(cj5*r20);
IkReal x2159=((1.0)*x2153);
IkReal x2160=((1.0)*x2152);
IkReal x2161=(sj5*x2152);
evalcond[0]=(((r21*x2161))+(((-1.0)*x2158*x2160))+(((-1.0)*r22*x2159)));
evalcond[1]=(((x2152*x2155))+(((-1.0)*r02*x2159))+(((-1.0)*x2157*x2160)));
evalcond[2]=((((-1.0)*r11*sj5*x2159))+(((-1.0)*r12*x2160))+((x2153*x2154)));
evalcond[3]=((1.0)+(((-1.0)*x2154*x2160))+(((-1.0)*r12*x2159))+((r11*x2161)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj1*x2156))+(((-1.0)*r22*x2160))+(((-1.0)*r21*sj5*x2159))+((x2153*x2158)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x2156))+(((-1.0)*x2155*x2159))+((x2153*x2157))+(((-1.0)*r02*x2160)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2162=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2162;
j4eval[1]=IKsign(x2162);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2163=((1.0)*cj5);
IkReal x2164=((((-1.0)*r21*x2163))+(((-1.0)*r20*sj5)));
j4eval[0]=x2164;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x2163))))));
j4eval[2]=IKsign(x2164);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2165=cj5*cj5;
IkReal x2166=r11*r11;
IkReal x2167=(cj5*r10);
IkReal x2168=(r11*sj5);
IkReal x2169=((((-1.0)*x2165*(r10*r10)))+((x2165*x2166))+(((2.0)*x2167*x2168))+(((-1.0)*(r12*r12)))+(((-1.0)*x2166)));
j4eval[0]=x2169;
j4eval[1]=((IKabs(r12))+(IKabs((x2167+(((-1.0)*x2168))))));
j4eval[2]=IKsign(x2169);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2170=cj5*cj5;
IkReal x2171=r11*r11;
IkReal x2172=(cj5*r10);
IkReal x2173=(r11*sj5);
CheckValue<IkReal> x2174=IKPowWithIntegerCheck(IKsign((((x2170*x2171))+(((-1.0)*x2170*(r10*r10)))+(((-1.0)*(r12*r12)))+(((-1.0)*x2171))+(((2.0)*x2172*x2173)))),-1);
if(!x2174.valid){
continue;
}
CheckValue<IkReal> x2175 = IKatan2WithCheck(IkReal((x2172+(((-1.0)*x2173)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2175.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2174.value)))+(x2175.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2176=IKsin(j4);
IkReal x2177=IKcos(j4);
IkReal x2178=(cj5*r10);
IkReal x2179=(r01*sj5);
IkReal x2180=(cj5*r00);
IkReal x2181=(cj5*r20);
IkReal x2182=((1.0)*x2177);
IkReal x2183=((1.0)*x2176);
IkReal x2184=(sj5*x2176);
evalcond[0]=(((r21*x2184))+(((-1.0)*r22*x2182))+(((-1.0)*x2181*x2183)));
evalcond[1]=((((-1.0)*x2180*x2183))+((x2176*x2179))+(((-1.0)*r02*x2182)));
evalcond[2]=((((-1.0)*r11*sj5*x2182))+((x2177*x2178))+(((-1.0)*r12*x2183)));
evalcond[3]=((-1.0)+((r11*x2184))+(((-1.0)*x2178*x2183))+(((-1.0)*r12*x2182)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x2177*x2180))+(((-1.0)*r02*x2183))+(((-1.0)*x2179*x2182)));
evalcond[5]=((((-1.0)*r21*sj5*x2182))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2177*x2181))+(((-1.0)*r22*x2183)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2185=((1.0)*cj5);
CheckValue<IkReal> x2186 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x2185)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2186.valid){
continue;
}
CheckValue<IkReal> x2187=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2185))+(((-1.0)*r20*sj5)))),-1);
if(!x2187.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2186.value)+(((1.5707963267949)*(x2187.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2188=IKsin(j4);
IkReal x2189=IKcos(j4);
IkReal x2190=(cj5*r10);
IkReal x2191=(r01*sj5);
IkReal x2192=(cj5*r00);
IkReal x2193=(cj5*r20);
IkReal x2194=((1.0)*x2189);
IkReal x2195=((1.0)*x2188);
IkReal x2196=(sj5*x2188);
evalcond[0]=((((-1.0)*x2193*x2195))+((r21*x2196))+(((-1.0)*r22*x2194)));
evalcond[1]=((((-1.0)*x2192*x2195))+(((-1.0)*r02*x2194))+((x2188*x2191)));
evalcond[2]=(((x2189*x2190))+(((-1.0)*r12*x2195))+(((-1.0)*r11*sj5*x2194)));
evalcond[3]=((-1.0)+((r11*x2196))+(((-1.0)*r12*x2194))+(((-1.0)*x2190*x2195)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x2191*x2194))+((x2189*x2192))+(((-1.0)*r02*x2195)));
evalcond[5]=((((-1.0)*r21*sj5*x2194))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2189*x2193))+(((-1.0)*r22*x2195)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2197 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2197.valid){
continue;
}
CheckValue<IkReal> x2198=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2198.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2197.value)+(((1.5707963267949)*(x2198.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2199=IKsin(j4);
IkReal x2200=IKcos(j4);
IkReal x2201=(cj5*r10);
IkReal x2202=(r01*sj5);
IkReal x2203=(cj5*r00);
IkReal x2204=(cj5*r20);
IkReal x2205=((1.0)*x2200);
IkReal x2206=((1.0)*x2199);
IkReal x2207=(sj5*x2199);
evalcond[0]=((((-1.0)*x2204*x2206))+(((-1.0)*r22*x2205))+((r21*x2207)));
evalcond[1]=((((-1.0)*x2203*x2206))+((x2199*x2202))+(((-1.0)*r02*x2205)));
evalcond[2]=((((-1.0)*r12*x2206))+((x2200*x2201))+(((-1.0)*r11*sj5*x2205)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x2205))+((r11*x2207))+(((-1.0)*x2201*x2206)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x2200*x2203))+(((-1.0)*x2202*x2205))+(((-1.0)*r02*x2206)));
evalcond[5]=(((x2200*x2204))+(((-1.0)*r22*x2206))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x2205)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2208=((-1.0)*r00);
IkReal x2210 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2210)==0){
continue;
}
IkReal x2209=pow(x2210,-0.5);
CheckValue<IkReal> x2211 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2208),IKFAST_ATAN2_MAGTHRESH);
if(!x2211.valid){
continue;
}
IkReal gconst90=((-1.0)*(x2211.value));
IkReal gconst91=(r01*x2209);
IkReal gconst92=(x2208*x2209);
CheckValue<IkReal> x2212 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2212.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2212.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2213=((-1.0)*r00);
IkReal x2214=x2209;
CheckValue<IkReal> x2216 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2213),IKFAST_ATAN2_MAGTHRESH);
if(!x2216.valid){
continue;
}
IkReal x2215=((-1.0)*(x2216.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst91;
cj5=gconst92;
j5=x2215;
IkReal gconst90=x2215;
IkReal gconst91=(r01*x2214);
IkReal gconst92=(x2213*x2214);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2217=((1.0)*sj0);
IkReal x2218=((1.0)*cj0);
CheckValue<IkReal> x2219 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2217))+(((-1.0)*r02*x2218)))),IkReal((((cj0*gconst92*r00))+(((-1.0)*gconst91*r01*x2218))+((gconst92*r10*sj0))+(((-1.0)*gconst91*r11*x2217)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2219.valid){
continue;
}
CheckValue<IkReal> x2220=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r20))+(((-1.0)*gconst92*r21)))),-1);
if(!x2220.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2219.value)+(((1.5707963267949)*(x2220.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2221=IKsin(j4);
IkReal x2222=IKcos(j4);
IkReal x2223=((1.0)*cj2);
IkReal x2224=(gconst92*r00);
IkReal x2225=(gconst92*r20);
IkReal x2226=((1.0)*sj0);
IkReal x2227=(gconst92*r10);
IkReal x2228=(cj1*sj2);
IkReal x2229=((1.0)*x2222);
IkReal x2230=(gconst91*x2221);
IkReal x2231=((1.0)*x2221);
evalcond[0]=((((-1.0)*x2225*x2231))+((r21*x2230))+(((-1.0)*r22*x2229)));
evalcond[1]=(cj0+(((-1.0)*x2227*x2231))+(((-1.0)*r12*x2229))+((r11*x2230)));
evalcond[2]=((((-1.0)*x2224*x2231))+(((-1.0)*r02*x2229))+(((-1.0)*x2226))+((r01*x2230)));
evalcond[3]=((((-1.0)*gconst91*r21*x2229))+((x2222*x2225))+((sj1*sj2))+(((-1.0)*r22*x2231))+(((-1.0)*cj1*x2223)));
evalcond[4]=(((x2222*x2224))+(((-1.0)*r02*x2231))+(((-1.0)*gconst91*r01*x2229))+(((-1.0)*cj0*x2228))+(((-1.0)*cj0*sj1*x2223)));
evalcond[5]=((((-1.0)*x2226*x2228))+(((-1.0)*sj0*sj1*x2223))+((x2222*x2227))+(((-1.0)*gconst91*r11*x2229))+(((-1.0)*r12*x2231)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2232=((1.0)*gconst92);
CheckValue<IkReal> x2233 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x2232))+((gconst91*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2233.valid){
continue;
}
CheckValue<IkReal> x2234=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r10))+(((-1.0)*r11*x2232)))),-1);
if(!x2234.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2233.value)+(((1.5707963267949)*(x2234.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2235=IKsin(j4);
IkReal x2236=IKcos(j4);
IkReal x2237=((1.0)*cj2);
IkReal x2238=(gconst92*r00);
IkReal x2239=(gconst92*r20);
IkReal x2240=((1.0)*sj0);
IkReal x2241=(gconst92*r10);
IkReal x2242=(cj1*sj2);
IkReal x2243=((1.0)*x2236);
IkReal x2244=(gconst91*x2235);
IkReal x2245=((1.0)*x2235);
evalcond[0]=((((-1.0)*r22*x2243))+(((-1.0)*x2239*x2245))+((r21*x2244)));
evalcond[1]=(cj0+((r11*x2244))+(((-1.0)*x2241*x2245))+(((-1.0)*r12*x2243)));
evalcond[2]=((((-1.0)*r02*x2243))+((r01*x2244))+(((-1.0)*x2240))+(((-1.0)*x2238*x2245)));
evalcond[3]=((((-1.0)*cj1*x2237))+(((-1.0)*r22*x2245))+((x2236*x2239))+((sj1*sj2))+(((-1.0)*gconst91*r21*x2243)));
evalcond[4]=((((-1.0)*r02*x2245))+(((-1.0)*cj0*x2242))+((x2236*x2238))+(((-1.0)*cj0*sj1*x2237))+(((-1.0)*gconst91*r01*x2243)));
evalcond[5]=(((x2236*x2241))+(((-1.0)*sj0*sj1*x2237))+(((-1.0)*gconst91*r11*x2243))+(((-1.0)*x2240*x2242))+(((-1.0)*r12*x2245)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2246=((-1.0)*r01);
IkReal x2248 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2248)==0){
continue;
}
IkReal x2247=pow(x2248,-0.5);
CheckValue<IkReal> x2249 = IKatan2WithCheck(IkReal(x2246),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2249.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x2249.value))));
IkReal gconst94=(x2246*x2247);
IkReal gconst95=((1.0)*r00*x2247);
CheckValue<IkReal> x2250 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2250.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2250.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x2251=((-1.0)*r01);
CheckValue<IkReal> x2254 = IKatan2WithCheck(IkReal(x2251),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2254.valid){
continue;
}
IkReal x2252=((1.0)*(x2254.value));
IkReal x2253=x2247;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2252)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2252)));
IkReal gconst94=(x2251*x2253);
IkReal gconst95=((1.0)*r00*x2253);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2255=((-1.0)*r01);
CheckValue<IkReal> x2258 = IKatan2WithCheck(IkReal(x2255),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2258.valid){
continue;
}
IkReal x2256=((1.0)*(x2258.value));
IkReal x2257=x2247;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2256)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2256)));
IkReal gconst94=(x2255*x2257);
IkReal gconst95=((1.0)*r00*x2257);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2259=((-1.0)*r01);
CheckValue<IkReal> x2262 = IKatan2WithCheck(IkReal(x2259),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2262.valid){
continue;
}
IkReal x2260=((1.0)*(x2262.value));
IkReal x2261=x2247;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2260)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2260)));
IkReal gconst94=(x2259*x2261);
IkReal gconst95=((1.0)*r00*x2261);
IkReal x2263=r02*r02;
IkReal x2264=(r12*sj0);
IkReal x2265=((1.0)*cj0);
IkReal x2266=x2247;
j4eval[0]=((IKabs((((r02*x2264*x2266))+((cj0*x2263*x2266))+(((-1.0)*x2265*x2266)))))+(IKabs(((((-1.0)*r02*x2265))+(((-1.0)*x2264))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2267=((1.0)*sj0);
IkReal x2268=((1.0)*cj0);
CheckValue<IkReal> x2269=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst95*r21))+(((-1.0)*gconst94*r20)))),-1);
if(!x2269.valid){
continue;
}
CheckValue<IkReal> x2270 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2268))+(((-1.0)*r12*x2267)))),IkReal(((((-1.0)*gconst94*r01*x2268))+((gconst95*r10*sj0))+(((-1.0)*gconst94*r11*x2267))+((cj0*gconst95*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2270.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2269.value)))+(x2270.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2271=IKsin(j4);
IkReal x2272=IKcos(j4);
IkReal x2273=(gconst94*r11);
IkReal x2274=((1.0)*cj2);
IkReal x2275=(gconst94*r21);
IkReal x2276=((1.0)*sj0);
IkReal x2277=(gconst94*r01);
IkReal x2278=(cj1*sj2);
IkReal x2279=((1.0)*x2272);
IkReal x2280=(gconst95*x2272);
IkReal x2281=((1.0)*x2271);
IkReal x2282=(gconst95*x2281);
evalcond[0]=((((-1.0)*r22*x2279))+(((-1.0)*r20*x2282))+((x2271*x2275)));
evalcond[1]=(cj0+(((-1.0)*r10*x2282))+(((-1.0)*r12*x2279))+((x2271*x2273)));
evalcond[2]=((((-1.0)*r02*x2279))+(((-1.0)*x2276))+(((-1.0)*r00*x2282))+((x2271*x2277)));
evalcond[3]=((((-1.0)*x2275*x2279))+(((-1.0)*cj1*x2274))+((r20*x2280))+((sj1*sj2))+(((-1.0)*r22*x2281)));
evalcond[4]=((((-1.0)*r02*x2281))+(((-1.0)*cj0*sj1*x2274))+((r00*x2280))+(((-1.0)*cj0*x2278))+(((-1.0)*x2277*x2279)));
evalcond[5]=(((r10*x2280))+(((-1.0)*r12*x2281))+(((-1.0)*x2273*x2279))+(((-1.0)*sj0*sj1*x2274))+(((-1.0)*x2276*x2278)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2283=((1.0)*gconst95);
CheckValue<IkReal> x2284 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst94*r21*sj0))+(((-1.0)*r20*sj0*x2283)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2284.valid){
continue;
}
CheckValue<IkReal> x2285=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r10))+(((-1.0)*r11*x2283)))),-1);
if(!x2285.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2284.value)+(((1.5707963267949)*(x2285.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2286=IKsin(j4);
IkReal x2287=IKcos(j4);
IkReal x2288=(gconst94*r11);
IkReal x2289=((1.0)*cj2);
IkReal x2290=(gconst94*r21);
IkReal x2291=((1.0)*sj0);
IkReal x2292=(gconst94*r01);
IkReal x2293=(cj1*sj2);
IkReal x2294=((1.0)*x2287);
IkReal x2295=(gconst95*x2287);
IkReal x2296=((1.0)*x2286);
IkReal x2297=(gconst95*x2296);
evalcond[0]=(((x2286*x2290))+(((-1.0)*r22*x2294))+(((-1.0)*r20*x2297)));
evalcond[1]=(cj0+(((-1.0)*r12*x2294))+((x2286*x2288))+(((-1.0)*r10*x2297)));
evalcond[2]=((((-1.0)*r00*x2297))+(((-1.0)*r02*x2294))+((x2286*x2292))+(((-1.0)*x2291)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x2289))+((r20*x2295))+(((-1.0)*x2290*x2294))+(((-1.0)*r22*x2296)));
evalcond[4]=((((-1.0)*r02*x2296))+(((-1.0)*x2292*x2294))+(((-1.0)*cj0*sj1*x2289))+(((-1.0)*cj0*x2293))+((r00*x2295)));
evalcond[5]=(((r10*x2295))+(((-1.0)*x2288*x2294))+(((-1.0)*r12*x2296))+(((-1.0)*x2291*x2293))+(((-1.0)*sj0*sj1*x2289)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2298=((1.0)*gconst95);
CheckValue<IkReal> x2299=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r00))+(((-1.0)*r01*x2298)))),-1);
if(!x2299.valid){
continue;
}
CheckValue<IkReal> x2300 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2298))+((cj0*gconst94*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2300.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2299.value)))+(x2300.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2301=IKsin(j4);
IkReal x2302=IKcos(j4);
IkReal x2303=(gconst94*r11);
IkReal x2304=((1.0)*cj2);
IkReal x2305=(gconst94*r21);
IkReal x2306=((1.0)*sj0);
IkReal x2307=(gconst94*r01);
IkReal x2308=(cj1*sj2);
IkReal x2309=((1.0)*x2302);
IkReal x2310=(gconst95*x2302);
IkReal x2311=((1.0)*x2301);
IkReal x2312=(gconst95*x2311);
evalcond[0]=((((-1.0)*r20*x2312))+(((-1.0)*r22*x2309))+((x2301*x2305)));
evalcond[1]=(cj0+(((-1.0)*r10*x2312))+((x2301*x2303))+(((-1.0)*r12*x2309)));
evalcond[2]=((((-1.0)*x2306))+((x2301*x2307))+(((-1.0)*r00*x2312))+(((-1.0)*r02*x2309)));
evalcond[3]=((((-1.0)*r22*x2311))+((sj1*sj2))+(((-1.0)*cj1*x2304))+((r20*x2310))+(((-1.0)*x2305*x2309)));
evalcond[4]=((((-1.0)*cj0*x2308))+(((-1.0)*cj0*sj1*x2304))+((r00*x2310))+(((-1.0)*r02*x2311))+(((-1.0)*x2307*x2309)));
evalcond[5]=((((-1.0)*x2306*x2308))+((r10*x2310))+(((-1.0)*sj0*sj1*x2304))+(((-1.0)*x2303*x2309))+(((-1.0)*r12*x2311)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2313=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2313;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2313);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2314=((1.0)*cj5);
IkReal x2315=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2314)));
j4eval[0]=x2315;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x2314))+((r21*sj5))))));
j4eval[2]=IKsign(x2315);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2316=cj5*cj5;
IkReal x2317=r01*r01;
IkReal x2318=(r01*sj5);
IkReal x2319=(cj5*r00);
IkReal x2320=((((2.0)*x2318*x2319))+(((-1.0)*x2317))+((x2316*x2317))+(((-1.0)*x2316*(r00*r00)))+(((-1.0)*(r02*r02))));
j4eval[0]=x2320;
j4eval[1]=IKsign(x2320);
j4eval[2]=((IKabs(((((-1.0)*x2318))+x2319)))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2321=cj5*cj5;
IkReal x2322=r01*r01;
IkReal x2323=(r01*sj5);
IkReal x2324=(cj5*r00);
CheckValue<IkReal> x2325=IKPowWithIntegerCheck(IKsign(((((2.0)*x2323*x2324))+(((-1.0)*(r02*r02)))+((x2321*x2322))+(((-1.0)*x2321*(r00*r00)))+(((-1.0)*x2322)))),-1);
if(!x2325.valid){
continue;
}
CheckValue<IkReal> x2326 = IKatan2WithCheck(IkReal((x2324+(((-1.0)*x2323)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2326.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2325.value)))+(x2326.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2327=IKsin(j4);
IkReal x2328=IKcos(j4);
IkReal x2329=(cj5*r10);
IkReal x2330=(r01*sj5);
IkReal x2331=((1.0)*cj2);
IkReal x2332=(cj5*r00);
IkReal x2333=(cj5*r20);
IkReal x2334=((1.0)*x2328);
IkReal x2335=((1.0)*x2327);
IkReal x2336=(sj5*x2327);
evalcond[0]=(((r21*x2336))+(((-1.0)*r22*x2334))+(((-1.0)*x2333*x2335)));
evalcond[1]=(((r11*x2336))+(((-1.0)*x2329*x2335))+(((-1.0)*r12*x2334)));
evalcond[2]=((((-1.0)*r02*x2335))+(((-1.0)*x2330*x2334))+((x2328*x2332)));
evalcond[3]=((-1.0)+(((-1.0)*x2332*x2335))+((x2327*x2330))+(((-1.0)*r02*x2334)));
evalcond[4]=((((-1.0)*r22*x2335))+((sj1*sj2))+(((-1.0)*cj1*x2331))+((x2328*x2333))+(((-1.0)*r21*sj5*x2334)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x2334))+(((-1.0)*sj1*x2331))+(((-1.0)*r12*x2335))+((x2328*x2329)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2337=((1.0)*cj5);
CheckValue<IkReal> x2338 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2337)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2338.valid){
continue;
}
CheckValue<IkReal> x2339=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2337)))),-1);
if(!x2339.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2338.value)+(((1.5707963267949)*(x2339.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2340=IKsin(j4);
IkReal x2341=IKcos(j4);
IkReal x2342=(cj5*r10);
IkReal x2343=(r01*sj5);
IkReal x2344=((1.0)*cj2);
IkReal x2345=(cj5*r00);
IkReal x2346=(cj5*r20);
IkReal x2347=((1.0)*x2341);
IkReal x2348=((1.0)*x2340);
IkReal x2349=(sj5*x2340);
evalcond[0]=((((-1.0)*x2346*x2348))+(((-1.0)*r22*x2347))+((r21*x2349)));
evalcond[1]=(((r11*x2349))+(((-1.0)*r12*x2347))+(((-1.0)*x2342*x2348)));
evalcond[2]=(((x2341*x2345))+(((-1.0)*r02*x2348))+(((-1.0)*x2343*x2347)));
evalcond[3]=((-1.0)+(((-1.0)*x2345*x2348))+((x2340*x2343))+(((-1.0)*r02*x2347)));
evalcond[4]=(((x2341*x2346))+((sj1*sj2))+(((-1.0)*cj1*x2344))+(((-1.0)*r22*x2348))+(((-1.0)*r21*sj5*x2347)));
evalcond[5]=(((x2341*x2342))+(((-1.0)*r11*sj5*x2347))+(((-1.0)*sj1*x2344))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x2348)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2350=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2350.valid){
continue;
}
CheckValue<IkReal> x2351 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2351.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2350.value)))+(x2351.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2352=IKsin(j4);
IkReal x2353=IKcos(j4);
IkReal x2354=(cj5*r10);
IkReal x2355=(r01*sj5);
IkReal x2356=((1.0)*cj2);
IkReal x2357=(cj5*r00);
IkReal x2358=(cj5*r20);
IkReal x2359=((1.0)*x2353);
IkReal x2360=((1.0)*x2352);
IkReal x2361=(sj5*x2352);
evalcond[0]=((((-1.0)*x2358*x2360))+(((-1.0)*r22*x2359))+((r21*x2361)));
evalcond[1]=(((r11*x2361))+(((-1.0)*x2354*x2360))+(((-1.0)*r12*x2359)));
evalcond[2]=((((-1.0)*x2355*x2359))+((x2353*x2357))+(((-1.0)*r02*x2360)));
evalcond[3]=((-1.0)+((x2352*x2355))+(((-1.0)*x2357*x2360))+(((-1.0)*r02*x2359)));
evalcond[4]=(((x2353*x2358))+((sj1*sj2))+(((-1.0)*cj1*x2356))+(((-1.0)*r22*x2360))+(((-1.0)*r21*sj5*x2359)));
evalcond[5]=((((-1.0)*r11*sj5*x2359))+((x2353*x2354))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x2356))+(((-1.0)*r12*x2360)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2362=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2362;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2362);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2363=((1.0)*cj5);
IkReal x2364=((((-1.0)*r21*x2363))+(((-1.0)*r20*sj5)));
j4eval[0]=x2364;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x2363))+((r11*sj5))))));
j4eval[2]=IKsign(x2364);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2365=cj5*cj5;
IkReal x2366=r01*r01;
IkReal x2367=(cj5*r00);
IkReal x2368=(r01*sj5);
IkReal x2369=(x2366+(((-1.0)*x2365*x2366))+((x2365*(r00*r00)))+(r02*r02)+(((-2.0)*x2367*x2368)));
j4eval[0]=x2369;
j4eval[1]=((IKabs(r02))+(IKabs((x2367+(((-1.0)*x2368))))));
j4eval[2]=IKsign(x2369);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2370=cj5*cj5;
IkReal x2371=r01*r01;
IkReal x2372=(r01*sj5);
IkReal x2373=(cj5*r00);
CheckValue<IkReal> x2374 = IKatan2WithCheck(IkReal((x2373+(((-1.0)*x2372)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2374.valid){
continue;
}
CheckValue<IkReal> x2375=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2370*x2371))+x2371+(((-2.0)*x2372*x2373))+((x2370*(r00*r00)))+(r02*r02))),-1);
if(!x2375.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2374.value)+(((1.5707963267949)*(x2375.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2376=IKsin(j4);
IkReal x2377=IKcos(j4);
IkReal x2378=(cj5*r10);
IkReal x2379=(r01*sj5);
IkReal x2380=(cj5*r00);
IkReal x2381=(cj5*r20);
IkReal x2382=((1.0)*x2377);
IkReal x2383=((1.0)*x2376);
IkReal x2384=(sj5*x2376);
evalcond[0]=((((-1.0)*x2381*x2383))+(((-1.0)*r22*x2382))+((r21*x2384)));
evalcond[1]=((((-1.0)*r12*x2382))+(((-1.0)*x2378*x2383))+((r11*x2384)));
evalcond[2]=((((-1.0)*r02*x2383))+(((-1.0)*x2379*x2382))+((x2377*x2380)));
evalcond[3]=((1.0)+(((-1.0)*x2380*x2383))+(((-1.0)*r02*x2382))+((x2376*x2379)));
evalcond[4]=((((-1.0)*r12*x2383))+(((-1.0)*r11*sj5*x2382))+((cj2*sj1))+((cj1*sj2))+((x2377*x2378)));
evalcond[5]=((((-1.0)*r21*sj5*x2382))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2383))+((x2377*x2381)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2385=((1.0)*cj5);
CheckValue<IkReal> x2386=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2385))+(((-1.0)*r20*sj5)))),-1);
if(!x2386.valid){
continue;
}
CheckValue<IkReal> x2387 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x2385))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2387.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2386.value)))+(x2387.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2388=IKsin(j4);
IkReal x2389=IKcos(j4);
IkReal x2390=(cj5*r10);
IkReal x2391=(r01*sj5);
IkReal x2392=(cj5*r00);
IkReal x2393=(cj5*r20);
IkReal x2394=((1.0)*x2389);
IkReal x2395=((1.0)*x2388);
IkReal x2396=(sj5*x2388);
evalcond[0]=((((-1.0)*r22*x2394))+((r21*x2396))+(((-1.0)*x2393*x2395)));
evalcond[1]=((((-1.0)*x2390*x2395))+((r11*x2396))+(((-1.0)*r12*x2394)));
evalcond[2]=((((-1.0)*r02*x2395))+(((-1.0)*x2391*x2394))+((x2389*x2392)));
evalcond[3]=((1.0)+(((-1.0)*r02*x2394))+((x2388*x2391))+(((-1.0)*x2392*x2395)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x2389*x2390))+(((-1.0)*r11*sj5*x2394))+(((-1.0)*r12*x2395)));
evalcond[5]=((((-1.0)*r21*sj5*x2394))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2395))+((x2389*x2393)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2397 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2397.valid){
continue;
}
CheckValue<IkReal> x2398=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2398.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2397.value)+(((1.5707963267949)*(x2398.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2399=IKsin(j4);
IkReal x2400=IKcos(j4);
IkReal x2401=(cj5*r10);
IkReal x2402=(r01*sj5);
IkReal x2403=(cj5*r00);
IkReal x2404=(cj5*r20);
IkReal x2405=((1.0)*x2400);
IkReal x2406=((1.0)*x2399);
IkReal x2407=(sj5*x2399);
evalcond[0]=((((-1.0)*x2404*x2406))+((r21*x2407))+(((-1.0)*r22*x2405)));
evalcond[1]=((((-1.0)*x2401*x2406))+((r11*x2407))+(((-1.0)*r12*x2405)));
evalcond[2]=((((-1.0)*r02*x2406))+(((-1.0)*x2402*x2405))+((x2400*x2403)));
evalcond[3]=((1.0)+(((-1.0)*x2403*x2406))+((x2399*x2402))+(((-1.0)*r02*x2405)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x2400*x2401))+(((-1.0)*r11*sj5*x2405))+(((-1.0)*r12*x2406)));
evalcond[5]=((((-1.0)*r21*sj5*x2405))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2400*x2404))+(((-1.0)*r22*x2406)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2408=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2408);
rxp1_1=(px*r21);
rxp1_2=(r11*x2408);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2409=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2409);
rxp1_1=(px*r21);
rxp1_2=(r11*x2409);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2410=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2410);
rxp1_1=(px*r21);
rxp1_2=(r11*x2410);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2413=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x2413.valid){
continue;
}
IkReal x2411=x2413.value;
IkReal x2412=(sj0*x2411);
cj4array[0]=(((cj1*sj2*x2412))+((cj2*sj1*x2412)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2414=IKsin(j4);
IkReal x2415=IKcos(j4);
IkReal x2416=(cj5*r20);
IkReal x2417=(r21*sj5);
IkReal x2418=((1.0)*x2414);
IkReal x2419=((1.0)*x2415);
evalcond[0]=((-1.0)*r02*x2414);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x2419)));
evalcond[2]=((((-1.0)*x2416*x2418))+((x2414*x2417)));
evalcond[3]=((((-1.0)*cj5*r10*x2418))+((r11*sj5*x2414)));
evalcond[4]=((((-1.0)*x2417*x2419))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2415*x2416)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2421=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x2421.valid){
continue;
}
IkReal x2420=x2421.value;
cj4array[0]=(((cj1*cj2*x2420))+(((-1.0)*sj1*sj2*x2420)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2422=IKsin(j4);
IkReal x2423=IKcos(j4);
IkReal x2424=(r11*sj5);
IkReal x2425=((1.0)*sj0);
IkReal x2426=((1.0)*x2423);
IkReal x2427=((1.0)*cj5*x2422);
evalcond[0]=((-1.0)*r02*x2422);
evalcond[1]=((((-1.0)*r02*x2426))+(((-1.0)*x2425)));
evalcond[2]=((((-1.0)*r20*x2427))+((r21*sj5*x2422)));
evalcond[3]=((((-1.0)*r10*x2427))+((x2422*x2424)));
evalcond[4]=((((-1.0)*cj1*sj2*x2425))+((cj5*r10*x2423))+(((-1.0)*x2424*x2426))+(((-1.0)*cj2*sj1*x2425)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2428=IKPowWithIntegerCheck(r02,-1);
if(!x2428.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x2428.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2429=IKsin(j4);
IkReal x2430=IKcos(j4);
IkReal x2431=((1.0)*sj0);
IkReal x2432=(cj5*x2430);
IkReal x2433=(sj5*x2429);
IkReal x2434=((1.0)*sj5*x2430);
IkReal x2435=((1.0)*cj5*x2429);
evalcond[0]=((-1.0)*r02*x2429);
evalcond[1]=(((r21*x2433))+(((-1.0)*r20*x2435)));
evalcond[2]=(((r11*x2433))+(((-1.0)*r10*x2435)));
evalcond[3]=(((r20*x2432))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*x2434)));
evalcond[4]=((((-1.0)*cj1*sj2*x2431))+(((-1.0)*r11*x2434))+((r10*x2432))+(((-1.0)*cj2*sj1*x2431)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2436=((1.0)*sj0);
IkReal x2437=((1.0)*cj0);
CheckValue<IkReal> x2438 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2437))+(((-1.0)*r12*x2436)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x2437))+(((-1.0)*r11*sj5*x2436)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2438.valid){
continue;
}
CheckValue<IkReal> x2439=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x2439.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2438.value)+(((1.5707963267949)*(x2439.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2440=IKsin(j4);
IkReal x2441=IKcos(j4);
IkReal x2442=(cj5*r10);
IkReal x2443=(r01*sj5);
IkReal x2444=((1.0)*cj2);
IkReal x2445=(cj5*r00);
IkReal x2446=((1.0)*sj0);
IkReal x2447=(cj5*r20);
IkReal x2448=(cj1*sj2);
IkReal x2449=((1.0)*x2441);
IkReal x2450=((1.0)*x2440);
IkReal x2451=(sj5*x2440);
evalcond[0]=((((-1.0)*x2447*x2450))+(((-1.0)*r22*x2449))+((r21*x2451)));
evalcond[1]=((((-1.0)*x2442*x2450))+cj0+(((-1.0)*r12*x2449))+((r11*x2451)));
evalcond[2]=(((x2440*x2443))+(((-1.0)*x2445*x2450))+(((-1.0)*x2446))+(((-1.0)*r02*x2449)));
evalcond[3]=((((-1.0)*r21*sj5*x2449))+((sj1*sj2))+(((-1.0)*r22*x2450))+(((-1.0)*cj1*x2444))+((x2441*x2447)));
evalcond[4]=((((-1.0)*x2443*x2449))+(((-1.0)*cj0*x2448))+(((-1.0)*cj0*sj1*x2444))+(((-1.0)*r02*x2450))+((x2441*x2445)));
evalcond[5]=((((-1.0)*r11*sj5*x2449))+(((-1.0)*x2446*x2448))+(((-1.0)*r12*x2450))+((x2441*x2442))+(((-1.0)*sj0*sj1*x2444)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2452=((1.0)*cj5);
CheckValue<IkReal> x2453 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x2452)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2453.valid){
continue;
}
CheckValue<IkReal> x2454=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2452)))),-1);
if(!x2454.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2453.value)+(((1.5707963267949)*(x2454.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2455=IKsin(j4);
IkReal x2456=IKcos(j4);
IkReal x2457=(cj5*r10);
IkReal x2458=(r01*sj5);
IkReal x2459=((1.0)*cj2);
IkReal x2460=(cj5*r00);
IkReal x2461=((1.0)*sj0);
IkReal x2462=(cj5*r20);
IkReal x2463=(cj1*sj2);
IkReal x2464=((1.0)*x2456);
IkReal x2465=((1.0)*x2455);
IkReal x2466=(sj5*x2455);
evalcond[0]=((((-1.0)*r22*x2464))+((r21*x2466))+(((-1.0)*x2462*x2465)));
evalcond[1]=(cj0+(((-1.0)*x2457*x2465))+(((-1.0)*r12*x2464))+((r11*x2466)));
evalcond[2]=((((-1.0)*x2460*x2465))+(((-1.0)*x2461))+((x2455*x2458))+(((-1.0)*r02*x2464)));
evalcond[3]=((((-1.0)*r22*x2465))+((sj1*sj2))+(((-1.0)*r21*sj5*x2464))+((x2456*x2462))+(((-1.0)*cj1*x2459)));
evalcond[4]=((((-1.0)*cj0*x2463))+(((-1.0)*cj0*sj1*x2459))+((x2456*x2460))+(((-1.0)*r02*x2465))+(((-1.0)*x2458*x2464)));
evalcond[5]=((((-1.0)*r11*sj5*x2464))+(((-1.0)*r12*x2465))+((x2456*x2457))+(((-1.0)*sj0*sj1*x2459))+(((-1.0)*x2461*x2463)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2467=((1.0)*cj5);
CheckValue<IkReal> x2468=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2467))+(((-1.0)*r00*sj5)))),-1);
if(!x2468.valid){
continue;
}
CheckValue<IkReal> x2469 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x2467)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2469.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2468.value)))+(x2469.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2470=IKsin(j4);
IkReal x2471=IKcos(j4);
IkReal x2472=(cj5*r10);
IkReal x2473=(r01*sj5);
IkReal x2474=((1.0)*cj2);
IkReal x2475=(cj5*r00);
IkReal x2476=((1.0)*sj0);
IkReal x2477=(cj5*r20);
IkReal x2478=(cj1*sj2);
IkReal x2479=((1.0)*x2471);
IkReal x2480=((1.0)*x2470);
IkReal x2481=(sj5*x2470);
evalcond[0]=((((-1.0)*x2477*x2480))+(((-1.0)*r22*x2479))+((r21*x2481)));
evalcond[1]=((((-1.0)*r12*x2479))+cj0+((r11*x2481))+(((-1.0)*x2472*x2480)));
evalcond[2]=((((-1.0)*x2476))+(((-1.0)*r02*x2479))+(((-1.0)*x2475*x2480))+((x2470*x2473)));
evalcond[3]=(((x2471*x2477))+(((-1.0)*r22*x2480))+((sj1*sj2))+(((-1.0)*r21*sj5*x2479))+(((-1.0)*cj1*x2474)));
evalcond[4]=(((x2471*x2475))+(((-1.0)*cj0*sj1*x2474))+(((-1.0)*cj0*x2478))+(((-1.0)*x2473*x2479))+(((-1.0)*r02*x2480)));
evalcond[5]=(((x2471*x2472))+(((-1.0)*sj0*sj1*x2474))+(((-1.0)*r11*sj5*x2479))+(((-1.0)*x2476*x2478))+(((-1.0)*r12*x2480)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2482=cj5*cj5;
IkReal x2483=r21*r21;
IkReal x2484=(sj1*sj2);
IkReal x2485=(r21*sj5);
IkReal x2486=(cj1*cj2);
IkReal x2487=(cj5*r20);
CheckValue<IkReal> x2488 = IKatan2WithCheck(IkReal((((r22*x2484))+(((-1.0)*r22*x2486)))),IkReal(((((-1.0)*x2484*x2487))+((x2484*x2485))+(((-1.0)*x2485*x2486))+((x2486*x2487)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2488.valid){
continue;
}
CheckValue<IkReal> x2489=IKPowWithIntegerCheck(IKsign((x2483+((x2482*(r20*r20)))+(r22*r22)+(((-1.0)*x2482*x2483))+(((-2.0)*x2485*x2487)))),-1);
if(!x2489.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2488.value)+(((1.5707963267949)*(x2489.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x2490=IKsin(j4);
IkReal x2491=IKcos(j4);
IkReal x2492=(r21*sj5);
IkReal x2493=(cj5*r20);
IkReal x2494=((1.0)*x2491);
IkReal x2495=((1.0)*x2490);
evalcond[0]=((((-1.0)*x2493*x2495))+((x2490*x2492))+(((-1.0)*r22*x2494)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x2491*x2493))+(((-1.0)*r22*x2495))+(((-1.0)*x2492*x2494)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2496=(cj5*sj4);
IkReal x2497=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+(((-1.0)*r00*x2496))+((r01*x2497)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x2497))+((cj4*r12))+((r10*x2496)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+(((-1.0)*r00*x2496))+((r01*x2497))))+IKsqr(((((-1.0)*r11*x2497))+((cj4*r12))+((r10*x2496))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+(((-1.0)*r00*x2496))+((r01*x2497))), ((((-1.0)*r11*x2497))+((cj4*r12))+((r10*x2496))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x2498=IKcos(j0);
IkReal x2499=IKsin(j0);
IkReal x2500=(cj4*cj5);
IkReal x2501=(cj5*r01);
IkReal x2502=((0.213)*sj1);
IkReal x2503=((1.0)*cj1);
IkReal x2504=(r11*sj5);
IkReal x2505=((0.085)*sj5);
IkReal x2506=((1.0)*sj4);
IkReal x2507=((0.213)*cj1);
IkReal x2508=((1.0)*sj1);
IkReal x2509=((0.244)*cj1);
IkReal x2510=(cj5*r11);
IkReal x2511=((1.0)*cj4);
IkReal x2512=(r01*sj5);
IkReal x2513=(sj2*x2498);
IkReal x2514=(sj2*x2499);
IkReal x2515=(cj2*x2498);
IkReal x2516=(cj2*x2499);
evalcond[0]=(x2498+(((-1.0)*cj5*r10*x2506))+((sj4*x2504))+(((-1.0)*r12*x2511)));
evalcond[1]=((((-1.0)*x2499))+((sj4*x2512))+(((-1.0)*r02*x2511))+(((-1.0)*cj5*r00*x2506)));
evalcond[2]=(((r00*sj5))+x2501+(((-1.0)*x2503*x2515))+((sj1*x2513)));
evalcond[3]=(x2510+((r10*sj5))+(((-1.0)*x2503*x2516))+((sj1*x2514)));
evalcond[4]=((((-1.0)*x2508*x2515))+(((-1.0)*r02*x2506))+(((-1.0)*x2503*x2513))+(((-1.0)*x2511*x2512))+((r00*x2500)));
evalcond[5]=((((-1.0)*x2508*x2516))+(((-1.0)*x2503*x2514))+((r10*x2500))+(((-1.0)*r12*x2506))+(((-1.0)*x2504*x2511)));
evalcond[6]=((((-1.0)*x2502*x2513))+(((-0.085)*x2501))+(((-0.131)*x2499))+(((-1.0)*r00*x2505))+(((-1.0)*px))+((x2507*x2515))+((x2498*x2509)));
evalcond[7]=((((-1.0)*x2502*x2514))+(((-0.085)*x2510))+((x2499*x2509))+(((-1.0)*py))+((x2507*x2516))+(((-1.0)*r10*x2505))+(((0.131)*x2498)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2517=((1.0)*cj5);
IkReal x2518=((1.0)*sj5);
CheckValue<IkReal> x2519 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x2517))+(((-1.0)*r10*x2518)))),IkReal(((((-1.0)*r01*x2517))+(((-1.0)*r00*x2518)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2519.valid){
continue;
}
CheckValue<IkReal> x2520=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj1*cj2))+((sj1*sj2)))),-1);
if(!x2520.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x2519.value)+(((1.5707963267949)*(x2520.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x2521=IKcos(j0);
IkReal x2522=IKsin(j0);
IkReal x2523=(cj5*r01);
IkReal x2524=(sj1*sj2);
IkReal x2525=((0.085)*sj5);
IkReal x2526=(cj1*cj2);
IkReal x2527=((0.244)*cj1);
IkReal x2528=(cj5*r11);
IkReal x2529=((0.213)*x2521);
IkReal x2530=((0.213)*x2522);
evalcond[0]=(((r00*sj5))+x2523+(((-1.0)*x2521*x2526))+((x2521*x2524)));
evalcond[1]=(x2528+((r10*sj5))+((x2522*x2524))+(((-1.0)*x2522*x2526)));
evalcond[2]=((((-1.0)*x2524*x2529))+(((-0.131)*x2522))+(((-1.0)*px))+(((-1.0)*r00*x2525))+(((-0.085)*x2523))+((x2526*x2529))+((x2521*x2527)));
evalcond[3]=(((x2526*x2530))+((x2522*x2527))+(((-1.0)*x2524*x2530))+(((-1.0)*py))+(((-0.085)*x2528))+(((0.131)*x2521))+(((-1.0)*r10*x2525)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2531=((1.0)*cj5);
IkReal x2532=((((-1.0)*r01*x2531))+(((-1.0)*r00*sj5)));
j4eval[0]=x2532;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x2531))))));
j4eval[2]=IKsign(x2532);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2533=((1.0)*cj5);
IkReal x2534=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2533)));
j4eval[0]=x2534;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x2533))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x2534);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2535=((1.0)*sj0);
IkReal x2536=((1.0)*cj0);
IkReal x2537=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x2537;
j4eval[1]=((IKabs(((((-1.0)*r01*sj5*x2536))+(((-1.0)*r11*sj5*x2535))+((cj0*cj5*r00))+((cj5*r10*sj0)))))+(IKabs(((((-1.0)*r02*x2536))+(((-1.0)*r12*x2535))))));
j4eval[2]=IKsign(x2537);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x2538=((-1.0)*r20);
IkReal x2540 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2540)==0){
continue;
}
IkReal x2539=pow(x2540,-0.5);
CheckValue<IkReal> x2541 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2538),IKFAST_ATAN2_MAGTHRESH);
if(!x2541.valid){
continue;
}
IkReal gconst78=((-1.0)*(x2541.value));
IkReal gconst79=(r21*x2539);
IkReal gconst80=(x2538*x2539);
CheckValue<IkReal> x2542 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2542.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2542.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2543=((-1.0)*r20);
IkReal x2544=x2539;
CheckValue<IkReal> x2546 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2543),IKFAST_ATAN2_MAGTHRESH);
if(!x2546.valid){
continue;
}
IkReal x2545=((-1.0)*(x2546.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2545;
IkReal gconst78=x2545;
IkReal gconst79=(r21*x2544);
IkReal gconst80=(x2543*x2544);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2547=((-1.0)*r20);
IkReal x2548=x2539;
CheckValue<IkReal> x2550 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2547),IKFAST_ATAN2_MAGTHRESH);
if(!x2550.valid){
continue;
}
IkReal x2549=((-1.0)*(x2550.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2549;
IkReal gconst78=x2549;
IkReal gconst79=(r21*x2548);
IkReal gconst80=(x2547*x2548);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2551=((-1.0)*r20);
IkReal x2552=x2539;
CheckValue<IkReal> x2554 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2551),IKFAST_ATAN2_MAGTHRESH);
if(!x2554.valid){
continue;
}
IkReal x2553=((-1.0)*(x2554.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2553;
IkReal gconst78=x2553;
IkReal gconst79=(r21*x2552);
IkReal gconst80=(x2551*x2552);
IkReal x2555=r22*r22;
CheckValue<IkReal> x2558=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x2555))),-1);
if(!x2558.valid){
continue;
}
IkReal x2556=x2558.value;
IkReal x2557=(x2555+((x2556*(r20*r20*r20*r20)))+((x2556*(r21*r21*r21*r21)))+(((2.0)*x2556*(r20*r20)*(r21*r21))));
j4eval[0]=x2557;
j4eval[1]=IKsign(x2557);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2559=(sj1*sj2);
IkReal x2560=(gconst80*r20);
IkReal x2561=(gconst79*r21);
IkReal x2562=(cj1*cj2);
CheckValue<IkReal> x2563 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2562))+((r22*x2559)))),IkReal((((x2560*x2562))+((x2559*x2561))+(((-1.0)*x2559*x2560))+(((-1.0)*x2561*x2562)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2563.valid){
continue;
}
CheckValue<IkReal> x2564=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x2560*x2561))+(x2560*x2560)+(x2561*x2561))),-1);
if(!x2564.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2563.value)+(((1.5707963267949)*(x2564.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2565=IKsin(j4);
IkReal x2566=IKcos(j4);
IkReal x2567=(gconst79*r01);
IkReal x2568=(gconst79*r21);
IkReal x2569=((1.0)*cj2);
IkReal x2570=(gconst79*r11);
IkReal x2571=((1.0)*sj0);
IkReal x2572=(cj1*sj2);
IkReal x2573=((1.0)*x2566);
IkReal x2574=(gconst80*x2566);
IkReal x2575=((1.0)*x2565);
IkReal x2576=(gconst80*x2575);
evalcond[0]=(((x2565*x2568))+(((-1.0)*r20*x2576))+(((-1.0)*r22*x2573)));
evalcond[1]=((((-1.0)*r10*x2576))+(((-1.0)*r12*x2573))+cj0+((x2565*x2570)));
evalcond[2]=(((x2565*x2567))+(((-1.0)*x2571))+(((-1.0)*r02*x2573))+(((-1.0)*r00*x2576)));
evalcond[3]=((((-1.0)*cj1*x2569))+(((-1.0)*x2568*x2573))+((sj1*sj2))+((r20*x2574))+(((-1.0)*r22*x2575)));
evalcond[4]=((((-1.0)*x2567*x2573))+(((-1.0)*cj0*x2572))+(((-1.0)*cj0*sj1*x2569))+((r00*x2574))+(((-1.0)*r02*x2575)));
evalcond[5]=(((r10*x2574))+(((-1.0)*r12*x2575))+(((-1.0)*x2571*x2572))+(((-1.0)*x2570*x2573))+(((-1.0)*sj0*sj1*x2569)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2577=((1.0)*gconst80);
CheckValue<IkReal> x2578=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst79*r10))+(((-1.0)*r11*x2577)))),-1);
if(!x2578.valid){
continue;
}
CheckValue<IkReal> x2579 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x2577))+((gconst79*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2579.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2578.value)))+(x2579.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2580=IKsin(j4);
IkReal x2581=IKcos(j4);
IkReal x2582=(gconst79*r01);
IkReal x2583=(gconst79*r21);
IkReal x2584=((1.0)*cj2);
IkReal x2585=(gconst79*r11);
IkReal x2586=((1.0)*sj0);
IkReal x2587=(cj1*sj2);
IkReal x2588=((1.0)*x2581);
IkReal x2589=(gconst80*x2581);
IkReal x2590=((1.0)*x2580);
IkReal x2591=(gconst80*x2590);
evalcond[0]=((((-1.0)*r20*x2591))+((x2580*x2583))+(((-1.0)*r22*x2588)));
evalcond[1]=(cj0+((x2580*x2585))+(((-1.0)*r10*x2591))+(((-1.0)*r12*x2588)));
evalcond[2]=((((-1.0)*r00*x2591))+(((-1.0)*r02*x2588))+((x2580*x2582))+(((-1.0)*x2586)));
evalcond[3]=((((-1.0)*cj1*x2584))+(((-1.0)*r22*x2590))+((r20*x2589))+((sj1*sj2))+(((-1.0)*x2583*x2588)));
evalcond[4]=((((-1.0)*cj0*x2587))+((r00*x2589))+(((-1.0)*r02*x2590))+(((-1.0)*cj0*sj1*x2584))+(((-1.0)*x2582*x2588)));
evalcond[5]=((((-1.0)*x2585*x2588))+(((-1.0)*sj0*sj1*x2584))+((r10*x2589))+(((-1.0)*x2586*x2587))+(((-1.0)*r12*x2590)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2592=((1.0)*gconst80);
CheckValue<IkReal> x2593=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2592))+(((-1.0)*gconst79*r00)))),-1);
if(!x2593.valid){
continue;
}
CheckValue<IkReal> x2594 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst79*r21))+(((-1.0)*cj0*r20*x2592)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2594.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2593.value)))+(x2594.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2595=IKsin(j4);
IkReal x2596=IKcos(j4);
IkReal x2597=(gconst79*r01);
IkReal x2598=(gconst79*r21);
IkReal x2599=((1.0)*cj2);
IkReal x2600=(gconst79*r11);
IkReal x2601=((1.0)*sj0);
IkReal x2602=(cj1*sj2);
IkReal x2603=((1.0)*x2596);
IkReal x2604=(gconst80*x2596);
IkReal x2605=((1.0)*x2595);
IkReal x2606=(gconst80*x2605);
evalcond[0]=((((-1.0)*r22*x2603))+((x2595*x2598))+(((-1.0)*r20*x2606)));
evalcond[1]=(cj0+((x2595*x2600))+(((-1.0)*r10*x2606))+(((-1.0)*r12*x2603)));
evalcond[2]=((((-1.0)*r02*x2603))+((x2595*x2597))+(((-1.0)*x2601))+(((-1.0)*r00*x2606)));
evalcond[3]=((((-1.0)*cj1*x2599))+((r20*x2604))+((sj1*sj2))+(((-1.0)*r22*x2605))+(((-1.0)*x2598*x2603)));
evalcond[4]=((((-1.0)*cj0*x2602))+(((-1.0)*x2597*x2603))+(((-1.0)*r02*x2605))+(((-1.0)*cj0*sj1*x2599))+((r00*x2604)));
evalcond[5]=((((-1.0)*x2601*x2602))+(((-1.0)*x2600*x2603))+(((-1.0)*r12*x2605))+(((-1.0)*sj0*sj1*x2599))+((r10*x2604)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2607=((-1.0)*r21);
IkReal x2609 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2609)==0){
continue;
}
IkReal x2608=pow(x2609,-0.5);
CheckValue<IkReal> x2610 = IKatan2WithCheck(IkReal(x2607),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2610.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x2610.value))));
IkReal gconst82=(x2607*x2608);
IkReal gconst83=((1.0)*r20*x2608);
CheckValue<IkReal> x2611 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2611.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2611.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2612=((-1.0)*r21);
CheckValue<IkReal> x2615 = IKatan2WithCheck(IkReal(x2612),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2615.valid){
continue;
}
IkReal x2613=((1.0)*(x2615.value));
IkReal x2614=x2608;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2613)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2613)));
IkReal gconst82=(x2612*x2614);
IkReal gconst83=((1.0)*r20*x2614);
IkReal x2616=r22*r22;
IkReal x2617=((1.0)*x2616);
CheckValue<IkReal> x2621=IKPowWithIntegerCheck(((-1.0)+x2616),-1);
if(!x2621.valid){
continue;
}
IkReal x2618=x2621.value;
if((((1.0)+(((-1.0)*x2617)))) < -0.00001)
continue;
IkReal x2619=IKsqrt(((1.0)+(((-1.0)*x2617))));
IkReal x2620=(cj0*x2618*x2619);
j4eval[0]=((IKabs(((((-1.0)*x2617*x2620))+x2620)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2622=((-1.0)*r21);
CheckValue<IkReal> x2625 = IKatan2WithCheck(IkReal(x2622),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2625.valid){
continue;
}
IkReal x2623=((1.0)*(x2625.value));
IkReal x2624=x2608;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2623)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2623)));
IkReal gconst82=(x2622*x2624);
IkReal gconst83=((1.0)*r20*x2624);
IkReal x2626=r22*r22;
IkReal x2627=((1.0)*x2626);
CheckValue<IkReal> x2631=IKPowWithIntegerCheck(((-1.0)+x2626),-1);
if(!x2631.valid){
continue;
}
IkReal x2628=x2631.value;
if((((1.0)+(((-1.0)*x2627)))) < -0.00001)
continue;
IkReal x2629=IKsqrt(((1.0)+(((-1.0)*x2627))));
IkReal x2630=(sj0*x2628*x2629);
j4eval[0]=((IKabs((x2630+(((-1.0)*x2627*x2630)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2632=((-1.0)*r21);
CheckValue<IkReal> x2635 = IKatan2WithCheck(IkReal(x2632),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2635.valid){
continue;
}
IkReal x2633=((1.0)*(x2635.value));
IkReal x2634=x2608;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2633)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2633)));
IkReal gconst82=(x2632*x2634);
IkReal gconst83=((1.0)*r20*x2634);
IkReal x2636=r22*r22;
IkReal x2637=(r12*sj0);
IkReal x2638=(cj0*r02);
CheckValue<IkReal> x2642=IKPowWithIntegerCheck(((-1.0)+x2636),-1);
if(!x2642.valid){
continue;
}
IkReal x2639=x2642.value;
if((((1.0)+(((-1.0)*x2636)))) < -0.00001)
continue;
IkReal x2640=IKsqrt(((1.0)+(((-1.0)*x2636))));
IkReal x2641=(r22*x2639*x2640);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs((((x2638*x2641))+((x2637*x2641)))))+(IKabs(((((-1.0)*x2637))+(((-1.0)*x2638))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2643=((1.0)*sj0);
IkReal x2644=((1.0)*cj0);
CheckValue<IkReal> x2645=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r20))+(((-1.0)*gconst83*r21)))),-1);
if(!x2645.valid){
continue;
}
CheckValue<IkReal> x2646 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2643))+(((-1.0)*r02*x2644)))),IkReal(((((-1.0)*gconst82*r11*x2643))+(((-1.0)*gconst82*r01*x2644))+((gconst83*r10*sj0))+((cj0*gconst83*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2646.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2645.value)))+(x2646.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2647=IKsin(j4);
IkReal x2648=IKcos(j4);
IkReal x2649=(gconst82*r11);
IkReal x2650=((1.0)*cj2);
IkReal x2651=((1.0)*sj0);
IkReal x2652=(cj1*sj2);
IkReal x2653=((1.0)*x2648);
IkReal x2654=(gconst83*x2648);
IkReal x2655=(gconst82*x2647);
IkReal x2656=((1.0)*x2647);
evalcond[0]=((((-1.0)*r22*x2653))+(((-1.0)*gconst83*r20*x2656))+((r21*x2655)));
evalcond[1]=(cj0+(((-1.0)*r12*x2653))+(((-1.0)*gconst83*r10*x2656))+((x2647*x2649)));
evalcond[2]=((((-1.0)*r02*x2653))+((r01*x2655))+(((-1.0)*x2651))+(((-1.0)*gconst83*r00*x2656)));
evalcond[3]=((((-1.0)*r22*x2656))+(((-1.0)*cj1*x2650))+((sj1*sj2))+(((-1.0)*gconst82*r21*x2653))+((r20*x2654)));
evalcond[4]=((((-1.0)*r02*x2656))+(((-1.0)*cj0*sj1*x2650))+(((-1.0)*gconst82*r01*x2653))+((r00*x2654))+(((-1.0)*cj0*x2652)));
evalcond[5]=((((-1.0)*x2651*x2652))+(((-1.0)*r12*x2656))+((r10*x2654))+(((-1.0)*sj0*sj1*x2650))+(((-1.0)*x2649*x2653)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2657=((1.0)*gconst83);
CheckValue<IkReal> x2658 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst82*r21*sj0))+(((-1.0)*r20*sj0*x2657)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2658.valid){
continue;
}
CheckValue<IkReal> x2659=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2657))+(((-1.0)*gconst82*r10)))),-1);
if(!x2659.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2658.value)+(((1.5707963267949)*(x2659.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2660=IKsin(j4);
IkReal x2661=IKcos(j4);
IkReal x2662=(gconst82*r11);
IkReal x2663=((1.0)*cj2);
IkReal x2664=((1.0)*sj0);
IkReal x2665=(cj1*sj2);
IkReal x2666=((1.0)*x2661);
IkReal x2667=(gconst83*x2661);
IkReal x2668=(gconst82*x2660);
IkReal x2669=((1.0)*x2660);
evalcond[0]=(((r21*x2668))+(((-1.0)*gconst83*r20*x2669))+(((-1.0)*r22*x2666)));
evalcond[1]=((((-1.0)*r12*x2666))+cj0+(((-1.0)*gconst83*r10*x2669))+((x2660*x2662)));
evalcond[2]=((((-1.0)*r02*x2666))+(((-1.0)*x2664))+((r01*x2668))+(((-1.0)*gconst83*r00*x2669)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x2663))+(((-1.0)*gconst82*r21*x2666))+(((-1.0)*r22*x2669))+((r20*x2667)));
evalcond[4]=((((-1.0)*cj0*x2665))+(((-1.0)*cj0*sj1*x2663))+(((-1.0)*gconst82*r01*x2666))+(((-1.0)*r02*x2669))+((r00*x2667)));
evalcond[5]=((((-1.0)*r12*x2669))+(((-1.0)*sj0*sj1*x2663))+(((-1.0)*x2662*x2666))+((r10*x2667))+(((-1.0)*x2664*x2665)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2670=((1.0)*gconst83);
CheckValue<IkReal> x2671=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2670))+(((-1.0)*gconst82*r00)))),-1);
if(!x2671.valid){
continue;
}
CheckValue<IkReal> x2672 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst82*r21))+(((-1.0)*cj0*r20*x2670)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2672.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2671.value)))+(x2672.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2673=IKsin(j4);
IkReal x2674=IKcos(j4);
IkReal x2675=(gconst82*r11);
IkReal x2676=((1.0)*cj2);
IkReal x2677=((1.0)*sj0);
IkReal x2678=(cj1*sj2);
IkReal x2679=((1.0)*x2674);
IkReal x2680=(gconst83*x2674);
IkReal x2681=(gconst82*x2673);
IkReal x2682=((1.0)*x2673);
evalcond[0]=((((-1.0)*gconst83*r20*x2682))+((r21*x2681))+(((-1.0)*r22*x2679)));
evalcond[1]=((((-1.0)*r12*x2679))+((x2673*x2675))+cj0+(((-1.0)*gconst83*r10*x2682)));
evalcond[2]=(((r01*x2681))+(((-1.0)*gconst83*r00*x2682))+(((-1.0)*r02*x2679))+(((-1.0)*x2677)));
evalcond[3]=((((-1.0)*cj1*x2676))+((sj1*sj2))+(((-1.0)*r22*x2682))+(((-1.0)*gconst82*r21*x2679))+((r20*x2680)));
evalcond[4]=((((-1.0)*cj0*x2678))+(((-1.0)*r02*x2682))+(((-1.0)*cj0*sj1*x2676))+(((-1.0)*gconst82*r01*x2679))+((r00*x2680)));
evalcond[5]=((((-1.0)*r12*x2682))+((r10*x2680))+(((-1.0)*x2675*x2679))+(((-1.0)*sj0*sj1*x2676))+(((-1.0)*x2677*x2678)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2683=((-1.0)*r10);
IkReal x2685 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2685)==0){
continue;
}
IkReal x2684=pow(x2685,-0.5);
CheckValue<IkReal> x2686 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2683),IKFAST_ATAN2_MAGTHRESH);
if(!x2686.valid){
continue;
}
IkReal gconst84=((-1.0)*(x2686.value));
IkReal gconst85=(r11*x2684);
IkReal gconst86=(x2683*x2684);
CheckValue<IkReal> x2687 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2687.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2687.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2688=((-1.0)*r10);
IkReal x2689=x2684;
CheckValue<IkReal> x2691 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2688),IKFAST_ATAN2_MAGTHRESH);
if(!x2691.valid){
continue;
}
IkReal x2690=((-1.0)*(x2691.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst85;
cj5=gconst86;
j5=x2690;
IkReal gconst84=x2690;
IkReal gconst85=(r11*x2689);
IkReal gconst86=(x2688*x2689);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2692=((1.0)*sj0);
IkReal x2693=((1.0)*gconst85);
CheckValue<IkReal> x2694 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x2692)))),IkReal((((cj0*gconst86*r00))+(((-1.0)*gconst85*r11*x2692))+(((-1.0)*cj0*r01*x2693))+((gconst86*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2694.valid){
continue;
}
CheckValue<IkReal> x2695=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst86*r21))+(((-1.0)*r20*x2693)))),-1);
if(!x2695.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2694.value)+(((1.5707963267949)*(x2695.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2696=IKsin(j4);
IkReal x2697=IKcos(j4);
IkReal x2698=(gconst85*r21);
IkReal x2699=(gconst86*r00);
IkReal x2700=(gconst86*r10);
IkReal x2701=((1.0)*cj2);
IkReal x2702=(gconst85*r11);
IkReal x2703=(gconst85*r01);
IkReal x2704=((1.0)*sj0);
IkReal x2705=(gconst86*r20);
IkReal x2706=(cj1*sj2);
IkReal x2707=((1.0)*x2697);
IkReal x2708=((1.0)*x2696);
evalcond[0]=((((-1.0)*r22*x2707))+(((-1.0)*x2705*x2708))+((x2696*x2698)));
evalcond[1]=(cj0+(((-1.0)*r12*x2707))+((x2696*x2702))+(((-1.0)*x2700*x2708)));
evalcond[2]=((((-1.0)*r02*x2707))+(((-1.0)*x2704))+((x2696*x2703))+(((-1.0)*x2699*x2708)));
evalcond[3]=((((-1.0)*r22*x2708))+((sj1*sj2))+((x2697*x2705))+(((-1.0)*cj1*x2701))+(((-1.0)*x2698*x2707)));
evalcond[4]=((((-1.0)*cj0*x2706))+(((-1.0)*r02*x2708))+((x2697*x2699))+(((-1.0)*cj0*sj1*x2701))+(((-1.0)*x2703*x2707)));
evalcond[5]=((((-1.0)*x2702*x2707))+(((-1.0)*r12*x2708))+((x2697*x2700))+(((-1.0)*x2704*x2706))+(((-1.0)*sj0*sj1*x2701)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2709=((1.0)*gconst86);
CheckValue<IkReal> x2710 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2709))+((cj0*gconst85*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2710.valid){
continue;
}
CheckValue<IkReal> x2711=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2709))+(((-1.0)*gconst85*r00)))),-1);
if(!x2711.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2710.value)+(((1.5707963267949)*(x2711.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2712=IKsin(j4);
IkReal x2713=IKcos(j4);
IkReal x2714=(gconst85*r21);
IkReal x2715=(gconst86*r00);
IkReal x2716=(gconst86*r10);
IkReal x2717=((1.0)*cj2);
IkReal x2718=(gconst85*r11);
IkReal x2719=(gconst85*r01);
IkReal x2720=((1.0)*sj0);
IkReal x2721=(gconst86*r20);
IkReal x2722=(cj1*sj2);
IkReal x2723=((1.0)*x2713);
IkReal x2724=((1.0)*x2712);
evalcond[0]=(((x2712*x2714))+(((-1.0)*x2721*x2724))+(((-1.0)*r22*x2723)));
evalcond[1]=(cj0+((x2712*x2718))+(((-1.0)*r12*x2723))+(((-1.0)*x2716*x2724)));
evalcond[2]=(((x2712*x2719))+(((-1.0)*x2715*x2724))+(((-1.0)*x2720))+(((-1.0)*r02*x2723)));
evalcond[3]=(((x2713*x2721))+((sj1*sj2))+(((-1.0)*r22*x2724))+(((-1.0)*x2714*x2723))+(((-1.0)*cj1*x2717)));
evalcond[4]=((((-1.0)*cj0*sj1*x2717))+(((-1.0)*x2719*x2723))+((x2713*x2715))+(((-1.0)*cj0*x2722))+(((-1.0)*r02*x2724)));
evalcond[5]=((((-1.0)*sj0*sj1*x2717))+(((-1.0)*x2718*x2723))+(((-1.0)*x2720*x2722))+(((-1.0)*r12*x2724))+((x2713*x2716)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2725=((-1.0)*r11);
IkReal x2727 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2727)==0){
continue;
}
IkReal x2726=pow(x2727,-0.5);
CheckValue<IkReal> x2728 = IKatan2WithCheck(IkReal(x2725),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2728.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x2728.value))));
IkReal gconst88=(x2725*x2726);
IkReal gconst89=((1.0)*r10*x2726);
CheckValue<IkReal> x2729 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2729.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2729.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2730=((-1.0)*r11);
CheckValue<IkReal> x2733 = IKatan2WithCheck(IkReal(x2730),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2733.valid){
continue;
}
IkReal x2731=((1.0)*(x2733.value));
IkReal x2732=x2726;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2731)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2731)));
IkReal gconst88=(x2730*x2732);
IkReal gconst89=((1.0)*r10*x2732);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2734=((-1.0)*r11);
CheckValue<IkReal> x2737 = IKatan2WithCheck(IkReal(x2734),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2737.valid){
continue;
}
IkReal x2735=((1.0)*(x2737.value));
IkReal x2736=x2726;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2735)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2735)));
IkReal gconst88=(x2734*x2736);
IkReal gconst89=((1.0)*r10*x2736);
IkReal x2738=r12*r12;
IkReal x2739=((1.0)*sj0);
IkReal x2740=(cj0*r02);
IkReal x2741=x2726;
j4eval[0]=((IKabs((((r12*x2740*x2741))+(((-1.0)*x2739*x2741))+((sj0*x2738*x2741)))))+(IKabs(((((-1.0)*r12*x2739))+(((-1.0)*x2740))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2742=((-1.0)*r11);
CheckValue<IkReal> x2745 = IKatan2WithCheck(IkReal(x2742),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2745.valid){
continue;
}
IkReal x2743=((1.0)*(x2745.value));
IkReal x2744=x2726;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2743)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2743)));
IkReal gconst88=(x2742*x2744);
IkReal gconst89=((1.0)*r10*x2744);
IkReal x2746=r12*r12;
IkReal x2747=(cj1*cj2*r22);
IkReal x2748=(r22*sj1*sj2);
CheckValue<IkReal> x2752=IKPowWithIntegerCheck(((-1.0)+x2746),-1);
if(!x2752.valid){
continue;
}
IkReal x2749=x2752.value;
if((((1.0)+(((-1.0)*x2746)))) < -0.00001)
continue;
IkReal x2750=IKsqrt(((1.0)+(((-1.0)*x2746))));
IkReal x2751=(r12*x2749*x2750);
j4eval[0]=((IKabs(((((-1.0)*x2748*x2751))+((x2747*x2751)))))+(IKabs((x2748+(((-1.0)*x2747))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2753=(cj1*cj2);
IkReal x2754=(gconst89*r20);
IkReal x2755=(gconst88*r21);
IkReal x2756=(sj1*sj2);
CheckValue<IkReal> x2757 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2753))+((r22*x2756)))),IkReal((((x2753*x2754))+(((-1.0)*x2754*x2756))+((x2755*x2756))+(((-1.0)*x2753*x2755)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2757.valid){
continue;
}
CheckValue<IkReal> x2758=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x2755*x2755)+(((-2.0)*x2754*x2755))+(x2754*x2754))),-1);
if(!x2758.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2757.value)+(((1.5707963267949)*(x2758.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2759=IKsin(j4);
IkReal x2760=IKcos(j4);
IkReal x2761=((1.0)*sj0);
IkReal x2762=((1.0)*cj2);
IkReal x2763=(gconst89*r20);
IkReal x2764=(gconst89*r10);
IkReal x2765=(gconst89*r00);
IkReal x2766=(cj1*sj2);
IkReal x2767=((1.0)*x2760);
IkReal x2768=((1.0)*x2759);
IkReal x2769=(gconst88*x2759);
evalcond[0]=(((r21*x2769))+(((-1.0)*r22*x2767))+(((-1.0)*x2763*x2768)));
evalcond[1]=((((-1.0)*x2764*x2768))+cj0+(((-1.0)*r12*x2767))+((r11*x2769)));
evalcond[2]=(((r01*x2769))+(((-1.0)*x2761))+(((-1.0)*r02*x2767))+(((-1.0)*x2765*x2768)));
evalcond[3]=((((-1.0)*gconst88*r21*x2767))+((sj1*sj2))+((x2760*x2763))+(((-1.0)*cj1*x2762))+(((-1.0)*r22*x2768)));
evalcond[4]=((((-1.0)*cj0*x2766))+(((-1.0)*gconst88*r01*x2767))+(((-1.0)*r02*x2768))+(((-1.0)*cj0*sj1*x2762))+((x2760*x2765)));
evalcond[5]=((((-1.0)*r12*x2768))+(((-1.0)*x2761*x2766))+(((-1.0)*cj2*sj1*x2761))+(((-1.0)*gconst88*r11*x2767))+((x2760*x2764)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2770=((1.0)*sj0);
IkReal x2771=((1.0)*cj0);
CheckValue<IkReal> x2772=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst88*r20))+(((-1.0)*gconst89*r21)))),-1);
if(!x2772.valid){
continue;
}
CheckValue<IkReal> x2773 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2771))+(((-1.0)*r12*x2770)))),IkReal(((((-1.0)*gconst88*r11*x2770))+(((-1.0)*gconst88*r01*x2771))+((cj0*gconst89*r00))+((gconst89*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2773.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2772.value)))+(x2773.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2774=IKsin(j4);
IkReal x2775=IKcos(j4);
IkReal x2776=((1.0)*sj0);
IkReal x2777=((1.0)*cj2);
IkReal x2778=(gconst89*r20);
IkReal x2779=(gconst89*r10);
IkReal x2780=(gconst89*r00);
IkReal x2781=(cj1*sj2);
IkReal x2782=((1.0)*x2775);
IkReal x2783=((1.0)*x2774);
IkReal x2784=(gconst88*x2774);
evalcond[0]=(((r21*x2784))+(((-1.0)*x2778*x2783))+(((-1.0)*r22*x2782)));
evalcond[1]=((((-1.0)*r12*x2782))+cj0+((r11*x2784))+(((-1.0)*x2779*x2783)));
evalcond[2]=((((-1.0)*x2780*x2783))+(((-1.0)*x2776))+((r01*x2784))+(((-1.0)*r02*x2782)));
evalcond[3]=((((-1.0)*gconst88*r21*x2782))+((x2775*x2778))+((sj1*sj2))+(((-1.0)*r22*x2783))+(((-1.0)*cj1*x2777)));
evalcond[4]=((((-1.0)*cj0*x2781))+((x2775*x2780))+(((-1.0)*cj0*sj1*x2777))+(((-1.0)*gconst88*r01*x2782))+(((-1.0)*r02*x2783)));
evalcond[5]=((((-1.0)*r12*x2783))+((x2775*x2779))+(((-1.0)*cj2*sj1*x2776))+(((-1.0)*gconst88*r11*x2782))+(((-1.0)*x2776*x2781)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2785=((1.0)*gconst89);
CheckValue<IkReal> x2786=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2785))+(((-1.0)*gconst88*r00)))),-1);
if(!x2786.valid){
continue;
}
CheckValue<IkReal> x2787 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2785))+((cj0*gconst88*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2787.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2786.value)))+(x2787.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2788=IKsin(j4);
IkReal x2789=IKcos(j4);
IkReal x2790=((1.0)*sj0);
IkReal x2791=((1.0)*cj2);
IkReal x2792=(gconst89*r20);
IkReal x2793=(gconst89*r10);
IkReal x2794=(gconst89*r00);
IkReal x2795=(cj1*sj2);
IkReal x2796=((1.0)*x2789);
IkReal x2797=((1.0)*x2788);
IkReal x2798=(gconst88*x2788);
evalcond[0]=(((r21*x2798))+(((-1.0)*r22*x2796))+(((-1.0)*x2792*x2797)));
evalcond[1]=(cj0+((r11*x2798))+(((-1.0)*x2793*x2797))+(((-1.0)*r12*x2796)));
evalcond[2]=((((-1.0)*x2790))+((r01*x2798))+(((-1.0)*x2794*x2797))+(((-1.0)*r02*x2796)));
evalcond[3]=((((-1.0)*gconst88*r21*x2796))+((sj1*sj2))+((x2789*x2792))+(((-1.0)*r22*x2797))+(((-1.0)*cj1*x2791)));
evalcond[4]=((((-1.0)*cj0*sj1*x2791))+((x2789*x2794))+(((-1.0)*cj0*x2795))+(((-1.0)*gconst88*r01*x2796))+(((-1.0)*r02*x2797)));
evalcond[5]=((((-1.0)*x2790*x2795))+((x2789*x2793))+(((-1.0)*gconst88*r11*x2796))+(((-1.0)*r12*x2797))+(((-1.0)*cj2*sj1*x2790)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2799=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2799;
j4eval[1]=IKsign(x2799);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2800=((1.0)*cj5);
IkReal x2801=((((-1.0)*r01*x2800))+(((-1.0)*r00*sj5)));
j4eval[0]=x2801;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x2800))))));
j4eval[2]=IKsign(x2801);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2802=cj5*cj5;
IkReal x2803=r11*r11;
IkReal x2804=(r11*sj5);
IkReal x2805=(cj5*r10);
IkReal x2806=(((x2802*(r10*r10)))+(r12*r12)+(((-2.0)*x2804*x2805))+(((-1.0)*x2802*x2803))+x2803);
j4eval[0]=x2806;
j4eval[1]=IKsign(x2806);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x2804))+x2805))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2807=cj5*cj5;
IkReal x2808=r11*r11;
IkReal x2809=(cj5*r10);
IkReal x2810=(r11*sj5);
CheckValue<IkReal> x2811=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x2809*x2810))+(((-1.0)*x2807*x2808))+((x2807*(r10*r10)))+x2808)),-1);
if(!x2811.valid){
continue;
}
CheckValue<IkReal> x2812 = IKatan2WithCheck(IkReal(((((-1.0)*x2810))+x2809)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2812.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2811.value)))+(x2812.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2813=IKsin(j4);
IkReal x2814=IKcos(j4);
IkReal x2815=(cj5*r10);
IkReal x2816=(r01*sj5);
IkReal x2817=((1.0)*cj2);
IkReal x2818=(cj5*r00);
IkReal x2819=(cj5*r20);
IkReal x2820=((1.0)*x2814);
IkReal x2821=((1.0)*x2813);
IkReal x2822=(sj5*x2813);
evalcond[0]=(((r21*x2822))+(((-1.0)*r22*x2820))+(((-1.0)*x2819*x2821)));
evalcond[1]=(((x2813*x2816))+(((-1.0)*r02*x2820))+(((-1.0)*x2818*x2821)));
evalcond[2]=((((-1.0)*r12*x2821))+(((-1.0)*r11*sj5*x2820))+((x2814*x2815)));
evalcond[3]=((1.0)+(((-1.0)*r12*x2820))+((r11*x2822))+(((-1.0)*x2815*x2821)));
evalcond[4]=((((-1.0)*cj1*x2817))+((sj1*sj2))+(((-1.0)*r22*x2821))+((x2814*x2819))+(((-1.0)*r21*sj5*x2820)));
evalcond[5]=((((-1.0)*x2816*x2820))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x2821))+(((-1.0)*sj1*x2817))+((x2814*x2818)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2823=((1.0)*cj5);
CheckValue<IkReal> x2824 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2823)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2824.valid){
continue;
}
CheckValue<IkReal> x2825=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x2823)))),-1);
if(!x2825.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2824.value)+(((1.5707963267949)*(x2825.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2826=IKsin(j4);
IkReal x2827=IKcos(j4);
IkReal x2828=(cj5*r10);
IkReal x2829=(r01*sj5);
IkReal x2830=((1.0)*cj2);
IkReal x2831=(cj5*r00);
IkReal x2832=(cj5*r20);
IkReal x2833=((1.0)*x2827);
IkReal x2834=((1.0)*x2826);
IkReal x2835=(sj5*x2826);
evalcond[0]=((((-1.0)*r22*x2833))+(((-1.0)*x2832*x2834))+((r21*x2835)));
evalcond[1]=((((-1.0)*x2831*x2834))+(((-1.0)*r02*x2833))+((x2826*x2829)));
evalcond[2]=((((-1.0)*r12*x2834))+(((-1.0)*r11*sj5*x2833))+((x2827*x2828)));
evalcond[3]=((1.0)+(((-1.0)*r12*x2833))+(((-1.0)*x2828*x2834))+((r11*x2835)));
evalcond[4]=((((-1.0)*cj1*x2830))+(((-1.0)*r21*sj5*x2833))+((sj1*sj2))+((x2827*x2832))+(((-1.0)*r22*x2834)));
evalcond[5]=((((-1.0)*sj1*x2830))+(((-1.0)*cj1*sj2))+((x2827*x2831))+(((-1.0)*x2829*x2833))+(((-1.0)*r02*x2834)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2836=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2836.valid){
continue;
}
CheckValue<IkReal> x2837 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2837.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2836.value)))+(x2837.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2838=IKsin(j4);
IkReal x2839=IKcos(j4);
IkReal x2840=(cj5*r10);
IkReal x2841=(r01*sj5);
IkReal x2842=((1.0)*cj2);
IkReal x2843=(cj5*r00);
IkReal x2844=(cj5*r20);
IkReal x2845=((1.0)*x2839);
IkReal x2846=((1.0)*x2838);
IkReal x2847=(sj5*x2838);
evalcond[0]=(((r21*x2847))+(((-1.0)*x2844*x2846))+(((-1.0)*r22*x2845)));
evalcond[1]=((((-1.0)*x2843*x2846))+((x2838*x2841))+(((-1.0)*r02*x2845)));
evalcond[2]=((((-1.0)*r12*x2846))+((x2839*x2840))+(((-1.0)*r11*sj5*x2845)));
evalcond[3]=((1.0)+((r11*x2847))+(((-1.0)*x2840*x2846))+(((-1.0)*r12*x2845)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*r22*x2846))+((x2839*x2844))+(((-1.0)*r21*sj5*x2845))+(((-1.0)*cj1*x2842)));
evalcond[5]=((((-1.0)*sj1*x2842))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x2846))+(((-1.0)*x2841*x2845))+((x2839*x2843)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2848=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2848;
j4eval[1]=IKsign(x2848);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2849=((1.0)*cj5);
IkReal x2850=((((-1.0)*r21*x2849))+(((-1.0)*r20*sj5)));
j4eval[0]=x2850;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x2849))))));
j4eval[2]=IKsign(x2850);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2851=cj5*cj5;
IkReal x2852=r11*r11;
IkReal x2853=(cj5*r10);
IkReal x2854=(r11*sj5);
IkReal x2855=((((2.0)*x2853*x2854))+(((-1.0)*x2851*(r10*r10)))+((x2851*x2852))+(((-1.0)*(r12*r12)))+(((-1.0)*x2852)));
j4eval[0]=x2855;
j4eval[1]=((IKabs(((((-1.0)*x2854))+x2853)))+(IKabs(r12)));
j4eval[2]=IKsign(x2855);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2856=cj5*cj5;
IkReal x2857=r11*r11;
IkReal x2858=(cj5*r10);
IkReal x2859=(r11*sj5);
CheckValue<IkReal> x2860 = IKatan2WithCheck(IkReal(((((-1.0)*x2859))+x2858)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2860.valid){
continue;
}
CheckValue<IkReal> x2861=IKPowWithIntegerCheck(IKsign(((((2.0)*x2858*x2859))+(((-1.0)*(r12*r12)))+((x2856*x2857))+(((-1.0)*x2857))+(((-1.0)*x2856*(r10*r10))))),-1);
if(!x2861.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2860.value)+(((1.5707963267949)*(x2861.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2862=IKsin(j4);
IkReal x2863=IKcos(j4);
IkReal x2864=(cj5*r10);
IkReal x2865=(r01*sj5);
IkReal x2866=(cj5*r00);
IkReal x2867=(cj5*r20);
IkReal x2868=((1.0)*x2863);
IkReal x2869=((1.0)*x2862);
IkReal x2870=(sj5*x2862);
evalcond[0]=((((-1.0)*r22*x2868))+((r21*x2870))+(((-1.0)*x2867*x2869)));
evalcond[1]=((((-1.0)*r02*x2868))+((x2862*x2865))+(((-1.0)*x2866*x2869)));
evalcond[2]=((((-1.0)*r12*x2869))+((x2863*x2864))+(((-1.0)*r11*sj5*x2868)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x2868))+(((-1.0)*x2864*x2869))+((r11*x2870)));
evalcond[4]=((((-1.0)*r02*x2869))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x2865*x2868))+((x2863*x2866)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2869))+((x2863*x2867))+(((-1.0)*r21*sj5*x2868)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2871=((1.0)*cj5);
CheckValue<IkReal> x2872 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x2871)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2872.valid){
continue;
}
CheckValue<IkReal> x2873=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2871))+(((-1.0)*r20*sj5)))),-1);
if(!x2873.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2872.value)+(((1.5707963267949)*(x2873.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2874=IKsin(j4);
IkReal x2875=IKcos(j4);
IkReal x2876=(cj5*r10);
IkReal x2877=(r01*sj5);
IkReal x2878=(cj5*r00);
IkReal x2879=(cj5*r20);
IkReal x2880=((1.0)*x2875);
IkReal x2881=((1.0)*x2874);
IkReal x2882=(sj5*x2874);
evalcond[0]=((((-1.0)*r22*x2880))+((r21*x2882))+(((-1.0)*x2879*x2881)));
evalcond[1]=((((-1.0)*r02*x2880))+((x2874*x2877))+(((-1.0)*x2878*x2881)));
evalcond[2]=((((-1.0)*r11*sj5*x2880))+((x2875*x2876))+(((-1.0)*r12*x2881)));
evalcond[3]=((-1.0)+((r11*x2882))+(((-1.0)*x2876*x2881))+(((-1.0)*r12*x2880)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x2881))+((cj1*sj2))+((x2875*x2878))+(((-1.0)*x2877*x2880)));
evalcond[5]=((((-1.0)*r22*x2881))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2875*x2879))+(((-1.0)*r21*sj5*x2880)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2883 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2883.valid){
continue;
}
CheckValue<IkReal> x2884=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2884.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2883.value)+(((1.5707963267949)*(x2884.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2885=IKsin(j4);
IkReal x2886=IKcos(j4);
IkReal x2887=(cj5*r10);
IkReal x2888=(r01*sj5);
IkReal x2889=(cj5*r00);
IkReal x2890=(cj5*r20);
IkReal x2891=((1.0)*x2886);
IkReal x2892=((1.0)*x2885);
IkReal x2893=(sj5*x2885);
evalcond[0]=((((-1.0)*r22*x2891))+(((-1.0)*x2890*x2892))+((r21*x2893)));
evalcond[1]=(((x2885*x2888))+(((-1.0)*x2889*x2892))+(((-1.0)*r02*x2891)));
evalcond[2]=((((-1.0)*r11*sj5*x2891))+((x2886*x2887))+(((-1.0)*r12*x2892)));
evalcond[3]=((-1.0)+(((-1.0)*x2887*x2892))+((r11*x2893))+(((-1.0)*r12*x2891)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x2892))+(((-1.0)*x2888*x2891))+((cj1*sj2))+((x2886*x2889)));
evalcond[5]=((((-1.0)*r22*x2892))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x2891))+((x2886*x2890)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2894=((-1.0)*r00);
IkReal x2896 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2896)==0){
continue;
}
IkReal x2895=pow(x2896,-0.5);
CheckValue<IkReal> x2897 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2894),IKFAST_ATAN2_MAGTHRESH);
if(!x2897.valid){
continue;
}
IkReal gconst90=((-1.0)*(x2897.value));
IkReal gconst91=(r01*x2895);
IkReal gconst92=(x2894*x2895);
CheckValue<IkReal> x2898 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2898.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2898.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2899=((-1.0)*r00);
IkReal x2900=x2895;
CheckValue<IkReal> x2902 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2899),IKFAST_ATAN2_MAGTHRESH);
if(!x2902.valid){
continue;
}
IkReal x2901=((-1.0)*(x2902.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst91;
cj5=gconst92;
j5=x2901;
IkReal gconst90=x2901;
IkReal gconst91=(r01*x2900);
IkReal gconst92=(x2899*x2900);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2903=((1.0)*sj0);
IkReal x2904=((1.0)*cj0);
CheckValue<IkReal> x2905=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r20))+(((-1.0)*gconst92*r21)))),-1);
if(!x2905.valid){
continue;
}
CheckValue<IkReal> x2906 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2904))+(((-1.0)*r12*x2903)))),IkReal((((cj0*gconst92*r00))+(((-1.0)*gconst91*r11*x2903))+((gconst92*r10*sj0))+(((-1.0)*gconst91*r01*x2904)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2906.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2905.value)))+(x2906.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2907=IKsin(j4);
IkReal x2908=IKcos(j4);
IkReal x2909=((1.0)*cj2);
IkReal x2910=(gconst92*r00);
IkReal x2911=(gconst92*r20);
IkReal x2912=((1.0)*sj0);
IkReal x2913=(gconst92*r10);
IkReal x2914=(cj1*sj2);
IkReal x2915=((1.0)*x2908);
IkReal x2916=(gconst91*x2907);
IkReal x2917=((1.0)*x2907);
evalcond[0]=(((r21*x2916))+(((-1.0)*x2911*x2917))+(((-1.0)*r22*x2915)));
evalcond[1]=(((r11*x2916))+cj0+(((-1.0)*x2913*x2917))+(((-1.0)*r12*x2915)));
evalcond[2]=(((r01*x2916))+(((-1.0)*x2910*x2917))+(((-1.0)*r02*x2915))+(((-1.0)*x2912)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x2909))+(((-1.0)*gconst91*r21*x2915))+((x2908*x2911))+(((-1.0)*r22*x2917)));
evalcond[4]=((((-1.0)*gconst91*r01*x2915))+(((-1.0)*cj0*sj1*x2909))+(((-1.0)*r02*x2917))+((x2908*x2910))+(((-1.0)*cj0*x2914)));
evalcond[5]=((((-1.0)*gconst91*r11*x2915))+(((-1.0)*x2912*x2914))+(((-1.0)*r12*x2917))+(((-1.0)*sj0*sj1*x2909))+((x2908*x2913)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2918=((1.0)*gconst92);
CheckValue<IkReal> x2919=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r10))+(((-1.0)*r11*x2918)))),-1);
if(!x2919.valid){
continue;
}
CheckValue<IkReal> x2920 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst91*r21*sj0))+(((-1.0)*r20*sj0*x2918)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2920.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2919.value)))+(x2920.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2921=IKsin(j4);
IkReal x2922=IKcos(j4);
IkReal x2923=((1.0)*cj2);
IkReal x2924=(gconst92*r00);
IkReal x2925=(gconst92*r20);
IkReal x2926=((1.0)*sj0);
IkReal x2927=(gconst92*r10);
IkReal x2928=(cj1*sj2);
IkReal x2929=((1.0)*x2922);
IkReal x2930=(gconst91*x2921);
IkReal x2931=((1.0)*x2921);
evalcond[0]=(((r21*x2930))+(((-1.0)*x2925*x2931))+(((-1.0)*r22*x2929)));
evalcond[1]=((((-1.0)*x2927*x2931))+cj0+(((-1.0)*r12*x2929))+((r11*x2930)));
evalcond[2]=((((-1.0)*r02*x2929))+((r01*x2930))+(((-1.0)*x2926))+(((-1.0)*x2924*x2931)));
evalcond[3]=((((-1.0)*gconst91*r21*x2929))+((sj1*sj2))+(((-1.0)*cj1*x2923))+((x2922*x2925))+(((-1.0)*r22*x2931)));
evalcond[4]=((((-1.0)*cj0*sj1*x2923))+(((-1.0)*cj0*x2928))+(((-1.0)*gconst91*r01*x2929))+((x2922*x2924))+(((-1.0)*r02*x2931)));
evalcond[5]=((((-1.0)*sj0*sj1*x2923))+(((-1.0)*gconst91*r11*x2929))+(((-1.0)*x2926*x2928))+((x2922*x2927))+(((-1.0)*r12*x2931)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2932=((-1.0)*r01);
IkReal x2934 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2934)==0){
continue;
}
IkReal x2933=pow(x2934,-0.5);
CheckValue<IkReal> x2935 = IKatan2WithCheck(IkReal(x2932),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2935.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x2935.value))));
IkReal gconst94=(x2932*x2933);
IkReal gconst95=((1.0)*r00*x2933);
CheckValue<IkReal> x2936 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2936.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2936.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x2937=((-1.0)*r01);
CheckValue<IkReal> x2940 = IKatan2WithCheck(IkReal(x2937),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2940.valid){
continue;
}
IkReal x2938=((1.0)*(x2940.value));
IkReal x2939=x2933;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2938)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2938)));
IkReal gconst94=(x2937*x2939);
IkReal gconst95=((1.0)*r00*x2939);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2941=((-1.0)*r01);
CheckValue<IkReal> x2944 = IKatan2WithCheck(IkReal(x2941),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2944.valid){
continue;
}
IkReal x2942=((1.0)*(x2944.value));
IkReal x2943=x2933;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2942)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2942)));
IkReal gconst94=(x2941*x2943);
IkReal gconst95=((1.0)*r00*x2943);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2945=((-1.0)*r01);
CheckValue<IkReal> x2948 = IKatan2WithCheck(IkReal(x2945),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2948.valid){
continue;
}
IkReal x2946=((1.0)*(x2948.value));
IkReal x2947=x2933;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2946)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2946)));
IkReal gconst94=(x2945*x2947);
IkReal gconst95=((1.0)*r00*x2947);
IkReal x2949=r02*r02;
IkReal x2950=(r12*sj0);
IkReal x2951=((1.0)*cj0);
IkReal x2952=x2933;
j4eval[0]=((IKabs((((cj0*x2949*x2952))+((r02*x2950*x2952))+(((-1.0)*x2951*x2952)))))+(IKabs(((((-1.0)*x2950))+(((-1.0)*r02*x2951))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2953=((1.0)*sj0);
IkReal x2954=((1.0)*cj0);
CheckValue<IkReal> x2955 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2954))+(((-1.0)*r12*x2953)))),IkReal(((((-1.0)*gconst94*r01*x2954))+(((-1.0)*gconst94*r11*x2953))+((gconst95*r10*sj0))+((cj0*gconst95*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2955.valid){
continue;
}
CheckValue<IkReal> x2956=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst95*r21))+(((-1.0)*gconst94*r20)))),-1);
if(!x2956.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2955.value)+(((1.5707963267949)*(x2956.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2957=IKsin(j4);
IkReal x2958=IKcos(j4);
IkReal x2959=(gconst94*r11);
IkReal x2960=((1.0)*cj2);
IkReal x2961=(gconst94*r21);
IkReal x2962=((1.0)*sj0);
IkReal x2963=(gconst94*r01);
IkReal x2964=(cj1*sj2);
IkReal x2965=((1.0)*x2958);
IkReal x2966=(gconst95*x2958);
IkReal x2967=((1.0)*x2957);
IkReal x2968=(gconst95*x2967);
evalcond[0]=((((-1.0)*r20*x2968))+((x2957*x2961))+(((-1.0)*r22*x2965)));
evalcond[1]=(cj0+((x2957*x2959))+(((-1.0)*r10*x2968))+(((-1.0)*r12*x2965)));
evalcond[2]=((((-1.0)*r00*x2968))+(((-1.0)*r02*x2965))+(((-1.0)*x2962))+((x2957*x2963)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*r22*x2967))+(((-1.0)*x2961*x2965))+((r20*x2966))+(((-1.0)*cj1*x2960)));
evalcond[4]=((((-1.0)*x2963*x2965))+(((-1.0)*r02*x2967))+(((-1.0)*cj0*x2964))+(((-1.0)*cj0*sj1*x2960))+((r00*x2966)));
evalcond[5]=(((r10*x2966))+(((-1.0)*x2959*x2965))+(((-1.0)*x2962*x2964))+(((-1.0)*sj0*sj1*x2960))+(((-1.0)*r12*x2967)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2969=((1.0)*gconst95);
CheckValue<IkReal> x2970 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst94*r21*sj0))+(((-1.0)*r20*sj0*x2969)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2970.valid){
continue;
}
CheckValue<IkReal> x2971=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2969))+(((-1.0)*gconst94*r10)))),-1);
if(!x2971.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2970.value)+(((1.5707963267949)*(x2971.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2972=IKsin(j4);
IkReal x2973=IKcos(j4);
IkReal x2974=(gconst94*r11);
IkReal x2975=((1.0)*cj2);
IkReal x2976=(gconst94*r21);
IkReal x2977=((1.0)*sj0);
IkReal x2978=(gconst94*r01);
IkReal x2979=(cj1*sj2);
IkReal x2980=((1.0)*x2973);
IkReal x2981=(gconst95*x2973);
IkReal x2982=((1.0)*x2972);
IkReal x2983=(gconst95*x2982);
evalcond[0]=((((-1.0)*r20*x2983))+(((-1.0)*r22*x2980))+((x2972*x2976)));
evalcond[1]=(cj0+(((-1.0)*r10*x2983))+(((-1.0)*r12*x2980))+((x2972*x2974)));
evalcond[2]=((((-1.0)*r00*x2983))+(((-1.0)*x2977))+(((-1.0)*r02*x2980))+((x2972*x2978)));
evalcond[3]=((((-1.0)*x2976*x2980))+((sj1*sj2))+((r20*x2981))+(((-1.0)*r22*x2982))+(((-1.0)*cj1*x2975)));
evalcond[4]=((((-1.0)*x2978*x2980))+(((-1.0)*cj0*x2979))+((r00*x2981))+(((-1.0)*r02*x2982))+(((-1.0)*cj0*sj1*x2975)));
evalcond[5]=((((-1.0)*x2974*x2980))+(((-1.0)*r12*x2982))+(((-1.0)*x2977*x2979))+(((-1.0)*sj0*sj1*x2975))+((r10*x2981)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2984=((1.0)*gconst95);
CheckValue<IkReal> x2985 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2984))+((cj0*gconst94*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2985.valid){
continue;
}
CheckValue<IkReal> x2986=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r00))+(((-1.0)*r01*x2984)))),-1);
if(!x2986.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2985.value)+(((1.5707963267949)*(x2986.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2987=IKsin(j4);
IkReal x2988=IKcos(j4);
IkReal x2989=(gconst94*r11);
IkReal x2990=((1.0)*cj2);
IkReal x2991=(gconst94*r21);
IkReal x2992=((1.0)*sj0);
IkReal x2993=(gconst94*r01);
IkReal x2994=(cj1*sj2);
IkReal x2995=((1.0)*x2988);
IkReal x2996=(gconst95*x2988);
IkReal x2997=((1.0)*x2987);
IkReal x2998=(gconst95*x2997);
evalcond[0]=((((-1.0)*r22*x2995))+((x2987*x2991))+(((-1.0)*r20*x2998)));
evalcond[1]=(cj0+(((-1.0)*r12*x2995))+(((-1.0)*r10*x2998))+((x2987*x2989)));
evalcond[2]=((((-1.0)*x2992))+((x2987*x2993))+(((-1.0)*r02*x2995))+(((-1.0)*r00*x2998)));
evalcond[3]=((((-1.0)*r22*x2997))+((r20*x2996))+((sj1*sj2))+(((-1.0)*cj1*x2990))+(((-1.0)*x2991*x2995)));
evalcond[4]=((((-1.0)*cj0*x2994))+((r00*x2996))+(((-1.0)*x2993*x2995))+(((-1.0)*r02*x2997))+(((-1.0)*cj0*sj1*x2990)));
evalcond[5]=((((-1.0)*sj0*sj1*x2990))+(((-1.0)*x2992*x2994))+(((-1.0)*r12*x2997))+(((-1.0)*x2989*x2995))+((r10*x2996)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2999=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2999;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2999);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3000=((1.0)*cj5);
IkReal x3001=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3000)));
j4eval[0]=x3001;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x3000))))));
j4eval[2]=IKsign(x3001);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3002=cj5*cj5;
IkReal x3003=r01*r01;
IkReal x3004=(r01*sj5);
IkReal x3005=(cj5*r00);
IkReal x3006=((((-1.0)*x3003))+(((-1.0)*(r02*r02)))+(((2.0)*x3004*x3005))+((x3002*x3003))+(((-1.0)*x3002*(r00*r00))));
j4eval[0]=x3006;
j4eval[1]=IKsign(x3006);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x3004))+x3005))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3007=cj5*cj5;
IkReal x3008=r01*r01;
IkReal x3009=(r01*sj5);
IkReal x3010=(cj5*r00);
CheckValue<IkReal> x3011 = IKatan2WithCheck(IkReal(((((-1.0)*x3009))+x3010)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x3011.valid){
continue;
}
CheckValue<IkReal> x3012=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3008))+(((2.0)*x3009*x3010))+(((-1.0)*x3007*(r00*r00)))+(((-1.0)*(r02*r02)))+((x3007*x3008)))),-1);
if(!x3012.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3011.value)+(((1.5707963267949)*(x3012.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3013=IKsin(j4);
IkReal x3014=IKcos(j4);
IkReal x3015=(cj5*r10);
IkReal x3016=(r01*sj5);
IkReal x3017=((1.0)*cj2);
IkReal x3018=(cj5*r00);
IkReal x3019=(cj5*r20);
IkReal x3020=((1.0)*x3014);
IkReal x3021=((1.0)*x3013);
IkReal x3022=(sj5*x3013);
evalcond[0]=((((-1.0)*x3019*x3021))+((r21*x3022))+(((-1.0)*r22*x3020)));
evalcond[1]=((((-1.0)*r12*x3020))+(((-1.0)*x3015*x3021))+((r11*x3022)));
evalcond[2]=((((-1.0)*x3016*x3020))+(((-1.0)*r02*x3021))+((x3014*x3018)));
evalcond[3]=((-1.0)+(((-1.0)*x3018*x3021))+((x3013*x3016))+(((-1.0)*r02*x3020)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj1*x3017))+(((-1.0)*r22*x3021))+(((-1.0)*r21*sj5*x3020))+((x3014*x3019)));
evalcond[5]=((((-1.0)*r12*x3021))+(((-1.0)*r11*sj5*x3020))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x3017))+((x3014*x3015)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3023=((1.0)*cj5);
CheckValue<IkReal> x3024=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3023))+(((-1.0)*r10*sj5)))),-1);
if(!x3024.valid){
continue;
}
CheckValue<IkReal> x3025 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x3023)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3025.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3024.value)))+(x3025.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3026=IKsin(j4);
IkReal x3027=IKcos(j4);
IkReal x3028=(cj5*r10);
IkReal x3029=(r01*sj5);
IkReal x3030=((1.0)*cj2);
IkReal x3031=(cj5*r00);
IkReal x3032=(cj5*r20);
IkReal x3033=((1.0)*x3027);
IkReal x3034=((1.0)*x3026);
IkReal x3035=(sj5*x3026);
evalcond[0]=(((r21*x3035))+(((-1.0)*r22*x3033))+(((-1.0)*x3032*x3034)));
evalcond[1]=(((r11*x3035))+(((-1.0)*x3028*x3034))+(((-1.0)*r12*x3033)));
evalcond[2]=((((-1.0)*x3029*x3033))+(((-1.0)*r02*x3034))+((x3027*x3031)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x3033))+(((-1.0)*x3031*x3034))+((x3026*x3029)));
evalcond[4]=((((-1.0)*cj1*x3030))+(((-1.0)*r21*sj5*x3033))+((sj1*sj2))+(((-1.0)*r22*x3034))+((x3027*x3032)));
evalcond[5]=(((x3027*x3028))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x3034))+(((-1.0)*r11*sj5*x3033))+(((-1.0)*sj1*x3030)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3036=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3036.valid){
continue;
}
CheckValue<IkReal> x3037 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3037.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3036.value)))+(x3037.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3038=IKsin(j4);
IkReal x3039=IKcos(j4);
IkReal x3040=(cj5*r10);
IkReal x3041=(r01*sj5);
IkReal x3042=((1.0)*cj2);
IkReal x3043=(cj5*r00);
IkReal x3044=(cj5*r20);
IkReal x3045=((1.0)*x3039);
IkReal x3046=((1.0)*x3038);
IkReal x3047=(sj5*x3038);
evalcond[0]=(((r21*x3047))+(((-1.0)*r22*x3045))+(((-1.0)*x3044*x3046)));
evalcond[1]=((((-1.0)*r12*x3045))+(((-1.0)*x3040*x3046))+((r11*x3047)));
evalcond[2]=(((x3039*x3043))+(((-1.0)*x3041*x3045))+(((-1.0)*r02*x3046)));
evalcond[3]=((-1.0)+((x3038*x3041))+(((-1.0)*r02*x3045))+(((-1.0)*x3043*x3046)));
evalcond[4]=(((x3039*x3044))+(((-1.0)*r22*x3046))+((sj1*sj2))+(((-1.0)*cj1*x3042))+(((-1.0)*r21*sj5*x3045)));
evalcond[5]=((((-1.0)*r12*x3046))+((x3039*x3040))+(((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x3045))+(((-1.0)*sj1*x3042)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3048=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3048;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x3048);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3049=((1.0)*cj5);
IkReal x3050=((((-1.0)*r21*x3049))+(((-1.0)*r20*sj5)));
j4eval[0]=x3050;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x3049))+((r11*sj5))))));
j4eval[2]=IKsign(x3050);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3051=cj5*cj5;
IkReal x3052=r01*r01;
IkReal x3053=(cj5*r00);
IkReal x3054=(r01*sj5);
IkReal x3055=(x3052+(((-2.0)*x3053*x3054))+(r02*r02)+((x3051*(r00*r00)))+(((-1.0)*x3051*x3052)));
j4eval[0]=x3055;
j4eval[1]=((IKabs(r02))+(IKabs((x3053+(((-1.0)*x3054))))));
j4eval[2]=IKsign(x3055);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3056=cj5*cj5;
IkReal x3057=r01*r01;
IkReal x3058=(r01*sj5);
IkReal x3059=(cj5*r00);
CheckValue<IkReal> x3060=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3056*x3057))+x3057+(r02*r02)+((x3056*(r00*r00)))+(((-2.0)*x3058*x3059)))),-1);
if(!x3060.valid){
continue;
}
CheckValue<IkReal> x3061 = IKatan2WithCheck(IkReal((x3059+(((-1.0)*x3058)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x3061.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3060.value)))+(x3061.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3062=IKsin(j4);
IkReal x3063=IKcos(j4);
IkReal x3064=(cj5*r10);
IkReal x3065=(r01*sj5);
IkReal x3066=(cj5*r00);
IkReal x3067=(cj5*r20);
IkReal x3068=((1.0)*x3063);
IkReal x3069=((1.0)*x3062);
IkReal x3070=(sj5*x3062);
evalcond[0]=((((-1.0)*r22*x3068))+(((-1.0)*x3067*x3069))+((r21*x3070)));
evalcond[1]=((((-1.0)*r12*x3068))+((r11*x3070))+(((-1.0)*x3064*x3069)));
evalcond[2]=((((-1.0)*r02*x3069))+(((-1.0)*x3065*x3068))+((x3063*x3066)));
evalcond[3]=((1.0)+(((-1.0)*x3066*x3069))+(((-1.0)*r02*x3068))+((x3062*x3065)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r11*sj5*x3068))+((cj1*sj2))+(((-1.0)*r12*x3069))+((x3063*x3064)));
evalcond[5]=((((-1.0)*r21*sj5*x3068))+(((-1.0)*r22*x3069))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x3063*x3067)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3071=((1.0)*cj5);
CheckValue<IkReal> x3072=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3071))+(((-1.0)*r20*sj5)))),-1);
if(!x3072.valid){
continue;
}
CheckValue<IkReal> x3073 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x3071))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3073.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3072.value)))+(x3073.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3074=IKsin(j4);
IkReal x3075=IKcos(j4);
IkReal x3076=(cj5*r10);
IkReal x3077=(r01*sj5);
IkReal x3078=(cj5*r00);
IkReal x3079=(cj5*r20);
IkReal x3080=((1.0)*x3075);
IkReal x3081=((1.0)*x3074);
IkReal x3082=(sj5*x3074);
evalcond[0]=((((-1.0)*x3079*x3081))+((r21*x3082))+(((-1.0)*r22*x3080)));
evalcond[1]=(((r11*x3082))+(((-1.0)*x3076*x3081))+(((-1.0)*r12*x3080)));
evalcond[2]=(((x3075*x3078))+(((-1.0)*x3077*x3080))+(((-1.0)*r02*x3081)));
evalcond[3]=((1.0)+(((-1.0)*x3078*x3081))+(((-1.0)*r02*x3080))+((x3074*x3077)));
evalcond[4]=(((cj2*sj1))+((x3075*x3076))+((cj1*sj2))+(((-1.0)*r12*x3081))+(((-1.0)*r11*sj5*x3080)));
evalcond[5]=(((x3075*x3079))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x3080))+(((-1.0)*r22*x3081)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3083 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3083.valid){
continue;
}
CheckValue<IkReal> x3084=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3084.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3083.value)+(((1.5707963267949)*(x3084.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3085=IKsin(j4);
IkReal x3086=IKcos(j4);
IkReal x3087=(cj5*r10);
IkReal x3088=(r01*sj5);
IkReal x3089=(cj5*r00);
IkReal x3090=(cj5*r20);
IkReal x3091=((1.0)*x3086);
IkReal x3092=((1.0)*x3085);
IkReal x3093=(sj5*x3085);
evalcond[0]=((((-1.0)*r22*x3091))+((r21*x3093))+(((-1.0)*x3090*x3092)));
evalcond[1]=((((-1.0)*r12*x3091))+(((-1.0)*x3087*x3092))+((r11*x3093)));
evalcond[2]=((((-1.0)*r02*x3092))+(((-1.0)*x3088*x3091))+((x3086*x3089)));
evalcond[3]=((1.0)+(((-1.0)*r02*x3091))+(((-1.0)*x3089*x3092))+((x3085*x3088)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x3092))+((cj1*sj2))+(((-1.0)*r11*sj5*x3091))+((x3086*x3087)));
evalcond[5]=((((-1.0)*r22*x3092))+((x3086*x3090))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x3091)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3094=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3094);
rxp1_1=(px*r21);
rxp1_2=(r11*x3094);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3095=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3095);
rxp1_1=(px*r21);
rxp1_2=(r11*x3095);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3096=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3096);
rxp1_1=(px*r21);
rxp1_2=(r11*x3096);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3099=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x3099.valid){
continue;
}
IkReal x3097=x3099.value;
IkReal x3098=(sj0*x3097);
cj4array[0]=(((cj2*sj1*x3098))+((cj1*sj2*x3098)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3100=IKsin(j4);
IkReal x3101=IKcos(j4);
IkReal x3102=(cj5*r20);
IkReal x3103=(r21*sj5);
IkReal x3104=((1.0)*x3100);
IkReal x3105=((1.0)*x3101);
evalcond[0]=((-1.0)*r02*x3100);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x3105)));
evalcond[2]=((((-1.0)*x3102*x3104))+((x3100*x3103)));
evalcond[3]=(((r11*sj5*x3100))+(((-1.0)*cj5*r10*x3104)));
evalcond[4]=((((-1.0)*x3103*x3105))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x3101*x3102)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3107=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x3107.valid){
continue;
}
IkReal x3106=x3107.value;
cj4array[0]=((((-1.0)*sj1*sj2*x3106))+((cj1*cj2*x3106)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3108=IKsin(j4);
IkReal x3109=IKcos(j4);
IkReal x3110=(r11*sj5);
IkReal x3111=((1.0)*sj0);
IkReal x3112=((1.0)*x3109);
IkReal x3113=((1.0)*cj5*x3108);
evalcond[0]=((-1.0)*r02*x3108);
evalcond[1]=((((-1.0)*r02*x3112))+(((-1.0)*x3111)));
evalcond[2]=((((-1.0)*r20*x3113))+((r21*sj5*x3108)));
evalcond[3]=((((-1.0)*r10*x3113))+((x3108*x3110)));
evalcond[4]=((((-1.0)*cj1*sj2*x3111))+(((-1.0)*cj2*sj1*x3111))+((cj5*r10*x3109))+(((-1.0)*x3110*x3112)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3114=IKPowWithIntegerCheck(r02,-1);
if(!x3114.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x3114.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3115=IKsin(j4);
IkReal x3116=IKcos(j4);
IkReal x3117=((1.0)*sj0);
IkReal x3118=(cj5*x3116);
IkReal x3119=(sj5*x3115);
IkReal x3120=((1.0)*sj5*x3116);
IkReal x3121=((1.0)*cj5*x3115);
evalcond[0]=((-1.0)*r02*x3115);
evalcond[1]=((((-1.0)*r20*x3121))+((r21*x3119)));
evalcond[2]=((((-1.0)*r10*x3121))+((r11*x3119)));
evalcond[3]=((((-1.0)*r21*x3120))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x3118)));
evalcond[4]=((((-1.0)*cj1*sj2*x3117))+(((-1.0)*cj2*sj1*x3117))+((r10*x3118))+(((-1.0)*r11*x3120)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3122=((1.0)*sj0);
IkReal x3123=((1.0)*cj0);
CheckValue<IkReal> x3124 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x3123))+(((-1.0)*r12*x3122)))),IkReal(((((-1.0)*r01*sj5*x3123))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x3122)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3124.valid){
continue;
}
CheckValue<IkReal> x3125=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x3125.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3124.value)+(((1.5707963267949)*(x3125.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3126=IKsin(j4);
IkReal x3127=IKcos(j4);
IkReal x3128=(cj5*r10);
IkReal x3129=(r01*sj5);
IkReal x3130=((1.0)*cj2);
IkReal x3131=(cj5*r00);
IkReal x3132=((1.0)*sj0);
IkReal x3133=(cj5*r20);
IkReal x3134=(cj1*sj2);
IkReal x3135=((1.0)*x3127);
IkReal x3136=((1.0)*x3126);
IkReal x3137=(sj5*x3126);
evalcond[0]=((((-1.0)*x3133*x3136))+((r21*x3137))+(((-1.0)*r22*x3135)));
evalcond[1]=(cj0+(((-1.0)*x3128*x3136))+(((-1.0)*r12*x3135))+((r11*x3137)));
evalcond[2]=((((-1.0)*x3131*x3136))+(((-1.0)*r02*x3135))+((x3126*x3129))+(((-1.0)*x3132)));
evalcond[3]=((((-1.0)*r21*sj5*x3135))+((sj1*sj2))+((x3127*x3133))+(((-1.0)*cj1*x3130))+(((-1.0)*r22*x3136)));
evalcond[4]=((((-1.0)*cj0*sj1*x3130))+(((-1.0)*r02*x3136))+(((-1.0)*cj0*x3134))+((x3127*x3131))+(((-1.0)*x3129*x3135)));
evalcond[5]=((((-1.0)*x3132*x3134))+((x3127*x3128))+(((-1.0)*r12*x3136))+(((-1.0)*r11*sj5*x3135))+(((-1.0)*sj0*sj1*x3130)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3138=((1.0)*cj5);
CheckValue<IkReal> x3139=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3138)))),-1);
if(!x3139.valid){
continue;
}
CheckValue<IkReal> x3140 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x3138))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3140.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3139.value)))+(x3140.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3141=IKsin(j4);
IkReal x3142=IKcos(j4);
IkReal x3143=(cj5*r10);
IkReal x3144=(r01*sj5);
IkReal x3145=((1.0)*cj2);
IkReal x3146=(cj5*r00);
IkReal x3147=((1.0)*sj0);
IkReal x3148=(cj5*r20);
IkReal x3149=(cj1*sj2);
IkReal x3150=((1.0)*x3142);
IkReal x3151=((1.0)*x3141);
IkReal x3152=(sj5*x3141);
evalcond[0]=((((-1.0)*x3148*x3151))+(((-1.0)*r22*x3150))+((r21*x3152)));
evalcond[1]=(cj0+((r11*x3152))+(((-1.0)*x3143*x3151))+(((-1.0)*r12*x3150)));
evalcond[2]=((((-1.0)*x3147))+(((-1.0)*x3146*x3151))+(((-1.0)*r02*x3150))+((x3141*x3144)));
evalcond[3]=((((-1.0)*cj1*x3145))+(((-1.0)*r22*x3151))+((x3142*x3148))+((sj1*sj2))+(((-1.0)*r21*sj5*x3150)));
evalcond[4]=((((-1.0)*x3144*x3150))+((x3142*x3146))+(((-1.0)*cj0*x3149))+(((-1.0)*cj0*sj1*x3145))+(((-1.0)*r02*x3151)));
evalcond[5]=(((x3142*x3143))+(((-1.0)*x3147*x3149))+(((-1.0)*sj0*sj1*x3145))+(((-1.0)*r11*sj5*x3150))+(((-1.0)*r12*x3151)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3153=((1.0)*cj5);
CheckValue<IkReal> x3154 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3153)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3154.valid){
continue;
}
CheckValue<IkReal> x3155=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3153)))),-1);
if(!x3155.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3154.value)+(((1.5707963267949)*(x3155.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3156=IKsin(j4);
IkReal x3157=IKcos(j4);
IkReal x3158=(cj5*r10);
IkReal x3159=(r01*sj5);
IkReal x3160=((1.0)*cj2);
IkReal x3161=(cj5*r00);
IkReal x3162=((1.0)*sj0);
IkReal x3163=(cj5*r20);
IkReal x3164=(cj1*sj2);
IkReal x3165=((1.0)*x3157);
IkReal x3166=((1.0)*x3156);
IkReal x3167=(sj5*x3156);
evalcond[0]=((((-1.0)*x3163*x3166))+((r21*x3167))+(((-1.0)*r22*x3165)));
evalcond[1]=((((-1.0)*r12*x3165))+cj0+((r11*x3167))+(((-1.0)*x3158*x3166)));
evalcond[2]=((((-1.0)*x3161*x3166))+((x3156*x3159))+(((-1.0)*r02*x3165))+(((-1.0)*x3162)));
evalcond[3]=((((-1.0)*cj1*x3160))+((sj1*sj2))+(((-1.0)*r21*sj5*x3165))+((x3157*x3163))+(((-1.0)*r22*x3166)));
evalcond[4]=((((-1.0)*cj0*sj1*x3160))+(((-1.0)*r02*x3166))+(((-1.0)*cj0*x3164))+((x3157*x3161))+(((-1.0)*x3159*x3165)));
evalcond[5]=((((-1.0)*r12*x3166))+(((-1.0)*sj0*sj1*x3160))+(((-1.0)*x3162*x3164))+((x3157*x3158))+(((-1.0)*r11*sj5*x3165)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3168=((((-1.0)*cj1*cj2))+((sj1*sj2)));
j0eval[0]=x3168;
j0eval[1]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
j0eval[2]=IKsign(x3168);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3169=r21*r21;
IkReal x3170=cj5*cj5;
IkReal x3171=(sj1*sj2);
IkReal x3172=(r21*sj5);
IkReal x3173=(cj5*r20);
IkReal x3174=(cj1*cj2);
IkReal x3175=((((-1.0)*x3169))+(((-1.0)*x3170*(r20*r20)))+(((-1.0)*(r22*r22)))+(((2.0)*x3172*x3173))+((x3169*x3170)));
j4eval[0]=x3175;
j4eval[1]=((IKabs((((r22*x3171))+(((-1.0)*r22*x3174)))))+(IKabs(((((-1.0)*x3171*x3173))+(((-1.0)*x3172*x3174))+((x3173*x3174))+((x3171*x3172))))));
j4eval[2]=IKsign(x3175);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j0eval[0]=((((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((3.1813499876136)*py))+(((-1.7080198703991)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((3.1813499876136)*px))+(((1.7080198703991)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((3.1813499876136)*py))+(((-1.7080198703991)*px))))+IKsqr(((((3.1813499876136)*px))+(((1.7080198703991)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((3.1813499876136)*py))+(((-1.7080198703991)*px))), ((((3.1813499876136)*px))+(((1.7080198703991)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3176=IKsin(j0);
IkReal x3177=IKcos(j0);
evalcond[0]=((((0.244)*x3177))+(((-1.0)*px))+(((-0.131)*x3176)));
evalcond[1]=((((0.131)*x3177))+(((0.244)*x3176))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3178=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3178;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3178);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3179=((1.0)*cj5);
IkReal x3180=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3179)));
j4eval[0]=x3180;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3179)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3180);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3181=((1.0)*cj5);
IkReal x3182=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3181)));
j4eval[0]=x3182;
j4eval[1]=IKsign(x3182);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3181))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3183=((1.0)*cj5);
CheckValue<IkReal> x3184 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3183)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3184.valid){
continue;
}
CheckValue<IkReal> x3185=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3183)))),-1);
if(!x3185.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3184.value)+(((1.5707963267949)*(x3185.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3186=IKcos(j4);
IkReal x3187=IKsin(j4);
IkReal x3188=((1.0)*sj0);
IkReal x3189=(cj5*r00);
IkReal x3190=(cj5*r10);
IkReal x3191=(cj5*r20);
IkReal x3192=((1.0)*x3186);
IkReal x3193=((1.0)*x3187);
IkReal x3194=(sj5*x3186);
IkReal x3195=(sj5*x3187);
evalcond[0]=(((r22*x3187))+((r21*x3194))+(((-1.0)*x3191*x3192)));
evalcond[1]=((((-1.0)*r22*x3192))+((r21*x3195))+(((-1.0)*x3191*x3193)));
evalcond[2]=((((-1.0)*x3190*x3193))+cj0+((r11*x3195))+(((-1.0)*r12*x3192)));
evalcond[3]=(((r01*x3194))+(((-1.0)*x3189*x3192))+(((-1.0)*cj0))+((r02*x3187)));
evalcond[4]=((((-1.0)*x3190*x3192))+((r12*x3187))+((r11*x3194))+(((-1.0)*x3188)));
evalcond[5]=(((r01*x3195))+(((-1.0)*r02*x3192))+(((-1.0)*x3189*x3193))+(((-1.0)*x3188)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3196=((1.0)*cj5);
CheckValue<IkReal> x3197 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3196)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3197.valid){
continue;
}
CheckValue<IkReal> x3198=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3196))+(((-1.0)*r00*sj5)))),-1);
if(!x3198.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3197.value)+(((1.5707963267949)*(x3198.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3199=IKcos(j4);
IkReal x3200=IKsin(j4);
IkReal x3201=((1.0)*sj0);
IkReal x3202=(cj5*r00);
IkReal x3203=(cj5*r10);
IkReal x3204=(cj5*r20);
IkReal x3205=((1.0)*x3199);
IkReal x3206=((1.0)*x3200);
IkReal x3207=(sj5*x3199);
IkReal x3208=(sj5*x3200);
evalcond[0]=(((r22*x3200))+(((-1.0)*x3204*x3205))+((r21*x3207)));
evalcond[1]=((((-1.0)*x3204*x3206))+(((-1.0)*r22*x3205))+((r21*x3208)));
evalcond[2]=(cj0+((r11*x3208))+(((-1.0)*r12*x3205))+(((-1.0)*x3203*x3206)));
evalcond[3]=(((r01*x3207))+(((-1.0)*x3202*x3205))+((r02*x3200))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x3207))+((r12*x3200))+(((-1.0)*x3203*x3205))+(((-1.0)*x3201)));
evalcond[5]=((((-1.0)*r02*x3205))+((r01*x3208))+(((-1.0)*x3202*x3206))+(((-1.0)*x3201)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3209 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3209.valid){
continue;
}
CheckValue<IkReal> x3210=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3210.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3209.value)+(((1.5707963267949)*(x3210.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3211=IKcos(j4);
IkReal x3212=IKsin(j4);
IkReal x3213=((1.0)*sj0);
IkReal x3214=(cj5*r00);
IkReal x3215=(cj5*r10);
IkReal x3216=(cj5*r20);
IkReal x3217=((1.0)*x3211);
IkReal x3218=((1.0)*x3212);
IkReal x3219=(sj5*x3211);
IkReal x3220=(sj5*x3212);
evalcond[0]=(((r22*x3212))+(((-1.0)*x3216*x3217))+((r21*x3219)));
evalcond[1]=((((-1.0)*x3216*x3218))+((r21*x3220))+(((-1.0)*r22*x3217)));
evalcond[2]=(cj0+(((-1.0)*x3215*x3218))+((r11*x3220))+(((-1.0)*r12*x3217)));
evalcond[3]=(((r01*x3219))+(((-1.0)*x3214*x3217))+(((-1.0)*cj0))+((r02*x3212)));
evalcond[4]=((((-1.0)*x3215*x3217))+((r12*x3212))+((r11*x3219))+(((-1.0)*x3213)));
evalcond[5]=((((-1.0)*x3214*x3218))+((r01*x3220))+(((-1.0)*x3213))+(((-1.0)*r02*x3217)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((3.1813499876136)*py))+(((-1.7080198703991)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((3.1813499876136)*px))+(((1.7080198703991)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((3.1813499876136)*py))+(((-1.7080198703991)*px))))+IKsqr(((((3.1813499876136)*px))+(((1.7080198703991)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((3.1813499876136)*py))+(((-1.7080198703991)*px))), ((((3.1813499876136)*px))+(((1.7080198703991)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3221=IKsin(j0);
IkReal x3222=IKcos(j0);
evalcond[0]=((((0.244)*x3222))+(((-1.0)*px))+(((-0.131)*x3221)));
evalcond[1]=((((0.244)*x3221))+(((-1.0)*py))+(((0.131)*x3222)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3223=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3223;
j4eval[1]=IKsign(x3223);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3224=((1.0)*cj5);
IkReal x3225=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3224)));
j4eval[0]=x3225;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3224))))));
j4eval[2]=IKsign(x3225);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3226=cj5*cj5;
IkReal x3227=((1.0)*r20);
IkReal x3228=(r01*r21);
IkReal x3229=(r21*sj5);
IkReal x3230=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x3229))+((x3226*x3228))+(((-1.0)*x3228))+(((-1.0)*r00*x3226*x3227)));
j4eval[0]=x3230;
j4eval[1]=((IKabs((((cj0*x3229))+(((-1.0)*cj0*cj5*x3227)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3230);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3231=cj5*cj5;
IkReal x3232=((1.0)*r20);
IkReal x3233=(r01*r21);
IkReal x3234=(r21*sj5);
CheckValue<IkReal> x3235 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3234))+(((-1.0)*cj0*cj5*x3232)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3235.valid){
continue;
}
CheckValue<IkReal> x3236=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x3233))+((x3231*x3233))+((cj5*r00*x3234))+(((-1.0)*r00*x3231*x3232)))),-1);
if(!x3236.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3235.value)+(((1.5707963267949)*(x3236.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3237=IKcos(j4);
IkReal x3238=IKsin(j4);
IkReal x3239=(cj5*r00);
IkReal x3240=(cj5*r10);
IkReal x3241=(cj5*r20);
IkReal x3242=((1.0)*x3237);
IkReal x3243=((1.0)*x3238);
IkReal x3244=(sj5*x3237);
IkReal x3245=(sj5*x3238);
evalcond[0]=(((r21*x3244))+((r22*x3238))+(((-1.0)*x3241*x3242)));
evalcond[1]=(((r21*x3245))+(((-1.0)*x3241*x3243))+(((-1.0)*r22*x3242)));
evalcond[2]=(((r01*x3244))+(((-1.0)*x3239*x3242))+cj0+((r02*x3238)));
evalcond[3]=(sj0+(((-1.0)*x3240*x3242))+((r12*x3238))+((r11*x3244)));
evalcond[4]=(cj0+(((-1.0)*x3240*x3243))+(((-1.0)*r12*x3242))+((r11*x3245)));
evalcond[5]=(((r01*x3245))+(((-1.0)*x3239*x3243))+(((-1.0)*sj0))+(((-1.0)*r02*x3242)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3246=((1.0)*cj5);
CheckValue<IkReal> x3247=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3246)))),-1);
if(!x3247.valid){
continue;
}
CheckValue<IkReal> x3248 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3246)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3248.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3247.value)))+(x3248.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3249=IKcos(j4);
IkReal x3250=IKsin(j4);
IkReal x3251=(cj5*r00);
IkReal x3252=(cj5*r10);
IkReal x3253=(cj5*r20);
IkReal x3254=((1.0)*x3249);
IkReal x3255=((1.0)*x3250);
IkReal x3256=(sj5*x3249);
IkReal x3257=(sj5*x3250);
evalcond[0]=((((-1.0)*x3253*x3254))+((r21*x3256))+((r22*x3250)));
evalcond[1]=((((-1.0)*x3253*x3255))+((r21*x3257))+(((-1.0)*r22*x3254)));
evalcond[2]=(cj0+((r02*x3250))+((r01*x3256))+(((-1.0)*x3251*x3254)));
evalcond[3]=(((r12*x3250))+sj0+((r11*x3256))+(((-1.0)*x3252*x3254)));
evalcond[4]=(cj0+((r11*x3257))+(((-1.0)*x3252*x3255))+(((-1.0)*r12*x3254)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3254))+((r01*x3257))+(((-1.0)*x3251*x3255)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3258 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3258.valid){
continue;
}
CheckValue<IkReal> x3259=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3259.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3258.value)+(((1.5707963267949)*(x3259.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3260=IKcos(j4);
IkReal x3261=IKsin(j4);
IkReal x3262=(cj5*r00);
IkReal x3263=(cj5*r10);
IkReal x3264=(cj5*r20);
IkReal x3265=((1.0)*x3260);
IkReal x3266=((1.0)*x3261);
IkReal x3267=(sj5*x3260);
IkReal x3268=(sj5*x3261);
evalcond[0]=(((r21*x3267))+(((-1.0)*x3264*x3265))+((r22*x3261)));
evalcond[1]=(((r21*x3268))+(((-1.0)*x3264*x3266))+(((-1.0)*r22*x3265)));
evalcond[2]=(((r01*x3267))+cj0+((r02*x3261))+(((-1.0)*x3262*x3265)));
evalcond[3]=(sj0+((r11*x3267))+((r12*x3261))+(((-1.0)*x3263*x3265)));
evalcond[4]=(cj0+(((-1.0)*r12*x3265))+((r11*x3268))+(((-1.0)*x3263*x3266)));
evalcond[5]=((((-1.0)*sj0))+((r01*x3268))+(((-1.0)*x3262*x3266))+(((-1.0)*r02*x3265)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-7.63358778625954)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((7.63358778625954)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-7.63358778625954)*px))+IKsqr(((7.63358778625954)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-7.63358778625954)*px), ((7.63358778625954)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.131)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.131)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3269=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3269;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3269);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3270=((1.0)*cj5);
IkReal x3271=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3270)));
j4eval[0]=x3271;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3270)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3271);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3272=((1.0)*cj5);
IkReal x3273=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3272)));
j4eval[0]=x3273;
j4eval[1]=IKsign(x3273);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3272))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3274=((1.0)*cj5);
CheckValue<IkReal> x3275 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3274)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3275.valid){
continue;
}
CheckValue<IkReal> x3276=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3274)))),-1);
if(!x3276.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3275.value)+(((1.5707963267949)*(x3276.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3277=IKcos(j4);
IkReal x3278=IKsin(j4);
IkReal x3279=((1.0)*sj0);
IkReal x3280=(cj5*r00);
IkReal x3281=(cj5*r10);
IkReal x3282=(cj5*r20);
IkReal x3283=((1.0)*x3277);
IkReal x3284=((1.0)*x3278);
IkReal x3285=(sj5*x3277);
IkReal x3286=(sj5*x3278);
evalcond[0]=((((-1.0)*x3282*x3283))+((r21*x3285))+((r22*x3278)));
evalcond[1]=((((-1.0)*r22*x3283))+(((-1.0)*x3282*x3284))+((r21*x3286)));
evalcond[2]=((((-1.0)*r12*x3283))+cj0+(((-1.0)*x3281*x3284))+((r11*x3286)));
evalcond[3]=((((-1.0)*x3280*x3283))+((r02*x3278))+(((-1.0)*cj0))+((r01*x3285)));
evalcond[4]=((((-1.0)*x3281*x3283))+(((-1.0)*x3279))+((r12*x3278))+((r11*x3285)));
evalcond[5]=((((-1.0)*x3280*x3284))+(((-1.0)*x3279))+(((-1.0)*r02*x3283))+((r01*x3286)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3287=((1.0)*cj5);
CheckValue<IkReal> x3288 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x3287))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3288.valid){
continue;
}
CheckValue<IkReal> x3289=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3287)))),-1);
if(!x3289.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3288.value)+(((1.5707963267949)*(x3289.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3290=IKcos(j4);
IkReal x3291=IKsin(j4);
IkReal x3292=((1.0)*sj0);
IkReal x3293=(cj5*r00);
IkReal x3294=(cj5*r10);
IkReal x3295=(cj5*r20);
IkReal x3296=((1.0)*x3290);
IkReal x3297=((1.0)*x3291);
IkReal x3298=(sj5*x3290);
IkReal x3299=(sj5*x3291);
evalcond[0]=(((r21*x3298))+((r22*x3291))+(((-1.0)*x3295*x3296)));
evalcond[1]=((((-1.0)*r22*x3296))+((r21*x3299))+(((-1.0)*x3295*x3297)));
evalcond[2]=((((-1.0)*r12*x3296))+cj0+(((-1.0)*x3294*x3297))+((r11*x3299)));
evalcond[3]=(((r01*x3298))+((r02*x3291))+(((-1.0)*x3293*x3296))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3292))+(((-1.0)*x3294*x3296))+((r11*x3298))+((r12*x3291)));
evalcond[5]=(((r01*x3299))+(((-1.0)*x3292))+(((-1.0)*x3293*x3297))+(((-1.0)*r02*x3296)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3300 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3300.valid){
continue;
}
CheckValue<IkReal> x3301=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3301.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3300.value)+(((1.5707963267949)*(x3301.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3302=IKcos(j4);
IkReal x3303=IKsin(j4);
IkReal x3304=((1.0)*sj0);
IkReal x3305=(cj5*r00);
IkReal x3306=(cj5*r10);
IkReal x3307=(cj5*r20);
IkReal x3308=((1.0)*x3302);
IkReal x3309=((1.0)*x3303);
IkReal x3310=(sj5*x3302);
IkReal x3311=(sj5*x3303);
evalcond[0]=(((r21*x3310))+((r22*x3303))+(((-1.0)*x3307*x3308)));
evalcond[1]=(((r21*x3311))+(((-1.0)*r22*x3308))+(((-1.0)*x3307*x3309)));
evalcond[2]=(cj0+((r11*x3311))+(((-1.0)*x3306*x3309))+(((-1.0)*r12*x3308)));
evalcond[3]=((((-1.0)*x3305*x3308))+((r02*x3303))+((r01*x3310))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3304))+((r11*x3310))+(((-1.0)*x3306*x3308))+((r12*x3303)));
evalcond[5]=((((-1.0)*x3305*x3309))+(((-1.0)*x3304))+(((-1.0)*r02*x3308))+((r01*x3311)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-7.63358778625954)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((7.63358778625954)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-7.63358778625954)*px))+IKsqr(((7.63358778625954)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-7.63358778625954)*px), ((7.63358778625954)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.131)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.131)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3312=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3312;
j4eval[1]=IKsign(x3312);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3313=((1.0)*cj5);
IkReal x3314=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3313)));
j4eval[0]=x3314;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3313))))));
j4eval[2]=IKsign(x3314);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3315=cj5*cj5;
IkReal x3316=((1.0)*r20);
IkReal x3317=(r01*r21);
IkReal x3318=(r21*sj5);
IkReal x3319=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x3318))+((x3315*x3317))+(((-1.0)*r00*x3315*x3316))+(((-1.0)*x3317)));
j4eval[0]=x3319;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*x3318))+(((-1.0)*cj0*cj5*x3316))))));
j4eval[2]=IKsign(x3319);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3320=cj5*cj5;
IkReal x3321=((1.0)*r20);
IkReal x3322=(r01*r21);
IkReal x3323=(r21*sj5);
CheckValue<IkReal> x3324=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*x3322))+(((-1.0)*r02*r22))+((cj5*r00*x3323))+((x3320*x3322))+(((-1.0)*r00*x3320*x3321)))),-1);
if(!x3324.valid){
continue;
}
CheckValue<IkReal> x3325 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x3321))+((cj0*x3323)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3325.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3324.value)))+(x3325.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3326=IKcos(j4);
IkReal x3327=IKsin(j4);
IkReal x3328=(cj5*r00);
IkReal x3329=(cj5*r10);
IkReal x3330=(cj5*r20);
IkReal x3331=((1.0)*x3326);
IkReal x3332=((1.0)*x3327);
IkReal x3333=(sj5*x3326);
IkReal x3334=(sj5*x3327);
evalcond[0]=(((r22*x3327))+((r21*x3333))+(((-1.0)*x3330*x3331)));
evalcond[1]=(((r21*x3334))+(((-1.0)*x3330*x3332))+(((-1.0)*r22*x3331)));
evalcond[2]=(cj0+((r01*x3333))+((r02*x3327))+(((-1.0)*x3328*x3331)));
evalcond[3]=(((r12*x3327))+sj0+((r11*x3333))+(((-1.0)*x3329*x3331)));
evalcond[4]=(cj0+((r11*x3334))+(((-1.0)*x3329*x3332))+(((-1.0)*r12*x3331)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3331))+((r01*x3334))+(((-1.0)*x3328*x3332)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3335=((1.0)*cj5);
CheckValue<IkReal> x3336=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3335)))),-1);
if(!x3336.valid){
continue;
}
CheckValue<IkReal> x3337 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3335)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3337.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3336.value)))+(x3337.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3338=IKcos(j4);
IkReal x3339=IKsin(j4);
IkReal x3340=(cj5*r00);
IkReal x3341=(cj5*r10);
IkReal x3342=(cj5*r20);
IkReal x3343=((1.0)*x3338);
IkReal x3344=((1.0)*x3339);
IkReal x3345=(sj5*x3338);
IkReal x3346=(sj5*x3339);
evalcond[0]=(((r21*x3345))+((r22*x3339))+(((-1.0)*x3342*x3343)));
evalcond[1]=(((r21*x3346))+(((-1.0)*x3342*x3344))+(((-1.0)*r22*x3343)));
evalcond[2]=((((-1.0)*x3340*x3343))+cj0+((r02*x3339))+((r01*x3345)));
evalcond[3]=(sj0+(((-1.0)*x3341*x3343))+((r12*x3339))+((r11*x3345)));
evalcond[4]=(cj0+(((-1.0)*x3341*x3344))+(((-1.0)*r12*x3343))+((r11*x3346)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3340*x3344))+(((-1.0)*r02*x3343))+((r01*x3346)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3347 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3347.valid){
continue;
}
CheckValue<IkReal> x3348=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3348.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3347.value)+(((1.5707963267949)*(x3348.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3349=IKcos(j4);
IkReal x3350=IKsin(j4);
IkReal x3351=(cj5*r00);
IkReal x3352=(cj5*r10);
IkReal x3353=(cj5*r20);
IkReal x3354=((1.0)*x3349);
IkReal x3355=((1.0)*x3350);
IkReal x3356=(sj5*x3349);
IkReal x3357=(sj5*x3350);
evalcond[0]=((((-1.0)*x3353*x3354))+((r21*x3356))+((r22*x3350)));
evalcond[1]=((((-1.0)*x3353*x3355))+((r21*x3357))+(((-1.0)*r22*x3354)));
evalcond[2]=(cj0+((r01*x3356))+(((-1.0)*x3351*x3354))+((r02*x3350)));
evalcond[3]=((((-1.0)*x3352*x3354))+((r12*x3350))+sj0+((r11*x3356)));
evalcond[4]=((((-1.0)*x3352*x3355))+cj0+((r11*x3357))+(((-1.0)*r12*x3354)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3354))+((r01*x3357))+(((-1.0)*x3351*x3355)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-3.1813499876136)*py))+(((-1.7080198703991)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-3.1813499876136)*px))+(((1.7080198703991)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.1813499876136)*py))+(((-1.7080198703991)*px))))+IKsqr(((((-3.1813499876136)*px))+(((1.7080198703991)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-3.1813499876136)*py))+(((-1.7080198703991)*px))), ((((-3.1813499876136)*px))+(((1.7080198703991)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3358=IKcos(j0);
IkReal x3359=IKsin(j0);
evalcond[0]=((((-0.131)*x3359))+(((-1.0)*px))+(((-0.244)*x3358)));
evalcond[1]=((((-1.0)*py))+(((-0.244)*x3359))+(((0.131)*x3358)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3360=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3360;
j4eval[1]=IKsign(x3360);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3361=((1.0)*cj5);
IkReal x3362=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3361)));
j4eval[0]=x3362;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3361)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3362);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3363=cj5*cj5;
IkReal x3364=((1.0)*r20);
IkReal x3365=(r01*r21);
IkReal x3366=(r21*sj5);
IkReal x3367=(((cj5*r01*r20*sj5))+((x3363*x3365))+(((-1.0)*r02*r22))+(((-1.0)*r00*x3363*x3364))+(((-1.0)*x3365))+((cj5*r00*x3366)));
j4eval[0]=x3367;
j4eval[1]=((IKabs((((cj0*x3366))+(((-1.0)*cj0*cj5*x3364)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3367);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3368=cj5*cj5;
IkReal x3369=((1.0)*r20);
IkReal x3370=(r01*r21);
IkReal x3371=(r21*sj5);
CheckValue<IkReal> x3372 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3371))+(((-1.0)*cj0*cj5*x3369)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3372.valid){
continue;
}
CheckValue<IkReal> x3373=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*x3370))+((cj5*r00*x3371))+(((-1.0)*r02*r22))+((x3368*x3370))+(((-1.0)*r00*x3368*x3369)))),-1);
if(!x3373.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3372.value)+(((1.5707963267949)*(x3373.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3374=IKcos(j4);
IkReal x3375=IKsin(j4);
IkReal x3376=(cj5*r00);
IkReal x3377=(cj5*r10);
IkReal x3378=(cj5*r20);
IkReal x3379=((1.0)*x3374);
IkReal x3380=((1.0)*x3375);
IkReal x3381=(sj5*x3374);
IkReal x3382=(sj5*x3375);
evalcond[0]=(((r22*x3375))+((r21*x3381))+(((-1.0)*x3378*x3379)));
evalcond[1]=((((-1.0)*r22*x3379))+(((-1.0)*x3378*x3380))+((r21*x3382)));
evalcond[2]=(((r01*x3381))+cj0+((r02*x3375))+(((-1.0)*x3376*x3379)));
evalcond[3]=(((r12*x3375))+sj0+(((-1.0)*x3377*x3379))+((r11*x3381)));
evalcond[4]=(cj0+(((-1.0)*x3377*x3380))+(((-1.0)*r12*x3379))+((r11*x3382)));
evalcond[5]=(((r01*x3382))+(((-1.0)*sj0))+(((-1.0)*x3376*x3380))+(((-1.0)*r02*x3379)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3383=((1.0)*cj5);
CheckValue<IkReal> x3384=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3383)))),-1);
if(!x3384.valid){
continue;
}
CheckValue<IkReal> x3385 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3383)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3385.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3384.value)))+(x3385.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3386=IKcos(j4);
IkReal x3387=IKsin(j4);
IkReal x3388=(cj5*r00);
IkReal x3389=(cj5*r10);
IkReal x3390=(cj5*r20);
IkReal x3391=((1.0)*x3386);
IkReal x3392=((1.0)*x3387);
IkReal x3393=(sj5*x3386);
IkReal x3394=(sj5*x3387);
evalcond[0]=(((r21*x3393))+((r22*x3387))+(((-1.0)*x3390*x3391)));
evalcond[1]=((((-1.0)*r22*x3391))+((r21*x3394))+(((-1.0)*x3390*x3392)));
evalcond[2]=(cj0+((r01*x3393))+((r02*x3387))+(((-1.0)*x3388*x3391)));
evalcond[3]=(sj0+(((-1.0)*x3389*x3391))+((r11*x3393))+((r12*x3387)));
evalcond[4]=(cj0+(((-1.0)*x3389*x3392))+((r11*x3394))+(((-1.0)*r12*x3391)));
evalcond[5]=((((-1.0)*sj0))+((r01*x3394))+(((-1.0)*r02*x3391))+(((-1.0)*x3388*x3392)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3395 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3395.valid){
continue;
}
CheckValue<IkReal> x3396=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3396.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3395.value)+(((1.5707963267949)*(x3396.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3397=IKcos(j4);
IkReal x3398=IKsin(j4);
IkReal x3399=(cj5*r00);
IkReal x3400=(cj5*r10);
IkReal x3401=(cj5*r20);
IkReal x3402=((1.0)*x3397);
IkReal x3403=((1.0)*x3398);
IkReal x3404=(sj5*x3397);
IkReal x3405=(sj5*x3398);
evalcond[0]=((((-1.0)*x3401*x3402))+((r21*x3404))+((r22*x3398)));
evalcond[1]=((((-1.0)*x3401*x3403))+((r21*x3405))+(((-1.0)*r22*x3402)));
evalcond[2]=(cj0+(((-1.0)*x3399*x3402))+((r02*x3398))+((r01*x3404)));
evalcond[3]=((((-1.0)*x3400*x3402))+sj0+((r11*x3404))+((r12*x3398)));
evalcond[4]=((((-1.0)*x3400*x3403))+cj0+((r11*x3405))+(((-1.0)*r12*x3402)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3399*x3403))+(((-1.0)*r02*x3402))+((r01*x3405)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-3.1813499876136)*py))+(((-1.7080198703991)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-3.1813499876136)*px))+(((1.7080198703991)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.1813499876136)*py))+(((-1.7080198703991)*px))))+IKsqr(((((-3.1813499876136)*px))+(((1.7080198703991)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-3.1813499876136)*py))+(((-1.7080198703991)*px))), ((((-3.1813499876136)*px))+(((1.7080198703991)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3406=IKcos(j0);
IkReal x3407=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.131)*x3407))+(((-0.244)*x3406)));
evalcond[1]=((((-1.0)*py))+(((-0.244)*x3407))+(((0.131)*x3406)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3408=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3408;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3408);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3409=((1.0)*cj5);
IkReal x3410=((((-1.0)*r01*x3409))+(((-1.0)*r00*sj5)));
j4eval[0]=x3410;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3409))))));
j4eval[2]=IKsign(x3410);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3411=((1.0)*cj5);
IkReal x3412=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3411)));
j4eval[0]=x3412;
j4eval[1]=IKsign(x3412);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3411))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3413=((1.0)*cj5);
CheckValue<IkReal> x3414=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3413)))),-1);
if(!x3414.valid){
continue;
}
CheckValue<IkReal> x3415 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3413)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3415.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3414.value)))+(x3415.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3416=IKcos(j4);
IkReal x3417=IKsin(j4);
IkReal x3418=((1.0)*sj0);
IkReal x3419=(cj5*r00);
IkReal x3420=(cj5*r10);
IkReal x3421=(cj5*r20);
IkReal x3422=((1.0)*x3416);
IkReal x3423=((1.0)*x3417);
IkReal x3424=(sj5*x3416);
IkReal x3425=(sj5*x3417);
evalcond[0]=(((r22*x3417))+((r21*x3424))+(((-1.0)*x3421*x3422)));
evalcond[1]=((((-1.0)*r22*x3422))+((r21*x3425))+(((-1.0)*x3421*x3423)));
evalcond[2]=((((-1.0)*r12*x3422))+cj0+(((-1.0)*x3420*x3423))+((r11*x3425)));
evalcond[3]=(((r02*x3417))+(((-1.0)*x3419*x3422))+(((-1.0)*cj0))+((r01*x3424)));
evalcond[4]=((((-1.0)*x3420*x3422))+((r12*x3417))+((r11*x3424))+(((-1.0)*x3418)));
evalcond[5]=((((-1.0)*x3419*x3423))+(((-1.0)*r02*x3422))+((r01*x3425))+(((-1.0)*x3418)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3426=((1.0)*cj5);
CheckValue<IkReal> x3427=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3426)))),-1);
if(!x3427.valid){
continue;
}
CheckValue<IkReal> x3428 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3426)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3428.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3427.value)))+(x3428.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3429=IKcos(j4);
IkReal x3430=IKsin(j4);
IkReal x3431=((1.0)*sj0);
IkReal x3432=(cj5*r00);
IkReal x3433=(cj5*r10);
IkReal x3434=(cj5*r20);
IkReal x3435=((1.0)*x3429);
IkReal x3436=((1.0)*x3430);
IkReal x3437=(sj5*x3429);
IkReal x3438=(sj5*x3430);
evalcond[0]=((((-1.0)*x3434*x3435))+((r21*x3437))+((r22*x3430)));
evalcond[1]=((((-1.0)*x3434*x3436))+(((-1.0)*r22*x3435))+((r21*x3438)));
evalcond[2]=((((-1.0)*r12*x3435))+cj0+(((-1.0)*x3433*x3436))+((r11*x3438)));
evalcond[3]=(((r01*x3437))+(((-1.0)*x3432*x3435))+((r02*x3430))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3433*x3435))+(((-1.0)*x3431))+((r12*x3430))+((r11*x3437)));
evalcond[5]=(((r01*x3438))+(((-1.0)*x3432*x3436))+(((-1.0)*x3431))+(((-1.0)*r02*x3435)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3439 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3439.valid){
continue;
}
CheckValue<IkReal> x3440=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3440.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3439.value)+(((1.5707963267949)*(x3440.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3441=IKcos(j4);
IkReal x3442=IKsin(j4);
IkReal x3443=((1.0)*sj0);
IkReal x3444=(cj5*r00);
IkReal x3445=(cj5*r10);
IkReal x3446=(cj5*r20);
IkReal x3447=((1.0)*x3441);
IkReal x3448=((1.0)*x3442);
IkReal x3449=(sj5*x3441);
IkReal x3450=(sj5*x3442);
evalcond[0]=(((r21*x3449))+((r22*x3442))+(((-1.0)*x3446*x3447)));
evalcond[1]=(((r21*x3450))+(((-1.0)*x3446*x3448))+(((-1.0)*r22*x3447)));
evalcond[2]=(cj0+(((-1.0)*r12*x3447))+(((-1.0)*x3445*x3448))+((r11*x3450)));
evalcond[3]=(((r02*x3442))+(((-1.0)*x3444*x3447))+((r01*x3449))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x3449))+((r12*x3442))+(((-1.0)*x3445*x3447))+(((-1.0)*x3443)));
evalcond[5]=((((-1.0)*x3444*x3448))+(((-1.0)*r02*x3447))+((r01*x3450))+(((-1.0)*x3443)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-7.63358778625954)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((7.63358778625954)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-7.63358778625954)*px))+IKsqr(((7.63358778625954)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-7.63358778625954)*px), ((7.63358778625954)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.131)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.131)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3451=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3451;
j4eval[1]=IKsign(x3451);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3452=((1.0)*cj5);
IkReal x3453=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3452)));
j4eval[0]=x3453;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x3452))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x3453);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3454=cj5*cj5;
IkReal x3455=((1.0)*r20);
IkReal x3456=(r01*r21);
IkReal x3457=(r21*sj5);
IkReal x3458=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x3454*x3455))+(((-1.0)*x3456))+((x3454*x3456))+((cj5*r00*x3457)));
j4eval[0]=x3458;
j4eval[1]=((IKabs((((cj0*x3457))+(((-1.0)*cj0*cj5*x3455)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3458);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3459=cj5*cj5;
IkReal x3460=((1.0)*r20);
IkReal x3461=(r01*r21);
IkReal x3462=(r21*sj5);
CheckValue<IkReal> x3463 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3462))+(((-1.0)*cj0*cj5*x3460)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3463.valid){
continue;
}
CheckValue<IkReal> x3464=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x3459*x3460))+(((-1.0)*x3461))+((cj5*r00*x3462))+((x3459*x3461)))),-1);
if(!x3464.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3463.value)+(((1.5707963267949)*(x3464.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3465=IKcos(j4);
IkReal x3466=IKsin(j4);
IkReal x3467=(cj5*r00);
IkReal x3468=(cj5*r10);
IkReal x3469=(cj5*r20);
IkReal x3470=((1.0)*x3465);
IkReal x3471=((1.0)*x3466);
IkReal x3472=(sj5*x3465);
IkReal x3473=(sj5*x3466);
evalcond[0]=((((-1.0)*x3469*x3470))+((r21*x3472))+((r22*x3466)));
evalcond[1]=((((-1.0)*x3469*x3471))+(((-1.0)*r22*x3470))+((r21*x3473)));
evalcond[2]=((((-1.0)*x3467*x3470))+cj0+((r01*x3472))+((r02*x3466)));
evalcond[3]=(sj0+((r12*x3466))+((r11*x3472))+(((-1.0)*x3468*x3470)));
evalcond[4]=(cj0+(((-1.0)*r12*x3470))+((r11*x3473))+(((-1.0)*x3468*x3471)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3467*x3471))+(((-1.0)*r02*x3470))+((r01*x3473)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3474=((1.0)*cj5);
CheckValue<IkReal> x3475 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3474)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3475.valid){
continue;
}
CheckValue<IkReal> x3476=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3474)))),-1);
if(!x3476.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3475.value)+(((1.5707963267949)*(x3476.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3477=IKcos(j4);
IkReal x3478=IKsin(j4);
IkReal x3479=(cj5*r00);
IkReal x3480=(cj5*r10);
IkReal x3481=(cj5*r20);
IkReal x3482=((1.0)*x3477);
IkReal x3483=((1.0)*x3478);
IkReal x3484=(sj5*x3477);
IkReal x3485=(sj5*x3478);
evalcond[0]=((((-1.0)*x3481*x3482))+((r21*x3484))+((r22*x3478)));
evalcond[1]=((((-1.0)*x3481*x3483))+(((-1.0)*r22*x3482))+((r21*x3485)));
evalcond[2]=(cj0+(((-1.0)*x3479*x3482))+((r01*x3484))+((r02*x3478)));
evalcond[3]=(sj0+((r12*x3478))+((r11*x3484))+(((-1.0)*x3480*x3482)));
evalcond[4]=(cj0+(((-1.0)*r12*x3482))+((r11*x3485))+(((-1.0)*x3480*x3483)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3482))+(((-1.0)*x3479*x3483))+((r01*x3485)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3486 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3486.valid){
continue;
}
CheckValue<IkReal> x3487=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3487.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3486.value)+(((1.5707963267949)*(x3487.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3488=IKcos(j4);
IkReal x3489=IKsin(j4);
IkReal x3490=(cj5*r00);
IkReal x3491=(cj5*r10);
IkReal x3492=(cj5*r20);
IkReal x3493=((1.0)*x3488);
IkReal x3494=((1.0)*x3489);
IkReal x3495=(sj5*x3488);
IkReal x3496=(sj5*x3489);
evalcond[0]=((((-1.0)*x3492*x3493))+((r21*x3495))+((r22*x3489)));
evalcond[1]=((((-1.0)*r22*x3493))+(((-1.0)*x3492*x3494))+((r21*x3496)));
evalcond[2]=(((r01*x3495))+cj0+(((-1.0)*x3490*x3493))+((r02*x3489)));
evalcond[3]=(sj0+((r12*x3489))+((r11*x3495))+(((-1.0)*x3491*x3493)));
evalcond[4]=((((-1.0)*r12*x3493))+cj0+((r11*x3496))+(((-1.0)*x3491*x3494)));
evalcond[5]=((((-1.0)*r02*x3493))+(((-1.0)*sj0))+((r01*x3496))+(((-1.0)*x3490*x3494)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-7.63358778625954)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((7.63358778625954)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-7.63358778625954)*px))+IKsqr(((7.63358778625954)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-7.63358778625954)*px), ((7.63358778625954)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.131)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.131)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3497=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3497;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3497);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3498=((1.0)*cj5);
IkReal x3499=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3498)));
j4eval[0]=x3499;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3498)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3499);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3500=((1.0)*cj5);
IkReal x3501=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3500)));
j4eval[0]=x3501;
j4eval[1]=IKsign(x3501);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x3500))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3502=((1.0)*cj5);
CheckValue<IkReal> x3503=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3502)))),-1);
if(!x3503.valid){
continue;
}
CheckValue<IkReal> x3504 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x3502))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3504.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3503.value)))+(x3504.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3505=IKcos(j4);
IkReal x3506=IKsin(j4);
IkReal x3507=((1.0)*sj0);
IkReal x3508=(cj5*r00);
IkReal x3509=(cj5*r10);
IkReal x3510=(cj5*r20);
IkReal x3511=((1.0)*x3505);
IkReal x3512=((1.0)*x3506);
IkReal x3513=(sj5*x3505);
IkReal x3514=(sj5*x3506);
evalcond[0]=(((r21*x3513))+(((-1.0)*x3510*x3511))+((r22*x3506)));
evalcond[1]=(((r21*x3514))+(((-1.0)*x3510*x3512))+(((-1.0)*r22*x3511)));
evalcond[2]=(cj0+(((-1.0)*x3509*x3512))+((r11*x3514))+(((-1.0)*r12*x3511)));
evalcond[3]=(((r01*x3513))+(((-1.0)*x3508*x3511))+((r02*x3506))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3509*x3511))+(((-1.0)*x3507))+((r12*x3506))+((r11*x3513)));
evalcond[5]=((((-1.0)*r02*x3511))+((r01*x3514))+(((-1.0)*x3507))+(((-1.0)*x3508*x3512)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3515=((1.0)*cj5);
CheckValue<IkReal> x3516 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3515)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3516.valid){
continue;
}
CheckValue<IkReal> x3517=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3515)))),-1);
if(!x3517.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3516.value)+(((1.5707963267949)*(x3517.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3518=IKcos(j4);
IkReal x3519=IKsin(j4);
IkReal x3520=((1.0)*sj0);
IkReal x3521=(cj5*r00);
IkReal x3522=(cj5*r10);
IkReal x3523=(cj5*r20);
IkReal x3524=((1.0)*x3518);
IkReal x3525=((1.0)*x3519);
IkReal x3526=(sj5*x3518);
IkReal x3527=(sj5*x3519);
evalcond[0]=(((r21*x3526))+((r22*x3519))+(((-1.0)*x3523*x3524)));
evalcond[1]=(((r21*x3527))+(((-1.0)*r22*x3524))+(((-1.0)*x3523*x3525)));
evalcond[2]=((((-1.0)*x3522*x3525))+cj0+((r11*x3527))+(((-1.0)*r12*x3524)));
evalcond[3]=(((r01*x3526))+((r02*x3519))+(((-1.0)*x3521*x3524))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3522*x3524))+(((-1.0)*x3520))+((r11*x3526))+((r12*x3519)));
evalcond[5]=((((-1.0)*r02*x3524))+((r01*x3527))+(((-1.0)*x3520))+(((-1.0)*x3521*x3525)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3528 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3528.valid){
continue;
}
CheckValue<IkReal> x3529=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3529.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3528.value)+(((1.5707963267949)*(x3529.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3530=IKcos(j4);
IkReal x3531=IKsin(j4);
IkReal x3532=((1.0)*sj0);
IkReal x3533=(cj5*r00);
IkReal x3534=(cj5*r10);
IkReal x3535=(cj5*r20);
IkReal x3536=((1.0)*x3530);
IkReal x3537=((1.0)*x3531);
IkReal x3538=(sj5*x3530);
IkReal x3539=(sj5*x3531);
evalcond[0]=((((-1.0)*x3535*x3536))+((r22*x3531))+((r21*x3538)));
evalcond[1]=((((-1.0)*x3535*x3537))+((r21*x3539))+(((-1.0)*r22*x3536)));
evalcond[2]=(((r11*x3539))+cj0+(((-1.0)*r12*x3536))+(((-1.0)*x3534*x3537)));
evalcond[3]=(((r02*x3531))+((r01*x3538))+(((-1.0)*x3533*x3536))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x3538))+((r12*x3531))+(((-1.0)*x3532))+(((-1.0)*x3534*x3536)));
evalcond[5]=((((-1.0)*r02*x3536))+((r01*x3539))+(((-1.0)*x3532))+(((-1.0)*x3533*x3537)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3540=(r00*sj5);
IkReal x3541=((244.0)*cj1);
IkReal x3542=(cj1*cj2);
IkReal x3543=(cj5*r01);
IkReal x3544=(sj1*sj2);
IkReal x3545=((1000.0)*px);
CheckValue<IkReal> x3546=IKPowWithIntegerCheck(((((-131.0)*x3542))+(((131.0)*x3544))),-1);
if(!x3546.valid){
continue;
}
CheckValue<IkReal> x3547=IKPowWithIntegerCheck((x3544+(((-1.0)*x3542))),-1);
if(!x3547.valid){
continue;
}
if( IKabs(((x3546.value)*((((x3541*x3543))+(((-298.0)*x3540*x3544))+((x3542*x3545))+(((298.0)*x3540*x3542))+(((298.0)*x3542*x3543))+((x3540*x3541))+(((-298.0)*x3543*x3544))+(((-1.0)*x3544*x3545)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3547.value)*((x3540+x3543)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3546.value)*((((x3541*x3543))+(((-298.0)*x3540*x3544))+((x3542*x3545))+(((298.0)*x3540*x3542))+(((298.0)*x3542*x3543))+((x3540*x3541))+(((-298.0)*x3543*x3544))+(((-1.0)*x3544*x3545))))))+IKsqr(((x3547.value)*((x3540+x3543))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x3546.value)*((((x3541*x3543))+(((-298.0)*x3540*x3544))+((x3542*x3545))+(((298.0)*x3540*x3542))+(((298.0)*x3542*x3543))+((x3540*x3541))+(((-298.0)*x3543*x3544))+(((-1.0)*x3544*x3545))))), ((x3547.value)*((x3540+x3543))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x3548=IKcos(j0);
IkReal x3549=IKsin(j0);
IkReal x3550=(sj1*sj2);
IkReal x3551=(r00*sj5);
IkReal x3552=((1.0)*cj5);
IkReal x3553=(r10*sj5);
IkReal x3554=(cj1*cj2);
IkReal x3555=((0.244)*cj1);
IkReal x3556=((0.085)*cj5);
IkReal x3557=((0.213)*x3548);
IkReal x3558=((0.213)*x3549);
evalcond[0]=((((-1.0)*r01*x3552))+((x3548*x3550))+(((-1.0)*x3551))+(((-1.0)*x3548*x3554)));
evalcond[1]=((((-1.0)*x3549*x3554))+(((-1.0)*r11*x3552))+(((-1.0)*x3553))+((x3549*x3550)));
evalcond[2]=((((-0.085)*x3551))+(((-1.0)*r01*x3556))+((x3548*x3555))+(((-1.0)*px))+(((-1.0)*x3550*x3557))+(((-0.131)*x3549))+((x3554*x3557)));
evalcond[3]=((((0.131)*x3548))+(((-0.085)*x3553))+(((-1.0)*py))+(((-1.0)*r11*x3556))+(((-1.0)*x3550*x3558))+((x3549*x3555))+((x3554*x3558)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3559=((1.0)*cj5);
IkReal x3560=((((-1.0)*r01*x3559))+(((-1.0)*r00*sj5)));
j4eval[0]=x3560;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3559)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3560);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3561=((1.0)*cj5);
IkReal x3562=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3561)));
j4eval[0]=x3562;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x3561))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x3562);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3563=((1.0)*sj0);
IkReal x3564=((1.0)*cj0);
IkReal x3565=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x3565;
j4eval[1]=((IKabs(((((-1.0)*r02*x3564))+(((-1.0)*r12*x3563)))))+(IKabs(((((-1.0)*r01*sj5*x3564))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x3563))))));
j4eval[2]=IKsign(x3565);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x3566=((-1.0)*r20);
IkReal x3568 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3568)==0){
continue;
}
IkReal x3567=pow(x3568,-0.5);
CheckValue<IkReal> x3569 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3566),IKFAST_ATAN2_MAGTHRESH);
if(!x3569.valid){
continue;
}
IkReal gconst96=((-1.0)*(x3569.value));
IkReal gconst97=(r21*x3567);
IkReal gconst98=(x3566*x3567);
CheckValue<IkReal> x3570 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3570.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3570.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3571=((-1.0)*r20);
IkReal x3572=x3567;
CheckValue<IkReal> x3574 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3571),IKFAST_ATAN2_MAGTHRESH);
if(!x3574.valid){
continue;
}
IkReal x3573=((-1.0)*(x3574.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3573;
IkReal gconst96=x3573;
IkReal gconst97=(r21*x3572);
IkReal gconst98=(x3571*x3572);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3575=((-1.0)*r20);
IkReal x3576=x3567;
CheckValue<IkReal> x3578 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3575),IKFAST_ATAN2_MAGTHRESH);
if(!x3578.valid){
continue;
}
IkReal x3577=((-1.0)*(x3578.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3577;
IkReal gconst96=x3577;
IkReal gconst97=(r21*x3576);
IkReal gconst98=(x3575*x3576);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x3579=((-1.0)*r20);
IkReal x3580=x3567;
CheckValue<IkReal> x3582 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3579),IKFAST_ATAN2_MAGTHRESH);
if(!x3582.valid){
continue;
}
IkReal x3581=((-1.0)*(x3582.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3581;
IkReal gconst96=x3581;
IkReal gconst97=(r21*x3580);
IkReal gconst98=(x3579*x3580);
IkReal x3583=((1.0)*(r22*r22));
CheckValue<IkReal> x3587=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x3583))),-1);
if(!x3587.valid){
continue;
}
IkReal x3584=x3587.value;
IkReal x3585=((1.0)*x3584);
IkReal x3586=((((-1.0)*x3585*(r21*r21*r21*r21)))+(((-2.0)*x3584*(r20*r20)*(r21*r21)))+(((-1.0)*x3583))+(((-1.0)*x3585*(r20*r20*r20*r20))));
j4eval[0]=x3586;
j4eval[1]=IKsign(x3586);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3588=(cj1*cj2);
IkReal x3589=(gconst98*r20);
IkReal x3590=(sj1*sj2);
IkReal x3591=(gconst97*r21);
CheckValue<IkReal> x3592=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x3589*x3589)))+(((-1.0)*(r22*r22)))+(((2.0)*x3589*x3591))+(((-1.0)*(x3591*x3591))))),-1);
if(!x3592.valid){
continue;
}
CheckValue<IkReal> x3593 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x3588))+((r22*x3590)))),IkReal(((((-1.0)*x3588*x3591))+(((-1.0)*x3589*x3590))+((x3588*x3589))+((x3590*x3591)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3593.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3592.value)))+(x3593.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3594=IKsin(j4);
IkReal x3595=IKcos(j4);
IkReal x3596=(gconst98*r10);
IkReal x3597=(gconst97*r21);
IkReal x3598=(gconst98*r20);
IkReal x3599=((1.0)*cj2);
IkReal x3600=((1.0)*sj0);
IkReal x3601=(gconst98*r00);
IkReal x3602=(cj1*sj2);
IkReal x3603=((1.0)*x3595);
IkReal x3604=((1.0)*x3594);
IkReal x3605=(gconst97*x3594);
IkReal x3606=(gconst97*x3595);
evalcond[0]=((((-1.0)*x3598*x3604))+(((-1.0)*r22*x3603))+((x3594*x3597)));
evalcond[1]=(((r11*x3605))+cj0+(((-1.0)*r12*x3603))+(((-1.0)*x3596*x3604)));
evalcond[2]=((((-1.0)*r02*x3603))+(((-1.0)*x3601*x3604))+((r01*x3605))+(((-1.0)*x3600)));
evalcond[3]=((((-1.0)*cj1*x3599))+(((-1.0)*x3598*x3603))+((x3595*x3597))+((sj1*sj2))+((r22*x3594)));
evalcond[4]=(((r02*x3594))+(((-1.0)*x3601*x3603))+((r01*x3606))+(((-1.0)*cj0*x3602))+(((-1.0)*cj0*sj1*x3599)));
evalcond[5]=(((r11*x3606))+((r12*x3594))+(((-1.0)*x3600*x3602))+(((-1.0)*sj0*sj1*x3599))+(((-1.0)*x3596*x3603)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3607=((1.0)*gconst98);
CheckValue<IkReal> x3608 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst97*r21*sj0))+(((-1.0)*r20*sj0*x3607)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3608.valid){
continue;
}
CheckValue<IkReal> x3609=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3607))+(((-1.0)*gconst97*r10)))),-1);
if(!x3609.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3608.value)+(((1.5707963267949)*(x3609.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3610=IKsin(j4);
IkReal x3611=IKcos(j4);
IkReal x3612=(gconst98*r10);
IkReal x3613=(gconst97*r21);
IkReal x3614=(gconst98*r20);
IkReal x3615=((1.0)*cj2);
IkReal x3616=((1.0)*sj0);
IkReal x3617=(gconst98*r00);
IkReal x3618=(cj1*sj2);
IkReal x3619=((1.0)*x3611);
IkReal x3620=((1.0)*x3610);
IkReal x3621=(gconst97*x3610);
IkReal x3622=(gconst97*x3611);
evalcond[0]=((((-1.0)*x3614*x3620))+((x3610*x3613))+(((-1.0)*r22*x3619)));
evalcond[1]=(cj0+(((-1.0)*r12*x3619))+((r11*x3621))+(((-1.0)*x3612*x3620)));
evalcond[2]=(((r01*x3621))+(((-1.0)*r02*x3619))+(((-1.0)*x3616))+(((-1.0)*x3617*x3620)));
evalcond[3]=(((r22*x3610))+((sj1*sj2))+(((-1.0)*x3614*x3619))+((x3611*x3613))+(((-1.0)*cj1*x3615)));
evalcond[4]=((((-1.0)*x3617*x3619))+((r02*x3610))+((r01*x3622))+(((-1.0)*cj0*sj1*x3615))+(((-1.0)*cj0*x3618)));
evalcond[5]=((((-1.0)*x3616*x3618))+(((-1.0)*x3612*x3619))+((r11*x3622))+(((-1.0)*sj0*sj1*x3615))+((r12*x3610)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3623=((1.0)*gconst98);
CheckValue<IkReal> x3624=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3623))+(((-1.0)*gconst97*r00)))),-1);
if(!x3624.valid){
continue;
}
CheckValue<IkReal> x3625 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x3623))+((cj0*gconst97*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3625.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3624.value)))+(x3625.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3626=IKsin(j4);
IkReal x3627=IKcos(j4);
IkReal x3628=(gconst98*r10);
IkReal x3629=(gconst97*r21);
IkReal x3630=(gconst98*r20);
IkReal x3631=((1.0)*cj2);
IkReal x3632=((1.0)*sj0);
IkReal x3633=(gconst98*r00);
IkReal x3634=(cj1*sj2);
IkReal x3635=((1.0)*x3627);
IkReal x3636=((1.0)*x3626);
IkReal x3637=(gconst97*x3626);
IkReal x3638=(gconst97*x3627);
evalcond[0]=(((x3626*x3629))+(((-1.0)*x3630*x3636))+(((-1.0)*r22*x3635)));
evalcond[1]=(((r11*x3637))+(((-1.0)*x3628*x3636))+cj0+(((-1.0)*r12*x3635)));
evalcond[2]=((((-1.0)*x3633*x3636))+(((-1.0)*x3632))+(((-1.0)*r02*x3635))+((r01*x3637)));
evalcond[3]=((((-1.0)*cj1*x3631))+((x3627*x3629))+(((-1.0)*x3630*x3635))+((sj1*sj2))+((r22*x3626)));
evalcond[4]=((((-1.0)*x3633*x3635))+((r02*x3626))+(((-1.0)*cj0*sj1*x3631))+((r01*x3638))+(((-1.0)*cj0*x3634)));
evalcond[5]=(((r11*x3638))+(((-1.0)*x3628*x3635))+(((-1.0)*sj0*sj1*x3631))+((r12*x3626))+(((-1.0)*x3632*x3634)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3639=((-1.0)*r21);
IkReal x3641 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3641)==0){
continue;
}
IkReal x3640=pow(x3641,-0.5);
CheckValue<IkReal> x3642 = IKatan2WithCheck(IkReal(x3639),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3642.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x3642.value))));
IkReal gconst100=(x3639*x3640);
IkReal gconst101=((1.0)*r20*x3640);
CheckValue<IkReal> x3643 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3643.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3643.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3644=((-1.0)*r21);
CheckValue<IkReal> x3647 = IKatan2WithCheck(IkReal(x3644),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3647.valid){
continue;
}
IkReal x3645=((1.0)*(x3647.value));
IkReal x3646=x3640;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3645)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3645)));
IkReal gconst100=(x3644*x3646);
IkReal gconst101=((1.0)*r20*x3646);
IkReal x3648=r22*r22;
IkReal x3649=((1.0)*x3648);
CheckValue<IkReal> x3653=IKPowWithIntegerCheck(((-1.0)+x3648),-1);
if(!x3653.valid){
continue;
}
IkReal x3650=x3653.value;
if((((1.0)+(((-1.0)*x3649)))) < -0.00001)
continue;
IkReal x3651=IKsqrt(((1.0)+(((-1.0)*x3649))));
IkReal x3652=(cj0*x3650*x3651);
j4eval[0]=((IKabs((x3652+(((-1.0)*x3649*x3652)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3654=((-1.0)*r21);
CheckValue<IkReal> x3657 = IKatan2WithCheck(IkReal(x3654),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3657.valid){
continue;
}
IkReal x3655=((1.0)*(x3657.value));
IkReal x3656=x3640;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3655)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3655)));
IkReal gconst100=(x3654*x3656);
IkReal gconst101=((1.0)*r20*x3656);
IkReal x3658=r22*r22;
IkReal x3659=((1.0)*x3658);
CheckValue<IkReal> x3663=IKPowWithIntegerCheck(((-1.0)+x3658),-1);
if(!x3663.valid){
continue;
}
IkReal x3660=x3663.value;
if((((1.0)+(((-1.0)*x3659)))) < -0.00001)
continue;
IkReal x3661=IKsqrt(((1.0)+(((-1.0)*x3659))));
IkReal x3662=(sj0*x3660*x3661);
j4eval[0]=((IKabs(((((-1.0)*x3659*x3662))+x3662)))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3664=((-1.0)*r21);
CheckValue<IkReal> x3667 = IKatan2WithCheck(IkReal(x3664),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3667.valid){
continue;
}
IkReal x3665=((1.0)*(x3667.value));
IkReal x3666=x3640;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3665)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3665)));
IkReal gconst100=(x3664*x3666);
IkReal gconst101=((1.0)*r20*x3666);
IkReal x3668=r22*r22;
IkReal x3669=(r12*sj0);
IkReal x3670=(cj0*r02);
CheckValue<IkReal> x3674=IKPowWithIntegerCheck(((-1.0)+x3668),-1);
if(!x3674.valid){
continue;
}
IkReal x3671=x3674.value;
if((((1.0)+(((-1.0)*x3668)))) < -0.00001)
continue;
IkReal x3672=IKsqrt(((1.0)+(((-1.0)*x3668))));
IkReal x3673=(r22*x3671*x3672);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x3669))+(((-1.0)*x3670)))))+(IKabs((((x3670*x3673))+((x3669*x3673))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3675=((1.0)*sj0);
IkReal x3676=((1.0)*gconst100);
CheckValue<IkReal> x3677=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3676))+(((-1.0)*gconst101*r21)))),-1);
if(!x3677.valid){
continue;
}
CheckValue<IkReal> x3678 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3675))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst100*r11*x3675))+((gconst101*r10*sj0))+(((-1.0)*cj0*r01*x3676))+((cj0*gconst101*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3678.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3677.value)))+(x3678.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3679=IKsin(j4);
IkReal x3680=IKcos(j4);
IkReal x3681=(gconst101*r20);
IkReal x3682=(gconst101*r10);
IkReal x3683=((1.0)*cj2);
IkReal x3684=(gconst101*r00);
IkReal x3685=((1.0)*sj0);
IkReal x3686=(cj1*sj2);
IkReal x3687=((1.0)*x3680);
IkReal x3688=((1.0)*x3679);
IkReal x3689=(gconst100*x3679);
IkReal x3690=(gconst100*x3680);
evalcond[0]=((((-1.0)*r22*x3687))+((r21*x3689))+(((-1.0)*x3681*x3688)));
evalcond[1]=(cj0+(((-1.0)*x3682*x3688))+(((-1.0)*r12*x3687))+((r11*x3689)));
evalcond[2]=(((r01*x3689))+(((-1.0)*x3685))+(((-1.0)*x3684*x3688))+(((-1.0)*r02*x3687)));
evalcond[3]=(((sj1*sj2))+((r21*x3690))+(((-1.0)*cj1*x3683))+((r22*x3679))+(((-1.0)*x3681*x3687)));
evalcond[4]=(((r01*x3690))+(((-1.0)*cj0*x3686))+((r02*x3679))+(((-1.0)*x3684*x3687))+(((-1.0)*cj0*sj1*x3683)));
evalcond[5]=((((-1.0)*sj0*sj1*x3683))+((r12*x3679))+(((-1.0)*x3682*x3687))+(((-1.0)*x3685*x3686))+((r11*x3690)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3691=((1.0)*gconst101);
CheckValue<IkReal> x3692=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r10))+(((-1.0)*r11*x3691)))),-1);
if(!x3692.valid){
continue;
}
CheckValue<IkReal> x3693 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x3691))+((gconst100*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3693.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3692.value)))+(x3693.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3694=IKsin(j4);
IkReal x3695=IKcos(j4);
IkReal x3696=(gconst101*r20);
IkReal x3697=(gconst101*r10);
IkReal x3698=((1.0)*cj2);
IkReal x3699=(gconst101*r00);
IkReal x3700=((1.0)*sj0);
IkReal x3701=(cj1*sj2);
IkReal x3702=((1.0)*x3695);
IkReal x3703=((1.0)*x3694);
IkReal x3704=(gconst100*x3694);
IkReal x3705=(gconst100*x3695);
evalcond[0]=(((r21*x3704))+(((-1.0)*x3696*x3703))+(((-1.0)*r22*x3702)));
evalcond[1]=((((-1.0)*x3697*x3703))+cj0+((r11*x3704))+(((-1.0)*r12*x3702)));
evalcond[2]=((((-1.0)*x3699*x3703))+(((-1.0)*r02*x3702))+((r01*x3704))+(((-1.0)*x3700)));
evalcond[3]=((((-1.0)*cj1*x3698))+((sj1*sj2))+((r21*x3705))+((r22*x3694))+(((-1.0)*x3696*x3702)));
evalcond[4]=((((-1.0)*x3699*x3702))+(((-1.0)*cj0*x3701))+((r01*x3705))+((r02*x3694))+(((-1.0)*cj0*sj1*x3698)));
evalcond[5]=((((-1.0)*x3697*x3702))+((r11*x3705))+(((-1.0)*x3700*x3701))+(((-1.0)*sj0*sj1*x3698))+((r12*x3694)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3706=((1.0)*gconst101);
CheckValue<IkReal> x3707 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst100*r21))+(((-1.0)*cj0*r20*x3706)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3707.valid){
continue;
}
CheckValue<IkReal> x3708=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3706))+(((-1.0)*gconst100*r00)))),-1);
if(!x3708.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3707.value)+(((1.5707963267949)*(x3708.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3709=IKsin(j4);
IkReal x3710=IKcos(j4);
IkReal x3711=(gconst101*r20);
IkReal x3712=(gconst101*r10);
IkReal x3713=((1.0)*cj2);
IkReal x3714=(gconst101*r00);
IkReal x3715=((1.0)*sj0);
IkReal x3716=(cj1*sj2);
IkReal x3717=((1.0)*x3710);
IkReal x3718=((1.0)*x3709);
IkReal x3719=(gconst100*x3709);
IkReal x3720=(gconst100*x3710);
evalcond[0]=((((-1.0)*x3711*x3718))+((r21*x3719))+(((-1.0)*r22*x3717)));
evalcond[1]=(((r11*x3719))+cj0+(((-1.0)*r12*x3717))+(((-1.0)*x3712*x3718)));
evalcond[2]=((((-1.0)*x3714*x3718))+(((-1.0)*r02*x3717))+(((-1.0)*x3715))+((r01*x3719)));
evalcond[3]=((((-1.0)*x3711*x3717))+(((-1.0)*cj1*x3713))+((sj1*sj2))+((r22*x3709))+((r21*x3720)));
evalcond[4]=((((-1.0)*x3714*x3717))+((r01*x3720))+(((-1.0)*cj0*x3716))+((r02*x3709))+(((-1.0)*cj0*sj1*x3713)));
evalcond[5]=(((r12*x3709))+(((-1.0)*x3715*x3716))+((r11*x3720))+(((-1.0)*sj0*sj1*x3713))+(((-1.0)*x3712*x3717)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3721=((-1.0)*r10);
IkReal x3723 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3723)==0){
continue;
}
IkReal x3722=pow(x3723,-0.5);
CheckValue<IkReal> x3724 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x3721),IKFAST_ATAN2_MAGTHRESH);
if(!x3724.valid){
continue;
}
IkReal gconst102=((-1.0)*(x3724.value));
IkReal gconst103=(r11*x3722);
IkReal gconst104=(x3721*x3722);
CheckValue<IkReal> x3725 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3725.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3725.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3726=((-1.0)*r10);
IkReal x3727=x3722;
CheckValue<IkReal> x3729 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x3726),IKFAST_ATAN2_MAGTHRESH);
if(!x3729.valid){
continue;
}
IkReal x3728=((-1.0)*(x3729.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst103;
cj5=gconst104;
j5=x3728;
IkReal gconst102=x3728;
IkReal gconst103=(r11*x3727);
IkReal gconst104=(x3726*x3727);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3730=((1.0)*sj0);
IkReal x3731=((1.0)*gconst103);
CheckValue<IkReal> x3732 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3730))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x3731))+((gconst104*r10*sj0))+(((-1.0)*gconst103*r11*x3730))+((cj0*gconst104*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3732.valid){
continue;
}
CheckValue<IkReal> x3733=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst104*r21))+(((-1.0)*r20*x3731)))),-1);
if(!x3733.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3732.value)+(((1.5707963267949)*(x3733.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3734=IKsin(j4);
IkReal x3735=IKcos(j4);
IkReal x3736=(gconst103*r11);
IkReal x3737=((1.0)*cj2);
IkReal x3738=((1.0)*sj0);
IkReal x3739=(cj1*sj2);
IkReal x3740=((1.0)*x3735);
IkReal x3741=(gconst103*x3735);
IkReal x3742=(gconst103*x3734);
IkReal x3743=((1.0)*gconst104*x3734);
evalcond[0]=((((-1.0)*r22*x3740))+(((-1.0)*r20*x3743))+((r21*x3742)));
evalcond[1]=(cj0+((x3734*x3736))+(((-1.0)*r12*x3740))+(((-1.0)*r10*x3743)));
evalcond[2]=(((r01*x3742))+(((-1.0)*x3738))+(((-1.0)*r00*x3743))+(((-1.0)*r02*x3740)));
evalcond[3]=((((-1.0)*cj1*x3737))+(((-1.0)*gconst104*r20*x3740))+((sj1*sj2))+((r22*x3734))+((r21*x3741)));
evalcond[4]=((((-1.0)*gconst104*r00*x3740))+((r01*x3741))+(((-1.0)*cj0*x3739))+((r02*x3734))+(((-1.0)*cj0*sj1*x3737)));
evalcond[5]=((((-1.0)*sj0*sj1*x3737))+((x3735*x3736))+((r12*x3734))+(((-1.0)*x3738*x3739))+(((-1.0)*gconst104*r10*x3740)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3744=((1.0)*gconst104);
CheckValue<IkReal> x3745=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst103*r00))+(((-1.0)*r01*x3744)))),-1);
if(!x3745.valid){
continue;
}
CheckValue<IkReal> x3746 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x3744))+((cj0*gconst103*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3746.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3745.value)))+(x3746.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3747=IKsin(j4);
IkReal x3748=IKcos(j4);
IkReal x3749=(gconst103*r11);
IkReal x3750=((1.0)*cj2);
IkReal x3751=((1.0)*sj0);
IkReal x3752=(cj1*sj2);
IkReal x3753=((1.0)*x3748);
IkReal x3754=(gconst103*x3748);
IkReal x3755=(gconst103*x3747);
IkReal x3756=((1.0)*gconst104*x3747);
evalcond[0]=((((-1.0)*r22*x3753))+(((-1.0)*r20*x3756))+((r21*x3755)));
evalcond[1]=(cj0+(((-1.0)*r12*x3753))+(((-1.0)*r10*x3756))+((x3747*x3749)));
evalcond[2]=(((r01*x3755))+(((-1.0)*r00*x3756))+(((-1.0)*x3751))+(((-1.0)*r02*x3753)));
evalcond[3]=((((-1.0)*cj1*x3750))+(((-1.0)*gconst104*r20*x3753))+((sj1*sj2))+((r22*x3747))+((r21*x3754)));
evalcond[4]=((((-1.0)*gconst104*r00*x3753))+((r01*x3754))+(((-1.0)*cj0*x3752))+((r02*x3747))+(((-1.0)*cj0*sj1*x3750)));
evalcond[5]=((((-1.0)*sj0*sj1*x3750))+((r12*x3747))+((x3748*x3749))+(((-1.0)*x3751*x3752))+(((-1.0)*gconst104*r10*x3753)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3757=((-1.0)*r11);
IkReal x3759 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3759)==0){
continue;
}
IkReal x3758=pow(x3759,-0.5);
CheckValue<IkReal> x3760 = IKatan2WithCheck(IkReal(x3757),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3760.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x3760.value))));
IkReal gconst106=(x3757*x3758);
IkReal gconst107=((1.0)*r10*x3758);
CheckValue<IkReal> x3761 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3761.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3761.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3762=((-1.0)*r11);
CheckValue<IkReal> x3765 = IKatan2WithCheck(IkReal(x3762),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3765.valid){
continue;
}
IkReal x3763=((1.0)*(x3765.value));
IkReal x3764=x3758;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3763)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3763)));
IkReal gconst106=(x3762*x3764);
IkReal gconst107=((1.0)*r10*x3764);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3766=((-1.0)*r11);
CheckValue<IkReal> x3769 = IKatan2WithCheck(IkReal(x3766),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3769.valid){
continue;
}
IkReal x3767=((1.0)*(x3769.value));
IkReal x3768=x3758;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3767)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3767)));
IkReal gconst106=(x3766*x3768);
IkReal gconst107=((1.0)*r10*x3768);
IkReal x3770=r12*r12;
IkReal x3771=((1.0)*sj0);
IkReal x3772=(cj0*r02);
IkReal x3773=x3758;
j4eval[0]=((IKabs((((sj0*x3770*x3773))+(((-1.0)*x3771*x3773))+((r12*x3772*x3773)))))+(IKabs(((((-1.0)*x3772))+(((-1.0)*r12*x3771))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3774=((-1.0)*r11);
CheckValue<IkReal> x3777 = IKatan2WithCheck(IkReal(x3774),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3777.valid){
continue;
}
IkReal x3775=((1.0)*(x3777.value));
IkReal x3776=x3758;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3775)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3775)));
IkReal gconst106=(x3774*x3776);
IkReal gconst107=((1.0)*r10*x3776);
IkReal x3778=r12*r12;
IkReal x3779=((1.0)+(((-1.0)*x3778)));
IkReal x3780=(r22*sj1*sj2);
IkReal x3781=(cj1*cj2*r22);
CheckValue<IkReal> x3788=IKPowWithIntegerCheck(x3779,-1);
if(!x3788.valid){
continue;
}
IkReal x3782=x3788.value;
CheckValue<IkReal> x3789=IKPowWithIntegerCheck(((-1.0)+x3778),-1);
if(!x3789.valid){
continue;
}
IkReal x3783=x3789.value;
IkReal x3784=((1.0)*x3782);
if((x3779) < -0.00001)
continue;
IkReal x3785=IKsqrt(x3779);
IkReal x3786=(r12*x3783*x3785);
IkReal x3787=((((-1.0)*x3784*(r10*r10)*(r20*r20)))+(((-1.0)*x3784*(r11*r11)*(r21*r21)))+(((-1.0)*(r22*r22)))+(((-2.0)*r10*r11*r20*r21*x3782)));
j4eval[0]=x3787;
j4eval[1]=((IKabs(((((-1.0)*x3781))+x3780)))+(IKabs(((((-1.0)*x3780*x3786))+((x3781*x3786))))));
j4eval[2]=IKsign(x3787);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3790=(sj1*sj2);
IkReal x3791=(gconst106*r21);
IkReal x3792=(gconst107*r20);
IkReal x3793=(cj1*cj2);
CheckValue<IkReal> x3794 = IKatan2WithCheck(IkReal((((r22*x3790))+(((-1.0)*r22*x3793)))),IkReal(((((-1.0)*x3790*x3792))+((x3792*x3793))+(((-1.0)*x3791*x3793))+((x3790*x3791)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3794.valid){
continue;
}
CheckValue<IkReal> x3795=IKPowWithIntegerCheck(IKsign(((((2.0)*x3791*x3792))+(((-1.0)*(x3791*x3791)))+(((-1.0)*(x3792*x3792)))+(((-1.0)*(r22*r22))))),-1);
if(!x3795.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3794.value)+(((1.5707963267949)*(x3795.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3796=IKsin(j4);
IkReal x3797=IKcos(j4);
IkReal x3798=(gconst107*r10);
IkReal x3799=(gconst107*r00);
IkReal x3800=((1.0)*cj2);
IkReal x3801=(gconst107*r20);
IkReal x3802=((1.0)*sj0);
IkReal x3803=(cj1*sj2);
IkReal x3804=((1.0)*x3797);
IkReal x3805=(gconst106*x3797);
IkReal x3806=(gconst106*x3796);
IkReal x3807=((1.0)*x3796);
evalcond[0]=(((r21*x3806))+(((-1.0)*x3801*x3807))+(((-1.0)*r22*x3804)));
evalcond[1]=(((r11*x3806))+cj0+(((-1.0)*r12*x3804))+(((-1.0)*x3798*x3807)));
evalcond[2]=(((r01*x3806))+(((-1.0)*x3802))+(((-1.0)*r02*x3804))+(((-1.0)*x3799*x3807)));
evalcond[3]=(((r22*x3796))+((r21*x3805))+(((-1.0)*x3801*x3804))+((sj1*sj2))+(((-1.0)*cj1*x3800)));
evalcond[4]=(((r01*x3805))+((r02*x3796))+(((-1.0)*cj0*x3803))+(((-1.0)*cj0*sj1*x3800))+(((-1.0)*x3799*x3804)));
evalcond[5]=((((-1.0)*sj0*sj1*x3800))+((r11*x3805))+(((-1.0)*x3802*x3803))+((r12*x3796))+(((-1.0)*x3798*x3804)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3808=((1.0)*sj0);
IkReal x3809=((1.0)*gconst106);
CheckValue<IkReal> x3810 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x3808)))),IkReal(((((-1.0)*gconst106*r11*x3808))+(((-1.0)*cj0*r01*x3809))+((gconst107*r10*sj0))+((cj0*gconst107*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3810.valid){
continue;
}
CheckValue<IkReal> x3811=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst107*r21))+(((-1.0)*r20*x3809)))),-1);
if(!x3811.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3810.value)+(((1.5707963267949)*(x3811.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3812=IKsin(j4);
IkReal x3813=IKcos(j4);
IkReal x3814=(gconst107*r10);
IkReal x3815=(gconst107*r00);
IkReal x3816=((1.0)*cj2);
IkReal x3817=(gconst107*r20);
IkReal x3818=((1.0)*sj0);
IkReal x3819=(cj1*sj2);
IkReal x3820=((1.0)*x3813);
IkReal x3821=(gconst106*x3813);
IkReal x3822=(gconst106*x3812);
IkReal x3823=((1.0)*x3812);
evalcond[0]=((((-1.0)*r22*x3820))+(((-1.0)*x3817*x3823))+((r21*x3822)));
evalcond[1]=((((-1.0)*r12*x3820))+cj0+(((-1.0)*x3814*x3823))+((r11*x3822)));
evalcond[2]=((((-1.0)*x3815*x3823))+(((-1.0)*r02*x3820))+(((-1.0)*x3818))+((r01*x3822)));
evalcond[3]=((((-1.0)*x3817*x3820))+(((-1.0)*cj1*x3816))+((sj1*sj2))+((r22*x3812))+((r21*x3821)));
evalcond[4]=((((-1.0)*x3815*x3820))+(((-1.0)*cj0*x3819))+((r02*x3812))+(((-1.0)*cj0*sj1*x3816))+((r01*x3821)));
evalcond[5]=(((r12*x3812))+(((-1.0)*sj0*sj1*x3816))+(((-1.0)*x3814*x3820))+((r11*x3821))+(((-1.0)*x3818*x3819)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3824=((1.0)*gconst107);
CheckValue<IkReal> x3825 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst106*r21))+(((-1.0)*cj0*r20*x3824)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3825.valid){
continue;
}
CheckValue<IkReal> x3826=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst106*r00))+(((-1.0)*r01*x3824)))),-1);
if(!x3826.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3825.value)+(((1.5707963267949)*(x3826.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3827=IKsin(j4);
IkReal x3828=IKcos(j4);
IkReal x3829=(gconst107*r10);
IkReal x3830=(gconst107*r00);
IkReal x3831=((1.0)*cj2);
IkReal x3832=(gconst107*r20);
IkReal x3833=((1.0)*sj0);
IkReal x3834=(cj1*sj2);
IkReal x3835=((1.0)*x3828);
IkReal x3836=(gconst106*x3828);
IkReal x3837=(gconst106*x3827);
IkReal x3838=((1.0)*x3827);
evalcond[0]=((((-1.0)*x3832*x3838))+((r21*x3837))+(((-1.0)*r22*x3835)));
evalcond[1]=((((-1.0)*x3829*x3838))+cj0+(((-1.0)*r12*x3835))+((r11*x3837)));
evalcond[2]=((((-1.0)*x3830*x3838))+((r01*x3837))+(((-1.0)*r02*x3835))+(((-1.0)*x3833)));
evalcond[3]=((((-1.0)*x3832*x3835))+((sj1*sj2))+((r22*x3827))+((r21*x3836))+(((-1.0)*cj1*x3831)));
evalcond[4]=((((-1.0)*x3830*x3835))+((r01*x3836))+(((-1.0)*cj0*sj1*x3831))+((r02*x3827))+(((-1.0)*cj0*x3834)));
evalcond[5]=(((r12*x3827))+(((-1.0)*x3829*x3835))+(((-1.0)*x3833*x3834))+((r11*x3836))+(((-1.0)*sj0*sj1*x3831)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3839=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x3839;
j4eval[1]=IKsign(x3839);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3840=((1.0)*cj5);
IkReal x3841=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3840)));
j4eval[0]=x3841;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x3840))+((r21*sj5))))));
j4eval[2]=IKsign(x3841);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3842=(sj1*sj2);
IkReal x3843=(cj5*r10);
IkReal x3844=(r11*sj5);
IkReal x3845=(cj1*cj2);
IkReal x3846=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x3846;
j4eval[1]=((IKabs((((r12*x3845))+(((-1.0)*r12*x3842)))))+(IKabs(((((-1.0)*x3844*x3845))+((x3842*x3844))+((x3843*x3845))+(((-1.0)*x3842*x3843))))));
j4eval[2]=IKsign(x3846);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3847=(sj1*sj2);
IkReal x3848=(cj5*r10);
IkReal x3849=(r11*sj5);
IkReal x3850=(cj1*cj2);
CheckValue<IkReal> x3851 = IKatan2WithCheck(IkReal((((x3847*x3849))+(((-1.0)*x3847*x3848))+((x3848*x3850))+(((-1.0)*x3849*x3850)))),IkReal((((r12*x3850))+(((-1.0)*r12*x3847)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3851.valid){
continue;
}
CheckValue<IkReal> x3852=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x3852.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3851.value)+(((1.5707963267949)*(x3852.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3853=IKcos(j4);
IkReal x3854=IKsin(j4);
IkReal x3855=(cj5*r00);
IkReal x3856=(cj5*r10);
IkReal x3857=(r21*sj5);
IkReal x3858=((1.0)*cj2);
IkReal x3859=(cj5*r20);
IkReal x3860=((1.0)*x3853);
IkReal x3861=((1.0)*x3854);
IkReal x3862=(sj5*x3854);
IkReal x3863=(sj5*x3853);
evalcond[0]=(((r11*x3863))+(((-1.0)*x3856*x3860))+((r12*x3854)));
evalcond[1]=(((x3854*x3857))+(((-1.0)*x3859*x3861))+(((-1.0)*r22*x3860)));
evalcond[2]=((((-1.0)*r02*x3860))+((r01*x3862))+(((-1.0)*x3855*x3861)));
evalcond[3]=((1.0)+((r11*x3862))+(((-1.0)*x3856*x3861))+(((-1.0)*r12*x3860)));
evalcond[4]=((((-1.0)*x3859*x3860))+((sj1*sj2))+((x3853*x3857))+(((-1.0)*cj1*x3858))+((r22*x3854)));
evalcond[5]=(((r02*x3854))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x3858))+((r01*x3863))+(((-1.0)*x3855*x3860)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3864=((1.0)*cj5);
CheckValue<IkReal> x3865=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3864)))),-1);
if(!x3865.valid){
continue;
}
CheckValue<IkReal> x3866 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x3864))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3866.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3865.value)))+(x3866.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3867=IKcos(j4);
IkReal x3868=IKsin(j4);
IkReal x3869=(cj5*r00);
IkReal x3870=(cj5*r10);
IkReal x3871=(r21*sj5);
IkReal x3872=((1.0)*cj2);
IkReal x3873=(cj5*r20);
IkReal x3874=((1.0)*x3867);
IkReal x3875=((1.0)*x3868);
IkReal x3876=(sj5*x3868);
IkReal x3877=(sj5*x3867);
evalcond[0]=((((-1.0)*x3870*x3874))+((r11*x3877))+((r12*x3868)));
evalcond[1]=((((-1.0)*x3873*x3875))+((x3868*x3871))+(((-1.0)*r22*x3874)));
evalcond[2]=(((r01*x3876))+(((-1.0)*r02*x3874))+(((-1.0)*x3869*x3875)));
evalcond[3]=((1.0)+(((-1.0)*r12*x3874))+(((-1.0)*x3870*x3875))+((r11*x3876)));
evalcond[4]=((((-1.0)*x3873*x3874))+((x3867*x3871))+((sj1*sj2))+(((-1.0)*cj1*x3872))+((r22*x3868)));
evalcond[5]=(((r02*x3868))+((r01*x3877))+(((-1.0)*cj1*sj2))+(((-1.0)*x3869*x3874))+(((-1.0)*sj1*x3872)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3878=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3878.valid){
continue;
}
CheckValue<IkReal> x3879 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3879.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3878.value)))+(x3879.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3880=IKcos(j4);
IkReal x3881=IKsin(j4);
IkReal x3882=(cj5*r00);
IkReal x3883=(cj5*r10);
IkReal x3884=(r21*sj5);
IkReal x3885=((1.0)*cj2);
IkReal x3886=(cj5*r20);
IkReal x3887=((1.0)*x3880);
IkReal x3888=((1.0)*x3881);
IkReal x3889=(sj5*x3881);
IkReal x3890=(sj5*x3880);
evalcond[0]=(((r12*x3881))+(((-1.0)*x3883*x3887))+((r11*x3890)));
evalcond[1]=((((-1.0)*r22*x3887))+((x3881*x3884))+(((-1.0)*x3886*x3888)));
evalcond[2]=((((-1.0)*r02*x3887))+((r01*x3889))+(((-1.0)*x3882*x3888)));
evalcond[3]=((1.0)+(((-1.0)*x3883*x3888))+((r11*x3889))+(((-1.0)*r12*x3887)));
evalcond[4]=((((-1.0)*cj1*x3885))+((r22*x3881))+((x3880*x3884))+((sj1*sj2))+(((-1.0)*x3886*x3887)));
evalcond[5]=((((-1.0)*sj1*x3885))+(((-1.0)*cj1*sj2))+((r01*x3890))+((r02*x3881))+(((-1.0)*x3882*x3887)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3891=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3891;
j4eval[1]=IKsign(x3891);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3892=((1.0)*cj5);
IkReal x3893=((((-1.0)*r21*x3892))+(((-1.0)*r20*sj5)));
j4eval[0]=x3893;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x3892))))));
j4eval[2]=IKsign(x3893);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3894=cj5*cj5;
IkReal x3895=r11*r11;
IkReal x3896=(r11*sj5);
IkReal x3897=(cj5*r10);
IkReal x3898=((r12*r12)+((x3894*(r10*r10)))+(((-1.0)*x3894*x3895))+x3895+(((-2.0)*x3896*x3897)));
j4eval[0]=x3898;
j4eval[1]=IKsign(x3898);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x3897))+x3896))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3899=cj5*cj5;
IkReal x3900=r11*r11;
IkReal x3901=(cj5*r10);
IkReal x3902=(r11*sj5);
CheckValue<IkReal> x3903 = IKatan2WithCheck(IkReal(((((-1.0)*x3901))+x3902)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3903.valid){
continue;
}
CheckValue<IkReal> x3904=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x3901*x3902))+x3900+(((-1.0)*x3899*x3900))+((x3899*(r10*r10))))),-1);
if(!x3904.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3903.value)+(((1.5707963267949)*(x3904.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3905=IKcos(j4);
IkReal x3906=IKsin(j4);
IkReal x3907=(cj5*r00);
IkReal x3908=(cj5*r10);
IkReal x3909=(r21*sj5);
IkReal x3910=(cj5*r20);
IkReal x3911=((1.0)*x3905);
IkReal x3912=((1.0)*x3906);
IkReal x3913=(sj5*x3906);
IkReal x3914=(sj5*x3905);
evalcond[0]=((((-1.0)*x3908*x3911))+((r12*x3906))+((r11*x3914)));
evalcond[1]=(((x3906*x3909))+(((-1.0)*r22*x3911))+(((-1.0)*x3910*x3912)));
evalcond[2]=((((-1.0)*r02*x3911))+(((-1.0)*x3907*x3912))+((r01*x3913)));
evalcond[3]=((-1.0)+(((-1.0)*x3908*x3912))+((r11*x3913))+(((-1.0)*r12*x3911)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x3907*x3911))+((r01*x3914))+((r02*x3906)));
evalcond[5]=(((r22*x3906))+((x3905*x3909))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x3910*x3911)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3915=((1.0)*cj5);
CheckValue<IkReal> x3916 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x3915)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3916.valid){
continue;
}
CheckValue<IkReal> x3917=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3915))+(((-1.0)*r20*sj5)))),-1);
if(!x3917.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3916.value)+(((1.5707963267949)*(x3917.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3918=IKcos(j4);
IkReal x3919=IKsin(j4);
IkReal x3920=(cj5*r00);
IkReal x3921=(cj5*r10);
IkReal x3922=(r21*sj5);
IkReal x3923=(cj5*r20);
IkReal x3924=((1.0)*x3918);
IkReal x3925=((1.0)*x3919);
IkReal x3926=(sj5*x3919);
IkReal x3927=(sj5*x3918);
evalcond[0]=(((r11*x3927))+(((-1.0)*x3921*x3924))+((r12*x3919)));
evalcond[1]=(((x3919*x3922))+(((-1.0)*r22*x3924))+(((-1.0)*x3923*x3925)));
evalcond[2]=((((-1.0)*r02*x3924))+(((-1.0)*x3920*x3925))+((r01*x3926)));
evalcond[3]=((-1.0)+((r11*x3926))+(((-1.0)*r12*x3924))+(((-1.0)*x3921*x3925)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x3920*x3924))+((r02*x3919))+((r01*x3927)));
evalcond[5]=(((x3918*x3922))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x3923*x3924))+((r22*x3919)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3928 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3928.valid){
continue;
}
CheckValue<IkReal> x3929=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3929.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3928.value)+(((1.5707963267949)*(x3929.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3930=IKcos(j4);
IkReal x3931=IKsin(j4);
IkReal x3932=(cj5*r00);
IkReal x3933=(cj5*r10);
IkReal x3934=(r21*sj5);
IkReal x3935=(cj5*r20);
IkReal x3936=((1.0)*x3930);
IkReal x3937=((1.0)*x3931);
IkReal x3938=(sj5*x3931);
IkReal x3939=(sj5*x3930);
evalcond[0]=((((-1.0)*x3933*x3936))+((r12*x3931))+((r11*x3939)));
evalcond[1]=((((-1.0)*r22*x3936))+(((-1.0)*x3935*x3937))+((x3931*x3934)));
evalcond[2]=(((r01*x3938))+(((-1.0)*x3932*x3937))+(((-1.0)*r02*x3936)));
evalcond[3]=((-1.0)+(((-1.0)*x3933*x3937))+(((-1.0)*r12*x3936))+((r11*x3938)));
evalcond[4]=(((cj2*sj1))+((r01*x3939))+((cj1*sj2))+(((-1.0)*x3932*x3936))+((r02*x3931)));
evalcond[5]=(((r22*x3931))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x3935*x3936))+((x3930*x3934)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3940=((-1.0)*r00);
IkReal x3942 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3942)==0){
continue;
}
IkReal x3941=pow(x3942,-0.5);
CheckValue<IkReal> x3943 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x3940),IKFAST_ATAN2_MAGTHRESH);
if(!x3943.valid){
continue;
}
IkReal gconst108=((-1.0)*(x3943.value));
IkReal gconst109=(r01*x3941);
IkReal gconst110=(x3940*x3941);
CheckValue<IkReal> x3944 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3944.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3944.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3945=((-1.0)*r00);
IkReal x3946=x3941;
CheckValue<IkReal> x3948 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x3945),IKFAST_ATAN2_MAGTHRESH);
if(!x3948.valid){
continue;
}
IkReal x3947=((-1.0)*(x3948.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst109;
cj5=gconst110;
j5=x3947;
IkReal gconst108=x3947;
IkReal gconst109=(r01*x3946);
IkReal gconst110=(x3945*x3946);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3949=((1.0)*sj0);
IkReal x3950=((1.0)*gconst109);
CheckValue<IkReal> x3951 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x3949)))),IkReal(((((-1.0)*cj0*r01*x3950))+((cj0*gconst110*r00))+((gconst110*r10*sj0))+(((-1.0)*gconst109*r11*x3949)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3951.valid){
continue;
}
CheckValue<IkReal> x3952=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3950))+(((-1.0)*gconst110*r21)))),-1);
if(!x3952.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3951.value)+(((1.5707963267949)*(x3952.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3953=IKsin(j4);
IkReal x3954=IKcos(j4);
IkReal x3955=(gconst109*r21);
IkReal x3956=((1.0)*cj2);
IkReal x3957=((1.0)*sj0);
IkReal x3958=(cj1*sj2);
IkReal x3959=((1.0)*x3954);
IkReal x3960=(gconst109*x3953);
IkReal x3961=(gconst109*x3954);
IkReal x3962=((1.0)*gconst110*x3953);
evalcond[0]=((((-1.0)*r20*x3962))+((x3953*x3955))+(((-1.0)*r22*x3959)));
evalcond[1]=(cj0+((r11*x3960))+(((-1.0)*r10*x3962))+(((-1.0)*r12*x3959)));
evalcond[2]=((((-1.0)*x3957))+(((-1.0)*r02*x3959))+((r01*x3960))+(((-1.0)*r00*x3962)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x3956))+(((-1.0)*gconst110*r20*x3959))+((r22*x3953))+((x3954*x3955)));
evalcond[4]=((((-1.0)*cj0*sj1*x3956))+(((-1.0)*cj0*x3958))+((r02*x3953))+((r01*x3961))+(((-1.0)*gconst110*r00*x3959)));
evalcond[5]=(((r11*x3961))+(((-1.0)*x3957*x3958))+(((-1.0)*sj0*sj1*x3956))+(((-1.0)*gconst110*r10*x3959))+((r12*x3953)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3963=((1.0)*gconst110);
CheckValue<IkReal> x3964=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst109*r10))+(((-1.0)*r11*x3963)))),-1);
if(!x3964.valid){
continue;
}
CheckValue<IkReal> x3965 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x3963))+((gconst109*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3965.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3964.value)))+(x3965.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3966=IKsin(j4);
IkReal x3967=IKcos(j4);
IkReal x3968=(gconst109*r21);
IkReal x3969=((1.0)*cj2);
IkReal x3970=((1.0)*sj0);
IkReal x3971=(cj1*sj2);
IkReal x3972=((1.0)*x3967);
IkReal x3973=(gconst109*x3966);
IkReal x3974=(gconst109*x3967);
IkReal x3975=((1.0)*gconst110*x3966);
evalcond[0]=((((-1.0)*r20*x3975))+(((-1.0)*r22*x3972))+((x3966*x3968)));
evalcond[1]=((((-1.0)*r12*x3972))+cj0+((r11*x3973))+(((-1.0)*r10*x3975)));
evalcond[2]=((((-1.0)*x3970))+(((-1.0)*r02*x3972))+((r01*x3973))+(((-1.0)*r00*x3975)));
evalcond[3]=((((-1.0)*gconst110*r20*x3972))+((r22*x3966))+((sj1*sj2))+((x3967*x3968))+(((-1.0)*cj1*x3969)));
evalcond[4]=((((-1.0)*gconst110*r00*x3972))+((r02*x3966))+(((-1.0)*cj0*sj1*x3969))+((r01*x3974))+(((-1.0)*cj0*x3971)));
evalcond[5]=((((-1.0)*gconst110*r10*x3972))+((r11*x3974))+((r12*x3966))+(((-1.0)*x3970*x3971))+(((-1.0)*sj0*sj1*x3969)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3976=((-1.0)*r01);
IkReal x3978 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3978)==0){
continue;
}
IkReal x3977=pow(x3978,-0.5);
CheckValue<IkReal> x3979 = IKatan2WithCheck(IkReal(x3976),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3979.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x3979.value))));
IkReal gconst112=(x3976*x3977);
IkReal gconst113=((1.0)*r00*x3977);
CheckValue<IkReal> x3980 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3980.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3980.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x3981=((-1.0)*r01);
CheckValue<IkReal> x3984 = IKatan2WithCheck(IkReal(x3981),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3984.valid){
continue;
}
IkReal x3982=((1.0)*(x3984.value));
IkReal x3983=x3977;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3982)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3982)));
IkReal gconst112=(x3981*x3983);
IkReal gconst113=((1.0)*r00*x3983);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3985=((-1.0)*r01);
CheckValue<IkReal> x3988 = IKatan2WithCheck(IkReal(x3985),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3988.valid){
continue;
}
IkReal x3986=((1.0)*(x3988.value));
IkReal x3987=x3977;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3986)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3986)));
IkReal gconst112=(x3985*x3987);
IkReal gconst113=((1.0)*r00*x3987);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3989=((-1.0)*r01);
CheckValue<IkReal> x3992 = IKatan2WithCheck(IkReal(x3989),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3992.valid){
continue;
}
IkReal x3990=((1.0)*(x3992.value));
IkReal x3991=x3977;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3990)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3990)));
IkReal gconst112=(x3989*x3991);
IkReal gconst113=((1.0)*r00*x3991);
IkReal x3993=r02*r02;
IkReal x3994=(r12*sj0);
IkReal x3995=((1.0)*cj0);
IkReal x3996=x3977;
j4eval[0]=((IKabs(((((-1.0)*r02*x3995))+(((-1.0)*x3994)))))+(IKabs((((cj0*x3993*x3996))+(((-1.0)*x3995*x3996))+((r02*x3994*x3996))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3997=((1.0)*sj0);
IkReal x3998=((1.0)*gconst112);
CheckValue<IkReal> x3999=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst113*r21))+(((-1.0)*r20*x3998)))),-1);
if(!x3999.valid){
continue;
}
CheckValue<IkReal> x4000 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3997))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x3998))+((gconst113*r10*sj0))+((cj0*gconst113*r00))+(((-1.0)*gconst112*r11*x3997)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4000.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3999.value)))+(x4000.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4001=IKsin(j4);
IkReal x4002=IKcos(j4);
IkReal x4003=(gconst113*r20);
IkReal x4004=(gconst112*r21);
IkReal x4005=((1.0)*cj2);
IkReal x4006=(gconst113*r00);
IkReal x4007=(gconst113*r10);
IkReal x4008=((1.0)*sj0);
IkReal x4009=(cj1*sj2);
IkReal x4010=((1.0)*x4002);
IkReal x4011=((1.0)*x4001);
IkReal x4012=(gconst112*x4002);
IkReal x4013=(gconst112*x4001);
evalcond[0]=(((x4001*x4004))+(((-1.0)*r22*x4010))+(((-1.0)*x4003*x4011)));
evalcond[1]=((((-1.0)*r12*x4010))+cj0+(((-1.0)*x4007*x4011))+((r11*x4013)));
evalcond[2]=((((-1.0)*x4008))+(((-1.0)*r02*x4010))+((r01*x4013))+(((-1.0)*x4006*x4011)));
evalcond[3]=(((sj1*sj2))+((r22*x4001))+(((-1.0)*cj1*x4005))+(((-1.0)*x4003*x4010))+((x4002*x4004)));
evalcond[4]=((((-1.0)*cj0*x4009))+((r01*x4012))+((r02*x4001))+(((-1.0)*x4006*x4010))+(((-1.0)*cj0*sj1*x4005)));
evalcond[5]=(((r12*x4001))+(((-1.0)*x4008*x4009))+(((-1.0)*sj0*sj1*x4005))+(((-1.0)*x4007*x4010))+((r11*x4012)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4014=((1.0)*gconst113);
CheckValue<IkReal> x4015 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst112*r21*sj0))+(((-1.0)*r20*sj0*x4014)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4015.valid){
continue;
}
CheckValue<IkReal> x4016=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4014))+(((-1.0)*gconst112*r10)))),-1);
if(!x4016.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4015.value)+(((1.5707963267949)*(x4016.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4017=IKsin(j4);
IkReal x4018=IKcos(j4);
IkReal x4019=(gconst113*r20);
IkReal x4020=(gconst112*r21);
IkReal x4021=((1.0)*cj2);
IkReal x4022=(gconst113*r00);
IkReal x4023=(gconst113*r10);
IkReal x4024=((1.0)*sj0);
IkReal x4025=(cj1*sj2);
IkReal x4026=((1.0)*x4018);
IkReal x4027=((1.0)*x4017);
IkReal x4028=(gconst112*x4018);
IkReal x4029=(gconst112*x4017);
evalcond[0]=((((-1.0)*r22*x4026))+((x4017*x4020))+(((-1.0)*x4019*x4027)));
evalcond[1]=((((-1.0)*x4023*x4027))+(((-1.0)*r12*x4026))+cj0+((r11*x4029)));
evalcond[2]=((((-1.0)*x4022*x4027))+(((-1.0)*r02*x4026))+((r01*x4029))+(((-1.0)*x4024)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x4021))+((x4018*x4020))+((r22*x4017))+(((-1.0)*x4019*x4026)));
evalcond[4]=(((r02*x4017))+(((-1.0)*cj0*x4025))+(((-1.0)*x4022*x4026))+((r01*x4028))+(((-1.0)*cj0*sj1*x4021)));
evalcond[5]=((((-1.0)*sj0*sj1*x4021))+(((-1.0)*x4023*x4026))+(((-1.0)*x4024*x4025))+((r12*x4017))+((r11*x4028)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4030=((1.0)*gconst113);
CheckValue<IkReal> x4031 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst112*r21))+(((-1.0)*cj0*r20*x4030)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4031.valid){
continue;
}
CheckValue<IkReal> x4032=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4030))+(((-1.0)*gconst112*r00)))),-1);
if(!x4032.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4031.value)+(((1.5707963267949)*(x4032.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4033=IKsin(j4);
IkReal x4034=IKcos(j4);
IkReal x4035=(gconst113*r20);
IkReal x4036=(gconst112*r21);
IkReal x4037=((1.0)*cj2);
IkReal x4038=(gconst113*r00);
IkReal x4039=(gconst113*r10);
IkReal x4040=((1.0)*sj0);
IkReal x4041=(cj1*sj2);
IkReal x4042=((1.0)*x4034);
IkReal x4043=((1.0)*x4033);
IkReal x4044=(gconst112*x4034);
IkReal x4045=(gconst112*x4033);
evalcond[0]=((((-1.0)*x4035*x4043))+((x4033*x4036))+(((-1.0)*r22*x4042)));
evalcond[1]=(cj0+(((-1.0)*x4039*x4043))+(((-1.0)*r12*x4042))+((r11*x4045)));
evalcond[2]=((((-1.0)*r02*x4042))+((r01*x4045))+(((-1.0)*x4040))+(((-1.0)*x4038*x4043)));
evalcond[3]=((((-1.0)*x4035*x4042))+(((-1.0)*cj1*x4037))+((sj1*sj2))+((x4034*x4036))+((r22*x4033)));
evalcond[4]=(((r02*x4033))+(((-1.0)*cj0*x4041))+((r01*x4044))+(((-1.0)*cj0*sj1*x4037))+(((-1.0)*x4038*x4042)));
evalcond[5]=((((-1.0)*x4039*x4042))+((r11*x4044))+(((-1.0)*x4040*x4041))+((r12*x4033))+(((-1.0)*sj0*sj1*x4037)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4046=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4046;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x4046);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4047=((1.0)*cj5);
IkReal x4048=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4047)));
j4eval[0]=x4048;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x4047))+((r21*sj5))))));
j4eval[2]=IKsign(x4048);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4049=cj5*cj5;
IkReal x4050=r01*r01;
IkReal x4051=(cj5*r00);
IkReal x4052=(r01*sj5);
IkReal x4053=((((-2.0)*x4051*x4052))+((x4049*(r00*r00)))+x4050+(r02*r02)+(((-1.0)*x4049*x4050)));
j4eval[0]=x4053;
j4eval[1]=IKsign(x4053);
j4eval[2]=((IKabs((x4052+(((-1.0)*x4051)))))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4054=cj5*cj5;
IkReal x4055=r01*r01;
IkReal x4056=(r01*sj5);
IkReal x4057=(cj5*r00);
CheckValue<IkReal> x4058=IKPowWithIntegerCheck(IKsign((((x4054*(r00*r00)))+x4055+(r02*r02)+(((-1.0)*x4054*x4055))+(((-2.0)*x4056*x4057)))),-1);
if(!x4058.valid){
continue;
}
CheckValue<IkReal> x4059 = IKatan2WithCheck(IkReal((x4056+(((-1.0)*x4057)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4059.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4058.value)))+(x4059.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4060=IKcos(j4);
IkReal x4061=IKsin(j4);
IkReal x4062=(cj5*r00);
IkReal x4063=(cj5*r10);
IkReal x4064=(r21*sj5);
IkReal x4065=((1.0)*cj2);
IkReal x4066=(cj5*r20);
IkReal x4067=((1.0)*x4060);
IkReal x4068=((1.0)*x4061);
IkReal x4069=(sj5*x4061);
IkReal x4070=(sj5*x4060);
evalcond[0]=(((r02*x4061))+((r01*x4070))+(((-1.0)*x4062*x4067)));
evalcond[1]=(((x4061*x4064))+(((-1.0)*x4066*x4068))+(((-1.0)*r22*x4067)));
evalcond[2]=((((-1.0)*r12*x4067))+(((-1.0)*x4063*x4068))+((r11*x4069)));
evalcond[3]=((-1.0)+(((-1.0)*x4062*x4068))+(((-1.0)*r02*x4067))+((r01*x4069)));
evalcond[4]=(((x4060*x4064))+(((-1.0)*x4066*x4067))+((sj1*sj2))+(((-1.0)*cj1*x4065))+((r22*x4061)));
evalcond[5]=((((-1.0)*x4063*x4067))+(((-1.0)*cj1*sj2))+((r12*x4061))+((r11*x4070))+(((-1.0)*sj1*x4065)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4071=((1.0)*cj5);
CheckValue<IkReal> x4072 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x4071)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4072.valid){
continue;
}
CheckValue<IkReal> x4073=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4071)))),-1);
if(!x4073.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4072.value)+(((1.5707963267949)*(x4073.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4074=IKcos(j4);
IkReal x4075=IKsin(j4);
IkReal x4076=(cj5*r00);
IkReal x4077=(cj5*r10);
IkReal x4078=(r21*sj5);
IkReal x4079=((1.0)*cj2);
IkReal x4080=(cj5*r20);
IkReal x4081=((1.0)*x4074);
IkReal x4082=((1.0)*x4075);
IkReal x4083=(sj5*x4075);
IkReal x4084=(sj5*x4074);
evalcond[0]=(((r01*x4084))+((r02*x4075))+(((-1.0)*x4076*x4081)));
evalcond[1]=(((x4075*x4078))+(((-1.0)*r22*x4081))+(((-1.0)*x4080*x4082)));
evalcond[2]=((((-1.0)*r12*x4081))+((r11*x4083))+(((-1.0)*x4077*x4082)));
evalcond[3]=((-1.0)+((r01*x4083))+(((-1.0)*r02*x4081))+(((-1.0)*x4076*x4082)));
evalcond[4]=(((x4074*x4078))+((r22*x4075))+((sj1*sj2))+(((-1.0)*cj1*x4079))+(((-1.0)*x4080*x4081)));
evalcond[5]=(((r12*x4075))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x4079))+((r11*x4084))+(((-1.0)*x4077*x4081)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4085=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4085.valid){
continue;
}
CheckValue<IkReal> x4086 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4086.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4085.value)))+(x4086.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4087=IKcos(j4);
IkReal x4088=IKsin(j4);
IkReal x4089=(cj5*r00);
IkReal x4090=(cj5*r10);
IkReal x4091=(r21*sj5);
IkReal x4092=((1.0)*cj2);
IkReal x4093=(cj5*r20);
IkReal x4094=((1.0)*x4087);
IkReal x4095=((1.0)*x4088);
IkReal x4096=(sj5*x4088);
IkReal x4097=(sj5*x4087);
evalcond[0]=((((-1.0)*x4089*x4094))+((r01*x4097))+((r02*x4088)));
evalcond[1]=(((x4088*x4091))+(((-1.0)*r22*x4094))+(((-1.0)*x4093*x4095)));
evalcond[2]=((((-1.0)*r12*x4094))+(((-1.0)*x4090*x4095))+((r11*x4096)));
evalcond[3]=((-1.0)+(((-1.0)*x4089*x4095))+((r01*x4096))+(((-1.0)*r02*x4094)));
evalcond[4]=(((x4087*x4091))+((sj1*sj2))+(((-1.0)*x4093*x4094))+(((-1.0)*cj1*x4092))+((r22*x4088)));
evalcond[5]=((((-1.0)*sj1*x4092))+(((-1.0)*x4090*x4094))+(((-1.0)*cj1*sj2))+((r11*x4097))+((r12*x4088)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4098=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4098;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4098);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4099=((1.0)*cj5);
IkReal x4100=((((-1.0)*r21*x4099))+(((-1.0)*r20*sj5)));
j4eval[0]=x4100;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x4099))+((r11*sj5))))));
j4eval[2]=IKsign(x4100);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4101=cj5*cj5;
IkReal x4102=r01*r01;
IkReal x4103=(r01*sj5);
IkReal x4104=(cj5*r00);
IkReal x4105=((((-1.0)*x4102))+(((-1.0)*x4101*(r00*r00)))+(((-1.0)*(r02*r02)))+((x4101*x4102))+(((2.0)*x4103*x4104)));
j4eval[0]=x4105;
j4eval[1]=IKsign(x4105);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x4104))+x4103))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4106=cj5*cj5;
IkReal x4107=r01*r01;
IkReal x4108=(r01*sj5);
IkReal x4109=(cj5*r00);
CheckValue<IkReal> x4110=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4107))+(((-1.0)*(r02*r02)))+(((2.0)*x4108*x4109))+(((-1.0)*x4106*(r00*r00)))+((x4106*x4107)))),-1);
if(!x4110.valid){
continue;
}
CheckValue<IkReal> x4111 = IKatan2WithCheck(IkReal(((((-1.0)*x4109))+x4108)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4111.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4110.value)))+(x4111.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4112=IKcos(j4);
IkReal x4113=IKsin(j4);
IkReal x4114=(cj5*r00);
IkReal x4115=(cj5*r10);
IkReal x4116=(r21*sj5);
IkReal x4117=(cj5*r20);
IkReal x4118=((1.0)*x4112);
IkReal x4119=((1.0)*x4113);
IkReal x4120=(sj5*x4113);
IkReal x4121=(sj5*x4112);
evalcond[0]=(((r02*x4113))+(((-1.0)*x4114*x4118))+((r01*x4121)));
evalcond[1]=((((-1.0)*x4117*x4119))+(((-1.0)*r22*x4118))+((x4113*x4116)));
evalcond[2]=((((-1.0)*r12*x4118))+(((-1.0)*x4115*x4119))+((r11*x4120)));
evalcond[3]=((1.0)+(((-1.0)*x4114*x4119))+(((-1.0)*r02*x4118))+((r01*x4120)));
evalcond[4]=(((r12*x4113))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x4115*x4118))+((r11*x4121)));
evalcond[5]=((((-1.0)*x4117*x4118))+((x4112*x4116))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4113)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4122=((1.0)*cj5);
CheckValue<IkReal> x4123 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x4122)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4123.valid){
continue;
}
CheckValue<IkReal> x4124=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4122))+(((-1.0)*r20*sj5)))),-1);
if(!x4124.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4123.value)+(((1.5707963267949)*(x4124.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4125=IKcos(j4);
IkReal x4126=IKsin(j4);
IkReal x4127=(cj5*r00);
IkReal x4128=(cj5*r10);
IkReal x4129=(r21*sj5);
IkReal x4130=(cj5*r20);
IkReal x4131=((1.0)*x4125);
IkReal x4132=((1.0)*x4126);
IkReal x4133=(sj5*x4126);
IkReal x4134=(sj5*x4125);
evalcond[0]=((((-1.0)*x4127*x4131))+((r02*x4126))+((r01*x4134)));
evalcond[1]=((((-1.0)*x4130*x4132))+(((-1.0)*r22*x4131))+((x4126*x4129)));
evalcond[2]=(((r11*x4133))+(((-1.0)*x4128*x4132))+(((-1.0)*r12*x4131)));
evalcond[3]=((1.0)+(((-1.0)*x4127*x4132))+((r01*x4133))+(((-1.0)*r02*x4131)));
evalcond[4]=(((r12*x4126))+((cj2*sj1))+((cj1*sj2))+((r11*x4134))+(((-1.0)*x4128*x4131)));
evalcond[5]=(((x4125*x4129))+(((-1.0)*x4130*x4131))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4126)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4135 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4135.valid){
continue;
}
CheckValue<IkReal> x4136=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4136.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4135.value)+(((1.5707963267949)*(x4136.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4137=IKcos(j4);
IkReal x4138=IKsin(j4);
IkReal x4139=(cj5*r00);
IkReal x4140=(cj5*r10);
IkReal x4141=(r21*sj5);
IkReal x4142=(cj5*r20);
IkReal x4143=((1.0)*x4137);
IkReal x4144=((1.0)*x4138);
IkReal x4145=(sj5*x4138);
IkReal x4146=(sj5*x4137);
evalcond[0]=(((r01*x4146))+(((-1.0)*x4139*x4143))+((r02*x4138)));
evalcond[1]=((((-1.0)*x4142*x4144))+((x4138*x4141))+(((-1.0)*r22*x4143)));
evalcond[2]=((((-1.0)*x4140*x4144))+((r11*x4145))+(((-1.0)*r12*x4143)));
evalcond[3]=((1.0)+((r01*x4145))+(((-1.0)*r02*x4143))+(((-1.0)*x4139*x4144)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x4140*x4143))+((r11*x4146))+((r12*x4138)));
evalcond[5]=(((x4137*x4141))+((r22*x4138))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4142*x4143)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4147=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4147);
rxp1_1=(px*r21);
rxp1_2=(r11*x4147);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4148=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4148);
rxp1_1=(px*r21);
rxp1_2=(r11*x4148);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4149=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4149);
rxp1_1=(px*r21);
rxp1_2=(r11*x4149);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4152=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x4152.valid){
continue;
}
IkReal x4150=x4152.value;
IkReal x4151=(sj0*x4150);
cj4array[0]=(((cj2*sj1*x4151))+((cj1*sj2*x4151)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4153=IKsin(j4);
IkReal x4154=IKcos(j4);
IkReal x4155=(r21*sj5);
IkReal x4156=((1.0)*cj5*r20);
evalcond[0]=(r02*x4153);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x4154)));
evalcond[2]=(((x4153*x4155))+(((-1.0)*x4153*x4156)));
evalcond[3]=((((-1.0)*cj5*r10*x4153))+((r11*sj5*x4153)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4154*x4156))+((x4154*x4155)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4158=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x4158.valid){
continue;
}
IkReal x4157=x4158.value;
cj4array[0]=(((cj1*cj2*x4157))+(((-1.0)*sj1*sj2*x4157)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4159=IKsin(j4);
IkReal x4160=IKcos(j4);
IkReal x4161=((1.0)*sj0);
IkReal x4162=((1.0)*cj5);
IkReal x4163=(sj5*x4159);
evalcond[0]=(r02*x4159);
evalcond[1]=((((-1.0)*x4161))+(((-1.0)*r02*x4160)));
evalcond[2]=(((r21*x4163))+(((-1.0)*r20*x4159*x4162)));
evalcond[3]=((((-1.0)*r10*x4159*x4162))+((r11*x4163)));
evalcond[4]=((((-1.0)*cj1*sj2*x4161))+(((-1.0)*cj2*sj1*x4161))+(((-1.0)*r10*x4160*x4162))+((r11*sj5*x4160)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4164=IKPowWithIntegerCheck(r02,-1);
if(!x4164.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x4164.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4165=IKsin(j4);
IkReal x4166=IKcos(j4);
IkReal x4167=((1.0)*cj1);
IkReal x4168=(r21*sj5);
IkReal x4169=((1.0)*cj5);
IkReal x4170=(r11*sj5);
evalcond[0]=(r02*x4165);
evalcond[1]=(((x4165*x4168))+(((-1.0)*r20*x4165*x4169)));
evalcond[2]=(((x4165*x4170))+(((-1.0)*r10*x4165*x4169)));
evalcond[3]=((((-1.0)*cj2*x4167))+((x4166*x4168))+((sj1*sj2))+(((-1.0)*r20*x4166*x4169)));
evalcond[4]=((((-1.0)*sj0*sj2*x4167))+(((-1.0)*cj2*sj0*sj1))+(((-1.0)*r10*x4166*x4169))+((x4166*x4170)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4171=((1.0)*sj0);
IkReal x4172=((1.0)*cj0);
CheckValue<IkReal> x4173 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x4172))+(((-1.0)*r12*x4171)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x4171))+(((-1.0)*r01*sj5*x4172)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4173.valid){
continue;
}
CheckValue<IkReal> x4174=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x4174.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4173.value)+(((1.5707963267949)*(x4174.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4175=IKsin(j4);
IkReal x4176=IKcos(j4);
IkReal x4177=(cj5*r00);
IkReal x4178=(cj5*r10);
IkReal x4179=(r21*sj5);
IkReal x4180=((1.0)*cj2);
IkReal x4181=((1.0)*sj0);
IkReal x4182=(cj1*sj2);
IkReal x4183=(cj5*r20);
IkReal x4184=((1.0)*x4176);
IkReal x4185=((1.0)*x4175);
IkReal x4186=(sj5*x4175);
IkReal x4187=(sj5*x4176);
evalcond[0]=((((-1.0)*x4183*x4185))+((x4175*x4179))+(((-1.0)*r22*x4184)));
evalcond[1]=((((-1.0)*r12*x4184))+cj0+((r11*x4186))+(((-1.0)*x4178*x4185)));
evalcond[2]=((((-1.0)*x4181))+(((-1.0)*x4177*x4185))+(((-1.0)*r02*x4184))+((r01*x4186)));
evalcond[3]=((((-1.0)*x4183*x4184))+(((-1.0)*cj1*x4180))+((r22*x4175))+((sj1*sj2))+((x4176*x4179)));
evalcond[4]=((((-1.0)*cj0*sj1*x4180))+(((-1.0)*cj0*x4182))+(((-1.0)*x4177*x4184))+((r01*x4187))+((r02*x4175)));
evalcond[5]=((((-1.0)*x4181*x4182))+((r12*x4175))+((r11*x4187))+(((-1.0)*sj0*sj1*x4180))+(((-1.0)*x4178*x4184)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4188=((1.0)*cj5);
CheckValue<IkReal> x4189 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x4188))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4189.valid){
continue;
}
CheckValue<IkReal> x4190=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4188))+(((-1.0)*r10*sj5)))),-1);
if(!x4190.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4189.value)+(((1.5707963267949)*(x4190.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4191=IKsin(j4);
IkReal x4192=IKcos(j4);
IkReal x4193=(cj5*r00);
IkReal x4194=(cj5*r10);
IkReal x4195=(r21*sj5);
IkReal x4196=((1.0)*cj2);
IkReal x4197=((1.0)*sj0);
IkReal x4198=(cj1*sj2);
IkReal x4199=(cj5*r20);
IkReal x4200=((1.0)*x4192);
IkReal x4201=((1.0)*x4191);
IkReal x4202=(sj5*x4191);
IkReal x4203=(sj5*x4192);
evalcond[0]=((((-1.0)*r22*x4200))+((x4191*x4195))+(((-1.0)*x4199*x4201)));
evalcond[1]=(((r11*x4202))+(((-1.0)*r12*x4200))+cj0+(((-1.0)*x4194*x4201)));
evalcond[2]=((((-1.0)*x4197))+(((-1.0)*r02*x4200))+(((-1.0)*x4193*x4201))+((r01*x4202)));
evalcond[3]=(((x4192*x4195))+((sj1*sj2))+((r22*x4191))+(((-1.0)*x4199*x4200))+(((-1.0)*cj1*x4196)));
evalcond[4]=((((-1.0)*cj0*sj1*x4196))+((r02*x4191))+(((-1.0)*x4193*x4200))+(((-1.0)*cj0*x4198))+((r01*x4203)));
evalcond[5]=(((r11*x4203))+((r12*x4191))+(((-1.0)*x4194*x4200))+(((-1.0)*sj0*sj1*x4196))+(((-1.0)*x4197*x4198)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4204=((1.0)*cj5);
CheckValue<IkReal> x4205 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4204)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4205.valid){
continue;
}
CheckValue<IkReal> x4206=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4204))+(((-1.0)*r00*sj5)))),-1);
if(!x4206.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4205.value)+(((1.5707963267949)*(x4206.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4207=IKsin(j4);
IkReal x4208=IKcos(j4);
IkReal x4209=(cj5*r00);
IkReal x4210=(cj5*r10);
IkReal x4211=(r21*sj5);
IkReal x4212=((1.0)*cj2);
IkReal x4213=((1.0)*sj0);
IkReal x4214=(cj1*sj2);
IkReal x4215=(cj5*r20);
IkReal x4216=((1.0)*x4208);
IkReal x4217=((1.0)*x4207);
IkReal x4218=(sj5*x4207);
IkReal x4219=(sj5*x4208);
evalcond[0]=(((x4207*x4211))+(((-1.0)*r22*x4216))+(((-1.0)*x4215*x4217)));
evalcond[1]=(cj0+(((-1.0)*x4210*x4217))+((r11*x4218))+(((-1.0)*r12*x4216)));
evalcond[2]=((((-1.0)*r02*x4216))+((r01*x4218))+(((-1.0)*x4213))+(((-1.0)*x4209*x4217)));
evalcond[3]=(((r22*x4207))+((sj1*sj2))+(((-1.0)*x4215*x4216))+(((-1.0)*cj1*x4212))+((x4208*x4211)));
evalcond[4]=((((-1.0)*cj0*sj1*x4212))+(((-1.0)*cj0*x4214))+((r02*x4207))+((r01*x4219))+(((-1.0)*x4209*x4216)));
evalcond[5]=((((-1.0)*x4213*x4214))+(((-1.0)*x4210*x4216))+((r11*x4219))+(((-1.0)*sj0*sj1*x4212))+((r12*x4207)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4220=r21*r21;
IkReal x4221=cj5*cj5;
IkReal x4222=(sj1*sj2);
IkReal x4223=(r21*sj5);
IkReal x4224=(cj1*cj2);
IkReal x4225=(cj5*r20);
CheckValue<IkReal> x4226 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x4224))+((r22*x4222)))),IkReal((((x4224*x4225))+(((-1.0)*x4223*x4224))+((x4222*x4223))+(((-1.0)*x4222*x4225)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4226.valid){
continue;
}
CheckValue<IkReal> x4227=IKPowWithIntegerCheck(IKsign(((((2.0)*x4223*x4225))+(((-1.0)*x4220))+((x4220*x4221))+(((-1.0)*x4221*(r20*r20)))+(((-1.0)*(r22*r22))))),-1);
if(!x4227.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4226.value)+(((1.5707963267949)*(x4227.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x4228=IKsin(j4);
IkReal x4229=IKcos(j4);
IkReal x4230=(r21*sj5);
IkReal x4231=(cj5*r20);
IkReal x4232=((1.0)*x4229);
evalcond[0]=((((-1.0)*x4228*x4231))+(((-1.0)*r22*x4232))+((x4228*x4230)));
evalcond[1]=((((-1.0)*x4231*x4232))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4228))+((x4229*x4230)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4233=(cj5*sj4);
IkReal x4234=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x4234))+(((-1.0)*r00*x4233)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x4233))+(((-1.0)*r11*x4234))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x4234))+(((-1.0)*r00*x4233))))+IKsqr((((r10*x4233))+(((-1.0)*r11*x4234))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x4234))+(((-1.0)*r00*x4233))), (((r10*x4233))+(((-1.0)*r11*x4234))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x4235=IKcos(j0);
IkReal x4236=IKsin(j0);
IkReal x4237=((0.213)*sj1);
IkReal x4238=((1.0)*cj1);
IkReal x4239=(r11*sj5);
IkReal x4240=((1.0)*sj5);
IkReal x4241=((1.0)*cj5);
IkReal x4242=((1.0)*sj1);
IkReal x4243=((0.244)*cj1);
IkReal x4244=((0.085)*cj5);
IkReal x4245=((0.085)*sj5);
IkReal x4246=((1.0)*cj4);
IkReal x4247=(r01*sj5);
IkReal x4248=(sj2*x4235);
IkReal x4249=(cj4*x4241);
IkReal x4250=(sj2*x4236);
IkReal x4251=((0.213)*cj1*cj2);
IkReal x4252=(cj2*x4235);
IkReal x4253=(cj2*x4236);
evalcond[0]=(((sj4*x4239))+(((-1.0)*r12*x4246))+x4235+(((-1.0)*r10*sj4*x4241)));
evalcond[1]=(((sj4*x4247))+(((-1.0)*x4236))+(((-1.0)*r02*x4246))+(((-1.0)*r00*sj4*x4241)));
evalcond[2]=((((-1.0)*r01*x4241))+(((-1.0)*x4238*x4252))+((sj1*x4248))+(((-1.0)*r00*x4240)));
evalcond[3]=((((-1.0)*x4238*x4253))+(((-1.0)*r11*x4241))+(((-1.0)*r10*x4240))+((sj1*x4250)));
evalcond[4]=((((-1.0)*x4242*x4252))+((cj4*x4247))+((r02*sj4))+(((-1.0)*x4238*x4248))+(((-1.0)*r00*x4249)));
evalcond[5]=(((cj4*x4239))+(((-1.0)*x4238*x4250))+(((-1.0)*x4242*x4253))+((r12*sj4))+(((-1.0)*r10*x4249)));
evalcond[6]=((((-1.0)*r01*x4244))+((x4235*x4243))+(((-0.131)*x4236))+(((-1.0)*px))+(((-1.0)*x4237*x4248))+((x4235*x4251))+(((-1.0)*r00*x4245)));
evalcond[7]=((((-1.0)*x4237*x4250))+(((0.131)*x4235))+((x4236*x4243))+(((-1.0)*py))+(((-1.0)*r11*x4244))+(((-1.0)*r10*x4245))+((x4236*x4251)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x4254 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4254.valid){
continue;
}
CheckValue<IkReal> x4255=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj1*cj2))+((sj1*sj2)))),-1);
if(!x4255.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x4254.value)+(((1.5707963267949)*(x4255.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4256=IKcos(j0);
IkReal x4257=IKsin(j0);
IkReal x4258=(sj1*sj2);
IkReal x4259=(r00*sj5);
IkReal x4260=((1.0)*cj5);
IkReal x4261=(r10*sj5);
IkReal x4262=(cj1*cj2);
IkReal x4263=((0.244)*cj1);
IkReal x4264=((0.085)*cj5);
IkReal x4265=((0.213)*x4256);
IkReal x4266=((0.213)*x4257);
evalcond[0]=((((-1.0)*x4256*x4262))+(((-1.0)*r01*x4260))+((x4256*x4258))+(((-1.0)*x4259)));
evalcond[1]=((((-1.0)*r11*x4260))+(((-1.0)*x4261))+((x4257*x4258))+(((-1.0)*x4257*x4262)));
evalcond[2]=(((x4256*x4263))+(((-0.085)*x4259))+(((-1.0)*x4258*x4265))+(((-1.0)*r01*x4264))+(((-1.0)*px))+((x4262*x4265))+(((-0.131)*x4257)));
evalcond[3]=((((-1.0)*r11*x4264))+((x4257*x4263))+(((-1.0)*x4258*x4266))+(((-1.0)*py))+((x4262*x4266))+(((-0.085)*x4261))+(((0.131)*x4256)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4267=((1.0)*cj5);
IkReal x4268=((((-1.0)*r00*sj5))+(((-1.0)*r01*x4267)));
j4eval[0]=x4268;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4267)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4268);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4269=((1.0)*cj5);
IkReal x4270=((((-1.0)*r11*x4269))+(((-1.0)*r10*sj5)));
j4eval[0]=x4270;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x4269))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x4270);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4271=((1.0)*sj0);
IkReal x4272=((1.0)*cj0);
IkReal x4273=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x4273;
j4eval[1]=((IKabs(((((-1.0)*r12*x4271))+(((-1.0)*r02*x4272)))))+(IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x4272))+(((-1.0)*r11*sj5*x4271))))));
j4eval[2]=IKsign(x4273);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x4274=((-1.0)*r20);
IkReal x4276 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4276)==0){
continue;
}
IkReal x4275=pow(x4276,-0.5);
CheckValue<IkReal> x4277 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4274),IKFAST_ATAN2_MAGTHRESH);
if(!x4277.valid){
continue;
}
IkReal gconst96=((-1.0)*(x4277.value));
IkReal gconst97=(r21*x4275);
IkReal gconst98=(x4274*x4275);
CheckValue<IkReal> x4278 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4278.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4278.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4279=((-1.0)*r20);
IkReal x4280=x4275;
CheckValue<IkReal> x4282 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4279),IKFAST_ATAN2_MAGTHRESH);
if(!x4282.valid){
continue;
}
IkReal x4281=((-1.0)*(x4282.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4281;
IkReal gconst96=x4281;
IkReal gconst97=(r21*x4280);
IkReal gconst98=(x4279*x4280);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4283=((-1.0)*r20);
IkReal x4284=x4275;
CheckValue<IkReal> x4286 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4283),IKFAST_ATAN2_MAGTHRESH);
if(!x4286.valid){
continue;
}
IkReal x4285=((-1.0)*(x4286.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4285;
IkReal gconst96=x4285;
IkReal gconst97=(r21*x4284);
IkReal gconst98=(x4283*x4284);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x4287=((-1.0)*r20);
IkReal x4288=x4275;
CheckValue<IkReal> x4290 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4287),IKFAST_ATAN2_MAGTHRESH);
if(!x4290.valid){
continue;
}
IkReal x4289=((-1.0)*(x4290.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4289;
IkReal gconst96=x4289;
IkReal gconst97=(r21*x4288);
IkReal gconst98=(x4287*x4288);
IkReal x4291=((1.0)*(r22*r22));
CheckValue<IkReal> x4295=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x4291))),-1);
if(!x4295.valid){
continue;
}
IkReal x4292=x4295.value;
IkReal x4293=((1.0)*x4292);
IkReal x4294=((((-1.0)*x4291))+(((-1.0)*x4293*(r21*r21*r21*r21)))+(((-1.0)*x4293*(r20*r20*r20*r20)))+(((-2.0)*x4292*(r20*r20)*(r21*r21))));
j4eval[0]=x4294;
j4eval[1]=IKsign(x4294);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4296=(cj1*cj2);
IkReal x4297=(gconst98*r20);
IkReal x4298=(sj1*sj2);
IkReal x4299=(gconst97*r21);
CheckValue<IkReal> x4300=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x4297*x4297)))+(((-1.0)*(x4299*x4299)))+(((-1.0)*(r22*r22)))+(((2.0)*x4297*x4299)))),-1);
if(!x4300.valid){
continue;
}
CheckValue<IkReal> x4301 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x4296))+((r22*x4298)))),IkReal((((x4298*x4299))+(((-1.0)*x4297*x4298))+(((-1.0)*x4296*x4299))+((x4296*x4297)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4301.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4300.value)))+(x4301.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4302=IKsin(j4);
IkReal x4303=IKcos(j4);
IkReal x4304=(gconst98*r10);
IkReal x4305=(gconst97*r21);
IkReal x4306=(gconst98*r20);
IkReal x4307=((1.0)*cj2);
IkReal x4308=((1.0)*sj0);
IkReal x4309=(gconst98*r00);
IkReal x4310=(cj1*sj2);
IkReal x4311=((1.0)*x4303);
IkReal x4312=((1.0)*x4302);
IkReal x4313=(gconst97*x4302);
IkReal x4314=(gconst97*x4303);
evalcond[0]=((((-1.0)*r22*x4311))+(((-1.0)*x4306*x4312))+((x4302*x4305)));
evalcond[1]=(cj0+((r11*x4313))+(((-1.0)*r12*x4311))+(((-1.0)*x4304*x4312)));
evalcond[2]=(((r01*x4313))+(((-1.0)*x4309*x4312))+(((-1.0)*r02*x4311))+(((-1.0)*x4308)));
evalcond[3]=(((r22*x4302))+(((-1.0)*x4306*x4311))+((sj1*sj2))+(((-1.0)*cj1*x4307))+((x4303*x4305)));
evalcond[4]=((((-1.0)*cj0*sj1*x4307))+((r02*x4302))+(((-1.0)*cj0*x4310))+((r01*x4314))+(((-1.0)*x4309*x4311)));
evalcond[5]=(((r12*x4302))+(((-1.0)*sj0*sj1*x4307))+((r11*x4314))+(((-1.0)*x4308*x4310))+(((-1.0)*x4304*x4311)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4315=((1.0)*gconst98);
CheckValue<IkReal> x4316 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst97*r21*sj0))+(((-1.0)*r20*sj0*x4315)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4316.valid){
continue;
}
CheckValue<IkReal> x4317=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4315))+(((-1.0)*gconst97*r10)))),-1);
if(!x4317.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4316.value)+(((1.5707963267949)*(x4317.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4318=IKsin(j4);
IkReal x4319=IKcos(j4);
IkReal x4320=(gconst98*r10);
IkReal x4321=(gconst97*r21);
IkReal x4322=(gconst98*r20);
IkReal x4323=((1.0)*cj2);
IkReal x4324=((1.0)*sj0);
IkReal x4325=(gconst98*r00);
IkReal x4326=(cj1*sj2);
IkReal x4327=((1.0)*x4319);
IkReal x4328=((1.0)*x4318);
IkReal x4329=(gconst97*x4318);
IkReal x4330=(gconst97*x4319);
evalcond[0]=(((x4318*x4321))+(((-1.0)*r22*x4327))+(((-1.0)*x4322*x4328)));
evalcond[1]=(cj0+(((-1.0)*r12*x4327))+(((-1.0)*x4320*x4328))+((r11*x4329)));
evalcond[2]=((((-1.0)*r02*x4327))+(((-1.0)*x4324))+(((-1.0)*x4325*x4328))+((r01*x4329)));
evalcond[3]=(((x4319*x4321))+((sj1*sj2))+(((-1.0)*cj1*x4323))+(((-1.0)*x4322*x4327))+((r22*x4318)));
evalcond[4]=(((r01*x4330))+(((-1.0)*x4325*x4327))+(((-1.0)*cj0*sj1*x4323))+(((-1.0)*cj0*x4326))+((r02*x4318)));
evalcond[5]=((((-1.0)*x4324*x4326))+((r12*x4318))+(((-1.0)*sj0*sj1*x4323))+(((-1.0)*x4320*x4327))+((r11*x4330)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4331=((1.0)*gconst98);
CheckValue<IkReal> x4332 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4331))+((cj0*gconst97*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4332.valid){
continue;
}
CheckValue<IkReal> x4333=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4331))+(((-1.0)*gconst97*r00)))),-1);
if(!x4333.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4332.value)+(((1.5707963267949)*(x4333.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4334=IKsin(j4);
IkReal x4335=IKcos(j4);
IkReal x4336=(gconst98*r10);
IkReal x4337=(gconst97*r21);
IkReal x4338=(gconst98*r20);
IkReal x4339=((1.0)*cj2);
IkReal x4340=((1.0)*sj0);
IkReal x4341=(gconst98*r00);
IkReal x4342=(cj1*sj2);
IkReal x4343=((1.0)*x4335);
IkReal x4344=((1.0)*x4334);
IkReal x4345=(gconst97*x4334);
IkReal x4346=(gconst97*x4335);
evalcond[0]=(((x4334*x4337))+(((-1.0)*x4338*x4344))+(((-1.0)*r22*x4343)));
evalcond[1]=(cj0+(((-1.0)*r12*x4343))+(((-1.0)*x4336*x4344))+((r11*x4345)));
evalcond[2]=((((-1.0)*r02*x4343))+(((-1.0)*x4340))+(((-1.0)*x4341*x4344))+((r01*x4345)));
evalcond[3]=(((sj1*sj2))+((x4335*x4337))+(((-1.0)*cj1*x4339))+(((-1.0)*x4338*x4343))+((r22*x4334)));
evalcond[4]=((((-1.0)*x4341*x4343))+(((-1.0)*cj0*sj1*x4339))+((r02*x4334))+(((-1.0)*cj0*x4342))+((r01*x4346)));
evalcond[5]=((((-1.0)*x4340*x4342))+(((-1.0)*sj0*sj1*x4339))+((r12*x4334))+(((-1.0)*x4336*x4343))+((r11*x4346)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4347=((-1.0)*r21);
IkReal x4349 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4349)==0){
continue;
}
IkReal x4348=pow(x4349,-0.5);
CheckValue<IkReal> x4350 = IKatan2WithCheck(IkReal(x4347),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4350.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x4350.value))));
IkReal gconst100=(x4347*x4348);
IkReal gconst101=((1.0)*r20*x4348);
CheckValue<IkReal> x4351 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4351.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4351.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4352=((-1.0)*r21);
CheckValue<IkReal> x4355 = IKatan2WithCheck(IkReal(x4352),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4355.valid){
continue;
}
IkReal x4353=((1.0)*(x4355.value));
IkReal x4354=x4348;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4353)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4353)));
IkReal gconst100=(x4352*x4354);
IkReal gconst101=((1.0)*r20*x4354);
IkReal x4356=r22*r22;
IkReal x4357=((1.0)*x4356);
CheckValue<IkReal> x4361=IKPowWithIntegerCheck(((-1.0)+x4356),-1);
if(!x4361.valid){
continue;
}
IkReal x4358=x4361.value;
if((((1.0)+(((-1.0)*x4357)))) < -0.00001)
continue;
IkReal x4359=IKsqrt(((1.0)+(((-1.0)*x4357))));
IkReal x4360=(cj0*x4358*x4359);
j4eval[0]=((IKabs(((((-1.0)*x4357*x4360))+x4360)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4362=((-1.0)*r21);
CheckValue<IkReal> x4365 = IKatan2WithCheck(IkReal(x4362),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4365.valid){
continue;
}
IkReal x4363=((1.0)*(x4365.value));
IkReal x4364=x4348;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4363)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4363)));
IkReal gconst100=(x4362*x4364);
IkReal gconst101=((1.0)*r20*x4364);
IkReal x4366=r22*r22;
IkReal x4367=((1.0)*x4366);
CheckValue<IkReal> x4371=IKPowWithIntegerCheck(((-1.0)+x4366),-1);
if(!x4371.valid){
continue;
}
IkReal x4368=x4371.value;
if((((1.0)+(((-1.0)*x4367)))) < -0.00001)
continue;
IkReal x4369=IKsqrt(((1.0)+(((-1.0)*x4367))));
IkReal x4370=(sj0*x4368*x4369);
j4eval[0]=((IKabs((x4370+(((-1.0)*x4367*x4370)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4372=((-1.0)*r21);
CheckValue<IkReal> x4375 = IKatan2WithCheck(IkReal(x4372),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4375.valid){
continue;
}
IkReal x4373=((1.0)*(x4375.value));
IkReal x4374=x4348;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4373)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4373)));
IkReal gconst100=(x4372*x4374);
IkReal gconst101=((1.0)*r20*x4374);
IkReal x4376=r22*r22;
IkReal x4377=(r12*sj0);
IkReal x4378=(cj0*r02);
CheckValue<IkReal> x4382=IKPowWithIntegerCheck(((-1.0)+x4376),-1);
if(!x4382.valid){
continue;
}
IkReal x4379=x4382.value;
if((((1.0)+(((-1.0)*x4376)))) < -0.00001)
continue;
IkReal x4380=IKsqrt(((1.0)+(((-1.0)*x4376))));
IkReal x4381=(r22*x4379*x4380);
j4eval[0]=0;
j4eval[1]=((IKabs((((x4378*x4381))+((x4377*x4381)))))+(IKabs(((((-1.0)*x4377))+(((-1.0)*x4378))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4383=((1.0)*sj0);
IkReal x4384=((1.0)*gconst100);
CheckValue<IkReal> x4385 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4383))+(((-1.0)*cj0*r02)))),IkReal((((gconst101*r10*sj0))+((cj0*gconst101*r00))+(((-1.0)*gconst100*r11*x4383))+(((-1.0)*cj0*r01*x4384)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4385.valid){
continue;
}
CheckValue<IkReal> x4386=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst101*r21))+(((-1.0)*r20*x4384)))),-1);
if(!x4386.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4385.value)+(((1.5707963267949)*(x4386.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4387=IKsin(j4);
IkReal x4388=IKcos(j4);
IkReal x4389=(gconst101*r20);
IkReal x4390=(gconst101*r10);
IkReal x4391=((1.0)*cj2);
IkReal x4392=(gconst101*r00);
IkReal x4393=((1.0)*sj0);
IkReal x4394=(cj1*sj2);
IkReal x4395=((1.0)*x4388);
IkReal x4396=((1.0)*x4387);
IkReal x4397=(gconst100*x4387);
IkReal x4398=(gconst100*x4388);
evalcond[0]=((((-1.0)*x4389*x4396))+(((-1.0)*r22*x4395))+((r21*x4397)));
evalcond[1]=((((-1.0)*r12*x4395))+cj0+(((-1.0)*x4390*x4396))+((r11*x4397)));
evalcond[2]=((((-1.0)*x4393))+((r01*x4397))+(((-1.0)*r02*x4395))+(((-1.0)*x4392*x4396)));
evalcond[3]=((((-1.0)*x4389*x4395))+((r22*x4387))+((sj1*sj2))+(((-1.0)*cj1*x4391))+((r21*x4398)));
evalcond[4]=(((r01*x4398))+(((-1.0)*cj0*sj1*x4391))+((r02*x4387))+(((-1.0)*x4392*x4395))+(((-1.0)*cj0*x4394)));
evalcond[5]=((((-1.0)*sj0*sj1*x4391))+(((-1.0)*x4390*x4395))+(((-1.0)*x4393*x4394))+((r11*x4398))+((r12*x4387)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4399=((1.0)*gconst101);
CheckValue<IkReal> x4400=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4399))+(((-1.0)*gconst100*r10)))),-1);
if(!x4400.valid){
continue;
}
CheckValue<IkReal> x4401 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x4399))+((gconst100*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4401.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4400.value)))+(x4401.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4402=IKsin(j4);
IkReal x4403=IKcos(j4);
IkReal x4404=(gconst101*r20);
IkReal x4405=(gconst101*r10);
IkReal x4406=((1.0)*cj2);
IkReal x4407=(gconst101*r00);
IkReal x4408=((1.0)*sj0);
IkReal x4409=(cj1*sj2);
IkReal x4410=((1.0)*x4403);
IkReal x4411=((1.0)*x4402);
IkReal x4412=(gconst100*x4402);
IkReal x4413=(gconst100*x4403);
evalcond[0]=(((r21*x4412))+(((-1.0)*r22*x4410))+(((-1.0)*x4404*x4411)));
evalcond[1]=(((r11*x4412))+cj0+(((-1.0)*r12*x4410))+(((-1.0)*x4405*x4411)));
evalcond[2]=(((r01*x4412))+(((-1.0)*x4407*x4411))+(((-1.0)*r02*x4410))+(((-1.0)*x4408)));
evalcond[3]=(((r21*x4413))+((r22*x4402))+((sj1*sj2))+(((-1.0)*cj1*x4406))+(((-1.0)*x4404*x4410)));
evalcond[4]=((((-1.0)*cj0*x4409))+((r01*x4413))+(((-1.0)*x4407*x4410))+((r02*x4402))+(((-1.0)*cj0*sj1*x4406)));
evalcond[5]=((((-1.0)*x4408*x4409))+((r11*x4413))+((r12*x4402))+(((-1.0)*x4405*x4410))+(((-1.0)*sj0*sj1*x4406)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4414=((1.0)*gconst101);
CheckValue<IkReal> x4415=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r00))+(((-1.0)*r01*x4414)))),-1);
if(!x4415.valid){
continue;
}
CheckValue<IkReal> x4416 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst100*r21))+(((-1.0)*cj0*r20*x4414)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4416.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4415.value)))+(x4416.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4417=IKsin(j4);
IkReal x4418=IKcos(j4);
IkReal x4419=(gconst101*r20);
IkReal x4420=(gconst101*r10);
IkReal x4421=((1.0)*cj2);
IkReal x4422=(gconst101*r00);
IkReal x4423=((1.0)*sj0);
IkReal x4424=(cj1*sj2);
IkReal x4425=((1.0)*x4418);
IkReal x4426=((1.0)*x4417);
IkReal x4427=(gconst100*x4417);
IkReal x4428=(gconst100*x4418);
evalcond[0]=((((-1.0)*r22*x4425))+((r21*x4427))+(((-1.0)*x4419*x4426)));
evalcond[1]=((((-1.0)*x4420*x4426))+cj0+(((-1.0)*r12*x4425))+((r11*x4427)));
evalcond[2]=((((-1.0)*x4423))+(((-1.0)*x4422*x4426))+((r01*x4427))+(((-1.0)*r02*x4425)));
evalcond[3]=(((r22*x4417))+((sj1*sj2))+((r21*x4428))+(((-1.0)*x4419*x4425))+(((-1.0)*cj1*x4421)));
evalcond[4]=((((-1.0)*x4422*x4425))+(((-1.0)*cj0*x4424))+(((-1.0)*cj0*sj1*x4421))+((r01*x4428))+((r02*x4417)));
evalcond[5]=((((-1.0)*x4423*x4424))+(((-1.0)*x4420*x4425))+((r12*x4417))+(((-1.0)*sj0*sj1*x4421))+((r11*x4428)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4429=((-1.0)*r10);
IkReal x4431 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4431)==0){
continue;
}
IkReal x4430=pow(x4431,-0.5);
CheckValue<IkReal> x4432 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x4429),IKFAST_ATAN2_MAGTHRESH);
if(!x4432.valid){
continue;
}
IkReal gconst102=((-1.0)*(x4432.value));
IkReal gconst103=(r11*x4430);
IkReal gconst104=(x4429*x4430);
CheckValue<IkReal> x4433 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4433.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4433.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4434=((-1.0)*r10);
IkReal x4435=x4430;
CheckValue<IkReal> x4437 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x4434),IKFAST_ATAN2_MAGTHRESH);
if(!x4437.valid){
continue;
}
IkReal x4436=((-1.0)*(x4437.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst103;
cj5=gconst104;
j5=x4436;
IkReal gconst102=x4436;
IkReal gconst103=(r11*x4435);
IkReal gconst104=(x4434*x4435);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4438=((1.0)*sj0);
IkReal x4439=((1.0)*gconst103);
CheckValue<IkReal> x4440=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst104*r21))+(((-1.0)*r20*x4439)))),-1);
if(!x4440.valid){
continue;
}
CheckValue<IkReal> x4441 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x4438)))),IkReal(((((-1.0)*gconst103*r11*x4438))+(((-1.0)*cj0*r01*x4439))+((gconst104*r10*sj0))+((cj0*gconst104*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4441.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4440.value)))+(x4441.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4442=IKsin(j4);
IkReal x4443=IKcos(j4);
IkReal x4444=(gconst103*r11);
IkReal x4445=((1.0)*cj2);
IkReal x4446=((1.0)*sj0);
IkReal x4447=(cj1*sj2);
IkReal x4448=((1.0)*x4443);
IkReal x4449=(gconst103*x4443);
IkReal x4450=(gconst103*x4442);
IkReal x4451=((1.0)*gconst104*x4442);
evalcond[0]=(((r21*x4450))+(((-1.0)*r22*x4448))+(((-1.0)*r20*x4451)));
evalcond[1]=(cj0+(((-1.0)*r12*x4448))+((x4442*x4444))+(((-1.0)*r10*x4451)));
evalcond[2]=(((r01*x4450))+(((-1.0)*x4446))+(((-1.0)*r02*x4448))+(((-1.0)*r00*x4451)));
evalcond[3]=(((r21*x4449))+((sj1*sj2))+(((-1.0)*cj1*x4445))+((r22*x4442))+(((-1.0)*gconst104*r20*x4448)));
evalcond[4]=((((-1.0)*gconst104*r00*x4448))+((r01*x4449))+(((-1.0)*cj0*sj1*x4445))+(((-1.0)*cj0*x4447))+((r02*x4442)));
evalcond[5]=((((-1.0)*x4446*x4447))+((x4443*x4444))+(((-1.0)*gconst104*r10*x4448))+((r12*x4442))+(((-1.0)*sj0*sj1*x4445)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4452=((1.0)*gconst104);
CheckValue<IkReal> x4453=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst103*r00))+(((-1.0)*r01*x4452)))),-1);
if(!x4453.valid){
continue;
}
CheckValue<IkReal> x4454 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4452))+((cj0*gconst103*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4454.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4453.value)))+(x4454.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4455=IKsin(j4);
IkReal x4456=IKcos(j4);
IkReal x4457=(gconst103*r11);
IkReal x4458=((1.0)*cj2);
IkReal x4459=((1.0)*sj0);
IkReal x4460=(cj1*sj2);
IkReal x4461=((1.0)*x4456);
IkReal x4462=(gconst103*x4456);
IkReal x4463=(gconst103*x4455);
IkReal x4464=((1.0)*gconst104*x4455);
evalcond[0]=((((-1.0)*r22*x4461))+((r21*x4463))+(((-1.0)*r20*x4464)));
evalcond[1]=(cj0+((x4455*x4457))+(((-1.0)*r10*x4464))+(((-1.0)*r12*x4461)));
evalcond[2]=((((-1.0)*x4459))+((r01*x4463))+(((-1.0)*r02*x4461))+(((-1.0)*r00*x4464)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x4458))+((r21*x4462))+((r22*x4455))+(((-1.0)*gconst104*r20*x4461)));
evalcond[4]=((((-1.0)*cj0*sj1*x4458))+((r01*x4462))+((r02*x4455))+(((-1.0)*gconst104*r00*x4461))+(((-1.0)*cj0*x4460)));
evalcond[5]=((((-1.0)*gconst104*r10*x4461))+(((-1.0)*x4459*x4460))+((x4456*x4457))+((r12*x4455))+(((-1.0)*sj0*sj1*x4458)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4465=((-1.0)*r11);
IkReal x4467 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4467)==0){
continue;
}
IkReal x4466=pow(x4467,-0.5);
CheckValue<IkReal> x4468 = IKatan2WithCheck(IkReal(x4465),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4468.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x4468.value))));
IkReal gconst106=(x4465*x4466);
IkReal gconst107=((1.0)*r10*x4466);
CheckValue<IkReal> x4469 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4469.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4469.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4470=((-1.0)*r11);
CheckValue<IkReal> x4473 = IKatan2WithCheck(IkReal(x4470),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4473.valid){
continue;
}
IkReal x4471=((1.0)*(x4473.value));
IkReal x4472=x4466;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4471)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4471)));
IkReal gconst106=(x4470*x4472);
IkReal gconst107=((1.0)*r10*x4472);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4474=((-1.0)*r11);
CheckValue<IkReal> x4477 = IKatan2WithCheck(IkReal(x4474),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4477.valid){
continue;
}
IkReal x4475=((1.0)*(x4477.value));
IkReal x4476=x4466;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4475)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4475)));
IkReal gconst106=(x4474*x4476);
IkReal gconst107=((1.0)*r10*x4476);
IkReal x4478=r12*r12;
IkReal x4479=((1.0)*sj0);
IkReal x4480=(cj0*r02);
IkReal x4481=x4466;
j4eval[0]=((IKabs(((((-1.0)*x4479*x4481))+((r12*x4480*x4481))+((sj0*x4478*x4481)))))+(IKabs(((((-1.0)*x4480))+(((-1.0)*r12*x4479))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4482=((-1.0)*r11);
CheckValue<IkReal> x4485 = IKatan2WithCheck(IkReal(x4482),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4485.valid){
continue;
}
IkReal x4483=((1.0)*(x4485.value));
IkReal x4484=x4466;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4483)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4483)));
IkReal gconst106=(x4482*x4484);
IkReal gconst107=((1.0)*r10*x4484);
IkReal x4486=r12*r12;
IkReal x4487=((1.0)+(((-1.0)*x4486)));
IkReal x4488=(r22*sj1*sj2);
IkReal x4489=(cj1*cj2*r22);
CheckValue<IkReal> x4496=IKPowWithIntegerCheck(x4487,-1);
if(!x4496.valid){
continue;
}
IkReal x4490=x4496.value;
CheckValue<IkReal> x4497=IKPowWithIntegerCheck(((-1.0)+x4486),-1);
if(!x4497.valid){
continue;
}
IkReal x4491=x4497.value;
IkReal x4492=((1.0)*x4490);
if((x4487) < -0.00001)
continue;
IkReal x4493=IKsqrt(x4487);
IkReal x4494=(r12*x4491*x4493);
IkReal x4495=((((-1.0)*x4492*(r10*r10)*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-1.0)*x4492*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x4490)));
j4eval[0]=x4495;
j4eval[1]=((IKabs(((((-1.0)*x4488*x4494))+((x4489*x4494)))))+(IKabs(((((-1.0)*x4489))+x4488))));
j4eval[2]=IKsign(x4495);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4498=(sj1*sj2);
IkReal x4499=(gconst106*r21);
IkReal x4500=(gconst107*r20);
IkReal x4501=(cj1*cj2);
CheckValue<IkReal> x4502=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x4499*x4499)))+(((2.0)*x4499*x4500))+(((-1.0)*(r22*r22)))+(((-1.0)*(x4500*x4500))))),-1);
if(!x4502.valid){
continue;
}
CheckValue<IkReal> x4503 = IKatan2WithCheck(IkReal((((r22*x4498))+(((-1.0)*r22*x4501)))),IkReal(((((-1.0)*x4498*x4500))+((x4500*x4501))+(((-1.0)*x4499*x4501))+((x4498*x4499)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4503.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4502.value)))+(x4503.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4504=IKsin(j4);
IkReal x4505=IKcos(j4);
IkReal x4506=(gconst107*r10);
IkReal x4507=(gconst107*r00);
IkReal x4508=((1.0)*cj2);
IkReal x4509=(gconst107*r20);
IkReal x4510=((1.0)*sj0);
IkReal x4511=(cj1*sj2);
IkReal x4512=((1.0)*x4505);
IkReal x4513=(gconst106*x4505);
IkReal x4514=(gconst106*x4504);
IkReal x4515=((1.0)*x4504);
evalcond[0]=(((r21*x4514))+(((-1.0)*r22*x4512))+(((-1.0)*x4509*x4515)));
evalcond[1]=(cj0+(((-1.0)*x4506*x4515))+(((-1.0)*r12*x4512))+((r11*x4514)));
evalcond[2]=((((-1.0)*r02*x4512))+((r01*x4514))+(((-1.0)*x4510))+(((-1.0)*x4507*x4515)));
evalcond[3]=((((-1.0)*cj1*x4508))+((r22*x4504))+((sj1*sj2))+((r21*x4513))+(((-1.0)*x4509*x4512)));
evalcond[4]=((((-1.0)*cj0*x4511))+((r02*x4504))+((r01*x4513))+(((-1.0)*x4507*x4512))+(((-1.0)*cj0*sj1*x4508)));
evalcond[5]=((((-1.0)*x4506*x4512))+((r12*x4504))+((r11*x4513))+(((-1.0)*x4510*x4511))+(((-1.0)*sj0*sj1*x4508)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4516=((1.0)*sj0);
IkReal x4517=((1.0)*gconst106);
CheckValue<IkReal> x4518=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst107*r21))+(((-1.0)*r20*x4517)))),-1);
if(!x4518.valid){
continue;
}
CheckValue<IkReal> x4519 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4516))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x4517))+((gconst107*r10*sj0))+(((-1.0)*gconst106*r11*x4516))+((cj0*gconst107*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4519.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4518.value)))+(x4519.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4520=IKsin(j4);
IkReal x4521=IKcos(j4);
IkReal x4522=(gconst107*r10);
IkReal x4523=(gconst107*r00);
IkReal x4524=((1.0)*cj2);
IkReal x4525=(gconst107*r20);
IkReal x4526=((1.0)*sj0);
IkReal x4527=(cj1*sj2);
IkReal x4528=((1.0)*x4521);
IkReal x4529=(gconst106*x4521);
IkReal x4530=(gconst106*x4520);
IkReal x4531=((1.0)*x4520);
evalcond[0]=(((r21*x4530))+(((-1.0)*x4525*x4531))+(((-1.0)*r22*x4528)));
evalcond[1]=((((-1.0)*r12*x4528))+cj0+(((-1.0)*x4522*x4531))+((r11*x4530)));
evalcond[2]=(((r01*x4530))+(((-1.0)*x4526))+(((-1.0)*x4523*x4531))+(((-1.0)*r02*x4528)));
evalcond[3]=(((r21*x4529))+((sj1*sj2))+(((-1.0)*cj1*x4524))+(((-1.0)*x4525*x4528))+((r22*x4520)));
evalcond[4]=(((r01*x4529))+(((-1.0)*cj0*sj1*x4524))+((r02*x4520))+(((-1.0)*cj0*x4527))+(((-1.0)*x4523*x4528)));
evalcond[5]=(((r11*x4529))+((r12*x4520))+(((-1.0)*x4526*x4527))+(((-1.0)*x4522*x4528))+(((-1.0)*sj0*sj1*x4524)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4532=((1.0)*gconst107);
CheckValue<IkReal> x4533=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst106*r00))+(((-1.0)*r01*x4532)))),-1);
if(!x4533.valid){
continue;
}
CheckValue<IkReal> x4534 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4532))+((cj0*gconst106*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4534.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4533.value)))+(x4534.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4535=IKsin(j4);
IkReal x4536=IKcos(j4);
IkReal x4537=(gconst107*r10);
IkReal x4538=(gconst107*r00);
IkReal x4539=((1.0)*cj2);
IkReal x4540=(gconst107*r20);
IkReal x4541=((1.0)*sj0);
IkReal x4542=(cj1*sj2);
IkReal x4543=((1.0)*x4536);
IkReal x4544=(gconst106*x4536);
IkReal x4545=(gconst106*x4535);
IkReal x4546=((1.0)*x4535);
evalcond[0]=((((-1.0)*r22*x4543))+(((-1.0)*x4540*x4546))+((r21*x4545)));
evalcond[1]=(cj0+(((-1.0)*x4537*x4546))+(((-1.0)*r12*x4543))+((r11*x4545)));
evalcond[2]=((((-1.0)*r02*x4543))+((r01*x4545))+(((-1.0)*x4538*x4546))+(((-1.0)*x4541)));
evalcond[3]=((((-1.0)*cj1*x4539))+((sj1*sj2))+((r22*x4535))+(((-1.0)*x4540*x4543))+((r21*x4544)));
evalcond[4]=((((-1.0)*cj0*x4542))+((r01*x4544))+(((-1.0)*x4538*x4543))+((r02*x4535))+(((-1.0)*cj0*sj1*x4539)));
evalcond[5]=(((r12*x4535))+(((-1.0)*x4537*x4543))+(((-1.0)*x4541*x4542))+((r11*x4544))+(((-1.0)*sj0*sj1*x4539)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4547=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4547;
j4eval[1]=IKsign(x4547);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4548=((1.0)*cj5);
IkReal x4549=((((-1.0)*r00*sj5))+(((-1.0)*r01*x4548)));
j4eval[0]=x4549;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x4548))))));
j4eval[2]=IKsign(x4549);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4550=(sj1*sj2);
IkReal x4551=(cj5*r10);
IkReal x4552=(r11*sj5);
IkReal x4553=(cj1*cj2);
IkReal x4554=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x4554;
j4eval[1]=((IKabs((((r12*x4553))+(((-1.0)*r12*x4550)))))+(IKabs((((x4550*x4552))+((x4551*x4553))+(((-1.0)*x4552*x4553))+(((-1.0)*x4550*x4551))))));
j4eval[2]=IKsign(x4554);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4555=(sj1*sj2);
IkReal x4556=(cj5*r10);
IkReal x4557=(r11*sj5);
IkReal x4558=(cj1*cj2);
CheckValue<IkReal> x4559=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x4559.valid){
continue;
}
CheckValue<IkReal> x4560 = IKatan2WithCheck(IkReal((((x4556*x4558))+(((-1.0)*x4557*x4558))+((x4555*x4557))+(((-1.0)*x4555*x4556)))),IkReal((((r12*x4558))+(((-1.0)*r12*x4555)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4560.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4559.value)))+(x4560.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4561=IKcos(j4);
IkReal x4562=IKsin(j4);
IkReal x4563=(cj5*r00);
IkReal x4564=(cj5*r10);
IkReal x4565=(r21*sj5);
IkReal x4566=((1.0)*cj2);
IkReal x4567=(cj5*r20);
IkReal x4568=((1.0)*x4561);
IkReal x4569=((1.0)*x4562);
IkReal x4570=(sj5*x4562);
IkReal x4571=(sj5*x4561);
evalcond[0]=(((r12*x4562))+((r11*x4571))+(((-1.0)*x4564*x4568)));
evalcond[1]=((((-1.0)*x4567*x4569))+(((-1.0)*r22*x4568))+((x4562*x4565)));
evalcond[2]=((((-1.0)*r02*x4568))+((r01*x4570))+(((-1.0)*x4563*x4569)));
evalcond[3]=((1.0)+((r11*x4570))+(((-1.0)*x4564*x4569))+(((-1.0)*r12*x4568)));
evalcond[4]=((((-1.0)*x4567*x4568))+((r22*x4562))+(((-1.0)*cj1*x4566))+((sj1*sj2))+((x4561*x4565)));
evalcond[5]=((((-1.0)*sj1*x4566))+((r02*x4562))+(((-1.0)*cj1*sj2))+((r01*x4571))+(((-1.0)*x4563*x4568)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4572=((1.0)*cj5);
CheckValue<IkReal> x4573 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x4572)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4573.valid){
continue;
}
CheckValue<IkReal> x4574=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4572))+(((-1.0)*r00*sj5)))),-1);
if(!x4574.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4573.value)+(((1.5707963267949)*(x4574.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4575=IKcos(j4);
IkReal x4576=IKsin(j4);
IkReal x4577=(cj5*r00);
IkReal x4578=(cj5*r10);
IkReal x4579=(r21*sj5);
IkReal x4580=((1.0)*cj2);
IkReal x4581=(cj5*r20);
IkReal x4582=((1.0)*x4575);
IkReal x4583=((1.0)*x4576);
IkReal x4584=(sj5*x4576);
IkReal x4585=(sj5*x4575);
evalcond[0]=(((r12*x4576))+((r11*x4585))+(((-1.0)*x4578*x4582)));
evalcond[1]=((((-1.0)*r22*x4582))+(((-1.0)*x4581*x4583))+((x4576*x4579)));
evalcond[2]=((((-1.0)*r02*x4582))+(((-1.0)*x4577*x4583))+((r01*x4584)));
evalcond[3]=((1.0)+((r11*x4584))+(((-1.0)*r12*x4582))+(((-1.0)*x4578*x4583)));
evalcond[4]=(((r22*x4576))+((sj1*sj2))+(((-1.0)*x4581*x4582))+((x4575*x4579))+(((-1.0)*cj1*x4580)));
evalcond[5]=(((r02*x4576))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x4580))+(((-1.0)*x4577*x4582))+((r01*x4585)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4586=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4586.valid){
continue;
}
CheckValue<IkReal> x4587 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4587.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4586.value)))+(x4587.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4588=IKcos(j4);
IkReal x4589=IKsin(j4);
IkReal x4590=(cj5*r00);
IkReal x4591=(cj5*r10);
IkReal x4592=(r21*sj5);
IkReal x4593=((1.0)*cj2);
IkReal x4594=(cj5*r20);
IkReal x4595=((1.0)*x4588);
IkReal x4596=((1.0)*x4589);
IkReal x4597=(sj5*x4589);
IkReal x4598=(sj5*x4588);
evalcond[0]=((((-1.0)*x4591*x4595))+((r11*x4598))+((r12*x4589)));
evalcond[1]=((((-1.0)*r22*x4595))+(((-1.0)*x4594*x4596))+((x4589*x4592)));
evalcond[2]=((((-1.0)*r02*x4595))+(((-1.0)*x4590*x4596))+((r01*x4597)));
evalcond[3]=((1.0)+(((-1.0)*x4591*x4596))+((r11*x4597))+(((-1.0)*r12*x4595)));
evalcond[4]=(((r22*x4589))+((sj1*sj2))+(((-1.0)*x4594*x4595))+(((-1.0)*cj1*x4593))+((x4588*x4592)));
evalcond[5]=(((r02*x4589))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x4593))+(((-1.0)*x4590*x4595))+((r01*x4598)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4599=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4599;
j4eval[1]=IKsign(x4599);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4600=((1.0)*cj5);
IkReal x4601=((((-1.0)*r21*x4600))+(((-1.0)*r20*sj5)));
j4eval[0]=x4601;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x4600))))));
j4eval[2]=IKsign(x4601);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4602=cj5*cj5;
IkReal x4603=r11*r11;
IkReal x4604=(r11*sj5);
IkReal x4605=(cj5*r10);
IkReal x4606=((r12*r12)+((x4602*(r10*r10)))+x4603+(((-2.0)*x4604*x4605))+(((-1.0)*x4602*x4603)));
j4eval[0]=x4606;
j4eval[1]=IKsign(x4606);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x4605))+x4604))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4607=cj5*cj5;
IkReal x4608=r11*r11;
IkReal x4609=(cj5*r10);
IkReal x4610=(r11*sj5);
CheckValue<IkReal> x4611=IKPowWithIntegerCheck(IKsign(((((-2.0)*x4609*x4610))+(r12*r12)+(((-1.0)*x4607*x4608))+x4608+((x4607*(r10*r10))))),-1);
if(!x4611.valid){
continue;
}
CheckValue<IkReal> x4612 = IKatan2WithCheck(IkReal(((((-1.0)*x4609))+x4610)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4612.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4611.value)))+(x4612.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4613=IKcos(j4);
IkReal x4614=IKsin(j4);
IkReal x4615=(cj5*r00);
IkReal x4616=(cj5*r10);
IkReal x4617=(r21*sj5);
IkReal x4618=(cj5*r20);
IkReal x4619=((1.0)*x4613);
IkReal x4620=((1.0)*x4614);
IkReal x4621=(sj5*x4614);
IkReal x4622=(sj5*x4613);
evalcond[0]=(((r11*x4622))+((r12*x4614))+(((-1.0)*x4616*x4619)));
evalcond[1]=((((-1.0)*x4618*x4620))+((x4614*x4617))+(((-1.0)*r22*x4619)));
evalcond[2]=((((-1.0)*r02*x4619))+((r01*x4621))+(((-1.0)*x4615*x4620)));
evalcond[3]=((-1.0)+((r11*x4621))+(((-1.0)*r12*x4619))+(((-1.0)*x4616*x4620)));
evalcond[4]=(((cj2*sj1))+((r02*x4614))+((cj1*sj2))+(((-1.0)*x4615*x4619))+((r01*x4622)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4614))+((x4613*x4617))+(((-1.0)*x4618*x4619)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4623=((1.0)*cj5);
CheckValue<IkReal> x4624 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x4623)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4624.valid){
continue;
}
CheckValue<IkReal> x4625=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4623))+(((-1.0)*r20*sj5)))),-1);
if(!x4625.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4624.value)+(((1.5707963267949)*(x4625.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4626=IKcos(j4);
IkReal x4627=IKsin(j4);
IkReal x4628=(cj5*r00);
IkReal x4629=(cj5*r10);
IkReal x4630=(r21*sj5);
IkReal x4631=(cj5*r20);
IkReal x4632=((1.0)*x4626);
IkReal x4633=((1.0)*x4627);
IkReal x4634=(sj5*x4627);
IkReal x4635=(sj5*x4626);
evalcond[0]=(((r12*x4627))+((r11*x4635))+(((-1.0)*x4629*x4632)));
evalcond[1]=((((-1.0)*x4631*x4633))+((x4627*x4630))+(((-1.0)*r22*x4632)));
evalcond[2]=(((r01*x4634))+(((-1.0)*r02*x4632))+(((-1.0)*x4628*x4633)));
evalcond[3]=((-1.0)+((r11*x4634))+(((-1.0)*r12*x4632))+(((-1.0)*x4629*x4633)));
evalcond[4]=(((cj2*sj1))+((r01*x4635))+((cj1*sj2))+(((-1.0)*x4628*x4632))+((r02*x4627)));
evalcond[5]=(((x4626*x4630))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4631*x4632))+((r22*x4627)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4636 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4636.valid){
continue;
}
CheckValue<IkReal> x4637=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4637.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4636.value)+(((1.5707963267949)*(x4637.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4638=IKcos(j4);
IkReal x4639=IKsin(j4);
IkReal x4640=(cj5*r00);
IkReal x4641=(cj5*r10);
IkReal x4642=(r21*sj5);
IkReal x4643=(cj5*r20);
IkReal x4644=((1.0)*x4638);
IkReal x4645=((1.0)*x4639);
IkReal x4646=(sj5*x4639);
IkReal x4647=(sj5*x4638);
evalcond[0]=(((r12*x4639))+((r11*x4647))+(((-1.0)*x4641*x4644)));
evalcond[1]=((((-1.0)*r22*x4644))+(((-1.0)*x4643*x4645))+((x4639*x4642)));
evalcond[2]=((((-1.0)*r02*x4644))+(((-1.0)*x4640*x4645))+((r01*x4646)));
evalcond[3]=((-1.0)+((r11*x4646))+(((-1.0)*r12*x4644))+(((-1.0)*x4641*x4645)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x4640*x4644))+((r01*x4647))+((r02*x4639)));
evalcond[5]=(((x4638*x4642))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4643*x4644))+((r22*x4639)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4648=((-1.0)*r00);
IkReal x4650 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4650)==0){
continue;
}
IkReal x4649=pow(x4650,-0.5);
CheckValue<IkReal> x4651 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x4648),IKFAST_ATAN2_MAGTHRESH);
if(!x4651.valid){
continue;
}
IkReal gconst108=((-1.0)*(x4651.value));
IkReal gconst109=(r01*x4649);
IkReal gconst110=(x4648*x4649);
CheckValue<IkReal> x4652 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4652.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4652.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4653=((-1.0)*r00);
IkReal x4654=x4649;
CheckValue<IkReal> x4656 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x4653),IKFAST_ATAN2_MAGTHRESH);
if(!x4656.valid){
continue;
}
IkReal x4655=((-1.0)*(x4656.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst109;
cj5=gconst110;
j5=x4655;
IkReal gconst108=x4655;
IkReal gconst109=(r01*x4654);
IkReal gconst110=(x4653*x4654);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4657=((1.0)*sj0);
IkReal x4658=((1.0)*gconst109);
CheckValue<IkReal> x4659=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4658))+(((-1.0)*gconst110*r21)))),-1);
if(!x4659.valid){
continue;
}
CheckValue<IkReal> x4660 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x4657)))),IkReal(((((-1.0)*cj0*r01*x4658))+((cj0*gconst110*r00))+((gconst110*r10*sj0))+(((-1.0)*gconst109*r11*x4657)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4660.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4659.value)))+(x4660.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4661=IKsin(j4);
IkReal x4662=IKcos(j4);
IkReal x4663=(gconst109*r21);
IkReal x4664=((1.0)*cj2);
IkReal x4665=((1.0)*sj0);
IkReal x4666=(cj1*sj2);
IkReal x4667=((1.0)*x4662);
IkReal x4668=(gconst109*x4661);
IkReal x4669=(gconst109*x4662);
IkReal x4670=((1.0)*gconst110*x4661);
evalcond[0]=(((x4661*x4663))+(((-1.0)*r20*x4670))+(((-1.0)*r22*x4667)));
evalcond[1]=(cj0+(((-1.0)*r10*x4670))+((r11*x4668))+(((-1.0)*r12*x4667)));
evalcond[2]=(((r01*x4668))+(((-1.0)*x4665))+(((-1.0)*r00*x4670))+(((-1.0)*r02*x4667)));
evalcond[3]=(((x4662*x4663))+(((-1.0)*gconst110*r20*x4667))+((sj1*sj2))+((r22*x4661))+(((-1.0)*cj1*x4664)));
evalcond[4]=((((-1.0)*cj0*x4666))+((r02*x4661))+((r01*x4669))+(((-1.0)*cj0*sj1*x4664))+(((-1.0)*gconst110*r00*x4667)));
evalcond[5]=((((-1.0)*gconst110*r10*x4667))+((r12*x4661))+((r11*x4669))+(((-1.0)*sj0*sj1*x4664))+(((-1.0)*x4665*x4666)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4671=((1.0)*gconst110);
CheckValue<IkReal> x4672=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4671))+(((-1.0)*gconst109*r10)))),-1);
if(!x4672.valid){
continue;
}
CheckValue<IkReal> x4673 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst109*r21*sj0))+(((-1.0)*r20*sj0*x4671)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4673.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4672.value)))+(x4673.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4674=IKsin(j4);
IkReal x4675=IKcos(j4);
IkReal x4676=(gconst109*r21);
IkReal x4677=((1.0)*cj2);
IkReal x4678=((1.0)*sj0);
IkReal x4679=(cj1*sj2);
IkReal x4680=((1.0)*x4675);
IkReal x4681=(gconst109*x4674);
IkReal x4682=(gconst109*x4675);
IkReal x4683=((1.0)*gconst110*x4674);
evalcond[0]=(((x4674*x4676))+(((-1.0)*r22*x4680))+(((-1.0)*r20*x4683)));
evalcond[1]=(cj0+((r11*x4681))+(((-1.0)*r10*x4683))+(((-1.0)*r12*x4680)));
evalcond[2]=((((-1.0)*r00*x4683))+(((-1.0)*x4678))+(((-1.0)*r02*x4680))+((r01*x4681)));
evalcond[3]=((((-1.0)*cj1*x4677))+((sj1*sj2))+((r22*x4674))+(((-1.0)*gconst110*r20*x4680))+((x4675*x4676)));
evalcond[4]=(((r02*x4674))+(((-1.0)*cj0*x4679))+(((-1.0)*gconst110*r00*x4680))+(((-1.0)*cj0*sj1*x4677))+((r01*x4682)));
evalcond[5]=((((-1.0)*gconst110*r10*x4680))+(((-1.0)*sj0*sj1*x4677))+((r12*x4674))+((r11*x4682))+(((-1.0)*x4678*x4679)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4684=((-1.0)*r01);
IkReal x4686 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4686)==0){
continue;
}
IkReal x4685=pow(x4686,-0.5);
CheckValue<IkReal> x4687 = IKatan2WithCheck(IkReal(x4684),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4687.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x4687.value))));
IkReal gconst112=(x4684*x4685);
IkReal gconst113=((1.0)*r00*x4685);
CheckValue<IkReal> x4688 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4688.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4688.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x4689=((-1.0)*r01);
CheckValue<IkReal> x4692 = IKatan2WithCheck(IkReal(x4689),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4692.valid){
continue;
}
IkReal x4690=((1.0)*(x4692.value));
IkReal x4691=x4685;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4690)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4690)));
IkReal gconst112=(x4689*x4691);
IkReal gconst113=((1.0)*r00*x4691);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4693=((-1.0)*r01);
CheckValue<IkReal> x4696 = IKatan2WithCheck(IkReal(x4693),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4696.valid){
continue;
}
IkReal x4694=((1.0)*(x4696.value));
IkReal x4695=x4685;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4694)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4694)));
IkReal gconst112=(x4693*x4695);
IkReal gconst113=((1.0)*r00*x4695);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4697=((-1.0)*r01);
CheckValue<IkReal> x4700 = IKatan2WithCheck(IkReal(x4697),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4700.valid){
continue;
}
IkReal x4698=((1.0)*(x4700.value));
IkReal x4699=x4685;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4698)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4698)));
IkReal gconst112=(x4697*x4699);
IkReal gconst113=((1.0)*r00*x4699);
IkReal x4701=r02*r02;
IkReal x4702=(r12*sj0);
IkReal x4703=((1.0)*cj0);
IkReal x4704=x4685;
j4eval[0]=((IKabs(((((-1.0)*x4703*x4704))+((cj0*x4701*x4704))+((r02*x4702*x4704)))))+(IKabs(((((-1.0)*x4702))+(((-1.0)*r02*x4703))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4705=((1.0)*sj0);
IkReal x4706=((1.0)*gconst112);
CheckValue<IkReal> x4707=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst113*r21))+(((-1.0)*r20*x4706)))),-1);
if(!x4707.valid){
continue;
}
CheckValue<IkReal> x4708 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4705))+(((-1.0)*cj0*r02)))),IkReal((((gconst113*r10*sj0))+((cj0*gconst113*r00))+(((-1.0)*cj0*r01*x4706))+(((-1.0)*gconst112*r11*x4705)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4708.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4707.value)))+(x4708.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4709=IKsin(j4);
IkReal x4710=IKcos(j4);
IkReal x4711=(gconst113*r20);
IkReal x4712=(gconst112*r21);
IkReal x4713=((1.0)*cj2);
IkReal x4714=(gconst113*r00);
IkReal x4715=(gconst113*r10);
IkReal x4716=((1.0)*sj0);
IkReal x4717=(cj1*sj2);
IkReal x4718=((1.0)*x4710);
IkReal x4719=((1.0)*x4709);
IkReal x4720=(gconst112*x4710);
IkReal x4721=(gconst112*x4709);
evalcond[0]=((((-1.0)*r22*x4718))+((x4709*x4712))+(((-1.0)*x4711*x4719)));
evalcond[1]=(((r11*x4721))+cj0+(((-1.0)*r12*x4718))+(((-1.0)*x4715*x4719)));
evalcond[2]=((((-1.0)*r02*x4718))+(((-1.0)*x4714*x4719))+((r01*x4721))+(((-1.0)*x4716)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*x4711*x4718))+(((-1.0)*cj1*x4713))+((x4710*x4712))+((r22*x4709)));
evalcond[4]=((((-1.0)*x4714*x4718))+(((-1.0)*cj0*x4717))+(((-1.0)*cj0*sj1*x4713))+((r01*x4720))+((r02*x4709)));
evalcond[5]=(((r11*x4720))+(((-1.0)*sj0*sj1*x4713))+(((-1.0)*x4716*x4717))+(((-1.0)*x4715*x4718))+((r12*x4709)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4722=((1.0)*gconst113);
CheckValue<IkReal> x4723=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4722))+(((-1.0)*gconst112*r10)))),-1);
if(!x4723.valid){
continue;
}
CheckValue<IkReal> x4724 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst112*r21*sj0))+(((-1.0)*r20*sj0*x4722)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4724.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4723.value)))+(x4724.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4725=IKsin(j4);
IkReal x4726=IKcos(j4);
IkReal x4727=(gconst113*r20);
IkReal x4728=(gconst112*r21);
IkReal x4729=((1.0)*cj2);
IkReal x4730=(gconst113*r00);
IkReal x4731=(gconst113*r10);
IkReal x4732=((1.0)*sj0);
IkReal x4733=(cj1*sj2);
IkReal x4734=((1.0)*x4726);
IkReal x4735=((1.0)*x4725);
IkReal x4736=(gconst112*x4726);
IkReal x4737=(gconst112*x4725);
evalcond[0]=(((x4725*x4728))+(((-1.0)*x4727*x4735))+(((-1.0)*r22*x4734)));
evalcond[1]=(((r11*x4737))+(((-1.0)*x4731*x4735))+cj0+(((-1.0)*r12*x4734)));
evalcond[2]=((((-1.0)*x4730*x4735))+(((-1.0)*x4732))+((r01*x4737))+(((-1.0)*r02*x4734)));
evalcond[3]=((((-1.0)*cj1*x4729))+((sj1*sj2))+(((-1.0)*x4727*x4734))+((x4726*x4728))+((r22*x4725)));
evalcond[4]=((((-1.0)*x4730*x4734))+((r02*x4725))+(((-1.0)*cj0*sj1*x4729))+(((-1.0)*cj0*x4733))+((r01*x4736)));
evalcond[5]=(((r11*x4736))+(((-1.0)*x4731*x4734))+(((-1.0)*sj0*sj1*x4729))+(((-1.0)*x4732*x4733))+((r12*x4725)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4738=((1.0)*gconst113);
CheckValue<IkReal> x4739 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4738))+((cj0*gconst112*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4739.valid){
continue;
}
CheckValue<IkReal> x4740=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4738))+(((-1.0)*gconst112*r00)))),-1);
if(!x4740.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4739.value)+(((1.5707963267949)*(x4740.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4741=IKsin(j4);
IkReal x4742=IKcos(j4);
IkReal x4743=(gconst113*r20);
IkReal x4744=(gconst112*r21);
IkReal x4745=((1.0)*cj2);
IkReal x4746=(gconst113*r00);
IkReal x4747=(gconst113*r10);
IkReal x4748=((1.0)*sj0);
IkReal x4749=(cj1*sj2);
IkReal x4750=((1.0)*x4742);
IkReal x4751=((1.0)*x4741);
IkReal x4752=(gconst112*x4742);
IkReal x4753=(gconst112*x4741);
evalcond[0]=((((-1.0)*x4743*x4751))+((x4741*x4744))+(((-1.0)*r22*x4750)));
evalcond[1]=(cj0+((r11*x4753))+(((-1.0)*r12*x4750))+(((-1.0)*x4747*x4751)));
evalcond[2]=(((r01*x4753))+(((-1.0)*x4746*x4751))+(((-1.0)*x4748))+(((-1.0)*r02*x4750)));
evalcond[3]=((((-1.0)*x4743*x4750))+((x4742*x4744))+(((-1.0)*cj1*x4745))+((sj1*sj2))+((r22*x4741)));
evalcond[4]=(((r01*x4752))+(((-1.0)*cj0*x4749))+(((-1.0)*x4746*x4750))+((r02*x4741))+(((-1.0)*cj0*sj1*x4745)));
evalcond[5]=(((r11*x4752))+((r12*x4741))+(((-1.0)*x4748*x4749))+(((-1.0)*x4747*x4750))+(((-1.0)*sj0*sj1*x4745)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4754=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4754;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x4754);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4755=((1.0)*cj5);
IkReal x4756=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4755)));
j4eval[0]=x4756;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x4755))+((r21*sj5))))));
j4eval[2]=IKsign(x4756);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4757=cj5*cj5;
IkReal x4758=r01*r01;
IkReal x4759=(cj5*r00);
IkReal x4760=(r01*sj5);
IkReal x4761=((((-2.0)*x4759*x4760))+((x4757*(r00*r00)))+x4758+(r02*r02)+(((-1.0)*x4757*x4758)));
j4eval[0]=x4761;
j4eval[1]=IKsign(x4761);
j4eval[2]=((IKabs(r02))+(IKabs((x4760+(((-1.0)*x4759))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4762=cj5*cj5;
IkReal x4763=r01*r01;
IkReal x4764=(r01*sj5);
IkReal x4765=(cj5*r00);
CheckValue<IkReal> x4766=IKPowWithIntegerCheck(IKsign(((((-2.0)*x4764*x4765))+(((-1.0)*x4762*x4763))+x4763+((x4762*(r00*r00)))+(r02*r02))),-1);
if(!x4766.valid){
continue;
}
CheckValue<IkReal> x4767 = IKatan2WithCheck(IkReal(((((-1.0)*x4765))+x4764)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4767.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4766.value)))+(x4767.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4768=IKcos(j4);
IkReal x4769=IKsin(j4);
IkReal x4770=(cj5*r00);
IkReal x4771=(cj5*r10);
IkReal x4772=(r21*sj5);
IkReal x4773=((1.0)*cj2);
IkReal x4774=(cj5*r20);
IkReal x4775=((1.0)*x4768);
IkReal x4776=((1.0)*x4769);
IkReal x4777=(sj5*x4769);
IkReal x4778=(sj5*x4768);
evalcond[0]=(((r02*x4769))+((r01*x4778))+(((-1.0)*x4770*x4775)));
evalcond[1]=(((x4769*x4772))+(((-1.0)*r22*x4775))+(((-1.0)*x4774*x4776)));
evalcond[2]=(((r11*x4777))+(((-1.0)*r12*x4775))+(((-1.0)*x4771*x4776)));
evalcond[3]=((-1.0)+((r01*x4777))+(((-1.0)*x4770*x4776))+(((-1.0)*r02*x4775)));
evalcond[4]=(((r22*x4769))+((x4768*x4772))+(((-1.0)*cj1*x4773))+(((-1.0)*x4774*x4775))+((sj1*sj2)));
evalcond[5]=(((r11*x4778))+(((-1.0)*sj1*x4773))+(((-1.0)*cj1*sj2))+(((-1.0)*x4771*x4775))+((r12*x4769)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4779=((1.0)*cj5);
CheckValue<IkReal> x4780 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x4779)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4780.valid){
continue;
}
CheckValue<IkReal> x4781=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4779))+(((-1.0)*r10*sj5)))),-1);
if(!x4781.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4780.value)+(((1.5707963267949)*(x4781.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4782=IKcos(j4);
IkReal x4783=IKsin(j4);
IkReal x4784=(cj5*r00);
IkReal x4785=(cj5*r10);
IkReal x4786=(r21*sj5);
IkReal x4787=((1.0)*cj2);
IkReal x4788=(cj5*r20);
IkReal x4789=((1.0)*x4782);
IkReal x4790=((1.0)*x4783);
IkReal x4791=(sj5*x4783);
IkReal x4792=(sj5*x4782);
evalcond[0]=(((r02*x4783))+((r01*x4792))+(((-1.0)*x4784*x4789)));
evalcond[1]=((((-1.0)*x4788*x4790))+(((-1.0)*r22*x4789))+((x4783*x4786)));
evalcond[2]=((((-1.0)*x4785*x4790))+((r11*x4791))+(((-1.0)*r12*x4789)));
evalcond[3]=((-1.0)+((r01*x4791))+(((-1.0)*x4784*x4790))+(((-1.0)*r02*x4789)));
evalcond[4]=((((-1.0)*x4788*x4789))+((r22*x4783))+((sj1*sj2))+(((-1.0)*cj1*x4787))+((x4782*x4786)));
evalcond[5]=(((r12*x4783))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x4787))+((r11*x4792))+(((-1.0)*x4785*x4789)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4793=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4793.valid){
continue;
}
CheckValue<IkReal> x4794 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4794.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4793.value)))+(x4794.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4795=IKcos(j4);
IkReal x4796=IKsin(j4);
IkReal x4797=(cj5*r00);
IkReal x4798=(cj5*r10);
IkReal x4799=(r21*sj5);
IkReal x4800=((1.0)*cj2);
IkReal x4801=(cj5*r20);
IkReal x4802=((1.0)*x4795);
IkReal x4803=((1.0)*x4796);
IkReal x4804=(sj5*x4796);
IkReal x4805=(sj5*x4795);
evalcond[0]=(((r01*x4805))+(((-1.0)*x4797*x4802))+((r02*x4796)));
evalcond[1]=((((-1.0)*r22*x4802))+((x4796*x4799))+(((-1.0)*x4801*x4803)));
evalcond[2]=((((-1.0)*x4798*x4803))+(((-1.0)*r12*x4802))+((r11*x4804)));
evalcond[3]=((-1.0)+((r01*x4804))+(((-1.0)*x4797*x4803))+(((-1.0)*r02*x4802)));
evalcond[4]=(((x4795*x4799))+(((-1.0)*x4801*x4802))+((sj1*sj2))+(((-1.0)*cj1*x4800))+((r22*x4796)));
evalcond[5]=((((-1.0)*sj1*x4800))+(((-1.0)*cj1*sj2))+(((-1.0)*x4798*x4802))+((r12*x4796))+((r11*x4805)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4806=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4806;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4806);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4807=((1.0)*cj5);
IkReal x4808=((((-1.0)*r21*x4807))+(((-1.0)*r20*sj5)));
j4eval[0]=x4808;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x4807))))));
j4eval[2]=IKsign(x4808);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4809=cj5*cj5;
IkReal x4810=r01*r01;
IkReal x4811=(r01*sj5);
IkReal x4812=(cj5*r00);
IkReal x4813=(((x4809*x4810))+(((-1.0)*x4810))+(((-1.0)*(r02*r02)))+(((2.0)*x4811*x4812))+(((-1.0)*x4809*(r00*r00))));
j4eval[0]=x4813;
j4eval[1]=IKsign(x4813);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x4812))+x4811))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4814=cj5*cj5;
IkReal x4815=r01*r01;
IkReal x4816=(r01*sj5);
IkReal x4817=(cj5*r00);
CheckValue<IkReal> x4818 = IKatan2WithCheck(IkReal(((((-1.0)*x4817))+x4816)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4818.valid){
continue;
}
CheckValue<IkReal> x4819=IKPowWithIntegerCheck(IKsign(((((2.0)*x4816*x4817))+(((-1.0)*x4815))+(((-1.0)*(r02*r02)))+(((-1.0)*x4814*(r00*r00)))+((x4814*x4815)))),-1);
if(!x4819.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4818.value)+(((1.5707963267949)*(x4819.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4820=IKcos(j4);
IkReal x4821=IKsin(j4);
IkReal x4822=(cj5*r00);
IkReal x4823=(cj5*r10);
IkReal x4824=(r21*sj5);
IkReal x4825=(cj5*r20);
IkReal x4826=((1.0)*x4820);
IkReal x4827=((1.0)*x4821);
IkReal x4828=(sj5*x4821);
IkReal x4829=(sj5*x4820);
evalcond[0]=((((-1.0)*x4822*x4826))+((r02*x4821))+((r01*x4829)));
evalcond[1]=(((x4821*x4824))+(((-1.0)*r22*x4826))+(((-1.0)*x4825*x4827)));
evalcond[2]=((((-1.0)*x4823*x4827))+((r11*x4828))+(((-1.0)*r12*x4826)));
evalcond[3]=((1.0)+(((-1.0)*r02*x4826))+(((-1.0)*x4822*x4827))+((r01*x4828)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x4823*x4826))+((cj1*sj2))+((r11*x4829))+((r12*x4821)));
evalcond[5]=(((r22*x4821))+((x4820*x4824))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4825*x4826)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4830=((1.0)*cj5);
CheckValue<IkReal> x4831=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4830))+(((-1.0)*r20*sj5)))),-1);
if(!x4831.valid){
continue;
}
CheckValue<IkReal> x4832 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x4830))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4832.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4831.value)))+(x4832.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4833=IKcos(j4);
IkReal x4834=IKsin(j4);
IkReal x4835=(cj5*r00);
IkReal x4836=(cj5*r10);
IkReal x4837=(r21*sj5);
IkReal x4838=(cj5*r20);
IkReal x4839=((1.0)*x4833);
IkReal x4840=((1.0)*x4834);
IkReal x4841=(sj5*x4834);
IkReal x4842=(sj5*x4833);
evalcond[0]=((((-1.0)*x4835*x4839))+((r01*x4842))+((r02*x4834)));
evalcond[1]=((((-1.0)*x4838*x4840))+(((-1.0)*r22*x4839))+((x4834*x4837)));
evalcond[2]=((((-1.0)*x4836*x4840))+(((-1.0)*r12*x4839))+((r11*x4841)));
evalcond[3]=((1.0)+(((-1.0)*r02*x4839))+(((-1.0)*x4835*x4840))+((r01*x4841)));
evalcond[4]=(((r12*x4834))+((cj2*sj1))+((cj1*sj2))+((r11*x4842))+(((-1.0)*x4836*x4839)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4834))+((x4833*x4837))+(((-1.0)*x4838*x4839)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4843 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4843.valid){
continue;
}
CheckValue<IkReal> x4844=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4844.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4843.value)+(((1.5707963267949)*(x4844.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4845=IKcos(j4);
IkReal x4846=IKsin(j4);
IkReal x4847=(cj5*r00);
IkReal x4848=(cj5*r10);
IkReal x4849=(r21*sj5);
IkReal x4850=(cj5*r20);
IkReal x4851=((1.0)*x4845);
IkReal x4852=((1.0)*x4846);
IkReal x4853=(sj5*x4846);
IkReal x4854=(sj5*x4845);
evalcond[0]=((((-1.0)*x4847*x4851))+((r02*x4846))+((r01*x4854)));
evalcond[1]=((((-1.0)*r22*x4851))+((x4846*x4849))+(((-1.0)*x4850*x4852)));
evalcond[2]=((((-1.0)*r12*x4851))+(((-1.0)*x4848*x4852))+((r11*x4853)));
evalcond[3]=((1.0)+(((-1.0)*x4847*x4852))+((r01*x4853))+(((-1.0)*r02*x4851)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r12*x4846))+(((-1.0)*x4848*x4851))+((r11*x4854)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x4845*x4849))+((r22*x4846))+(((-1.0)*x4850*x4851)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4855=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4855);
rxp1_1=(px*r21);
rxp1_2=(r11*x4855);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4856=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4856);
rxp1_1=(px*r21);
rxp1_2=(r11*x4856);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4857=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4857);
rxp1_1=(px*r21);
rxp1_2=(r11*x4857);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4860=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x4860.valid){
continue;
}
IkReal x4858=x4860.value;
IkReal x4859=(sj0*x4858);
cj4array[0]=(((cj1*sj2*x4859))+((cj2*sj1*x4859)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4861=IKsin(j4);
IkReal x4862=IKcos(j4);
IkReal x4863=(r21*sj5);
IkReal x4864=((1.0)*cj5*r20);
evalcond[0]=(r02*x4861);
evalcond[1]=((((-1.0)*r02*x4862))+(((-1.0)*sj0)));
evalcond[2]=(((x4861*x4863))+(((-1.0)*x4861*x4864)));
evalcond[3]=(((r11*sj5*x4861))+(((-1.0)*cj5*r10*x4861)));
evalcond[4]=((((-1.0)*x4862*x4864))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4862*x4863)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4866=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x4866.valid){
continue;
}
IkReal x4865=x4866.value;
cj4array[0]=(((cj1*cj2*x4865))+(((-1.0)*sj1*sj2*x4865)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4867=IKsin(j4);
IkReal x4868=IKcos(j4);
IkReal x4869=((1.0)*sj0);
IkReal x4870=((1.0)*cj5);
IkReal x4871=(sj5*x4867);
evalcond[0]=(r02*x4867);
evalcond[1]=((((-1.0)*r02*x4868))+(((-1.0)*x4869)));
evalcond[2]=(((r21*x4871))+(((-1.0)*r20*x4867*x4870)));
evalcond[3]=((((-1.0)*r10*x4867*x4870))+((r11*x4871)));
evalcond[4]=((((-1.0)*r10*x4868*x4870))+(((-1.0)*cj2*sj1*x4869))+((r11*sj5*x4868))+(((-1.0)*cj1*sj2*x4869)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4872=IKPowWithIntegerCheck(r02,-1);
if(!x4872.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x4872.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4873=IKsin(j4);
IkReal x4874=IKcos(j4);
IkReal x4875=((1.0)*cj1);
IkReal x4876=(r21*sj5);
IkReal x4877=((1.0)*cj5);
IkReal x4878=(r11*sj5);
evalcond[0]=(r02*x4873);
evalcond[1]=(((x4873*x4876))+(((-1.0)*r20*x4873*x4877)));
evalcond[2]=((((-1.0)*r10*x4873*x4877))+((x4873*x4878)));
evalcond[3]=(((x4874*x4876))+(((-1.0)*r20*x4874*x4877))+(((-1.0)*cj2*x4875))+((sj1*sj2)));
evalcond[4]=(((x4874*x4878))+(((-1.0)*r10*x4874*x4877))+(((-1.0)*cj2*sj0*sj1))+(((-1.0)*sj0*sj2*x4875)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4879=((1.0)*sj0);
IkReal x4880=((1.0)*cj0);
CheckValue<IkReal> x4881 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x4880))+(((-1.0)*r12*x4879)))),IkReal(((((-1.0)*r01*sj5*x4880))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x4879)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4881.valid){
continue;
}
CheckValue<IkReal> x4882=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x4882.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4881.value)+(((1.5707963267949)*(x4882.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4883=IKsin(j4);
IkReal x4884=IKcos(j4);
IkReal x4885=(cj5*r00);
IkReal x4886=(cj5*r10);
IkReal x4887=(r21*sj5);
IkReal x4888=((1.0)*cj2);
IkReal x4889=((1.0)*sj0);
IkReal x4890=(cj1*sj2);
IkReal x4891=(cj5*r20);
IkReal x4892=((1.0)*x4884);
IkReal x4893=((1.0)*x4883);
IkReal x4894=(sj5*x4883);
IkReal x4895=(sj5*x4884);
evalcond[0]=((((-1.0)*x4891*x4893))+(((-1.0)*r22*x4892))+((x4883*x4887)));
evalcond[1]=(((r11*x4894))+(((-1.0)*r12*x4892))+cj0+(((-1.0)*x4886*x4893)));
evalcond[2]=((((-1.0)*x4889))+(((-1.0)*r02*x4892))+(((-1.0)*x4885*x4893))+((r01*x4894)));
evalcond[3]=((((-1.0)*cj1*x4888))+((sj1*sj2))+(((-1.0)*x4891*x4892))+((r22*x4883))+((x4884*x4887)));
evalcond[4]=((((-1.0)*cj0*x4890))+((r02*x4883))+(((-1.0)*cj0*sj1*x4888))+(((-1.0)*x4885*x4892))+((r01*x4895)));
evalcond[5]=(((r11*x4895))+((r12*x4883))+(((-1.0)*x4886*x4892))+(((-1.0)*sj0*sj1*x4888))+(((-1.0)*x4889*x4890)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4896=((1.0)*cj5);
CheckValue<IkReal> x4897=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4896))+(((-1.0)*r10*sj5)))),-1);
if(!x4897.valid){
continue;
}
CheckValue<IkReal> x4898 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x4896))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4898.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4897.value)))+(x4898.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4899=IKsin(j4);
IkReal x4900=IKcos(j4);
IkReal x4901=(cj5*r00);
IkReal x4902=(cj5*r10);
IkReal x4903=(r21*sj5);
IkReal x4904=((1.0)*cj2);
IkReal x4905=((1.0)*sj0);
IkReal x4906=(cj1*sj2);
IkReal x4907=(cj5*r20);
IkReal x4908=((1.0)*x4900);
IkReal x4909=((1.0)*x4899);
IkReal x4910=(sj5*x4899);
IkReal x4911=(sj5*x4900);
evalcond[0]=((((-1.0)*r22*x4908))+(((-1.0)*x4907*x4909))+((x4899*x4903)));
evalcond[1]=((((-1.0)*r12*x4908))+cj0+(((-1.0)*x4902*x4909))+((r11*x4910)));
evalcond[2]=((((-1.0)*x4905))+(((-1.0)*r02*x4908))+((r01*x4910))+(((-1.0)*x4901*x4909)));
evalcond[3]=(((x4900*x4903))+((sj1*sj2))+((r22*x4899))+(((-1.0)*x4907*x4908))+(((-1.0)*cj1*x4904)));
evalcond[4]=((((-1.0)*cj0*x4906))+((r02*x4899))+((r01*x4911))+(((-1.0)*x4901*x4908))+(((-1.0)*cj0*sj1*x4904)));
evalcond[5]=((((-1.0)*x4905*x4906))+((r12*x4899))+(((-1.0)*sj0*sj1*x4904))+(((-1.0)*x4902*x4908))+((r11*x4911)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4912=((1.0)*cj5);
CheckValue<IkReal> x4913=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4912)))),-1);
if(!x4913.valid){
continue;
}
CheckValue<IkReal> x4914 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4912))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4914.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4913.value)))+(x4914.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4915=IKsin(j4);
IkReal x4916=IKcos(j4);
IkReal x4917=(cj5*r00);
IkReal x4918=(cj5*r10);
IkReal x4919=(r21*sj5);
IkReal x4920=((1.0)*cj2);
IkReal x4921=((1.0)*sj0);
IkReal x4922=(cj1*sj2);
IkReal x4923=(cj5*r20);
IkReal x4924=((1.0)*x4916);
IkReal x4925=((1.0)*x4915);
IkReal x4926=(sj5*x4915);
IkReal x4927=(sj5*x4916);
evalcond[0]=(((x4915*x4919))+(((-1.0)*r22*x4924))+(((-1.0)*x4923*x4925)));
evalcond[1]=(cj0+(((-1.0)*x4918*x4925))+(((-1.0)*r12*x4924))+((r11*x4926)));
evalcond[2]=((((-1.0)*r02*x4924))+(((-1.0)*x4917*x4925))+((r01*x4926))+(((-1.0)*x4921)));
evalcond[3]=(((sj1*sj2))+((x4916*x4919))+(((-1.0)*cj1*x4920))+(((-1.0)*x4923*x4924))+((r22*x4915)));
evalcond[4]=(((r02*x4915))+(((-1.0)*x4917*x4924))+((r01*x4927))+(((-1.0)*cj0*sj1*x4920))+(((-1.0)*cj0*x4922)));
evalcond[5]=((((-1.0)*x4918*x4924))+((r12*x4915))+(((-1.0)*x4921*x4922))+(((-1.0)*sj0*sj1*x4920))+((r11*x4927)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4928=((1.0)*cj5);
IkReal x4929=((1.0)*sj5);
IkReal x4930=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
j0eval[0]=x4930;
j0eval[1]=((IKabs(((((-1.0)*r01*x4928))+(((-1.0)*r00*x4929)))))+(IKabs(((((-1.0)*r11*x4928))+(((-1.0)*r10*x4929))))));
j0eval[2]=IKsign(x4930);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4931=r21*r21;
IkReal x4932=cj5*cj5;
IkReal x4933=(cj2*sj1);
IkReal x4934=(cj1*sj2);
IkReal x4935=(r21*sj5);
IkReal x4936=((1.0)*cj5*r20);
IkReal x4937=((((-1.0)*x4932*(r20*r20)))+(((-1.0)*x4931))+(((2.0)*cj5*r20*x4935))+(((-1.0)*(r22*r22)))+((x4931*x4932)));
j4eval[0]=x4937;
j4eval[1]=((IKabs((((r22*x4933))+((r22*x4934)))))+(IKabs((((x4934*x4935))+(((-1.0)*x4933*x4936))+(((-1.0)*x4934*x4936))+((x4933*x4935))))));
j4eval[2]=IKsign(x4937);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4938=cj1*cj1;
IkReal x4939=(cj2*sj2);
IkReal x4940=(cj2*sj1);
IkReal x4941=(cj1*sj1);
j0eval[0]=(x4939+x4941+(((-2.0)*cj1*cj2*x4940))+(((-2.0)*x4938*x4939))+(((-1.14553990610329)*cj1*x4940))+(((-1.14553990610329)*sj2*x4938)));
j0eval[1]=((((-1.0)*cj1*sj2))+(((-1.0)*x4940)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.02203442325561)*py))+(((-0.579620370780054)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.02203442325561)*px))+(((0.579620370780054)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.02203442325561)*py))+(((-0.579620370780054)*px))))+IKsqr(((((2.02203442325561)*px))+(((0.579620370780054)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.02203442325561)*py))+(((-0.579620370780054)*px))), ((((2.02203442325561)*px))+(((0.579620370780054)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4942=IKsin(j0);
IkReal x4943=IKcos(j0);
evalcond[0]=((((0.457)*x4943))+(((-0.131)*x4942))+(((-1.0)*px)));
evalcond[1]=((((0.457)*x4942))+(((0.131)*x4943))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4944=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4944;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4944);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4945=((1.0)*cj5);
IkReal x4946=((((-1.0)*r00*sj5))+(((-1.0)*r01*x4945)));
j4eval[0]=x4946;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x4945))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x4946);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4947=((1.0)*cj5);
IkReal x4948=((((-1.0)*r00*sj5))+(((-1.0)*r01*x4947)));
j4eval[0]=x4948;
j4eval[1]=IKsign(x4948);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x4947))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4949=((1.0)*cj5);
CheckValue<IkReal> x4950=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4949)))),-1);
if(!x4950.valid){
continue;
}
CheckValue<IkReal> x4951 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x4949))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4951.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4950.value)))+(x4951.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4952=IKcos(j4);
IkReal x4953=IKsin(j4);
IkReal x4954=((1.0)*sj0);
IkReal x4955=(cj5*r00);
IkReal x4956=(cj5*r10);
IkReal x4957=(cj5*r20);
IkReal x4958=((1.0)*x4952);
IkReal x4959=((1.0)*x4953);
IkReal x4960=(sj5*x4952);
IkReal x4961=(sj5*x4953);
evalcond[0]=(((r22*x4953))+(((-1.0)*x4957*x4958))+((r21*x4960)));
evalcond[1]=((((-1.0)*x4957*x4959))+(((-1.0)*r22*x4958))+((r21*x4961)));
evalcond[2]=(cj0+(((-1.0)*x4956*x4959))+((r11*x4961))+(((-1.0)*r12*x4958)));
evalcond[3]=((((-1.0)*x4955*x4958))+((r02*x4953))+((r01*x4960))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x4953))+(((-1.0)*x4956*x4958))+(((-1.0)*x4954))+((r11*x4960)));
evalcond[5]=((((-1.0)*x4954))+(((-1.0)*x4955*x4959))+(((-1.0)*r02*x4958))+((r01*x4961)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4962=((1.0)*cj5);
CheckValue<IkReal> x4963=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4962)))),-1);
if(!x4963.valid){
continue;
}
CheckValue<IkReal> x4964 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4962)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4964.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4963.value)))+(x4964.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4965=IKcos(j4);
IkReal x4966=IKsin(j4);
IkReal x4967=((1.0)*sj0);
IkReal x4968=(cj5*r00);
IkReal x4969=(cj5*r10);
IkReal x4970=(cj5*r20);
IkReal x4971=((1.0)*x4965);
IkReal x4972=((1.0)*x4966);
IkReal x4973=(sj5*x4965);
IkReal x4974=(sj5*x4966);
evalcond[0]=(((r22*x4966))+(((-1.0)*x4970*x4971))+((r21*x4973)));
evalcond[1]=((((-1.0)*r22*x4971))+(((-1.0)*x4970*x4972))+((r21*x4974)));
evalcond[2]=(cj0+((r11*x4974))+(((-1.0)*r12*x4971))+(((-1.0)*x4969*x4972)));
evalcond[3]=((((-1.0)*x4968*x4971))+((r02*x4966))+(((-1.0)*cj0))+((r01*x4973)));
evalcond[4]=(((r12*x4966))+(((-1.0)*x4967))+((r11*x4973))+(((-1.0)*x4969*x4971)));
evalcond[5]=((((-1.0)*x4968*x4972))+(((-1.0)*x4967))+(((-1.0)*r02*x4971))+((r01*x4974)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4975 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4975.valid){
continue;
}
CheckValue<IkReal> x4976=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4976.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4975.value)+(((1.5707963267949)*(x4976.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4977=IKcos(j4);
IkReal x4978=IKsin(j4);
IkReal x4979=((1.0)*sj0);
IkReal x4980=(cj5*r00);
IkReal x4981=(cj5*r10);
IkReal x4982=(cj5*r20);
IkReal x4983=((1.0)*x4977);
IkReal x4984=((1.0)*x4978);
IkReal x4985=(sj5*x4977);
IkReal x4986=(sj5*x4978);
evalcond[0]=((((-1.0)*x4982*x4983))+((r22*x4978))+((r21*x4985)));
evalcond[1]=((((-1.0)*r22*x4983))+(((-1.0)*x4982*x4984))+((r21*x4986)));
evalcond[2]=(cj0+((r11*x4986))+(((-1.0)*r12*x4983))+(((-1.0)*x4981*x4984)));
evalcond[3]=(((r01*x4985))+((r02*x4978))+(((-1.0)*x4980*x4983))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x4985))+((r12*x4978))+(((-1.0)*x4979))+(((-1.0)*x4981*x4983)));
evalcond[5]=(((r01*x4986))+(((-1.0)*x4979))+(((-1.0)*r02*x4983))+(((-1.0)*x4980*x4984)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-7.22878269506677)*px))+(((1.71062796600817)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((7.22878269506677)*py))+(((1.71062796600817)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-7.22878269506677)*px))+(((1.71062796600817)*py))))+IKsqr(((((7.22878269506677)*py))+(((1.71062796600817)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-7.22878269506677)*px))+(((1.71062796600817)*py))), ((((7.22878269506677)*py))+(((1.71062796600817)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4987=IKsin(j0);
IkReal x4988=IKcos(j0);
evalcond[0]=((((-0.131)*x4987))+(((0.031)*x4988))+(((-1.0)*px)));
evalcond[1]=((((0.031)*x4987))+(((-1.0)*py))+(((0.131)*x4988)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4989=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4989;
j4eval[1]=IKsign(x4989);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4990=((1.0)*cj5);
IkReal x4991=((((-1.0)*r11*x4990))+(((-1.0)*r10*sj5)));
j4eval[0]=x4991;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4990))))));
j4eval[2]=IKsign(x4991);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4992=cj5*cj5;
IkReal x4993=((1.0)*r20);
IkReal x4994=(r01*r21);
IkReal x4995=(r21*sj5);
IkReal x4996=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x4992*x4994))+(((-1.0)*r00*x4992*x4993))+(((-1.0)*x4994))+((cj5*r00*x4995)));
j4eval[0]=x4996;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*cj5*x4993))+((cj0*x4995))))));
j4eval[2]=IKsign(x4996);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4997=cj5*cj5;
IkReal x4998=((1.0)*r20);
IkReal x4999=(r01*r21);
IkReal x5000=(r21*sj5);
CheckValue<IkReal> x5001=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+((cj5*r00*x5000))+(((-1.0)*r02*r22))+((x4997*x4999))+(((-1.0)*r00*x4997*x4998))+(((-1.0)*x4999)))),-1);
if(!x5001.valid){
continue;
}
CheckValue<IkReal> x5002 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x4998))+((cj0*x5000)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5002.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5001.value)))+(x5002.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5003=IKcos(j4);
IkReal x5004=IKsin(j4);
IkReal x5005=(cj5*r00);
IkReal x5006=(cj5*r10);
IkReal x5007=(cj5*r20);
IkReal x5008=((1.0)*x5003);
IkReal x5009=((1.0)*x5004);
IkReal x5010=(sj5*x5003);
IkReal x5011=(sj5*x5004);
evalcond[0]=((((-1.0)*x5007*x5008))+((r21*x5010))+((r22*x5004)));
evalcond[1]=((((-1.0)*x5007*x5009))+((r21*x5011))+(((-1.0)*r22*x5008)));
evalcond[2]=(cj0+((r02*x5004))+((r01*x5010))+(((-1.0)*x5005*x5008)));
evalcond[3]=(((r12*x5004))+sj0+(((-1.0)*x5006*x5008))+((r11*x5010)));
evalcond[4]=(cj0+(((-1.0)*x5006*x5009))+(((-1.0)*r12*x5008))+((r11*x5011)));
evalcond[5]=((((-1.0)*sj0))+((r01*x5011))+(((-1.0)*x5005*x5009))+(((-1.0)*r02*x5008)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5012=((1.0)*cj5);
CheckValue<IkReal> x5013=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5012)))),-1);
if(!x5013.valid){
continue;
}
CheckValue<IkReal> x5014 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5012)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5014.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5013.value)))+(x5014.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5015=IKcos(j4);
IkReal x5016=IKsin(j4);
IkReal x5017=(cj5*r00);
IkReal x5018=(cj5*r10);
IkReal x5019=(cj5*r20);
IkReal x5020=((1.0)*x5015);
IkReal x5021=((1.0)*x5016);
IkReal x5022=(sj5*x5015);
IkReal x5023=(sj5*x5016);
evalcond[0]=((((-1.0)*x5019*x5020))+((r22*x5016))+((r21*x5022)));
evalcond[1]=((((-1.0)*x5019*x5021))+(((-1.0)*r22*x5020))+((r21*x5023)));
evalcond[2]=(cj0+((r02*x5016))+(((-1.0)*x5017*x5020))+((r01*x5022)));
evalcond[3]=(((r11*x5022))+sj0+(((-1.0)*x5018*x5020))+((r12*x5016)));
evalcond[4]=(((r11*x5023))+cj0+(((-1.0)*r12*x5020))+(((-1.0)*x5018*x5021)));
evalcond[5]=((((-1.0)*r02*x5020))+(((-1.0)*sj0))+(((-1.0)*x5017*x5021))+((r01*x5023)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5024 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5024.valid){
continue;
}
CheckValue<IkReal> x5025=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5025.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5024.value)+(((1.5707963267949)*(x5025.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5026=IKcos(j4);
IkReal x5027=IKsin(j4);
IkReal x5028=(cj5*r00);
IkReal x5029=(cj5*r10);
IkReal x5030=(cj5*r20);
IkReal x5031=((1.0)*x5026);
IkReal x5032=((1.0)*x5027);
IkReal x5033=(sj5*x5026);
IkReal x5034=(sj5*x5027);
evalcond[0]=((((-1.0)*x5030*x5031))+((r22*x5027))+((r21*x5033)));
evalcond[1]=((((-1.0)*x5030*x5032))+((r21*x5034))+(((-1.0)*r22*x5031)));
evalcond[2]=((((-1.0)*x5028*x5031))+((r02*x5027))+cj0+((r01*x5033)));
evalcond[3]=(sj0+((r12*x5027))+((r11*x5033))+(((-1.0)*x5029*x5031)));
evalcond[4]=(cj0+((r11*x5034))+(((-1.0)*x5029*x5032))+(((-1.0)*r12*x5031)));
evalcond[5]=((((-1.0)*x5028*x5032))+(((-1.0)*sj0))+((r01*x5034))+(((-1.0)*r02*x5031)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5035=IKsin(j0);
IkReal x5036=IKcos(j0);
IkReal x5037=(r00*sj5);
IkReal x5038=(r10*sj5);
IkReal x5039=(cj5*r11);
IkReal x5040=(cj5*r01);
evalcond[0]=((((-1.0)*x5036))+x5037+x5040);
evalcond[1]=((((-1.0)*x5035))+x5038+x5039);
evalcond[2]=((((-0.131)*x5035))+(((-1.0)*px))+(((-0.085)*x5040))+(((-0.085)*x5037)));
evalcond[3]=((((0.131)*x5036))+(((-1.0)*py))+(((-0.085)*x5038))+(((-0.085)*x5039)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5041=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5041;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x5041);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5042=((1.0)*cj5);
IkReal x5043=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5042)));
j4eval[0]=x5043;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x5042))+((r11*sj5))))));
j4eval[2]=IKsign(x5043);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5044=cj5*cj5;
IkReal x5045=(r01*r11);
IkReal x5046=((1.0)*r00);
IkReal x5047=(r01*sj5);
IkReal x5048=((((-1.0)*r10*x5044*x5046))+(((-1.0)*r02*r12))+(((-1.0)*x5045))+((x5044*x5045))+((cj5*r10*x5047))+((cj5*r00*r11*sj5)));
j4eval[0]=x5048;
j4eval[1]=IKsign(x5048);
j4eval[2]=((IKabs((((cj0*x5047))+(((-1.0)*cj0*cj5*x5046)))))+(IKabs((cj0*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5049=cj5*cj5;
IkReal x5050=(r01*r11);
IkReal x5051=(cj5*r00);
IkReal x5052=(r01*sj5);
CheckValue<IkReal> x5053=IKPowWithIntegerCheck(IKsign((((x5049*x5050))+(((-1.0)*r02*r12))+((cj5*r10*x5052))+(((-1.0)*r00*r10*x5049))+((r11*sj5*x5051))+(((-1.0)*x5050)))),-1);
if(!x5053.valid){
continue;
}
CheckValue<IkReal> x5054 = IKatan2WithCheck(IkReal((((cj0*x5052))+(((-1.0)*cj0*x5051)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5054.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5053.value)))+(x5054.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5055=IKcos(j4);
IkReal x5056=IKsin(j4);
IkReal x5057=(cj5*r00);
IkReal x5058=(r01*sj5);
IkReal x5059=(cj5*r10);
IkReal x5060=(cj5*r20);
IkReal x5061=((1.0)*x5055);
IkReal x5062=((1.0)*x5056);
IkReal x5063=(sj5*x5056);
IkReal x5064=(sj5*x5055);
evalcond[0]=(((x5055*x5058))+(((-1.0)*x5057*x5061))+((r02*x5056)));
evalcond[1]=((((-1.0)*x5059*x5061))+((r12*x5056))+((r11*x5064)));
evalcond[2]=((((-1.0)*r22*x5061))+((r21*x5063))+(((-1.0)*x5060*x5062)));
evalcond[3]=((1.0)+((r22*x5056))+((r21*x5064))+(((-1.0)*x5060*x5061)));
evalcond[4]=(cj0+(((-1.0)*x5059*x5062))+(((-1.0)*r12*x5061))+((r11*x5063)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5061))+(((-1.0)*x5057*x5062))+((x5056*x5058)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5065=((1.0)*cj5);
CheckValue<IkReal> x5066 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x5065)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5066.valid){
continue;
}
CheckValue<IkReal> x5067=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5065)))),-1);
if(!x5067.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5066.value)+(((1.5707963267949)*(x5067.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5068=IKcos(j4);
IkReal x5069=IKsin(j4);
IkReal x5070=(cj5*r00);
IkReal x5071=(r01*sj5);
IkReal x5072=(cj5*r10);
IkReal x5073=(cj5*r20);
IkReal x5074=((1.0)*x5068);
IkReal x5075=((1.0)*x5069);
IkReal x5076=(sj5*x5069);
IkReal x5077=(sj5*x5068);
evalcond[0]=(((x5068*x5071))+((r02*x5069))+(((-1.0)*x5070*x5074)));
evalcond[1]=((((-1.0)*x5072*x5074))+((r12*x5069))+((r11*x5077)));
evalcond[2]=(((r21*x5076))+(((-1.0)*x5073*x5075))+(((-1.0)*r22*x5074)));
evalcond[3]=((1.0)+((r21*x5077))+(((-1.0)*x5073*x5074))+((r22*x5069)));
evalcond[4]=(cj0+(((-1.0)*x5072*x5075))+(((-1.0)*r12*x5074))+((r11*x5076)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5074))+(((-1.0)*x5070*x5075))+((x5069*x5071)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5078 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5078.valid){
continue;
}
CheckValue<IkReal> x5079=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5079.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5078.value)+(((1.5707963267949)*(x5079.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5080=IKcos(j4);
IkReal x5081=IKsin(j4);
IkReal x5082=(cj5*r00);
IkReal x5083=(r01*sj5);
IkReal x5084=(cj5*r10);
IkReal x5085=(cj5*r20);
IkReal x5086=((1.0)*x5080);
IkReal x5087=((1.0)*x5081);
IkReal x5088=(sj5*x5081);
IkReal x5089=(sj5*x5080);
evalcond[0]=(((x5080*x5083))+(((-1.0)*x5082*x5086))+((r02*x5081)));
evalcond[1]=(((r11*x5089))+((r12*x5081))+(((-1.0)*x5084*x5086)));
evalcond[2]=(((r21*x5088))+(((-1.0)*x5085*x5087))+(((-1.0)*r22*x5086)));
evalcond[3]=((1.0)+((r21*x5089))+((r22*x5081))+(((-1.0)*x5085*x5086)));
evalcond[4]=((((-1.0)*r12*x5086))+cj0+((r11*x5088))+(((-1.0)*x5084*x5087)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5082*x5087))+(((-1.0)*r02*x5086))+((x5081*x5083)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-3.40636494482648)*py))+(((-2.09499440268671)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.09499440268671)*py))+(((-3.40636494482648)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.40636494482648)*py))+(((-2.09499440268671)*px))))+IKsqr(((((2.09499440268671)*py))+(((-3.40636494482648)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-3.40636494482648)*py))+(((-2.09499440268671)*px))), ((((2.09499440268671)*py))+(((-3.40636494482648)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5090=IKcos(j0);
IkReal x5091=IKsin(j0);
evalcond[0]=((((-0.131)*x5091))+(((-1.0)*px))+(((-0.213)*x5090)));
evalcond[1]=((((-1.0)*py))+(((-0.213)*x5091))+(((0.131)*x5090)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5092=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5092;
j4eval[1]=IKsign(x5092);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5093=((1.0)*cj5);
IkReal x5094=((((-1.0)*r11*x5093))+(((-1.0)*r10*sj5)));
j4eval[0]=x5094;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5093)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5094);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5095=cj5*cj5;
IkReal x5096=((1.0)*r20);
IkReal x5097=(r01*r21);
IkReal x5098=(r21*sj5);
IkReal x5099=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x5097))+((x5095*x5097))+((cj5*r00*x5098))+(((-1.0)*r00*x5095*x5096)));
j4eval[0]=x5099;
j4eval[1]=((IKabs((((cj0*x5098))+(((-1.0)*cj0*cj5*x5096)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5099);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5100=cj5*cj5;
IkReal x5101=((1.0)*r20);
IkReal x5102=(r01*r21);
IkReal x5103=(r21*sj5);
CheckValue<IkReal> x5104 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x5103))+(((-1.0)*cj0*cj5*x5101)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5104.valid){
continue;
}
CheckValue<IkReal> x5105=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x5102))+(((-1.0)*r00*x5100*x5101))+((cj5*r00*x5103))+((x5100*x5102)))),-1);
if(!x5105.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5104.value)+(((1.5707963267949)*(x5105.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5106=IKcos(j4);
IkReal x5107=IKsin(j4);
IkReal x5108=(cj5*r00);
IkReal x5109=(cj5*r10);
IkReal x5110=(cj5*r20);
IkReal x5111=((1.0)*x5106);
IkReal x5112=((1.0)*x5107);
IkReal x5113=(sj5*x5106);
IkReal x5114=(sj5*x5107);
evalcond[0]=((((-1.0)*x5110*x5111))+((r22*x5107))+((r21*x5113)));
evalcond[1]=((((-1.0)*r22*x5111))+(((-1.0)*x5110*x5112))+((r21*x5114)));
evalcond[2]=(((r01*x5113))+cj0+((r02*x5107))+(((-1.0)*x5108*x5111)));
evalcond[3]=(((r12*x5107))+sj0+(((-1.0)*x5109*x5111))+((r11*x5113)));
evalcond[4]=(cj0+(((-1.0)*x5109*x5112))+((r11*x5114))+(((-1.0)*r12*x5111)));
evalcond[5]=(((r01*x5114))+(((-1.0)*sj0))+(((-1.0)*r02*x5111))+(((-1.0)*x5108*x5112)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5115=((1.0)*cj5);
CheckValue<IkReal> x5116 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5115)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5116.valid){
continue;
}
CheckValue<IkReal> x5117=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5115)))),-1);
if(!x5117.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5116.value)+(((1.5707963267949)*(x5117.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5118=IKcos(j4);
IkReal x5119=IKsin(j4);
IkReal x5120=(cj5*r00);
IkReal x5121=(cj5*r10);
IkReal x5122=(cj5*r20);
IkReal x5123=((1.0)*x5118);
IkReal x5124=((1.0)*x5119);
IkReal x5125=(sj5*x5118);
IkReal x5126=(sj5*x5119);
evalcond[0]=(((r22*x5119))+(((-1.0)*x5122*x5123))+((r21*x5125)));
evalcond[1]=((((-1.0)*x5122*x5124))+((r21*x5126))+(((-1.0)*r22*x5123)));
evalcond[2]=(cj0+((r02*x5119))+((r01*x5125))+(((-1.0)*x5120*x5123)));
evalcond[3]=(sj0+((r11*x5125))+(((-1.0)*x5121*x5123))+((r12*x5119)));
evalcond[4]=(cj0+((r11*x5126))+(((-1.0)*x5121*x5124))+(((-1.0)*r12*x5123)));
evalcond[5]=((((-1.0)*sj0))+((r01*x5126))+(((-1.0)*r02*x5123))+(((-1.0)*x5120*x5124)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5127 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5127.valid){
continue;
}
CheckValue<IkReal> x5128=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5128.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5127.value)+(((1.5707963267949)*(x5128.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5129=IKcos(j4);
IkReal x5130=IKsin(j4);
IkReal x5131=(cj5*r00);
IkReal x5132=(cj5*r10);
IkReal x5133=(cj5*r20);
IkReal x5134=((1.0)*x5129);
IkReal x5135=((1.0)*x5130);
IkReal x5136=(sj5*x5129);
IkReal x5137=(sj5*x5130);
evalcond[0]=(((r22*x5130))+((r21*x5136))+(((-1.0)*x5133*x5134)));
evalcond[1]=(((r21*x5137))+(((-1.0)*r22*x5134))+(((-1.0)*x5133*x5135)));
evalcond[2]=((((-1.0)*x5131*x5134))+cj0+((r01*x5136))+((r02*x5130)));
evalcond[3]=(sj0+(((-1.0)*x5132*x5134))+((r12*x5130))+((r11*x5136)));
evalcond[4]=((((-1.0)*x5132*x5135))+cj0+((r11*x5137))+(((-1.0)*r12*x5134)));
evalcond[5]=((((-1.0)*x5131*x5135))+(((-1.0)*sj0))+((r01*x5137))+(((-1.0)*r02*x5134)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5138=((1.0)*sj5);
IkReal x5139=((1.0)*cj5);
if( IKabs(((((-1.0)*r10*x5138))+(((-1.0)*r11*x5139)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x5139))+(((-1.0)*r00*x5138)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x5138))+(((-1.0)*r11*x5139))))+IKsqr(((((-1.0)*r01*x5139))+(((-1.0)*r00*x5138))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r10*x5138))+(((-1.0)*r11*x5139))), ((((-1.0)*r01*x5139))+(((-1.0)*r00*x5138))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5140=IKsin(j0);
IkReal x5141=IKcos(j0);
IkReal x5142=(r00*sj5);
IkReal x5143=(r10*sj5);
IkReal x5144=(cj5*r11);
IkReal x5145=(cj5*r01);
evalcond[0]=(x5145+x5142+x5141);
evalcond[1]=(x5144+x5143+x5140);
evalcond[2]=((((-0.131)*x5140))+(((-1.0)*px))+(((-0.085)*x5145))+(((-0.085)*x5142)));
evalcond[3]=((((-1.0)*py))+(((-0.085)*x5144))+(((-0.085)*x5143))+(((0.131)*x5141)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5146=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5146;
j4eval[1]=IKsign(x5146);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5147=((1.0)*cj5);
IkReal x5148=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5147)));
j4eval[0]=x5148;
j4eval[1]=IKsign(x5148);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x5147))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5149=cj5*cj5;
IkReal x5150=(r01*r11);
IkReal x5151=((1.0)*r00);
IkReal x5152=(r01*sj5);
IkReal x5153=(((cj5*r10*x5152))+(((-1.0)*r02*r12))+(((-1.0)*r10*x5149*x5151))+((x5149*x5150))+(((-1.0)*x5150))+((cj5*r00*r11*sj5)));
j4eval[0]=x5153;
j4eval[1]=IKsign(x5153);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs((((cj0*x5152))+(((-1.0)*cj0*cj5*x5151))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5154=cj5*cj5;
IkReal x5155=(r01*r11);
IkReal x5156=(cj5*r00);
IkReal x5157=(r01*sj5);
CheckValue<IkReal> x5158 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*x5156))+((cj0*x5157)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5158.valid){
continue;
}
CheckValue<IkReal> x5159=IKPowWithIntegerCheck(IKsign((((cj5*r10*x5157))+(((-1.0)*r02*r12))+((x5154*x5155))+(((-1.0)*r00*r10*x5154))+(((-1.0)*x5155))+((r11*sj5*x5156)))),-1);
if(!x5159.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5158.value)+(((1.5707963267949)*(x5159.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5160=IKcos(j4);
IkReal x5161=IKsin(j4);
IkReal x5162=(cj5*r00);
IkReal x5163=(r01*sj5);
IkReal x5164=(cj5*r10);
IkReal x5165=(cj5*r20);
IkReal x5166=((1.0)*x5160);
IkReal x5167=((1.0)*x5161);
IkReal x5168=(sj5*x5161);
IkReal x5169=(sj5*x5160);
evalcond[0]=(((x5160*x5163))+(((-1.0)*x5162*x5166))+((r02*x5161)));
evalcond[1]=(((r12*x5161))+((r11*x5169))+(((-1.0)*x5164*x5166)));
evalcond[2]=((((-1.0)*r22*x5166))+((r21*x5168))+(((-1.0)*x5165*x5167)));
evalcond[3]=((-1.0)+((r21*x5169))+(((-1.0)*x5165*x5166))+((r22*x5161)));
evalcond[4]=(cj0+(((-1.0)*r12*x5166))+((r11*x5168))+(((-1.0)*x5164*x5167)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5166))+(((-1.0)*x5162*x5167))+((x5161*x5163)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5170=((1.0)*cj5);
CheckValue<IkReal> x5171 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x5170)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5171.valid){
continue;
}
CheckValue<IkReal> x5172=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5170)))),-1);
if(!x5172.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5171.value)+(((1.5707963267949)*(x5172.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5173=IKcos(j4);
IkReal x5174=IKsin(j4);
IkReal x5175=(cj5*r00);
IkReal x5176=(r01*sj5);
IkReal x5177=(cj5*r10);
IkReal x5178=(cj5*r20);
IkReal x5179=((1.0)*x5173);
IkReal x5180=((1.0)*x5174);
IkReal x5181=(sj5*x5174);
IkReal x5182=(sj5*x5173);
evalcond[0]=((((-1.0)*x5175*x5179))+((r02*x5174))+((x5173*x5176)));
evalcond[1]=(((r12*x5174))+(((-1.0)*x5177*x5179))+((r11*x5182)));
evalcond[2]=(((r21*x5181))+(((-1.0)*x5178*x5180))+(((-1.0)*r22*x5179)));
evalcond[3]=((-1.0)+(((-1.0)*x5178*x5179))+((r21*x5182))+((r22*x5174)));
evalcond[4]=(cj0+(((-1.0)*r12*x5179))+(((-1.0)*x5177*x5180))+((r11*x5181)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5175*x5180))+(((-1.0)*r02*x5179))+((x5174*x5176)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5183=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5183.valid){
continue;
}
CheckValue<IkReal> x5184 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5184.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5183.value)))+(x5184.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5185=IKcos(j4);
IkReal x5186=IKsin(j4);
IkReal x5187=(cj5*r00);
IkReal x5188=(r01*sj5);
IkReal x5189=(cj5*r10);
IkReal x5190=(cj5*r20);
IkReal x5191=((1.0)*x5185);
IkReal x5192=((1.0)*x5186);
IkReal x5193=(sj5*x5186);
IkReal x5194=(sj5*x5185);
evalcond[0]=((((-1.0)*x5187*x5191))+((r02*x5186))+((x5185*x5188)));
evalcond[1]=((((-1.0)*x5189*x5191))+((r11*x5194))+((r12*x5186)));
evalcond[2]=(((r21*x5193))+(((-1.0)*r22*x5191))+(((-1.0)*x5190*x5192)));
evalcond[3]=((-1.0)+((r22*x5186))+((r21*x5194))+(((-1.0)*x5190*x5191)));
evalcond[4]=((((-1.0)*r12*x5191))+cj0+(((-1.0)*x5189*x5192))+((r11*x5193)));
evalcond[5]=((((-1.0)*sj0))+((x5186*x5188))+(((-1.0)*x5187*x5192))+(((-1.0)*r02*x5191)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((3.40636494482648)*py))+(((-2.09499440268671)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.09499440268671)*py))+(((3.40636494482648)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((3.40636494482648)*py))+(((-2.09499440268671)*px))))+IKsqr(((((2.09499440268671)*py))+(((3.40636494482648)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((3.40636494482648)*py))+(((-2.09499440268671)*px))), ((((2.09499440268671)*py))+(((3.40636494482648)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5195=IKsin(j0);
IkReal x5196=IKcos(j0);
evalcond[0]=((((-0.131)*x5195))+(((0.213)*x5196))+(((-1.0)*px)));
evalcond[1]=((((0.131)*x5196))+(((0.213)*x5195))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5197=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5197;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5197);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5198=((1.0)*cj5);
IkReal x5199=((((-1.0)*r01*x5198))+(((-1.0)*r00*sj5)));
j4eval[0]=x5199;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5198))))));
j4eval[2]=IKsign(x5199);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5200=((1.0)*cj5);
IkReal x5201=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5200)));
j4eval[0]=x5201;
j4eval[1]=IKsign(x5201);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x5200))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5202=((1.0)*cj5);
CheckValue<IkReal> x5203=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5202)))),-1);
if(!x5203.valid){
continue;
}
CheckValue<IkReal> x5204 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x5202))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5204.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5203.value)))+(x5204.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5205=IKcos(j4);
IkReal x5206=IKsin(j4);
IkReal x5207=((1.0)*sj0);
IkReal x5208=(cj5*r00);
IkReal x5209=(cj5*r10);
IkReal x5210=(cj5*r20);
IkReal x5211=((1.0)*x5205);
IkReal x5212=((1.0)*x5206);
IkReal x5213=(sj5*x5205);
IkReal x5214=(sj5*x5206);
evalcond[0]=(((r22*x5206))+((r21*x5213))+(((-1.0)*x5210*x5211)));
evalcond[1]=((((-1.0)*r22*x5211))+((r21*x5214))+(((-1.0)*x5210*x5212)));
evalcond[2]=(cj0+((r11*x5214))+(((-1.0)*x5209*x5212))+(((-1.0)*r12*x5211)));
evalcond[3]=(((r01*x5213))+((r02*x5206))+(((-1.0)*x5208*x5211))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5207))+((r11*x5213))+((r12*x5206))+(((-1.0)*x5209*x5211)));
evalcond[5]=((((-1.0)*x5207))+((r01*x5214))+(((-1.0)*x5208*x5212))+(((-1.0)*r02*x5211)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5215=((1.0)*cj5);
CheckValue<IkReal> x5216 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5215)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5216.valid){
continue;
}
CheckValue<IkReal> x5217=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5215)))),-1);
if(!x5217.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5216.value)+(((1.5707963267949)*(x5217.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5218=IKcos(j4);
IkReal x5219=IKsin(j4);
IkReal x5220=((1.0)*sj0);
IkReal x5221=(cj5*r00);
IkReal x5222=(cj5*r10);
IkReal x5223=(cj5*r20);
IkReal x5224=((1.0)*x5218);
IkReal x5225=((1.0)*x5219);
IkReal x5226=(sj5*x5218);
IkReal x5227=(sj5*x5219);
evalcond[0]=((((-1.0)*x5223*x5224))+((r21*x5226))+((r22*x5219)));
evalcond[1]=((((-1.0)*x5223*x5225))+((r21*x5227))+(((-1.0)*r22*x5224)));
evalcond[2]=(cj0+(((-1.0)*x5222*x5225))+(((-1.0)*r12*x5224))+((r11*x5227)));
evalcond[3]=((((-1.0)*x5221*x5224))+((r02*x5219))+((r01*x5226))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5222*x5224))+((r12*x5219))+(((-1.0)*x5220))+((r11*x5226)));
evalcond[5]=((((-1.0)*x5221*x5225))+(((-1.0)*x5220))+(((-1.0)*r02*x5224))+((r01*x5227)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5228 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5228.valid){
continue;
}
CheckValue<IkReal> x5229=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5229.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5228.value)+(((1.5707963267949)*(x5229.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5230=IKcos(j4);
IkReal x5231=IKsin(j4);
IkReal x5232=((1.0)*sj0);
IkReal x5233=(cj5*r00);
IkReal x5234=(cj5*r10);
IkReal x5235=(cj5*r20);
IkReal x5236=((1.0)*x5230);
IkReal x5237=((1.0)*x5231);
IkReal x5238=(sj5*x5230);
IkReal x5239=(sj5*x5231);
evalcond[0]=((((-1.0)*x5235*x5236))+((r21*x5238))+((r22*x5231)));
evalcond[1]=((((-1.0)*x5235*x5237))+(((-1.0)*r22*x5236))+((r21*x5239)));
evalcond[2]=((((-1.0)*x5234*x5237))+cj0+((r11*x5239))+(((-1.0)*r12*x5236)));
evalcond[3]=(((r01*x5238))+(((-1.0)*x5233*x5236))+((r02*x5231))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5232))+(((-1.0)*x5234*x5236))+((r11*x5238))+((r12*x5231)));
evalcond[5]=((((-1.0)*x5232))+(((-1.0)*r02*x5236))+((r01*x5239))+(((-1.0)*x5233*x5237)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.02203442325561)*py))+(((-0.579620370780054)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.579620370780054)*py))+(((-2.02203442325561)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.02203442325561)*py))+(((-0.579620370780054)*px))))+IKsqr(((((0.579620370780054)*py))+(((-2.02203442325561)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.02203442325561)*py))+(((-0.579620370780054)*px))), ((((0.579620370780054)*py))+(((-2.02203442325561)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5240=IKcos(j0);
IkReal x5241=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.457)*x5240))+(((-0.131)*x5241)));
evalcond[1]=((((0.131)*x5240))+(((-1.0)*py))+(((-0.457)*x5241)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5242=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5242;
j4eval[1]=IKsign(x5242);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5243=((1.0)*cj5);
IkReal x5244=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5243)));
j4eval[0]=x5244;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x5243))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5244);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5245=cj5*cj5;
IkReal x5246=((1.0)*r20);
IkReal x5247=(r01*r21);
IkReal x5248=(r21*sj5);
IkReal x5249=(((cj5*r01*r20*sj5))+((x5245*x5247))+(((-1.0)*r02*r22))+(((-1.0)*x5247))+((cj5*r00*x5248))+(((-1.0)*r00*x5245*x5246)));
j4eval[0]=x5249;
j4eval[1]=((IKabs((((cj0*x5248))+(((-1.0)*cj0*cj5*x5246)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5249);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5250=cj5*cj5;
IkReal x5251=((1.0)*r20);
IkReal x5252=(r01*r21);
IkReal x5253=(r21*sj5);
CheckValue<IkReal> x5254=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+((cj5*r00*x5253))+(((-1.0)*r02*r22))+(((-1.0)*x5252))+((x5250*x5252))+(((-1.0)*r00*x5250*x5251)))),-1);
if(!x5254.valid){
continue;
}
CheckValue<IkReal> x5255 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x5251))+((cj0*x5253)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5255.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5254.value)))+(x5255.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5256=IKcos(j4);
IkReal x5257=IKsin(j4);
IkReal x5258=(cj5*r00);
IkReal x5259=(cj5*r10);
IkReal x5260=(cj5*r20);
IkReal x5261=((1.0)*x5256);
IkReal x5262=((1.0)*x5257);
IkReal x5263=(sj5*x5256);
IkReal x5264=(sj5*x5257);
evalcond[0]=(((r22*x5257))+((r21*x5263))+(((-1.0)*x5260*x5261)));
evalcond[1]=(((r21*x5264))+(((-1.0)*r22*x5261))+(((-1.0)*x5260*x5262)));
evalcond[2]=((((-1.0)*x5258*x5261))+cj0+((r01*x5263))+((r02*x5257)));
evalcond[3]=(sj0+((r12*x5257))+(((-1.0)*x5259*x5261))+((r11*x5263)));
evalcond[4]=((((-1.0)*x5259*x5262))+cj0+(((-1.0)*r12*x5261))+((r11*x5264)));
evalcond[5]=((((-1.0)*x5258*x5262))+(((-1.0)*sj0))+((r01*x5264))+(((-1.0)*r02*x5261)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5265=((1.0)*cj5);
CheckValue<IkReal> x5266 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5265)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5266.valid){
continue;
}
CheckValue<IkReal> x5267=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5265)))),-1);
if(!x5267.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5266.value)+(((1.5707963267949)*(x5267.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5268=IKcos(j4);
IkReal x5269=IKsin(j4);
IkReal x5270=(cj5*r00);
IkReal x5271=(cj5*r10);
IkReal x5272=(cj5*r20);
IkReal x5273=((1.0)*x5268);
IkReal x5274=((1.0)*x5269);
IkReal x5275=(sj5*x5268);
IkReal x5276=(sj5*x5269);
evalcond[0]=((((-1.0)*x5272*x5273))+((r21*x5275))+((r22*x5269)));
evalcond[1]=((((-1.0)*x5272*x5274))+((r21*x5276))+(((-1.0)*r22*x5273)));
evalcond[2]=(((r02*x5269))+cj0+((r01*x5275))+(((-1.0)*x5270*x5273)));
evalcond[3]=(sj0+((r12*x5269))+(((-1.0)*x5271*x5273))+((r11*x5275)));
evalcond[4]=(cj0+(((-1.0)*x5271*x5274))+(((-1.0)*r12*x5273))+((r11*x5276)));
evalcond[5]=((((-1.0)*sj0))+((r01*x5276))+(((-1.0)*x5270*x5274))+(((-1.0)*r02*x5273)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5277 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5277.valid){
continue;
}
CheckValue<IkReal> x5278=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5278.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5277.value)+(((1.5707963267949)*(x5278.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5279=IKcos(j4);
IkReal x5280=IKsin(j4);
IkReal x5281=(cj5*r00);
IkReal x5282=(cj5*r10);
IkReal x5283=(cj5*r20);
IkReal x5284=((1.0)*x5279);
IkReal x5285=((1.0)*x5280);
IkReal x5286=(sj5*x5279);
IkReal x5287=(sj5*x5280);
evalcond[0]=(((r22*x5280))+((r21*x5286))+(((-1.0)*x5283*x5284)));
evalcond[1]=((((-1.0)*r22*x5284))+((r21*x5287))+(((-1.0)*x5283*x5285)));
evalcond[2]=((((-1.0)*x5281*x5284))+((r02*x5280))+cj0+((r01*x5286)));
evalcond[3]=(((r12*x5280))+sj0+(((-1.0)*x5282*x5284))+((r11*x5286)));
evalcond[4]=(cj0+(((-1.0)*r12*x5284))+(((-1.0)*x5282*x5285))+((r11*x5287)));
evalcond[5]=((((-1.0)*x5281*x5285))+(((-1.0)*sj0))+((r01*x5287))+(((-1.0)*r02*x5284)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.71062796600817)*py))+(((-7.22878269506677)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.71062796600817)*px))+(((7.22878269506677)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.71062796600817)*py))+(((-7.22878269506677)*px))))+IKsqr(((((-1.71062796600817)*px))+(((7.22878269506677)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.71062796600817)*py))+(((-7.22878269506677)*px))), ((((-1.71062796600817)*px))+(((7.22878269506677)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5288=IKcos(j0);
IkReal x5289=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.031)*x5288))+(((-0.131)*x5289)));
evalcond[1]=((((-1.0)*py))+(((0.131)*x5288))+(((-0.031)*x5289)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5290=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5290;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5290);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5291=((1.0)*cj5);
IkReal x5292=((((-1.0)*r01*x5291))+(((-1.0)*r00*sj5)));
j4eval[0]=x5292;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5291)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5292);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5293=((1.0)*cj5);
IkReal x5294=((((-1.0)*r01*x5293))+(((-1.0)*r00*sj5)));
j4eval[0]=x5294;
j4eval[1]=IKsign(x5294);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5293))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5295=((1.0)*cj5);
CheckValue<IkReal> x5296 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5295)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5296.valid){
continue;
}
CheckValue<IkReal> x5297=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5295))+(((-1.0)*r00*sj5)))),-1);
if(!x5297.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5296.value)+(((1.5707963267949)*(x5297.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5298=IKcos(j4);
IkReal x5299=IKsin(j4);
IkReal x5300=((1.0)*sj0);
IkReal x5301=(cj5*r00);
IkReal x5302=(cj5*r10);
IkReal x5303=(cj5*r20);
IkReal x5304=((1.0)*x5298);
IkReal x5305=((1.0)*x5299);
IkReal x5306=(sj5*x5298);
IkReal x5307=(sj5*x5299);
evalcond[0]=((((-1.0)*x5303*x5304))+((r21*x5306))+((r22*x5299)));
evalcond[1]=((((-1.0)*r22*x5304))+(((-1.0)*x5303*x5305))+((r21*x5307)));
evalcond[2]=(cj0+(((-1.0)*r12*x5304))+(((-1.0)*x5302*x5305))+((r11*x5307)));
evalcond[3]=(((r02*x5299))+(((-1.0)*x5301*x5304))+((r01*x5306))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x5299))+(((-1.0)*x5300))+(((-1.0)*x5302*x5304))+((r11*x5306)));
evalcond[5]=((((-1.0)*x5300))+(((-1.0)*x5301*x5305))+(((-1.0)*r02*x5304))+((r01*x5307)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5308=((1.0)*cj5);
CheckValue<IkReal> x5309 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5308)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5309.valid){
continue;
}
CheckValue<IkReal> x5310=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5308)))),-1);
if(!x5310.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5309.value)+(((1.5707963267949)*(x5310.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5311=IKcos(j4);
IkReal x5312=IKsin(j4);
IkReal x5313=((1.0)*sj0);
IkReal x5314=(cj5*r00);
IkReal x5315=(cj5*r10);
IkReal x5316=(cj5*r20);
IkReal x5317=((1.0)*x5311);
IkReal x5318=((1.0)*x5312);
IkReal x5319=(sj5*x5311);
IkReal x5320=(sj5*x5312);
evalcond[0]=(((r22*x5312))+((r21*x5319))+(((-1.0)*x5316*x5317)));
evalcond[1]=((((-1.0)*x5316*x5318))+((r21*x5320))+(((-1.0)*r22*x5317)));
evalcond[2]=((((-1.0)*r12*x5317))+((r11*x5320))+cj0+(((-1.0)*x5315*x5318)));
evalcond[3]=(((r01*x5319))+(((-1.0)*x5314*x5317))+((r02*x5312))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5313))+((r11*x5319))+(((-1.0)*x5315*x5317))+((r12*x5312)));
evalcond[5]=((((-1.0)*x5314*x5318))+(((-1.0)*x5313))+((r01*x5320))+(((-1.0)*r02*x5317)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5321 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5321.valid){
continue;
}
CheckValue<IkReal> x5322=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5322.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5321.value)+(((1.5707963267949)*(x5322.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5323=IKcos(j4);
IkReal x5324=IKsin(j4);
IkReal x5325=((1.0)*sj0);
IkReal x5326=(cj5*r00);
IkReal x5327=(cj5*r10);
IkReal x5328=(cj5*r20);
IkReal x5329=((1.0)*x5323);
IkReal x5330=((1.0)*x5324);
IkReal x5331=(sj5*x5323);
IkReal x5332=(sj5*x5324);
evalcond[0]=((((-1.0)*x5328*x5329))+((r22*x5324))+((r21*x5331)));
evalcond[1]=((((-1.0)*r22*x5329))+(((-1.0)*x5328*x5330))+((r21*x5332)));
evalcond[2]=(cj0+((r11*x5332))+(((-1.0)*r12*x5329))+(((-1.0)*x5327*x5330)));
evalcond[3]=((((-1.0)*x5326*x5329))+((r01*x5331))+((r02*x5324))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x5331))+((r12*x5324))+(((-1.0)*x5325))+(((-1.0)*x5327*x5329)));
evalcond[5]=((((-1.0)*r02*x5329))+(((-1.0)*x5326*x5330))+((r01*x5332))+(((-1.0)*x5325)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5333=((1.0)*sj5);
IkReal x5334=((1.0)*cj5);
if( IKabs(((((-1.0)*r11*x5334))+(((-1.0)*r10*x5333)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x5333))+(((-1.0)*r01*x5334)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x5334))+(((-1.0)*r10*x5333))))+IKsqr(((((-1.0)*r00*x5333))+(((-1.0)*r01*x5334))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r11*x5334))+(((-1.0)*r10*x5333))), ((((-1.0)*r00*x5333))+(((-1.0)*r01*x5334))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5335=IKsin(j0);
IkReal x5336=IKcos(j0);
IkReal x5337=(r00*sj5);
IkReal x5338=(r10*sj5);
IkReal x5339=(cj5*r11);
IkReal x5340=(cj5*r01);
evalcond[0]=(x5337+x5336+x5340);
evalcond[1]=(x5335+x5339+x5338);
evalcond[2]=((((-0.085)*x5340))+(((-0.131)*x5335))+(((-1.0)*px))+(((-0.085)*x5337)));
evalcond[3]=((((0.131)*x5336))+(((-1.0)*py))+(((-0.085)*x5338))+(((-0.085)*x5339)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5341=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5341;
j4eval[1]=IKsign(x5341);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5342=((1.0)*cj5);
IkReal x5343=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5342)));
j4eval[0]=x5343;
j4eval[1]=IKsign(x5343);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x5342))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5344=cj5*cj5;
IkReal x5345=(r01*r11);
IkReal x5346=((1.0)*r00);
IkReal x5347=(r01*sj5);
IkReal x5348=(((cj5*r10*x5347))+(((-1.0)*r02*r12))+(((-1.0)*r10*x5344*x5346))+((x5344*x5345))+(((-1.0)*x5345))+((cj5*r00*r11*sj5)));
j4eval[0]=x5348;
j4eval[1]=IKsign(x5348);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs((((cj0*x5347))+(((-1.0)*cj0*cj5*x5346))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5349=cj5*cj5;
IkReal x5350=(r01*r11);
IkReal x5351=(cj5*r00);
IkReal x5352=(r01*sj5);
CheckValue<IkReal> x5353 = IKatan2WithCheck(IkReal((((cj0*x5352))+(((-1.0)*cj0*x5351)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5353.valid){
continue;
}
CheckValue<IkReal> x5354=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*r10*x5349))+(((-1.0)*r02*r12))+((x5349*x5350))+((r11*sj5*x5351))+((cj5*r10*x5352))+(((-1.0)*x5350)))),-1);
if(!x5354.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5353.value)+(((1.5707963267949)*(x5354.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5355=IKcos(j4);
IkReal x5356=IKsin(j4);
IkReal x5357=(cj5*r00);
IkReal x5358=(r01*sj5);
IkReal x5359=(cj5*r10);
IkReal x5360=(cj5*r20);
IkReal x5361=((1.0)*x5355);
IkReal x5362=((1.0)*x5356);
IkReal x5363=(sj5*x5356);
IkReal x5364=(sj5*x5355);
evalcond[0]=(((x5355*x5358))+((r02*x5356))+(((-1.0)*x5357*x5361)));
evalcond[1]=(((r12*x5356))+(((-1.0)*x5359*x5361))+((r11*x5364)));
evalcond[2]=((((-1.0)*r22*x5361))+(((-1.0)*x5360*x5362))+((r21*x5363)));
evalcond[3]=((-1.0)+(((-1.0)*x5360*x5361))+((r22*x5356))+((r21*x5364)));
evalcond[4]=(cj0+(((-1.0)*x5359*x5362))+(((-1.0)*r12*x5361))+((r11*x5363)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5361))+((x5356*x5358))+(((-1.0)*x5357*x5362)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5365=((1.0)*cj5);
CheckValue<IkReal> x5366 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x5365)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5366.valid){
continue;
}
CheckValue<IkReal> x5367=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5365)))),-1);
if(!x5367.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5366.value)+(((1.5707963267949)*(x5367.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5368=IKcos(j4);
IkReal x5369=IKsin(j4);
IkReal x5370=(cj5*r00);
IkReal x5371=(r01*sj5);
IkReal x5372=(cj5*r10);
IkReal x5373=(cj5*r20);
IkReal x5374=((1.0)*x5368);
IkReal x5375=((1.0)*x5369);
IkReal x5376=(sj5*x5369);
IkReal x5377=(sj5*x5368);
evalcond[0]=(((r02*x5369))+((x5368*x5371))+(((-1.0)*x5370*x5374)));
evalcond[1]=(((r12*x5369))+(((-1.0)*x5372*x5374))+((r11*x5377)));
evalcond[2]=((((-1.0)*r22*x5374))+((r21*x5376))+(((-1.0)*x5373*x5375)));
evalcond[3]=((-1.0)+((r22*x5369))+((r21*x5377))+(((-1.0)*x5373*x5374)));
evalcond[4]=(cj0+(((-1.0)*x5372*x5375))+(((-1.0)*r12*x5374))+((r11*x5376)));
evalcond[5]=((((-1.0)*sj0))+((x5369*x5371))+(((-1.0)*x5370*x5375))+(((-1.0)*r02*x5374)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5378=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5378.valid){
continue;
}
CheckValue<IkReal> x5379 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5379.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5378.value)))+(x5379.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5380=IKcos(j4);
IkReal x5381=IKsin(j4);
IkReal x5382=(cj5*r00);
IkReal x5383=(r01*sj5);
IkReal x5384=(cj5*r10);
IkReal x5385=(cj5*r20);
IkReal x5386=((1.0)*x5380);
IkReal x5387=((1.0)*x5381);
IkReal x5388=(sj5*x5381);
IkReal x5389=(sj5*x5380);
evalcond[0]=((((-1.0)*x5382*x5386))+((r02*x5381))+((x5380*x5383)));
evalcond[1]=((((-1.0)*x5384*x5386))+((r11*x5389))+((r12*x5381)));
evalcond[2]=((((-1.0)*x5385*x5387))+(((-1.0)*r22*x5386))+((r21*x5388)));
evalcond[3]=((-1.0)+(((-1.0)*x5385*x5386))+((r21*x5389))+((r22*x5381)));
evalcond[4]=(cj0+(((-1.0)*x5384*x5387))+((r11*x5388))+(((-1.0)*r12*x5386)));
evalcond[5]=((((-1.0)*x5382*x5387))+(((-1.0)*sj0))+((x5381*x5383))+(((-1.0)*r02*x5386)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((3.40636494482648)*py))+(((-2.09499440268671)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.09499440268671)*py))+(((3.40636494482648)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((3.40636494482648)*py))+(((-2.09499440268671)*px))))+IKsqr(((((2.09499440268671)*py))+(((3.40636494482648)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((3.40636494482648)*py))+(((-2.09499440268671)*px))), ((((2.09499440268671)*py))+(((3.40636494482648)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5390=IKsin(j0);
IkReal x5391=IKcos(j0);
evalcond[0]=((((0.213)*x5391))+(((-1.0)*px))+(((-0.131)*x5390)));
evalcond[1]=((((0.213)*x5390))+(((-1.0)*py))+(((0.131)*x5391)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5392=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5392;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5392);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5393=((1.0)*cj5);
IkReal x5394=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5393)));
j4eval[0]=x5394;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5393))))));
j4eval[2]=IKsign(x5394);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5395=((1.0)*cj5);
IkReal x5396=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5395)));
j4eval[0]=x5396;
j4eval[1]=IKsign(x5396);
j4eval[2]=((IKabs(((((-1.0)*r20*sj0*x5395))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5397=((1.0)*cj5);
CheckValue<IkReal> x5398 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x5397))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5398.valid){
continue;
}
CheckValue<IkReal> x5399=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5397)))),-1);
if(!x5399.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5398.value)+(((1.5707963267949)*(x5399.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5400=IKcos(j4);
IkReal x5401=IKsin(j4);
IkReal x5402=((1.0)*sj0);
IkReal x5403=(cj5*r00);
IkReal x5404=(cj5*r10);
IkReal x5405=(cj5*r20);
IkReal x5406=((1.0)*x5400);
IkReal x5407=((1.0)*x5401);
IkReal x5408=(sj5*x5400);
IkReal x5409=(sj5*x5401);
evalcond[0]=(((r21*x5408))+((r22*x5401))+(((-1.0)*x5405*x5406)));
evalcond[1]=(((r21*x5409))+(((-1.0)*r22*x5406))+(((-1.0)*x5405*x5407)));
evalcond[2]=(cj0+(((-1.0)*x5404*x5407))+(((-1.0)*r12*x5406))+((r11*x5409)));
evalcond[3]=((((-1.0)*x5403*x5406))+((r02*x5401))+((r01*x5408))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x5401))+(((-1.0)*x5404*x5406))+(((-1.0)*x5402))+((r11*x5408)));
evalcond[5]=((((-1.0)*x5403*x5407))+(((-1.0)*r02*x5406))+(((-1.0)*x5402))+((r01*x5409)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5410=((1.0)*cj5);
CheckValue<IkReal> x5411 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5410)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5411.valid){
continue;
}
CheckValue<IkReal> x5412=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5410)))),-1);
if(!x5412.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5411.value)+(((1.5707963267949)*(x5412.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5413=IKcos(j4);
IkReal x5414=IKsin(j4);
IkReal x5415=((1.0)*sj0);
IkReal x5416=(cj5*r00);
IkReal x5417=(cj5*r10);
IkReal x5418=(cj5*r20);
IkReal x5419=((1.0)*x5413);
IkReal x5420=((1.0)*x5414);
IkReal x5421=(sj5*x5413);
IkReal x5422=(sj5*x5414);
evalcond[0]=(((r22*x5414))+((r21*x5421))+(((-1.0)*x5418*x5419)));
evalcond[1]=(((r21*x5422))+(((-1.0)*r22*x5419))+(((-1.0)*x5418*x5420)));
evalcond[2]=((((-1.0)*x5417*x5420))+cj0+(((-1.0)*r12*x5419))+((r11*x5422)));
evalcond[3]=((((-1.0)*x5416*x5419))+((r01*x5421))+((r02*x5414))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5417*x5419))+(((-1.0)*x5415))+((r12*x5414))+((r11*x5421)));
evalcond[5]=((((-1.0)*r02*x5419))+((r01*x5422))+(((-1.0)*x5416*x5420))+(((-1.0)*x5415)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5423 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5423.valid){
continue;
}
CheckValue<IkReal> x5424=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5424.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5423.value)+(((1.5707963267949)*(x5424.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5425=IKcos(j4);
IkReal x5426=IKsin(j4);
IkReal x5427=((1.0)*sj0);
IkReal x5428=(cj5*r00);
IkReal x5429=(cj5*r10);
IkReal x5430=(cj5*r20);
IkReal x5431=((1.0)*x5425);
IkReal x5432=((1.0)*x5426);
IkReal x5433=(sj5*x5425);
IkReal x5434=(sj5*x5426);
evalcond[0]=(((r22*x5426))+(((-1.0)*x5430*x5431))+((r21*x5433)));
evalcond[1]=((((-1.0)*r22*x5431))+(((-1.0)*x5430*x5432))+((r21*x5434)));
evalcond[2]=(cj0+(((-1.0)*r12*x5431))+(((-1.0)*x5429*x5432))+((r11*x5434)));
evalcond[3]=((((-1.0)*x5428*x5431))+((r02*x5426))+((r01*x5433))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5427))+((r12*x5426))+(((-1.0)*x5429*x5431))+((r11*x5433)));
evalcond[5]=((((-1.0)*x5427))+(((-1.0)*x5428*x5432))+(((-1.0)*r02*x5431))+((r01*x5434)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5435=IKsin(j0);
IkReal x5436=IKcos(j0);
IkReal x5437=(r00*sj5);
IkReal x5438=(r10*sj5);
IkReal x5439=(cj5*r11);
IkReal x5440=(cj5*r01);
evalcond[0]=(x5440+x5437+(((-1.0)*x5436)));
evalcond[1]=(x5438+x5439+(((-1.0)*x5435)));
evalcond[2]=((((-0.085)*x5437))+(((-0.085)*x5440))+(((-1.0)*px))+(((-0.131)*x5435)));
evalcond[3]=((((-0.085)*x5439))+(((-0.085)*x5438))+(((0.131)*x5436))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5441=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5441;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x5441);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5442=((1.0)*cj5);
IkReal x5443=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5442)));
j4eval[0]=x5443;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x5442))+((r11*sj5))))));
j4eval[2]=IKsign(x5443);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5444=cj5*cj5;
IkReal x5445=(r01*r11);
IkReal x5446=((1.0)*r00);
IkReal x5447=(r01*sj5);
IkReal x5448=((((-1.0)*x5445))+(((-1.0)*r10*x5444*x5446))+(((-1.0)*r02*r12))+((x5444*x5445))+((cj5*r10*x5447))+((cj5*r00*r11*sj5)));
j4eval[0]=x5448;
j4eval[1]=IKsign(x5448);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs(((((-1.0)*cj0*cj5*x5446))+((cj0*x5447))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5449=cj5*cj5;
IkReal x5450=(r01*r11);
IkReal x5451=(cj5*r00);
IkReal x5452=(r01*sj5);
CheckValue<IkReal> x5453 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*x5451))+((cj0*x5452)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5453.valid){
continue;
}
CheckValue<IkReal> x5454=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r12))+((r11*sj5*x5451))+((cj5*r10*x5452))+(((-1.0)*r00*r10*x5449))+((x5449*x5450))+(((-1.0)*x5450)))),-1);
if(!x5454.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5453.value)+(((1.5707963267949)*(x5454.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5455=IKcos(j4);
IkReal x5456=IKsin(j4);
IkReal x5457=(cj5*r00);
IkReal x5458=(r01*sj5);
IkReal x5459=(cj5*r10);
IkReal x5460=(cj5*r20);
IkReal x5461=((1.0)*x5455);
IkReal x5462=((1.0)*x5456);
IkReal x5463=(sj5*x5456);
IkReal x5464=(sj5*x5455);
evalcond[0]=(((x5455*x5458))+((r02*x5456))+(((-1.0)*x5457*x5461)));
evalcond[1]=((((-1.0)*x5459*x5461))+((r12*x5456))+((r11*x5464)));
evalcond[2]=(((r21*x5463))+(((-1.0)*x5460*x5462))+(((-1.0)*r22*x5461)));
evalcond[3]=((1.0)+((r22*x5456))+((r21*x5464))+(((-1.0)*x5460*x5461)));
evalcond[4]=((((-1.0)*x5459*x5462))+cj0+((r11*x5463))+(((-1.0)*r12*x5461)));
evalcond[5]=(((x5456*x5458))+(((-1.0)*sj0))+(((-1.0)*r02*x5461))+(((-1.0)*x5457*x5462)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5465=((1.0)*cj5);
CheckValue<IkReal> x5466=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5465))+(((-1.0)*r00*sj5)))),-1);
if(!x5466.valid){
continue;
}
CheckValue<IkReal> x5467 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x5465))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5467.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5466.value)))+(x5467.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5468=IKcos(j4);
IkReal x5469=IKsin(j4);
IkReal x5470=(cj5*r00);
IkReal x5471=(r01*sj5);
IkReal x5472=(cj5*r10);
IkReal x5473=(cj5*r20);
IkReal x5474=((1.0)*x5468);
IkReal x5475=((1.0)*x5469);
IkReal x5476=(sj5*x5469);
IkReal x5477=(sj5*x5468);
evalcond[0]=(((r02*x5469))+(((-1.0)*x5470*x5474))+((x5468*x5471)));
evalcond[1]=(((r12*x5469))+(((-1.0)*x5472*x5474))+((r11*x5477)));
evalcond[2]=((((-1.0)*x5473*x5475))+(((-1.0)*r22*x5474))+((r21*x5476)));
evalcond[3]=((1.0)+((r22*x5469))+(((-1.0)*x5473*x5474))+((r21*x5477)));
evalcond[4]=(cj0+(((-1.0)*r12*x5474))+(((-1.0)*x5472*x5475))+((r11*x5476)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5470*x5475))+((x5469*x5471))+(((-1.0)*r02*x5474)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5478 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5478.valid){
continue;
}
CheckValue<IkReal> x5479=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5479.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5478.value)+(((1.5707963267949)*(x5479.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5480=IKcos(j4);
IkReal x5481=IKsin(j4);
IkReal x5482=(cj5*r00);
IkReal x5483=(r01*sj5);
IkReal x5484=(cj5*r10);
IkReal x5485=(cj5*r20);
IkReal x5486=((1.0)*x5480);
IkReal x5487=((1.0)*x5481);
IkReal x5488=(sj5*x5481);
IkReal x5489=(sj5*x5480);
evalcond[0]=(((x5480*x5483))+((r02*x5481))+(((-1.0)*x5482*x5486)));
evalcond[1]=(((r11*x5489))+(((-1.0)*x5484*x5486))+((r12*x5481)));
evalcond[2]=((((-1.0)*r22*x5486))+(((-1.0)*x5485*x5487))+((r21*x5488)));
evalcond[3]=((1.0)+(((-1.0)*x5485*x5486))+((r21*x5489))+((r22*x5481)));
evalcond[4]=((((-1.0)*r12*x5486))+cj0+((r11*x5488))+(((-1.0)*x5484*x5487)));
evalcond[5]=(((x5481*x5483))+(((-1.0)*sj0))+(((-1.0)*r02*x5486))+(((-1.0)*x5482*x5487)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-3.40636494482648)*py))+(((-2.09499440268671)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.09499440268671)*py))+(((-3.40636494482648)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.40636494482648)*py))+(((-2.09499440268671)*px))))+IKsqr(((((2.09499440268671)*py))+(((-3.40636494482648)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-3.40636494482648)*py))+(((-2.09499440268671)*px))), ((((2.09499440268671)*py))+(((-3.40636494482648)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5490=IKcos(j0);
IkReal x5491=IKsin(j0);
evalcond[0]=((((-0.131)*x5491))+(((-1.0)*px))+(((-0.213)*x5490)));
evalcond[1]=((((-1.0)*py))+(((-0.213)*x5491))+(((0.131)*x5490)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5492=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5492;
j4eval[1]=IKsign(x5492);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5493=((1.0)*cj5);
IkReal x5494=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5493)));
j4eval[0]=x5494;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5493)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5494);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5495=cj5*cj5;
IkReal x5496=((1.0)*r20);
IkReal x5497=(r01*r21);
IkReal x5498=(r21*sj5);
IkReal x5499=(((cj5*r01*r20*sj5))+((x5495*x5497))+(((-1.0)*r02*r22))+(((-1.0)*r00*x5495*x5496))+((cj5*r00*x5498))+(((-1.0)*x5497)));
j4eval[0]=x5499;
j4eval[1]=((IKabs((((cj0*x5498))+(((-1.0)*cj0*cj5*x5496)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5499);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5500=cj5*cj5;
IkReal x5501=((1.0)*r20);
IkReal x5502=(r01*r21);
IkReal x5503=(r21*sj5);
CheckValue<IkReal> x5504=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x5500*x5502))+(((-1.0)*r00*x5500*x5501))+(((-1.0)*x5502))+((cj5*r00*x5503)))),-1);
if(!x5504.valid){
continue;
}
CheckValue<IkReal> x5505 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x5501))+((cj0*x5503)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5505.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5504.value)))+(x5505.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5506=IKcos(j4);
IkReal x5507=IKsin(j4);
IkReal x5508=(cj5*r00);
IkReal x5509=(cj5*r10);
IkReal x5510=(cj5*r20);
IkReal x5511=((1.0)*x5506);
IkReal x5512=((1.0)*x5507);
IkReal x5513=(sj5*x5506);
IkReal x5514=(sj5*x5507);
evalcond[0]=((((-1.0)*x5510*x5511))+((r21*x5513))+((r22*x5507)));
evalcond[1]=((((-1.0)*x5510*x5512))+(((-1.0)*r22*x5511))+((r21*x5514)));
evalcond[2]=(cj0+((r02*x5507))+((r01*x5513))+(((-1.0)*x5508*x5511)));
evalcond[3]=(sj0+((r12*x5507))+((r11*x5513))+(((-1.0)*x5509*x5511)));
evalcond[4]=(cj0+(((-1.0)*r12*x5511))+((r11*x5514))+(((-1.0)*x5509*x5512)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5511))+((r01*x5514))+(((-1.0)*x5508*x5512)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5515=((1.0)*cj5);
CheckValue<IkReal> x5516=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5515)))),-1);
if(!x5516.valid){
continue;
}
CheckValue<IkReal> x5517 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5515)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5517.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5516.value)))+(x5517.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5518=IKcos(j4);
IkReal x5519=IKsin(j4);
IkReal x5520=(cj5*r00);
IkReal x5521=(cj5*r10);
IkReal x5522=(cj5*r20);
IkReal x5523=((1.0)*x5518);
IkReal x5524=((1.0)*x5519);
IkReal x5525=(sj5*x5518);
IkReal x5526=(sj5*x5519);
evalcond[0]=(((r21*x5525))+((r22*x5519))+(((-1.0)*x5522*x5523)));
evalcond[1]=((((-1.0)*r22*x5523))+((r21*x5526))+(((-1.0)*x5522*x5524)));
evalcond[2]=(cj0+((r02*x5519))+((r01*x5525))+(((-1.0)*x5520*x5523)));
evalcond[3]=(sj0+((r12*x5519))+((r11*x5525))+(((-1.0)*x5521*x5523)));
evalcond[4]=(cj0+((r11*x5526))+(((-1.0)*x5521*x5524))+(((-1.0)*r12*x5523)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5523))+((r01*x5526))+(((-1.0)*x5520*x5524)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5527 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5527.valid){
continue;
}
CheckValue<IkReal> x5528=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5528.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5527.value)+(((1.5707963267949)*(x5528.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5529=IKcos(j4);
IkReal x5530=IKsin(j4);
IkReal x5531=(cj5*r00);
IkReal x5532=(cj5*r10);
IkReal x5533=(cj5*r20);
IkReal x5534=((1.0)*x5529);
IkReal x5535=((1.0)*x5530);
IkReal x5536=(sj5*x5529);
IkReal x5537=(sj5*x5530);
evalcond[0]=(((r22*x5530))+((r21*x5536))+(((-1.0)*x5533*x5534)));
evalcond[1]=((((-1.0)*r22*x5534))+((r21*x5537))+(((-1.0)*x5533*x5535)));
evalcond[2]=(cj0+((r01*x5536))+(((-1.0)*x5531*x5534))+((r02*x5530)));
evalcond[3]=(sj0+((r11*x5536))+(((-1.0)*x5532*x5534))+((r12*x5530)));
evalcond[4]=(cj0+((r11*x5537))+(((-1.0)*x5532*x5535))+(((-1.0)*r12*x5534)));
evalcond[5]=((((-1.0)*r02*x5534))+(((-1.0)*sj0))+((r01*x5537))+(((-1.0)*x5531*x5535)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5538=cj1*cj1;
IkReal x5539=(cj5*r01);
IkReal x5540=(cj1*sj2);
IkReal x5541=(cj1*sj1);
IkReal x5542=(r00*sj5);
IkReal x5543=(cj2*sj2);
IkReal x5544=(cj2*sj1);
IkReal x5545=((1000.0)*py);
IkReal x5546=((85.0)*cj5*r11);
IkReal x5547=((85.0)*r10*sj5);
CheckValue<IkReal> x5548=IKPowWithIntegerCheck(((((-244.0)*cj2*x5541))+(((-426.0)*x5538*x5543))+(((213.0)*x5541))+(((213.0)*x5543))+(((-426.0)*x5541*(cj2*cj2)))+(((-244.0)*sj2*x5538))),-1);
if(!x5548.valid){
continue;
}
CheckValue<IkReal> x5549=IKPowWithIntegerCheck(((((-1.0)*x5544))+(((-1.0)*x5540))),-1);
if(!x5549.valid){
continue;
}
if( IKabs(((x5548.value)*(((((131.0)*x5539))+(((-1.0)*x5544*x5547))+(((-1.0)*x5544*x5546))+(((-1.0)*x5544*x5545))+(((-1.0)*x5540*x5546))+(((-1.0)*x5540*x5547))+(((-1.0)*x5540*x5545))+(((131.0)*x5542)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5549.value)*(((((-1.0)*x5539))+(((-1.0)*x5542)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5548.value)*(((((131.0)*x5539))+(((-1.0)*x5544*x5547))+(((-1.0)*x5544*x5546))+(((-1.0)*x5544*x5545))+(((-1.0)*x5540*x5546))+(((-1.0)*x5540*x5547))+(((-1.0)*x5540*x5545))+(((131.0)*x5542))))))+IKsqr(((x5549.value)*(((((-1.0)*x5539))+(((-1.0)*x5542))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x5548.value)*(((((131.0)*x5539))+(((-1.0)*x5544*x5547))+(((-1.0)*x5544*x5546))+(((-1.0)*x5544*x5545))+(((-1.0)*x5540*x5546))+(((-1.0)*x5540*x5547))+(((-1.0)*x5540*x5545))+(((131.0)*x5542))))), ((x5549.value)*(((((-1.0)*x5539))+(((-1.0)*x5542))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5550=IKcos(j0);
IkReal x5551=IKsin(j0);
IkReal x5552=(cj5*r01);
IkReal x5553=((0.213)*sj1);
IkReal x5554=((1.0)*cj1);
IkReal x5555=((0.085)*sj5);
IkReal x5556=((0.213)*cj1);
IkReal x5557=((1.0)*sj1);
IkReal x5558=((0.244)*cj1);
IkReal x5559=(cj5*r11);
IkReal x5560=(sj2*x5550);
IkReal x5561=(sj2*x5551);
IkReal x5562=(cj2*x5550);
IkReal x5563=(cj2*x5551);
evalcond[0]=((((-1.0)*x5557*x5562))+((r00*sj5))+x5552+(((-1.0)*x5554*x5560)));
evalcond[1]=((((-1.0)*x5557*x5563))+x5559+((r10*sj5))+(((-1.0)*x5554*x5561)));
evalcond[2]=((((-1.0)*r00*x5555))+((x5556*x5562))+(((-0.131)*x5551))+(((-1.0)*px))+(((-0.085)*x5552))+(((-1.0)*x5553*x5560))+((x5550*x5558)));
evalcond[3]=((((0.131)*x5550))+((x5556*x5563))+((x5551*x5558))+(((-1.0)*py))+(((-0.085)*x5559))+(((-1.0)*x5553*x5561))+(((-1.0)*r10*x5555)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5564=((1.0)*cj5);
IkReal x5565=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5564)));
j4eval[0]=x5565;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x5564))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5565);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5566=((1.0)*cj5);
IkReal x5567=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5566)));
j4eval[0]=x5567;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5566))))));
j4eval[2]=IKsign(x5567);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5568=((1.0)*sj0);
IkReal x5569=((1.0)*cj0);
IkReal x5570=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x5570;
j4eval[1]=((IKabs(((((-1.0)*r01*sj5*x5569))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x5568)))))+(IKabs(((((-1.0)*r12*x5568))+(((-1.0)*r02*x5569))))));
j4eval[2]=IKsign(x5570);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x5571=((-1.0)*r20);
IkReal x5573 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5573)==0){
continue;
}
IkReal x5572=pow(x5573,-0.5);
CheckValue<IkReal> x5574 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5571),IKFAST_ATAN2_MAGTHRESH);
if(!x5574.valid){
continue;
}
IkReal gconst114=((-1.0)*(x5574.value));
IkReal gconst115=(r21*x5572);
IkReal gconst116=(x5571*x5572);
CheckValue<IkReal> x5575 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5575.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5575.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5576=((-1.0)*r20);
IkReal x5577=x5572;
CheckValue<IkReal> x5579 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5576),IKFAST_ATAN2_MAGTHRESH);
if(!x5579.valid){
continue;
}
IkReal x5578=((-1.0)*(x5579.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5578;
IkReal gconst114=x5578;
IkReal gconst115=(r21*x5577);
IkReal gconst116=(x5576*x5577);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5580=((-1.0)*r20);
IkReal x5581=x5572;
CheckValue<IkReal> x5583 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5580),IKFAST_ATAN2_MAGTHRESH);
if(!x5583.valid){
continue;
}
IkReal x5582=((-1.0)*(x5583.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5582;
IkReal gconst114=x5582;
IkReal gconst115=(r21*x5581);
IkReal gconst116=(x5580*x5581);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x5584=((-1.0)*r20);
IkReal x5585=x5572;
CheckValue<IkReal> x5587 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5584),IKFAST_ATAN2_MAGTHRESH);
if(!x5587.valid){
continue;
}
IkReal x5586=((-1.0)*(x5587.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5586;
IkReal gconst114=x5586;
IkReal gconst115=(r21*x5585);
IkReal gconst116=(x5584*x5585);
IkReal x5588=((1.0)*(r22*r22));
CheckValue<IkReal> x5592=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x5588))),-1);
if(!x5592.valid){
continue;
}
IkReal x5589=x5592.value;
IkReal x5590=((1.0)*x5589);
IkReal x5591=((((-1.0)*x5590*(r20*r20*r20*r20)))+(((-2.0)*x5589*(r20*r20)*(r21*r21)))+(((-1.0)*x5588))+(((-1.0)*x5590*(r21*r21*r21*r21))));
j4eval[0]=x5591;
j4eval[1]=IKsign(x5591);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5593=(cj2*sj1);
IkReal x5594=(gconst115*r21);
IkReal x5595=(cj1*sj2);
IkReal x5596=((1.0)*gconst116*r20);
CheckValue<IkReal> x5597=IKPowWithIntegerCheck(IKsign(((((2.0)*gconst116*r20*x5594))+(((-1.0)*(x5594*x5594)))+(((-1.0)*gconst116*r20*x5596))+(((-1.0)*(r22*r22))))),-1);
if(!x5597.valid){
continue;
}
CheckValue<IkReal> x5598 = IKatan2WithCheck(IkReal((((r22*x5593))+((r22*x5595)))),IkReal(((((-1.0)*x5595*x5596))+((x5593*x5594))+(((-1.0)*x5593*x5596))+((x5594*x5595)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5598.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5597.value)))+(x5598.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5599=IKsin(j4);
IkReal x5600=IKcos(j4);
IkReal x5601=(sj1*sj2);
IkReal x5602=((1.0)*x5600);
IkReal x5603=((1.0)*cj1*cj2);
IkReal x5604=(gconst115*x5599);
IkReal x5605=(gconst115*x5600);
IkReal x5606=((1.0)*gconst116*x5599);
evalcond[0]=((((-1.0)*r22*x5602))+((r21*x5604))+(((-1.0)*r20*x5606)));
evalcond[1]=((((-1.0)*r10*x5606))+cj0+(((-1.0)*r12*x5602))+((r11*x5604)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x5606))+((r01*x5604))+(((-1.0)*r02*x5602)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst116*r20*x5602))+((r21*x5605))+((r22*x5599)));
evalcond[4]=((((-1.0)*cj0*x5603))+((r02*x5599))+((r01*x5605))+(((-1.0)*gconst116*r00*x5602))+((cj0*x5601)));
evalcond[5]=(((sj0*x5601))+((r12*x5599))+(((-1.0)*gconst116*r10*x5602))+(((-1.0)*sj0*x5603))+((r11*x5605)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5607=((1.0)*gconst116);
CheckValue<IkReal> x5608=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst115*r10))+(((-1.0)*r11*x5607)))),-1);
if(!x5608.valid){
continue;
}
CheckValue<IkReal> x5609 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst115*r21*sj0))+(((-1.0)*r20*sj0*x5607)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5609.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5608.value)))+(x5609.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5610=IKsin(j4);
IkReal x5611=IKcos(j4);
IkReal x5612=(sj1*sj2);
IkReal x5613=((1.0)*x5611);
IkReal x5614=((1.0)*cj1*cj2);
IkReal x5615=(gconst115*x5610);
IkReal x5616=(gconst115*x5611);
IkReal x5617=((1.0)*gconst116*x5610);
evalcond[0]=((((-1.0)*r22*x5613))+((r21*x5615))+(((-1.0)*r20*x5617)));
evalcond[1]=(cj0+(((-1.0)*r10*x5617))+(((-1.0)*r12*x5613))+((r11*x5615)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x5617))+((r01*x5615))+(((-1.0)*r02*x5613)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst116*r20*x5613))+((cj1*sj2))+((r21*x5616))+((r22*x5610)));
evalcond[4]=(((cj0*x5612))+(((-1.0)*cj0*x5614))+((r02*x5610))+((r01*x5616))+(((-1.0)*gconst116*r00*x5613)));
evalcond[5]=(((sj0*x5612))+(((-1.0)*gconst116*r10*x5613))+((r12*x5610))+(((-1.0)*sj0*x5614))+((r11*x5616)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5618=((1.0)*gconst116);
CheckValue<IkReal> x5619=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5618))+(((-1.0)*gconst115*r00)))),-1);
if(!x5619.valid){
continue;
}
CheckValue<IkReal> x5620 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x5618))+((cj0*gconst115*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5620.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5619.value)))+(x5620.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5621=IKsin(j4);
IkReal x5622=IKcos(j4);
IkReal x5623=(sj1*sj2);
IkReal x5624=((1.0)*x5622);
IkReal x5625=((1.0)*cj1*cj2);
IkReal x5626=(gconst115*x5621);
IkReal x5627=(gconst115*x5622);
IkReal x5628=((1.0)*gconst116*x5621);
evalcond[0]=((((-1.0)*r22*x5624))+((r21*x5626))+(((-1.0)*r20*x5628)));
evalcond[1]=(cj0+(((-1.0)*r10*x5628))+(((-1.0)*r12*x5624))+((r11*x5626)));
evalcond[2]=((((-1.0)*r00*x5628))+(((-1.0)*sj0))+((r01*x5626))+(((-1.0)*r02*x5624)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst116*r20*x5624))+((r21*x5627))+((r22*x5621)));
evalcond[4]=(((cj0*x5623))+(((-1.0)*cj0*x5625))+((r02*x5621))+((r01*x5627))+(((-1.0)*gconst116*r00*x5624)));
evalcond[5]=(((sj0*x5623))+(((-1.0)*gconst116*r10*x5624))+((r12*x5621))+((r11*x5627))+(((-1.0)*sj0*x5625)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5629=((-1.0)*r21);
IkReal x5631 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5631)==0){
continue;
}
IkReal x5630=pow(x5631,-0.5);
CheckValue<IkReal> x5632 = IKatan2WithCheck(IkReal(x5629),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5632.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x5632.value))));
IkReal gconst118=(x5629*x5630);
IkReal gconst119=((1.0)*r20*x5630);
CheckValue<IkReal> x5633 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5633.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5633.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5634=((-1.0)*r21);
CheckValue<IkReal> x5637 = IKatan2WithCheck(IkReal(x5634),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5637.valid){
continue;
}
IkReal x5635=((1.0)*(x5637.value));
IkReal x5636=x5630;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5635)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5635)));
IkReal gconst118=(x5634*x5636);
IkReal gconst119=((1.0)*r20*x5636);
IkReal x5638=r22*r22;
IkReal x5639=((1.0)*x5638);
CheckValue<IkReal> x5643=IKPowWithIntegerCheck(((-1.0)+x5638),-1);
if(!x5643.valid){
continue;
}
IkReal x5640=x5643.value;
if((((1.0)+(((-1.0)*x5639)))) < -0.00001)
continue;
IkReal x5641=IKsqrt(((1.0)+(((-1.0)*x5639))));
IkReal x5642=(cj0*x5640*x5641);
j4eval[0]=((IKabs((x5642+(((-1.0)*x5639*x5642)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5644=((-1.0)*r21);
CheckValue<IkReal> x5647 = IKatan2WithCheck(IkReal(x5644),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5647.valid){
continue;
}
IkReal x5645=((1.0)*(x5647.value));
IkReal x5646=x5630;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5645)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5645)));
IkReal gconst118=(x5644*x5646);
IkReal gconst119=((1.0)*r20*x5646);
IkReal x5648=r22*r22;
IkReal x5649=((1.0)*x5648);
CheckValue<IkReal> x5653=IKPowWithIntegerCheck(((-1.0)+x5648),-1);
if(!x5653.valid){
continue;
}
IkReal x5650=x5653.value;
if((((1.0)+(((-1.0)*x5649)))) < -0.00001)
continue;
IkReal x5651=IKsqrt(((1.0)+(((-1.0)*x5649))));
IkReal x5652=(sj0*x5650*x5651);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x5652+(((-1.0)*x5649*x5652))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5654=((-1.0)*r21);
CheckValue<IkReal> x5657 = IKatan2WithCheck(IkReal(x5654),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5657.valid){
continue;
}
IkReal x5655=((1.0)*(x5657.value));
IkReal x5656=x5630;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5655)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5655)));
IkReal gconst118=(x5654*x5656);
IkReal gconst119=((1.0)*r20*x5656);
IkReal x5658=r22*r22;
IkReal x5659=(r12*sj0);
IkReal x5660=(cj0*r02);
CheckValue<IkReal> x5664=IKPowWithIntegerCheck(((-1.0)+x5658),-1);
if(!x5664.valid){
continue;
}
IkReal x5661=x5664.value;
if((((1.0)+(((-1.0)*x5658)))) < -0.00001)
continue;
IkReal x5662=IKsqrt(((1.0)+(((-1.0)*x5658))));
IkReal x5663=(r22*x5661*x5662);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x5660))+(((-1.0)*x5659)))))+(IKabs((((x5659*x5663))+((x5660*x5663))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5665=((1.0)*sj0);
IkReal x5666=((1.0)*gconst118);
CheckValue<IkReal> x5667=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst119*r21))+(((-1.0)*r20*x5666)))),-1);
if(!x5667.valid){
continue;
}
CheckValue<IkReal> x5668 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x5665)))),IkReal((((gconst119*r10*sj0))+(((-1.0)*cj0*r01*x5666))+(((-1.0)*gconst118*r11*x5665))+((cj0*gconst119*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5668.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5667.value)))+(x5668.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5669=IKsin(j4);
IkReal x5670=IKcos(j4);
IkReal x5671=(gconst118*r01);
IkReal x5672=(sj1*sj2);
IkReal x5673=(gconst119*r20);
IkReal x5674=(gconst119*r10);
IkReal x5675=(gconst119*r00);
IkReal x5676=(gconst118*r21);
IkReal x5677=(gconst118*r11);
IkReal x5678=((1.0)*x5670);
IkReal x5679=((1.0)*cj1*cj2);
IkReal x5680=((1.0)*x5669);
evalcond[0]=((((-1.0)*r22*x5678))+(((-1.0)*x5673*x5680))+((x5669*x5676)));
evalcond[1]=(cj0+(((-1.0)*r12*x5678))+((x5669*x5677))+(((-1.0)*x5674*x5680)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5675*x5680))+((x5669*x5671))+(((-1.0)*r02*x5678)));
evalcond[3]=(((cj2*sj1))+((r22*x5669))+((x5670*x5676))+((cj1*sj2))+(((-1.0)*x5673*x5678)));
evalcond[4]=(((cj0*x5672))+((x5670*x5671))+((r02*x5669))+(((-1.0)*cj0*x5679))+(((-1.0)*x5675*x5678)));
evalcond[5]=(((x5670*x5677))+((sj0*x5672))+((r12*x5669))+(((-1.0)*x5674*x5678))+(((-1.0)*sj0*x5679)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5681=((1.0)*gconst119);
CheckValue<IkReal> x5682=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r10))+(((-1.0)*r11*x5681)))),-1);
if(!x5682.valid){
continue;
}
CheckValue<IkReal> x5683 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x5681))+((gconst118*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5683.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5682.value)))+(x5683.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5684=IKsin(j4);
IkReal x5685=IKcos(j4);
IkReal x5686=(gconst118*r01);
IkReal x5687=(sj1*sj2);
IkReal x5688=(gconst119*r20);
IkReal x5689=(gconst119*r10);
IkReal x5690=(gconst119*r00);
IkReal x5691=(gconst118*r21);
IkReal x5692=(gconst118*r11);
IkReal x5693=((1.0)*x5685);
IkReal x5694=((1.0)*cj1*cj2);
IkReal x5695=((1.0)*x5684);
evalcond[0]=((((-1.0)*r22*x5693))+((x5684*x5691))+(((-1.0)*x5688*x5695)));
evalcond[1]=(cj0+((x5684*x5692))+(((-1.0)*x5689*x5695))+(((-1.0)*r12*x5693)));
evalcond[2]=((((-1.0)*x5690*x5695))+(((-1.0)*sj0))+(((-1.0)*r02*x5693))+((x5684*x5686)));
evalcond[3]=(((cj2*sj1))+((r22*x5684))+((cj1*sj2))+((x5685*x5691))+(((-1.0)*x5688*x5693)));
evalcond[4]=((((-1.0)*x5690*x5693))+(((-1.0)*cj0*x5694))+((x5685*x5686))+((r02*x5684))+((cj0*x5687)));
evalcond[5]=((((-1.0)*sj0*x5694))+((x5685*x5692))+((sj0*x5687))+((r12*x5684))+(((-1.0)*x5689*x5693)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5696=((1.0)*gconst119);
CheckValue<IkReal> x5697=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r00))+(((-1.0)*r01*x5696)))),-1);
if(!x5697.valid){
continue;
}
CheckValue<IkReal> x5698 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst118*r21))+(((-1.0)*cj0*r20*x5696)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5698.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5697.value)))+(x5698.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5699=IKsin(j4);
IkReal x5700=IKcos(j4);
IkReal x5701=(gconst118*r01);
IkReal x5702=(sj1*sj2);
IkReal x5703=(gconst119*r20);
IkReal x5704=(gconst119*r10);
IkReal x5705=(gconst119*r00);
IkReal x5706=(gconst118*r21);
IkReal x5707=(gconst118*r11);
IkReal x5708=((1.0)*x5700);
IkReal x5709=((1.0)*cj1*cj2);
IkReal x5710=((1.0)*x5699);
evalcond[0]=((((-1.0)*r22*x5708))+(((-1.0)*x5703*x5710))+((x5699*x5706)));
evalcond[1]=((((-1.0)*r12*x5708))+cj0+(((-1.0)*x5704*x5710))+((x5699*x5707)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5705*x5710))+(((-1.0)*r02*x5708))+((x5699*x5701)));
evalcond[3]=(((cj2*sj1))+((r22*x5699))+((x5700*x5706))+((cj1*sj2))+(((-1.0)*x5703*x5708)));
evalcond[4]=(((x5700*x5701))+((r02*x5699))+(((-1.0)*cj0*x5709))+(((-1.0)*x5705*x5708))+((cj0*x5702)));
evalcond[5]=(((x5700*x5707))+((sj0*x5702))+(((-1.0)*x5704*x5708))+(((-1.0)*sj0*x5709))+((r12*x5699)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5711=((-1.0)*r10);
IkReal x5713 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5713)==0){
continue;
}
IkReal x5712=pow(x5713,-0.5);
CheckValue<IkReal> x5714 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5711),IKFAST_ATAN2_MAGTHRESH);
if(!x5714.valid){
continue;
}
IkReal gconst120=((-1.0)*(x5714.value));
IkReal gconst121=(r11*x5712);
IkReal gconst122=(x5711*x5712);
CheckValue<IkReal> x5715 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5715.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5715.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5716=((-1.0)*r10);
IkReal x5717=x5712;
CheckValue<IkReal> x5719 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5716),IKFAST_ATAN2_MAGTHRESH);
if(!x5719.valid){
continue;
}
IkReal x5718=((-1.0)*(x5719.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst121;
cj5=gconst122;
j5=x5718;
IkReal gconst120=x5718;
IkReal gconst121=(r11*x5717);
IkReal gconst122=(x5716*x5717);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5720=((1.0)*sj0);
IkReal x5721=((1.0)*gconst121);
CheckValue<IkReal> x5722=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x5721))+(((-1.0)*gconst122*r21)))),-1);
if(!x5722.valid){
continue;
}
CheckValue<IkReal> x5723 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5720))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x5721))+(((-1.0)*gconst121*r11*x5720))+((cj0*gconst122*r00))+((gconst122*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5723.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5722.value)))+(x5723.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5724=IKsin(j4);
IkReal x5725=IKcos(j4);
IkReal x5726=(gconst121*r11);
IkReal x5727=(sj1*sj2);
IkReal x5728=(gconst122*r00);
IkReal x5729=(gconst122*r10);
IkReal x5730=(gconst122*r20);
IkReal x5731=((1.0)*x5725);
IkReal x5732=((1.0)*cj1*cj2);
IkReal x5733=((1.0)*x5724);
IkReal x5734=(gconst121*x5724);
IkReal x5735=(gconst121*x5725);
evalcond[0]=(((r21*x5734))+(((-1.0)*x5730*x5733))+(((-1.0)*r22*x5731)));
evalcond[1]=(cj0+(((-1.0)*x5729*x5733))+((x5724*x5726))+(((-1.0)*r12*x5731)));
evalcond[2]=((((-1.0)*sj0))+((r01*x5734))+(((-1.0)*x5728*x5733))+(((-1.0)*r02*x5731)));
evalcond[3]=(((cj2*sj1))+((r21*x5735))+((cj1*sj2))+(((-1.0)*x5730*x5731))+((r22*x5724)));
evalcond[4]=(((r01*x5735))+(((-1.0)*x5728*x5731))+(((-1.0)*cj0*x5732))+((cj0*x5727))+((r02*x5724)));
evalcond[5]=(((sj0*x5727))+((x5725*x5726))+(((-1.0)*x5729*x5731))+((r12*x5724))+(((-1.0)*sj0*x5732)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5736=((1.0)*gconst122);
CheckValue<IkReal> x5737=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst121*r00))+(((-1.0)*r01*x5736)))),-1);
if(!x5737.valid){
continue;
}
CheckValue<IkReal> x5738 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x5736))+((cj0*gconst121*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5738.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5737.value)))+(x5738.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5739=IKsin(j4);
IkReal x5740=IKcos(j4);
IkReal x5741=(gconst121*r11);
IkReal x5742=(sj1*sj2);
IkReal x5743=(gconst122*r00);
IkReal x5744=(gconst122*r10);
IkReal x5745=(gconst122*r20);
IkReal x5746=((1.0)*x5740);
IkReal x5747=((1.0)*cj1*cj2);
IkReal x5748=((1.0)*x5739);
IkReal x5749=(gconst121*x5739);
IkReal x5750=(gconst121*x5740);
evalcond[0]=((((-1.0)*x5745*x5748))+(((-1.0)*r22*x5746))+((r21*x5749)));
evalcond[1]=(cj0+(((-1.0)*r12*x5746))+(((-1.0)*x5744*x5748))+((x5739*x5741)));
evalcond[2]=((((-1.0)*sj0))+((r01*x5749))+(((-1.0)*r02*x5746))+(((-1.0)*x5743*x5748)));
evalcond[3]=(((cj2*sj1))+((r21*x5750))+((cj1*sj2))+(((-1.0)*x5745*x5746))+((r22*x5739)));
evalcond[4]=((((-1.0)*cj0*x5747))+((r01*x5750))+((r02*x5739))+((cj0*x5742))+(((-1.0)*x5743*x5746)));
evalcond[5]=(((r12*x5739))+((x5740*x5741))+((sj0*x5742))+(((-1.0)*x5744*x5746))+(((-1.0)*sj0*x5747)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5751=((-1.0)*r11);
IkReal x5753 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5753)==0){
continue;
}
IkReal x5752=pow(x5753,-0.5);
CheckValue<IkReal> x5754 = IKatan2WithCheck(IkReal(x5751),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5754.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x5754.value))));
IkReal gconst124=(x5751*x5752);
IkReal gconst125=((1.0)*r10*x5752);
CheckValue<IkReal> x5755 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5755.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5755.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5756=((-1.0)*r11);
CheckValue<IkReal> x5759 = IKatan2WithCheck(IkReal(x5756),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5759.valid){
continue;
}
IkReal x5757=((1.0)*(x5759.value));
IkReal x5758=x5752;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5757)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5757)));
IkReal gconst124=(x5756*x5758);
IkReal gconst125=((1.0)*r10*x5758);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5760=((-1.0)*r11);
CheckValue<IkReal> x5763 = IKatan2WithCheck(IkReal(x5760),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5763.valid){
continue;
}
IkReal x5761=((1.0)*(x5763.value));
IkReal x5762=x5752;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5761)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5761)));
IkReal gconst124=(x5760*x5762);
IkReal gconst125=((1.0)*r10*x5762);
IkReal x5764=r12*r12;
IkReal x5765=((1.0)*sj0);
IkReal x5766=(cj0*r02);
IkReal x5767=x5752;
j4eval[0]=((IKabs(((((-1.0)*r12*x5765))+(((-1.0)*x5766)))))+(IKabs((((sj0*x5764*x5767))+(((-1.0)*x5765*x5767))+((r12*x5766*x5767))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5768=((-1.0)*r11);
CheckValue<IkReal> x5771 = IKatan2WithCheck(IkReal(x5768),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5771.valid){
continue;
}
IkReal x5769=((1.0)*(x5771.value));
IkReal x5770=x5752;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5769)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5769)));
IkReal gconst124=(x5768*x5770);
IkReal gconst125=((1.0)*r10*x5770);
IkReal x5772=r12*r12;
IkReal x5773=((1.0)+(((-1.0)*x5772)));
IkReal x5774=(cj2*r22*sj1);
IkReal x5775=(cj1*r22*sj2);
CheckValue<IkReal> x5782=IKPowWithIntegerCheck(x5773,-1);
if(!x5782.valid){
continue;
}
IkReal x5776=x5782.value;
CheckValue<IkReal> x5783=IKPowWithIntegerCheck(((-1.0)+x5772),-1);
if(!x5783.valid){
continue;
}
IkReal x5777=x5783.value;
IkReal x5778=((1.0)*x5776);
if((x5773) < -0.00001)
continue;
IkReal x5779=IKsqrt(x5773);
IkReal x5780=((1.0)*r12*x5777*x5779);
IkReal x5781=((((-1.0)*x5778*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x5776))+(((-1.0)*(r22*r22)))+(((-1.0)*x5778*(r11*r11)*(r21*r21))));
j4eval[0]=x5781;
j4eval[1]=IKsign(x5781);
j4eval[2]=((IKabs((x5775+x5774)))+(IKabs(((((-1.0)*x5775*x5780))+(((-1.0)*x5774*x5780))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5784=(gconst124*r21);
IkReal x5785=(cj1*sj2);
IkReal x5786=(cj2*sj1);
IkReal x5787=(gconst125*r20);
CheckValue<IkReal> x5788=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x5787*x5787)))+(((2.0)*x5784*x5787))+(((-1.0)*(r22*r22)))+(((-1.0)*(x5784*x5784))))),-1);
if(!x5788.valid){
continue;
}
CheckValue<IkReal> x5789 = IKatan2WithCheck(IkReal((((r22*x5785))+((r22*x5786)))),IkReal(((((-1.0)*x5786*x5787))+(((-1.0)*x5785*x5787))+((x5784*x5785))+((x5784*x5786)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5789.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5788.value)))+(x5789.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5790=IKsin(j4);
IkReal x5791=IKcos(j4);
IkReal x5792=(sj1*sj2);
IkReal x5793=(gconst125*r20);
IkReal x5794=(gconst124*r01);
IkReal x5795=(gconst125*r00);
IkReal x5796=(gconst125*r10);
IkReal x5797=((1.0)*x5791);
IkReal x5798=((1.0)*cj1*cj2);
IkReal x5799=((1.0)*x5790);
IkReal x5800=(gconst124*x5790);
IkReal x5801=(gconst124*x5791);
evalcond[0]=((((-1.0)*x5793*x5799))+((r21*x5800))+(((-1.0)*r22*x5797)));
evalcond[1]=(cj0+((r11*x5800))+(((-1.0)*x5796*x5799))+(((-1.0)*r12*x5797)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5795*x5799))+(((-1.0)*r02*x5797))+((x5790*x5794)));
evalcond[3]=((((-1.0)*x5793*x5797))+((cj2*sj1))+((cj1*sj2))+((r21*x5801))+((r22*x5790)));
evalcond[4]=(((x5791*x5794))+(((-1.0)*x5795*x5797))+(((-1.0)*cj0*x5798))+((cj0*x5792))+((r02*x5790)));
evalcond[5]=(((r12*x5790))+((r11*x5801))+((sj0*x5792))+(((-1.0)*x5796*x5797))+(((-1.0)*sj0*x5798)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5802=((1.0)*sj0);
IkReal x5803=((1.0)*cj0);
CheckValue<IkReal> x5804=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r20))+(((-1.0)*gconst125*r21)))),-1);
if(!x5804.valid){
continue;
}
CheckValue<IkReal> x5805 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5802))+(((-1.0)*r02*x5803)))),IkReal(((((-1.0)*gconst124*r11*x5802))+((gconst125*r10*sj0))+((cj0*gconst125*r00))+(((-1.0)*gconst124*r01*x5803)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5805.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5804.value)))+(x5805.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5806=IKsin(j4);
IkReal x5807=IKcos(j4);
IkReal x5808=(sj1*sj2);
IkReal x5809=(gconst125*r20);
IkReal x5810=(gconst124*r01);
IkReal x5811=(gconst125*r00);
IkReal x5812=(gconst125*r10);
IkReal x5813=((1.0)*x5807);
IkReal x5814=((1.0)*cj1*cj2);
IkReal x5815=((1.0)*x5806);
IkReal x5816=(gconst124*x5806);
IkReal x5817=(gconst124*x5807);
evalcond[0]=(((r21*x5816))+(((-1.0)*x5809*x5815))+(((-1.0)*r22*x5813)));
evalcond[1]=((((-1.0)*r12*x5813))+cj0+((r11*x5816))+(((-1.0)*x5812*x5815)));
evalcond[2]=((((-1.0)*sj0))+((x5806*x5810))+(((-1.0)*x5811*x5815))+(((-1.0)*r02*x5813)));
evalcond[3]=(((r21*x5817))+((cj2*sj1))+((cj1*sj2))+((r22*x5806))+(((-1.0)*x5809*x5813)));
evalcond[4]=((((-1.0)*x5811*x5813))+((x5807*x5810))+(((-1.0)*cj0*x5814))+((cj0*x5808))+((r02*x5806)));
evalcond[5]=((((-1.0)*sj0*x5814))+((r11*x5817))+((r12*x5806))+((sj0*x5808))+(((-1.0)*x5812*x5813)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5818=((1.0)*gconst125);
CheckValue<IkReal> x5819=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r00))+(((-1.0)*r01*x5818)))),-1);
if(!x5819.valid){
continue;
}
CheckValue<IkReal> x5820 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x5818))+((cj0*gconst124*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5820.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5819.value)))+(x5820.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5821=IKsin(j4);
IkReal x5822=IKcos(j4);
IkReal x5823=(sj1*sj2);
IkReal x5824=(gconst125*r20);
IkReal x5825=(gconst124*r01);
IkReal x5826=(gconst125*r00);
IkReal x5827=(gconst125*r10);
IkReal x5828=((1.0)*x5822);
IkReal x5829=((1.0)*cj1*cj2);
IkReal x5830=((1.0)*x5821);
IkReal x5831=(gconst124*x5821);
IkReal x5832=(gconst124*x5822);
evalcond[0]=((((-1.0)*r22*x5828))+((r21*x5831))+(((-1.0)*x5824*x5830)));
evalcond[1]=(cj0+((r11*x5831))+(((-1.0)*x5827*x5830))+(((-1.0)*r12*x5828)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x5828))+((x5821*x5825))+(((-1.0)*x5826*x5830)));
evalcond[3]=(((r21*x5832))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5824*x5828))+((r22*x5821)));
evalcond[4]=(((r02*x5821))+((x5822*x5825))+((cj0*x5823))+(((-1.0)*cj0*x5829))+(((-1.0)*x5826*x5828)));
evalcond[5]=(((r12*x5821))+((sj0*x5823))+((r11*x5832))+(((-1.0)*sj0*x5829))+(((-1.0)*x5827*x5828)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5833=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5833;
j4eval[1]=IKsign(x5833);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5834=((1.0)*cj5);
IkReal x5835=((((-1.0)*r01*x5834))+(((-1.0)*r00*sj5)));
j4eval[0]=x5835;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x5834))+((r21*sj5))))));
j4eval[2]=IKsign(x5835);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5836=cj5*cj5;
IkReal x5837=r11*r11;
IkReal x5838=(cj5*r10);
IkReal x5839=(r11*sj5);
IkReal x5840=((((2.0)*x5838*x5839))+((x5836*x5837))+(((-1.0)*(r12*r12)))+(((-1.0)*x5836*(r10*r10)))+(((-1.0)*x5837)));
j4eval[0]=x5840;
j4eval[1]=IKsign(x5840);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x5838))+x5839))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5841=cj5*cj5;
IkReal x5842=r11*r11;
IkReal x5843=(cj5*r10);
IkReal x5844=(r11*sj5);
CheckValue<IkReal> x5845=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5842))+(((2.0)*x5843*x5844))+((x5841*x5842))+(((-1.0)*(r12*r12)))+(((-1.0)*x5841*(r10*r10))))),-1);
if(!x5845.valid){
continue;
}
CheckValue<IkReal> x5846 = IKatan2WithCheck(IkReal(((((-1.0)*x5843))+x5844)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5846.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5845.value)))+(x5846.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5847=IKcos(j4);
IkReal x5848=IKsin(j4);
IkReal x5849=(cj5*r00);
IkReal x5850=(cj5*r10);
IkReal x5851=(r21*sj5);
IkReal x5852=(cj5*r20);
IkReal x5853=((1.0)*x5847);
IkReal x5854=((1.0)*x5848);
IkReal x5855=(sj5*x5848);
IkReal x5856=(sj5*x5847);
evalcond[0]=(((r11*x5856))+((r12*x5848))+(((-1.0)*x5850*x5853)));
evalcond[1]=(((x5848*x5851))+(((-1.0)*r22*x5853))+(((-1.0)*x5852*x5854)));
evalcond[2]=((((-1.0)*x5849*x5854))+((r01*x5855))+(((-1.0)*r02*x5853)));
evalcond[3]=((1.0)+((r11*x5855))+(((-1.0)*r12*x5853))+(((-1.0)*x5850*x5854)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x5847*x5851))+(((-1.0)*x5852*x5853))+((r22*x5848)));
evalcond[5]=((((-1.0)*x5849*x5853))+((r01*x5856))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x5848)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5857=((1.0)*cj5);
CheckValue<IkReal> x5858 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x5857))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5858.valid){
continue;
}
CheckValue<IkReal> x5859=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5857)))),-1);
if(!x5859.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5858.value)+(((1.5707963267949)*(x5859.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5860=IKcos(j4);
IkReal x5861=IKsin(j4);
IkReal x5862=(cj5*r00);
IkReal x5863=(cj5*r10);
IkReal x5864=(r21*sj5);
IkReal x5865=(cj5*r20);
IkReal x5866=((1.0)*x5860);
IkReal x5867=((1.0)*x5861);
IkReal x5868=(sj5*x5861);
IkReal x5869=(sj5*x5860);
evalcond[0]=((((-1.0)*x5863*x5866))+((r11*x5869))+((r12*x5861)));
evalcond[1]=((((-1.0)*r22*x5866))+((x5861*x5864))+(((-1.0)*x5865*x5867)));
evalcond[2]=((((-1.0)*x5862*x5867))+(((-1.0)*r02*x5866))+((r01*x5868)));
evalcond[3]=((1.0)+(((-1.0)*x5863*x5867))+((r11*x5868))+(((-1.0)*r12*x5866)));
evalcond[4]=(((x5860*x5864))+((cj2*sj1))+((r22*x5861))+((cj1*sj2))+(((-1.0)*x5865*x5866)));
evalcond[5]=((((-1.0)*x5862*x5866))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x5861))+((r01*x5869)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5870=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x5870.valid){
continue;
}
CheckValue<IkReal> x5871 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5871.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5870.value)))+(x5871.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5872=IKcos(j4);
IkReal x5873=IKsin(j4);
IkReal x5874=(cj5*r00);
IkReal x5875=(cj5*r10);
IkReal x5876=(r21*sj5);
IkReal x5877=(cj5*r20);
IkReal x5878=((1.0)*x5872);
IkReal x5879=((1.0)*x5873);
IkReal x5880=(sj5*x5873);
IkReal x5881=(sj5*x5872);
evalcond[0]=((((-1.0)*x5875*x5878))+((r11*x5881))+((r12*x5873)));
evalcond[1]=((((-1.0)*x5877*x5879))+(((-1.0)*r22*x5878))+((x5873*x5876)));
evalcond[2]=(((r01*x5880))+(((-1.0)*x5874*x5879))+(((-1.0)*r02*x5878)));
evalcond[3]=((1.0)+(((-1.0)*x5875*x5879))+(((-1.0)*r12*x5878))+((r11*x5880)));
evalcond[4]=((((-1.0)*x5877*x5878))+((cj2*sj1))+((cj1*sj2))+((r22*x5873))+((x5872*x5876)));
evalcond[5]=(((r01*x5881))+(((-1.0)*x5874*x5878))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x5873)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5882=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5882;
j4eval[1]=IKsign(x5882);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5883=((1.0)*cj5);
IkReal x5884=((((-1.0)*r21*x5883))+(((-1.0)*r20*sj5)));
j4eval[0]=x5884;
j4eval[1]=((IKabs((((r01*sj5))+(((-1.0)*r00*x5883)))))+(IKabs(r02)));
j4eval[2]=IKsign(x5884);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5885=cj5*cj5;
IkReal x5886=r11*r11;
IkReal x5887=(r11*sj5);
IkReal x5888=(cj5*r10);
IkReal x5889=((r12*r12)+(((-1.0)*x5885*x5886))+(((-2.0)*x5887*x5888))+((x5885*(r10*r10)))+x5886);
j4eval[0]=x5889;
j4eval[1]=IKsign(x5889);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x5888))+x5887))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5890=cj5*cj5;
IkReal x5891=r11*r11;
IkReal x5892=(cj5*r10);
IkReal x5893=(r11*sj5);
CheckValue<IkReal> x5894 = IKatan2WithCheck(IkReal(((((-1.0)*x5892))+x5893)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5894.valid){
continue;
}
CheckValue<IkReal> x5895=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x5890*x5891))+(((-2.0)*x5892*x5893))+((x5890*(r10*r10)))+x5891)),-1);
if(!x5895.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5894.value)+(((1.5707963267949)*(x5895.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5896=IKcos(j4);
IkReal x5897=IKsin(j4);
IkReal x5898=(cj5*r00);
IkReal x5899=(cj5*r10);
IkReal x5900=(r21*sj5);
IkReal x5901=(cj5*r20);
IkReal x5902=((1.0)*x5896);
IkReal x5903=((1.0)*x5897);
IkReal x5904=(sj5*x5897);
IkReal x5905=(sj5*x5896);
evalcond[0]=(((r12*x5897))+(((-1.0)*x5899*x5902))+((r11*x5905)));
evalcond[1]=(((x5897*x5900))+(((-1.0)*r22*x5902))+(((-1.0)*x5901*x5903)));
evalcond[2]=((((-1.0)*x5898*x5903))+(((-1.0)*r02*x5902))+((r01*x5904)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x5902))+(((-1.0)*x5899*x5903))+((r11*x5904)));
evalcond[4]=(((r22*x5897))+((cj2*sj1))+((cj1*sj2))+((x5896*x5900))+(((-1.0)*x5901*x5902)));
evalcond[5]=((((-1.0)*x5898*x5902))+(((-1.0)*sj1*sj2))+((r02*x5897))+((cj1*cj2))+((r01*x5905)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5906=((1.0)*cj5);
CheckValue<IkReal> x5907 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x5906))+((r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5907.valid){
continue;
}
CheckValue<IkReal> x5908=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5906))+(((-1.0)*r20*sj5)))),-1);
if(!x5908.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5907.value)+(((1.5707963267949)*(x5908.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5909=IKcos(j4);
IkReal x5910=IKsin(j4);
IkReal x5911=(cj5*r00);
IkReal x5912=(cj5*r10);
IkReal x5913=(r21*sj5);
IkReal x5914=(cj5*r20);
IkReal x5915=((1.0)*x5909);
IkReal x5916=((1.0)*x5910);
IkReal x5917=(sj5*x5910);
IkReal x5918=(sj5*x5909);
evalcond[0]=(((r12*x5910))+(((-1.0)*x5912*x5915))+((r11*x5918)));
evalcond[1]=((((-1.0)*r22*x5915))+((x5910*x5913))+(((-1.0)*x5914*x5916)));
evalcond[2]=(((r01*x5917))+(((-1.0)*r02*x5915))+(((-1.0)*x5911*x5916)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x5915))+(((-1.0)*x5912*x5916))+((r11*x5917)));
evalcond[4]=(((cj2*sj1))+((r22*x5910))+((x5909*x5913))+((cj1*sj2))+(((-1.0)*x5914*x5915)));
evalcond[5]=(((r01*x5918))+(((-1.0)*sj1*sj2))+((r02*x5910))+((cj1*cj2))+(((-1.0)*x5911*x5915)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5919 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5919.valid){
continue;
}
CheckValue<IkReal> x5920=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5920.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5919.value)+(((1.5707963267949)*(x5920.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5921=IKcos(j4);
IkReal x5922=IKsin(j4);
IkReal x5923=(cj5*r00);
IkReal x5924=(cj5*r10);
IkReal x5925=(r21*sj5);
IkReal x5926=(cj5*r20);
IkReal x5927=((1.0)*x5921);
IkReal x5928=((1.0)*x5922);
IkReal x5929=(sj5*x5922);
IkReal x5930=(sj5*x5921);
evalcond[0]=(((r11*x5930))+((r12*x5922))+(((-1.0)*x5924*x5927)));
evalcond[1]=((((-1.0)*r22*x5927))+((x5922*x5925))+(((-1.0)*x5926*x5928)));
evalcond[2]=((((-1.0)*r02*x5927))+(((-1.0)*x5923*x5928))+((r01*x5929)));
evalcond[3]=((-1.0)+((r11*x5929))+(((-1.0)*r12*x5927))+(((-1.0)*x5924*x5928)));
evalcond[4]=(((cj2*sj1))+((x5921*x5925))+((cj1*sj2))+((r22*x5922))+(((-1.0)*x5926*x5927)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x5923*x5927))+((r01*x5930))+((cj1*cj2))+((r02*x5922)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5931=((-1.0)*r00);
IkReal x5933 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5933)==0){
continue;
}
IkReal x5932=pow(x5933,-0.5);
CheckValue<IkReal> x5934 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x5931),IKFAST_ATAN2_MAGTHRESH);
if(!x5934.valid){
continue;
}
IkReal gconst126=((-1.0)*(x5934.value));
IkReal gconst127=(r01*x5932);
IkReal gconst128=(x5931*x5932);
CheckValue<IkReal> x5935 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5935.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5935.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5936=((-1.0)*r00);
IkReal x5937=x5932;
CheckValue<IkReal> x5939 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x5936),IKFAST_ATAN2_MAGTHRESH);
if(!x5939.valid){
continue;
}
IkReal x5938=((-1.0)*(x5939.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst127;
cj5=gconst128;
j5=x5938;
IkReal gconst126=x5938;
IkReal gconst127=(r01*x5937);
IkReal gconst128=(x5936*x5937);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5940=((1.0)*sj0);
IkReal x5941=((1.0)*gconst127);
CheckValue<IkReal> x5942 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5940))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x5941))+((gconst128*r10*sj0))+((cj0*gconst128*r00))+(((-1.0)*gconst127*r11*x5940)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5942.valid){
continue;
}
CheckValue<IkReal> x5943=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst128*r21))+(((-1.0)*r20*x5941)))),-1);
if(!x5943.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5942.value)+(((1.5707963267949)*(x5943.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5944=IKsin(j4);
IkReal x5945=IKcos(j4);
IkReal x5946=(gconst127*r01);
IkReal x5947=(sj1*sj2);
IkReal x5948=(gconst128*r10);
IkReal x5949=(gconst128*r00);
IkReal x5950=(gconst128*r20);
IkReal x5951=((1.0)*x5945);
IkReal x5952=((1.0)*cj1*cj2);
IkReal x5953=((1.0)*x5944);
IkReal x5954=(gconst127*x5945);
IkReal x5955=(gconst127*x5944);
evalcond[0]=(((r21*x5955))+(((-1.0)*r22*x5951))+(((-1.0)*x5950*x5953)));
evalcond[1]=(cj0+((r11*x5955))+(((-1.0)*x5948*x5953))+(((-1.0)*r12*x5951)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x5951))+((x5944*x5946))+(((-1.0)*x5949*x5953)));
evalcond[3]=(((cj2*sj1))+((r21*x5954))+((cj1*sj2))+((r22*x5944))+(((-1.0)*x5950*x5951)));
evalcond[4]=(((cj0*x5947))+((x5945*x5946))+(((-1.0)*x5949*x5951))+(((-1.0)*cj0*x5952))+((r02*x5944)));
evalcond[5]=(((r11*x5954))+(((-1.0)*x5948*x5951))+((r12*x5944))+((sj0*x5947))+(((-1.0)*sj0*x5952)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5956=((1.0)*gconst128);
CheckValue<IkReal> x5957 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst127*r21*sj0))+(((-1.0)*r20*sj0*x5956)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5957.valid){
continue;
}
CheckValue<IkReal> x5958=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5956))+(((-1.0)*gconst127*r10)))),-1);
if(!x5958.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5957.value)+(((1.5707963267949)*(x5958.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5959=IKsin(j4);
IkReal x5960=IKcos(j4);
IkReal x5961=(gconst127*r01);
IkReal x5962=(sj1*sj2);
IkReal x5963=(gconst128*r10);
IkReal x5964=(gconst128*r00);
IkReal x5965=(gconst128*r20);
IkReal x5966=((1.0)*x5960);
IkReal x5967=((1.0)*cj1*cj2);
IkReal x5968=((1.0)*x5959);
IkReal x5969=(gconst127*x5960);
IkReal x5970=(gconst127*x5959);
evalcond[0]=((((-1.0)*r22*x5966))+((r21*x5970))+(((-1.0)*x5965*x5968)));
evalcond[1]=(cj0+(((-1.0)*r12*x5966))+((r11*x5970))+(((-1.0)*x5963*x5968)));
evalcond[2]=((((-1.0)*sj0))+((x5959*x5961))+(((-1.0)*x5964*x5968))+(((-1.0)*r02*x5966)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x5969))+((r22*x5959))+(((-1.0)*x5965*x5966)));
evalcond[4]=(((cj0*x5962))+((x5960*x5961))+((r02*x5959))+(((-1.0)*cj0*x5967))+(((-1.0)*x5964*x5966)));
evalcond[5]=((((-1.0)*sj0*x5967))+((r12*x5959))+((r11*x5969))+((sj0*x5962))+(((-1.0)*x5963*x5966)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5971=((-1.0)*r01);
IkReal x5973 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5973)==0){
continue;
}
IkReal x5972=pow(x5973,-0.5);
CheckValue<IkReal> x5974 = IKatan2WithCheck(IkReal(x5971),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5974.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x5974.value))));
IkReal gconst130=(x5971*x5972);
IkReal gconst131=((1.0)*r00*x5972);
CheckValue<IkReal> x5975 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5975.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5975.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x5976=((-1.0)*r01);
CheckValue<IkReal> x5979 = IKatan2WithCheck(IkReal(x5976),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5979.valid){
continue;
}
IkReal x5977=((1.0)*(x5979.value));
IkReal x5978=x5972;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5977)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5977)));
IkReal gconst130=(x5976*x5978);
IkReal gconst131=((1.0)*r00*x5978);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5980=((-1.0)*r01);
CheckValue<IkReal> x5983 = IKatan2WithCheck(IkReal(x5980),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5983.valid){
continue;
}
IkReal x5981=((1.0)*(x5983.value));
IkReal x5982=x5972;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5981)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5981)));
IkReal gconst130=(x5980*x5982);
IkReal gconst131=((1.0)*r00*x5982);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5984=((-1.0)*r01);
CheckValue<IkReal> x5987 = IKatan2WithCheck(IkReal(x5984),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5987.valid){
continue;
}
IkReal x5985=((1.0)*(x5987.value));
IkReal x5986=x5972;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5985)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5985)));
IkReal gconst130=(x5984*x5986);
IkReal gconst131=((1.0)*r00*x5986);
IkReal x5988=r02*r02;
IkReal x5989=(r12*sj0);
IkReal x5990=((1.0)*cj0);
IkReal x5991=x5972;
j4eval[0]=((IKabs(((((-1.0)*x5990*x5991))+((cj0*x5988*x5991))+((r02*x5989*x5991)))))+(IKabs(((((-1.0)*x5989))+(((-1.0)*r02*x5990))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5992=((1.0)*sj0);
IkReal x5993=((1.0)*gconst130);
CheckValue<IkReal> x5994 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5992))+(((-1.0)*cj0*r02)))),IkReal((((gconst131*r10*sj0))+(((-1.0)*gconst130*r11*x5992))+(((-1.0)*cj0*r01*x5993))+((cj0*gconst131*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5994.valid){
continue;
}
CheckValue<IkReal> x5995=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x5993))+(((-1.0)*gconst131*r21)))),-1);
if(!x5995.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5994.value)+(((1.5707963267949)*(x5995.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5996=IKsin(j4);
IkReal x5997=IKcos(j4);
IkReal x5998=(gconst131*r10);
IkReal x5999=(sj1*sj2);
IkReal x6000=(gconst131*r20);
IkReal x6001=(gconst131*r00);
IkReal x6002=((1.0)*x5997);
IkReal x6003=((1.0)*cj1*cj2);
IkReal x6004=(gconst130*x5996);
IkReal x6005=((1.0)*x5996);
IkReal x6006=(gconst130*x5997);
evalcond[0]=(((r21*x6004))+(((-1.0)*r22*x6002))+(((-1.0)*x6000*x6005)));
evalcond[1]=((((-1.0)*x5998*x6005))+cj0+((r11*x6004))+(((-1.0)*r12*x6002)));
evalcond[2]=((((-1.0)*sj0))+((r01*x6004))+(((-1.0)*r02*x6002))+(((-1.0)*x6001*x6005)));
evalcond[3]=(((r21*x6006))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6000*x6002))+((r22*x5996)));
evalcond[4]=(((r02*x5996))+(((-1.0)*cj0*x6003))+((cj0*x5999))+((r01*x6006))+(((-1.0)*x6001*x6002)));
evalcond[5]=((((-1.0)*x5998*x6002))+((r12*x5996))+(((-1.0)*sj0*x6003))+((sj0*x5999))+((r11*x6006)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6007=((1.0)*gconst131);
CheckValue<IkReal> x6008=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6007))+(((-1.0)*gconst130*r10)))),-1);
if(!x6008.valid){
continue;
}
CheckValue<IkReal> x6009 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst130*r21*sj0))+(((-1.0)*r20*sj0*x6007)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6009.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6008.value)))+(x6009.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6010=IKsin(j4);
IkReal x6011=IKcos(j4);
IkReal x6012=(gconst131*r10);
IkReal x6013=(sj1*sj2);
IkReal x6014=(gconst131*r20);
IkReal x6015=(gconst131*r00);
IkReal x6016=((1.0)*x6011);
IkReal x6017=((1.0)*cj1*cj2);
IkReal x6018=(gconst130*x6010);
IkReal x6019=((1.0)*x6010);
IkReal x6020=(gconst130*x6011);
evalcond[0]=(((r21*x6018))+(((-1.0)*r22*x6016))+(((-1.0)*x6014*x6019)));
evalcond[1]=(((r11*x6018))+cj0+(((-1.0)*r12*x6016))+(((-1.0)*x6012*x6019)));
evalcond[2]=(((r01*x6018))+(((-1.0)*sj0))+(((-1.0)*r02*x6016))+(((-1.0)*x6015*x6019)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x6020))+((r22*x6010))+(((-1.0)*x6014*x6016)));
evalcond[4]=(((cj0*x6013))+((r01*x6020))+((r02*x6010))+(((-1.0)*x6015*x6016))+(((-1.0)*cj0*x6017)));
evalcond[5]=(((r12*x6010))+(((-1.0)*sj0*x6017))+((sj0*x6013))+(((-1.0)*x6012*x6016))+((r11*x6020)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6021=((1.0)*gconst131);
CheckValue<IkReal> x6022=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6021))+(((-1.0)*gconst130*r00)))),-1);
if(!x6022.valid){
continue;
}
CheckValue<IkReal> x6023 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6021))+((cj0*gconst130*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6023.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6022.value)))+(x6023.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6024=IKsin(j4);
IkReal x6025=IKcos(j4);
IkReal x6026=(gconst131*r10);
IkReal x6027=(sj1*sj2);
IkReal x6028=(gconst131*r20);
IkReal x6029=(gconst131*r00);
IkReal x6030=((1.0)*x6025);
IkReal x6031=((1.0)*cj1*cj2);
IkReal x6032=(gconst130*x6024);
IkReal x6033=((1.0)*x6024);
IkReal x6034=(gconst130*x6025);
evalcond[0]=(((r21*x6032))+(((-1.0)*r22*x6030))+(((-1.0)*x6028*x6033)));
evalcond[1]=(cj0+((r11*x6032))+(((-1.0)*r12*x6030))+(((-1.0)*x6026*x6033)));
evalcond[2]=((((-1.0)*x6029*x6033))+(((-1.0)*sj0))+((r01*x6032))+(((-1.0)*r02*x6030)));
evalcond[3]=(((cj2*sj1))+((r21*x6034))+((cj1*sj2))+((r22*x6024))+(((-1.0)*x6028*x6030)));
evalcond[4]=((((-1.0)*x6029*x6030))+((r02*x6024))+(((-1.0)*cj0*x6031))+((cj0*x6027))+((r01*x6034)));
evalcond[5]=(((sj0*x6027))+(((-1.0)*sj0*x6031))+((r11*x6034))+(((-1.0)*x6026*x6030))+((r12*x6024)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6035=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6035;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x6035);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6036=((1.0)*cj5);
IkReal x6037=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6036)));
j4eval[0]=x6037;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x6036)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6037);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6038=cj5*cj5;
IkReal x6039=r01*r01;
IkReal x6040=(cj5*r00);
IkReal x6041=(r01*sj5);
IkReal x6042=((((-2.0)*x6040*x6041))+((x6038*(r00*r00)))+x6039+(((-1.0)*x6038*x6039))+(r02*r02));
j4eval[0]=x6042;
j4eval[1]=IKsign(x6042);
j4eval[2]=((IKabs(r02))+(IKabs((x6041+(((-1.0)*x6040))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6043=cj5*cj5;
IkReal x6044=r01*r01;
IkReal x6045=(r01*sj5);
IkReal x6046=(cj5*r00);
CheckValue<IkReal> x6047 = IKatan2WithCheck(IkReal((x6045+(((-1.0)*x6046)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x6047.valid){
continue;
}
CheckValue<IkReal> x6048=IKPowWithIntegerCheck(IKsign((x6044+(((-1.0)*x6043*x6044))+(((-2.0)*x6045*x6046))+(r02*r02)+((x6043*(r00*r00))))),-1);
if(!x6048.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6047.value)+(((1.5707963267949)*(x6048.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6049=IKcos(j4);
IkReal x6050=IKsin(j4);
IkReal x6051=(cj5*r00);
IkReal x6052=(cj5*r10);
IkReal x6053=(r21*sj5);
IkReal x6054=(cj5*r20);
IkReal x6055=((1.0)*x6049);
IkReal x6056=((1.0)*x6050);
IkReal x6057=(sj5*x6050);
IkReal x6058=(sj5*x6049);
evalcond[0]=(((r01*x6058))+(((-1.0)*x6051*x6055))+((r02*x6050)));
evalcond[1]=((((-1.0)*x6054*x6056))+(((-1.0)*r22*x6055))+((x6050*x6053)));
evalcond[2]=((((-1.0)*x6052*x6056))+(((-1.0)*r12*x6055))+((r11*x6057)));
evalcond[3]=((-1.0)+((r01*x6057))+(((-1.0)*x6051*x6056))+(((-1.0)*r02*x6055)));
evalcond[4]=(((cj2*sj1))+((r22*x6050))+((cj1*sj2))+(((-1.0)*x6054*x6055))+((x6049*x6053)));
evalcond[5]=(((r12*x6050))+(((-1.0)*x6052*x6055))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r11*x6058)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6059=((1.0)*cj5);
CheckValue<IkReal> x6060=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6059)))),-1);
if(!x6060.valid){
continue;
}
CheckValue<IkReal> x6061 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x6059)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6061.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6060.value)))+(x6061.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6062=IKcos(j4);
IkReal x6063=IKsin(j4);
IkReal x6064=(cj5*r00);
IkReal x6065=(cj5*r10);
IkReal x6066=(r21*sj5);
IkReal x6067=(cj5*r20);
IkReal x6068=((1.0)*x6062);
IkReal x6069=((1.0)*x6063);
IkReal x6070=(sj5*x6063);
IkReal x6071=(sj5*x6062);
evalcond[0]=((((-1.0)*x6064*x6068))+((r01*x6071))+((r02*x6063)));
evalcond[1]=((((-1.0)*r22*x6068))+((x6063*x6066))+(((-1.0)*x6067*x6069)));
evalcond[2]=(((r11*x6070))+(((-1.0)*r12*x6068))+(((-1.0)*x6065*x6069)));
evalcond[3]=((-1.0)+(((-1.0)*x6064*x6069))+((r01*x6070))+(((-1.0)*r02*x6068)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x6063))+(((-1.0)*x6067*x6068))+((x6062*x6066)));
evalcond[5]=(((r11*x6071))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x6063))+(((-1.0)*x6065*x6068)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6072=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6072.valid){
continue;
}
CheckValue<IkReal> x6073 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6073.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6072.value)))+(x6073.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6074=IKcos(j4);
IkReal x6075=IKsin(j4);
IkReal x6076=(cj5*r00);
IkReal x6077=(cj5*r10);
IkReal x6078=(r21*sj5);
IkReal x6079=(cj5*r20);
IkReal x6080=((1.0)*x6074);
IkReal x6081=((1.0)*x6075);
IkReal x6082=(sj5*x6075);
IkReal x6083=(sj5*x6074);
evalcond[0]=(((r01*x6083))+((r02*x6075))+(((-1.0)*x6076*x6080)));
evalcond[1]=(((x6075*x6078))+(((-1.0)*r22*x6080))+(((-1.0)*x6079*x6081)));
evalcond[2]=((((-1.0)*r12*x6080))+(((-1.0)*x6077*x6081))+((r11*x6082)));
evalcond[3]=((-1.0)+((r01*x6082))+(((-1.0)*r02*x6080))+(((-1.0)*x6076*x6081)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x6075))+((x6074*x6078))+(((-1.0)*x6079*x6080)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6077*x6080))+((r11*x6083))+((r12*x6075)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6084=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6084;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6084);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6085=((1.0)*cj5);
IkReal x6086=((((-1.0)*r21*x6085))+(((-1.0)*r20*sj5)));
j4eval[0]=x6086;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x6085))))));
j4eval[2]=IKsign(x6086);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6087=(r01*sj5);
IkReal x6088=(cj1*sj2);
IkReal x6089=(cj2*sj1);
IkReal x6090=((1.0)*r02);
IkReal x6091=((1.0)*cj5*r00);
IkReal x6092=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6092;
j4eval[1]=((IKabs(((((-1.0)*x6089*x6090))+(((-1.0)*x6088*x6090)))))+(IKabs(((((-1.0)*x6089*x6091))+((x6087*x6089))+((x6087*x6088))+(((-1.0)*x6088*x6091))))));
j4eval[2]=IKsign(x6092);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6093=(r01*sj5);
IkReal x6094=(cj1*sj2);
IkReal x6095=(cj2*sj1);
IkReal x6096=((1.0)*r02);
IkReal x6097=((1.0)*cj5*r00);
CheckValue<IkReal> x6098 = IKatan2WithCheck(IkReal((((x6093*x6094))+((x6093*x6095))+(((-1.0)*x6095*x6097))+(((-1.0)*x6094*x6097)))),IkReal(((((-1.0)*x6095*x6096))+(((-1.0)*x6094*x6096)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6098.valid){
continue;
}
CheckValue<IkReal> x6099=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6099.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6098.value)+(((1.5707963267949)*(x6099.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6100=IKcos(j4);
IkReal x6101=IKsin(j4);
IkReal x6102=(cj5*r00);
IkReal x6103=(cj5*r10);
IkReal x6104=(r21*sj5);
IkReal x6105=(cj5*r20);
IkReal x6106=((1.0)*x6100);
IkReal x6107=((1.0)*x6101);
IkReal x6108=(sj5*x6101);
IkReal x6109=(sj5*x6100);
evalcond[0]=((((-1.0)*x6102*x6106))+((r02*x6101))+((r01*x6109)));
evalcond[1]=((((-1.0)*x6105*x6107))+((x6101*x6104))+(((-1.0)*r22*x6106)));
evalcond[2]=(((r11*x6108))+(((-1.0)*x6103*x6107))+(((-1.0)*r12*x6106)));
evalcond[3]=((1.0)+(((-1.0)*r02*x6106))+(((-1.0)*x6102*x6107))+((r01*x6108)));
evalcond[4]=((((-1.0)*x6105*x6106))+((cj2*sj1))+((r22*x6101))+((x6100*x6104))+((cj1*sj2)));
evalcond[5]=(((r11*x6109))+(((-1.0)*x6103*x6106))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r12*x6101)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6110=((1.0)*cj5);
CheckValue<IkReal> x6111=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6110))+(((-1.0)*r20*sj5)))),-1);
if(!x6111.valid){
continue;
}
CheckValue<IkReal> x6112 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x6110))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6112.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6111.value)))+(x6112.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6113=IKcos(j4);
IkReal x6114=IKsin(j4);
IkReal x6115=(cj5*r00);
IkReal x6116=(cj5*r10);
IkReal x6117=(r21*sj5);
IkReal x6118=(cj5*r20);
IkReal x6119=((1.0)*x6113);
IkReal x6120=((1.0)*x6114);
IkReal x6121=(sj5*x6114);
IkReal x6122=(sj5*x6113);
evalcond[0]=(((r01*x6122))+((r02*x6114))+(((-1.0)*x6115*x6119)));
evalcond[1]=((((-1.0)*r22*x6119))+(((-1.0)*x6118*x6120))+((x6114*x6117)));
evalcond[2]=((((-1.0)*r12*x6119))+(((-1.0)*x6116*x6120))+((r11*x6121)));
evalcond[3]=((1.0)+((r01*x6121))+(((-1.0)*r02*x6119))+(((-1.0)*x6115*x6120)));
evalcond[4]=(((x6113*x6117))+((cj2*sj1))+((cj1*sj2))+((r22*x6114))+(((-1.0)*x6118*x6119)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x6116*x6119))+((r12*x6114))+((cj1*cj2))+((r11*x6122)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6123 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6123.valid){
continue;
}
CheckValue<IkReal> x6124=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6124.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6123.value)+(((1.5707963267949)*(x6124.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6125=IKcos(j4);
IkReal x6126=IKsin(j4);
IkReal x6127=(cj5*r00);
IkReal x6128=(cj5*r10);
IkReal x6129=(r21*sj5);
IkReal x6130=(cj5*r20);
IkReal x6131=((1.0)*x6125);
IkReal x6132=((1.0)*x6126);
IkReal x6133=(sj5*x6126);
IkReal x6134=(sj5*x6125);
evalcond[0]=(((r02*x6126))+(((-1.0)*x6127*x6131))+((r01*x6134)));
evalcond[1]=((((-1.0)*x6130*x6132))+((x6126*x6129))+(((-1.0)*r22*x6131)));
evalcond[2]=(((r11*x6133))+(((-1.0)*x6128*x6132))+(((-1.0)*r12*x6131)));
evalcond[3]=((1.0)+(((-1.0)*x6127*x6132))+((r01*x6133))+(((-1.0)*r02*x6131)));
evalcond[4]=(((x6125*x6129))+((cj2*sj1))+(((-1.0)*x6130*x6131))+((cj1*sj2))+((r22*x6126)));
evalcond[5]=(((r11*x6134))+((r12*x6126))+(((-1.0)*sj1*sj2))+(((-1.0)*x6128*x6131))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6135=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6135);
rxp1_1=(px*r21);
rxp1_2=(r11*x6135);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6136=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6136);
rxp1_1=(px*r21);
rxp1_2=(r11*x6136);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6137=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6137);
rxp1_1=(px*r21);
rxp1_2=(r11*x6137);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6140=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x6140.valid){
continue;
}
IkReal x6138=x6140.value;
IkReal x6139=(sj0*x6138);
cj4array[0]=(((cj1*cj2*x6139))+(((-1.0)*sj1*sj2*x6139)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6141=IKsin(j4);
IkReal x6142=IKcos(j4);
IkReal x6143=(r21*sj5);
IkReal x6144=((1.0)*cj5*r20);
evalcond[0]=(r02*x6141);
evalcond[1]=((((-1.0)*r02*x6142))+(((-1.0)*sj0)));
evalcond[2]=((((-1.0)*x6141*x6144))+((x6141*x6143)));
evalcond[3]=(((r11*sj5*x6141))+(((-1.0)*cj5*r10*x6141)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6142*x6144))+((x6142*x6143)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6147=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x6147.valid){
continue;
}
IkReal x6145=x6147.value;
IkReal x6146=((1.0)*x6145);
cj4array[0]=((((-1.0)*cj2*sj1*x6146))+(((-1.0)*cj1*sj2*x6146)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6148=IKsin(j4);
IkReal x6149=IKcos(j4);
IkReal x6150=((1.0)*sj0);
IkReal x6151=((1.0)*cj5);
IkReal x6152=(sj5*x6148);
evalcond[0]=(r02*x6148);
evalcond[1]=((((-1.0)*r02*x6149))+(((-1.0)*x6150)));
evalcond[2]=(((r21*x6152))+(((-1.0)*r20*x6148*x6151)));
evalcond[3]=((((-1.0)*r10*x6148*x6151))+((r11*x6152)));
evalcond[4]=(((r11*sj5*x6149))+(((-1.0)*cj1*cj2*x6150))+(((-1.0)*r10*x6149*x6151))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6153=IKPowWithIntegerCheck(r02,-1);
if(!x6153.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x6153.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6154=IKsin(j4);
IkReal x6155=IKcos(j4);
IkReal x6156=(r21*sj5);
IkReal x6157=((1.0)*cj5);
IkReal x6158=(r11*sj5);
evalcond[0]=(r02*x6154);
evalcond[1]=(((x6154*x6156))+(((-1.0)*r20*x6154*x6157)));
evalcond[2]=(((x6154*x6158))+(((-1.0)*r10*x6154*x6157)));
evalcond[3]=(((x6155*x6156))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r20*x6155*x6157)));
evalcond[4]=(((x6155*x6158))+(((-1.0)*cj1*cj2*sj0))+(((-1.0)*r10*x6155*x6157))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6159=((1.0)*sj0);
IkReal x6160=((1.0)*cj0);
CheckValue<IkReal> x6161 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x6159))+(((-1.0)*r02*x6160)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x6159))+(((-1.0)*r01*sj5*x6160)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6161.valid){
continue;
}
CheckValue<IkReal> x6162=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x6162.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6161.value)+(((1.5707963267949)*(x6162.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6163=IKsin(j4);
IkReal x6164=IKcos(j4);
IkReal x6165=(cj5*r00);
IkReal x6166=(cj5*r10);
IkReal x6167=(r21*sj5);
IkReal x6168=(sj1*sj2);
IkReal x6169=(cj5*r20);
IkReal x6170=((1.0)*x6164);
IkReal x6171=((1.0)*cj1*cj2);
IkReal x6172=((1.0)*x6163);
IkReal x6173=(sj5*x6163);
IkReal x6174=(sj5*x6164);
evalcond[0]=(((x6163*x6167))+(((-1.0)*r22*x6170))+(((-1.0)*x6169*x6172)));
evalcond[1]=(cj0+(((-1.0)*x6166*x6172))+((r11*x6173))+(((-1.0)*r12*x6170)));
evalcond[2]=((((-1.0)*sj0))+((r01*x6173))+(((-1.0)*r02*x6170))+(((-1.0)*x6165*x6172)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x6164*x6167))+(((-1.0)*x6169*x6170))+((r22*x6163)));
evalcond[4]=((((-1.0)*cj0*x6171))+((r02*x6163))+((r01*x6174))+((cj0*x6168))+(((-1.0)*x6165*x6170)));
evalcond[5]=((((-1.0)*sj0*x6171))+((sj0*x6168))+((r12*x6163))+(((-1.0)*x6166*x6170))+((r11*x6174)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6175=((1.0)*cj5);
CheckValue<IkReal> x6176 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6175))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6176.valid){
continue;
}
CheckValue<IkReal> x6177=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6175)))),-1);
if(!x6177.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6176.value)+(((1.5707963267949)*(x6177.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6178=IKsin(j4);
IkReal x6179=IKcos(j4);
IkReal x6180=(cj5*r00);
IkReal x6181=(cj5*r10);
IkReal x6182=(r21*sj5);
IkReal x6183=(sj1*sj2);
IkReal x6184=(cj5*r20);
IkReal x6185=((1.0)*x6179);
IkReal x6186=((1.0)*cj1*cj2);
IkReal x6187=((1.0)*x6178);
IkReal x6188=(sj5*x6178);
IkReal x6189=(sj5*x6179);
evalcond[0]=((((-1.0)*r22*x6185))+(((-1.0)*x6184*x6187))+((x6178*x6182)));
evalcond[1]=(cj0+(((-1.0)*r12*x6185))+((r11*x6188))+(((-1.0)*x6181*x6187)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6185))+((r01*x6188))+(((-1.0)*x6180*x6187)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6184*x6185))+((cj1*sj2))+((x6179*x6182))+((r22*x6178)));
evalcond[4]=(((r01*x6189))+((r02*x6178))+((cj0*x6183))+(((-1.0)*cj0*x6186))+(((-1.0)*x6180*x6185)));
evalcond[5]=(((r12*x6178))+((r11*x6189))+((sj0*x6183))+(((-1.0)*sj0*x6186))+(((-1.0)*x6181*x6185)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6190=((1.0)*cj5);
CheckValue<IkReal> x6191=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6190)))),-1);
if(!x6191.valid){
continue;
}
CheckValue<IkReal> x6192 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6190)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6192.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6191.value)))+(x6192.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6193=IKsin(j4);
IkReal x6194=IKcos(j4);
IkReal x6195=(cj5*r00);
IkReal x6196=(cj5*r10);
IkReal x6197=(r21*sj5);
IkReal x6198=(sj1*sj2);
IkReal x6199=(cj5*r20);
IkReal x6200=((1.0)*x6194);
IkReal x6201=((1.0)*cj1*cj2);
IkReal x6202=((1.0)*x6193);
IkReal x6203=(sj5*x6193);
IkReal x6204=(sj5*x6194);
evalcond[0]=((((-1.0)*x6199*x6202))+(((-1.0)*r22*x6200))+((x6193*x6197)));
evalcond[1]=(cj0+(((-1.0)*x6196*x6202))+(((-1.0)*r12*x6200))+((r11*x6203)));
evalcond[2]=((((-1.0)*sj0))+((r01*x6203))+(((-1.0)*x6195*x6202))+(((-1.0)*r02*x6200)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6199*x6200))+((x6194*x6197))+((cj1*sj2))+((r22*x6193)));
evalcond[4]=(((r01*x6204))+((r02*x6193))+(((-1.0)*x6195*x6200))+(((-1.0)*cj0*x6201))+((cj0*x6198)));
evalcond[5]=((((-1.0)*x6196*x6200))+((r12*x6193))+((sj0*x6198))+((r11*x6204))+(((-1.0)*sj0*x6201)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6205=r21*r21;
IkReal x6206=cj5*cj5;
IkReal x6207=(cj2*sj1);
IkReal x6208=(cj1*sj2);
IkReal x6209=(r21*sj5);
IkReal x6210=((1.0)*cj5*r20);
CheckValue<IkReal> x6211=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6206*(r20*r20)))+(((-1.0)*x6205))+(((-1.0)*(r22*r22)))+(((2.0)*cj5*r20*x6209))+((x6205*x6206)))),-1);
if(!x6211.valid){
continue;
}
CheckValue<IkReal> x6212 = IKatan2WithCheck(IkReal((((r22*x6207))+((r22*x6208)))),IkReal((((x6207*x6209))+(((-1.0)*x6208*x6210))+(((-1.0)*x6207*x6210))+((x6208*x6209)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6212.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6211.value)))+(x6212.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x6213=IKsin(j4);
IkReal x6214=IKcos(j4);
IkReal x6215=(r21*sj5);
IkReal x6216=(cj5*r20);
IkReal x6217=((1.0)*x6214);
evalcond[0]=(((x6213*x6215))+(((-1.0)*x6213*x6216))+(((-1.0)*r22*x6217)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6216*x6217))+((r22*x6213))+((x6214*x6215)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6218=(cj5*sj4);
IkReal x6219=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x6219))+(((-1.0)*r00*x6218)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x6218))+(((-1.0)*r11*x6219))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x6219))+(((-1.0)*r00*x6218))))+IKsqr((((r10*x6218))+(((-1.0)*r11*x6219))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x6219))+(((-1.0)*r00*x6218))), (((r10*x6218))+(((-1.0)*r11*x6219))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x6220=IKcos(j0);
IkReal x6221=IKsin(j0);
IkReal x6222=(cj5*r01);
IkReal x6223=((0.213)*sj1);
IkReal x6224=((1.0)*cj1);
IkReal x6225=(r11*sj5);
IkReal x6226=((1.0)*sj1);
IkReal x6227=((0.244)*cj1);
IkReal x6228=((0.085)*sj5);
IkReal x6229=(cj5*r11);
IkReal x6230=((1.0)*cj4);
IkReal x6231=(r01*sj5);
IkReal x6232=(sj2*x6220);
IkReal x6233=(cj5*x6230);
IkReal x6234=(sj2*x6221);
IkReal x6235=((0.213)*cj1*cj2);
IkReal x6236=(cj2*x6220);
IkReal x6237=((1.0)*cj5*sj4);
IkReal x6238=(cj2*x6221);
evalcond[0]=((((-1.0)*r12*x6230))+x6220+(((-1.0)*r10*x6237))+((sj4*x6225)));
evalcond[1]=(((sj4*x6231))+(((-1.0)*x6221))+(((-1.0)*r00*x6237))+(((-1.0)*r02*x6230)));
evalcond[2]=(((r00*sj5))+(((-1.0)*x6224*x6232))+x6222+(((-1.0)*x6226*x6236)));
evalcond[3]=((((-1.0)*x6224*x6234))+x6229+((r10*sj5))+(((-1.0)*x6226*x6238)));
evalcond[4]=((((-1.0)*x6224*x6236))+((sj1*x6232))+((r02*sj4))+(((-1.0)*r00*x6233))+((cj4*x6231)));
evalcond[5]=((((-1.0)*x6224*x6238))+(((-1.0)*r10*x6233))+((sj1*x6234))+((r12*sj4))+((cj4*x6225)));
evalcond[6]=((((-0.131)*x6221))+(((-1.0)*r00*x6228))+(((-1.0)*px))+((x6220*x6235))+((x6220*x6227))+(((-0.085)*x6222))+(((-1.0)*x6223*x6232)));
evalcond[7]=((((-1.0)*py))+((x6221*x6235))+((x6221*x6227))+(((-1.0)*r10*x6228))+(((-0.085)*x6229))+(((-1.0)*x6223*x6234))+(((0.131)*x6220)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6239=((1.0)*cj5);
IkReal x6240=((1.0)*sj5);
CheckValue<IkReal> x6241 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x6239))+(((-1.0)*r10*x6240)))),IkReal(((((-1.0)*r00*x6240))+(((-1.0)*r01*x6239)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6241.valid){
continue;
}
CheckValue<IkReal> x6242=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))),-1);
if(!x6242.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x6241.value)+(((1.5707963267949)*(x6242.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x6243=IKcos(j0);
IkReal x6244=IKsin(j0);
IkReal x6245=(cj5*r01);
IkReal x6246=((0.213)*sj1);
IkReal x6247=((1.0)*cj1);
IkReal x6248=((0.085)*sj5);
IkReal x6249=((0.213)*cj1);
IkReal x6250=((1.0)*sj1);
IkReal x6251=((0.244)*cj1);
IkReal x6252=(cj5*r11);
IkReal x6253=(sj2*x6243);
IkReal x6254=(sj2*x6244);
IkReal x6255=(cj2*x6243);
IkReal x6256=(cj2*x6244);
evalcond[0]=((((-1.0)*x6250*x6255))+((r00*sj5))+x6245+(((-1.0)*x6247*x6253)));
evalcond[1]=((((-1.0)*x6250*x6256))+x6252+(((-1.0)*x6247*x6254))+((r10*sj5)));
evalcond[2]=((((-1.0)*x6246*x6253))+((x6243*x6251))+(((-0.085)*x6245))+((x6249*x6255))+(((-1.0)*r00*x6248))+(((-0.131)*x6244))+(((-1.0)*px)));
evalcond[3]=((((-1.0)*x6246*x6254))+(((0.131)*x6243))+((x6244*x6251))+(((-1.0)*r10*x6248))+((x6249*x6256))+(((-1.0)*py))+(((-0.085)*x6252)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x6257=((1.0)*cj5);
IkReal x6258=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6257)));
j4eval[0]=x6258;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x6257))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x6258);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x6259=((1.0)*cj5);
IkReal x6260=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6259)));
j4eval[0]=x6260;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x6259))))));
j4eval[2]=IKsign(x6260);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x6261=((1.0)*sj0);
IkReal x6262=((1.0)*cj0);
IkReal x6263=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x6263;
j4eval[1]=((IKabs(((((-1.0)*r02*x6262))+(((-1.0)*r12*x6261)))))+(IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x6261))+(((-1.0)*r01*sj5*x6262))))));
j4eval[2]=IKsign(x6263);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x6264=((-1.0)*r20);
IkReal x6266 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6266)==0){
continue;
}
IkReal x6265=pow(x6266,-0.5);
CheckValue<IkReal> x6267 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6264),IKFAST_ATAN2_MAGTHRESH);
if(!x6267.valid){
continue;
}
IkReal gconst114=((-1.0)*(x6267.value));
IkReal gconst115=(r21*x6265);
IkReal gconst116=(x6264*x6265);
CheckValue<IkReal> x6268 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6268.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6268.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6269=((-1.0)*r20);
IkReal x6270=x6265;
CheckValue<IkReal> x6272 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6269),IKFAST_ATAN2_MAGTHRESH);
if(!x6272.valid){
continue;
}
IkReal x6271=((-1.0)*(x6272.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x6271;
IkReal gconst114=x6271;
IkReal gconst115=(r21*x6270);
IkReal gconst116=(x6269*x6270);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6273=((-1.0)*r20);
IkReal x6274=x6265;
CheckValue<IkReal> x6276 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6273),IKFAST_ATAN2_MAGTHRESH);
if(!x6276.valid){
continue;
}
IkReal x6275=((-1.0)*(x6276.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x6275;
IkReal gconst114=x6275;
IkReal gconst115=(r21*x6274);
IkReal gconst116=(x6273*x6274);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x6277=((-1.0)*r20);
IkReal x6278=x6265;
CheckValue<IkReal> x6280 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6277),IKFAST_ATAN2_MAGTHRESH);
if(!x6280.valid){
continue;
}
IkReal x6279=((-1.0)*(x6280.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x6279;
IkReal gconst114=x6279;
IkReal gconst115=(r21*x6278);
IkReal gconst116=(x6277*x6278);
IkReal x6281=((1.0)*(r22*r22));
CheckValue<IkReal> x6285=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x6281))),-1);
if(!x6285.valid){
continue;
}
IkReal x6282=x6285.value;
IkReal x6283=((1.0)*x6282);
IkReal x6284=((((-1.0)*x6283*(r20*r20*r20*r20)))+(((-2.0)*x6282*(r20*r20)*(r21*r21)))+(((-1.0)*x6281))+(((-1.0)*x6283*(r21*r21*r21*r21))));
j4eval[0]=x6284;
j4eval[1]=IKsign(x6284);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6286=(cj2*sj1);
IkReal x6287=(gconst115*r21);
IkReal x6288=(cj1*sj2);
IkReal x6289=((1.0)*gconst116*r20);
CheckValue<IkReal> x6290 = IKatan2WithCheck(IkReal((((r22*x6288))+((r22*x6286)))),IkReal(((((-1.0)*x6288*x6289))+((x6286*x6287))+(((-1.0)*x6286*x6289))+((x6287*x6288)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6290.valid){
continue;
}
CheckValue<IkReal> x6291=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst116*r20*x6289))+(((2.0)*gconst116*r20*x6287))+(((-1.0)*(x6287*x6287)))+(((-1.0)*(r22*r22))))),-1);
if(!x6291.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6290.value)+(((1.5707963267949)*(x6291.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6292=IKsin(j4);
IkReal x6293=IKcos(j4);
IkReal x6294=(sj1*sj2);
IkReal x6295=((1.0)*x6293);
IkReal x6296=((1.0)*cj1*cj2);
IkReal x6297=(gconst115*x6292);
IkReal x6298=(gconst115*x6293);
IkReal x6299=((1.0)*gconst116*x6292);
evalcond[0]=((((-1.0)*r20*x6299))+(((-1.0)*r22*x6295))+((r21*x6297)));
evalcond[1]=(cj0+((r11*x6297))+(((-1.0)*r10*x6299))+(((-1.0)*r12*x6295)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x6299))+((r01*x6297))+(((-1.0)*r02*x6295)));
evalcond[3]=(((cj2*sj1))+((r22*x6292))+((cj1*sj2))+(((-1.0)*gconst116*r20*x6295))+((r21*x6298)));
evalcond[4]=(((r01*x6298))+(((-1.0)*gconst116*r00*x6295))+((cj0*x6294))+((r02*x6292))+(((-1.0)*cj0*x6296)));
evalcond[5]=(((r11*x6298))+((r12*x6292))+(((-1.0)*gconst116*r10*x6295))+((sj0*x6294))+(((-1.0)*sj0*x6296)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6300=((1.0)*gconst116);
CheckValue<IkReal> x6301 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst115*r21*sj0))+(((-1.0)*r20*sj0*x6300)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6301.valid){
continue;
}
CheckValue<IkReal> x6302=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6300))+(((-1.0)*gconst115*r10)))),-1);
if(!x6302.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6301.value)+(((1.5707963267949)*(x6302.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6303=IKsin(j4);
IkReal x6304=IKcos(j4);
IkReal x6305=(sj1*sj2);
IkReal x6306=((1.0)*x6304);
IkReal x6307=((1.0)*cj1*cj2);
IkReal x6308=(gconst115*x6303);
IkReal x6309=(gconst115*x6304);
IkReal x6310=((1.0)*gconst116*x6303);
evalcond[0]=(((r21*x6308))+(((-1.0)*r20*x6310))+(((-1.0)*r22*x6306)));
evalcond[1]=(cj0+(((-1.0)*r12*x6306))+(((-1.0)*r10*x6310))+((r11*x6308)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6306))+((r01*x6308))+(((-1.0)*r00*x6310)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x6303))+((r21*x6309))+(((-1.0)*gconst116*r20*x6306)));
evalcond[4]=(((r01*x6309))+((r02*x6303))+((cj0*x6305))+(((-1.0)*gconst116*r00*x6306))+(((-1.0)*cj0*x6307)));
evalcond[5]=(((r11*x6309))+(((-1.0)*sj0*x6307))+((r12*x6303))+(((-1.0)*gconst116*r10*x6306))+((sj0*x6305)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6311=((1.0)*gconst116);
CheckValue<IkReal> x6312=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst115*r00))+(((-1.0)*r01*x6311)))),-1);
if(!x6312.valid){
continue;
}
CheckValue<IkReal> x6313 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst115*r21))+(((-1.0)*cj0*r20*x6311)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6313.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6312.value)))+(x6313.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6314=IKsin(j4);
IkReal x6315=IKcos(j4);
IkReal x6316=(sj1*sj2);
IkReal x6317=((1.0)*x6315);
IkReal x6318=((1.0)*cj1*cj2);
IkReal x6319=(gconst115*x6314);
IkReal x6320=(gconst115*x6315);
IkReal x6321=((1.0)*gconst116*x6314);
evalcond[0]=((((-1.0)*r22*x6317))+(((-1.0)*r20*x6321))+((r21*x6319)));
evalcond[1]=(cj0+(((-1.0)*r12*x6317))+((r11*x6319))+(((-1.0)*r10*x6321)));
evalcond[2]=((((-1.0)*r00*x6321))+(((-1.0)*sj0))+(((-1.0)*r02*x6317))+((r01*x6319)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x6314))+(((-1.0)*gconst116*r20*x6317))+((r21*x6320)));
evalcond[4]=(((r02*x6314))+((cj0*x6316))+((r01*x6320))+(((-1.0)*gconst116*r00*x6317))+(((-1.0)*cj0*x6318)));
evalcond[5]=(((r11*x6320))+(((-1.0)*sj0*x6318))+(((-1.0)*gconst116*r10*x6317))+((r12*x6314))+((sj0*x6316)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6322=((-1.0)*r21);
IkReal x6324 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6324)==0){
continue;
}
IkReal x6323=pow(x6324,-0.5);
CheckValue<IkReal> x6325 = IKatan2WithCheck(IkReal(x6322),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6325.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x6325.value))));
IkReal gconst118=(x6322*x6323);
IkReal gconst119=((1.0)*r20*x6323);
CheckValue<IkReal> x6326 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6326.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6326.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6327=((-1.0)*r21);
CheckValue<IkReal> x6330 = IKatan2WithCheck(IkReal(x6327),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6330.valid){
continue;
}
IkReal x6328=((1.0)*(x6330.value));
IkReal x6329=x6323;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6328)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6328)));
IkReal gconst118=(x6327*x6329);
IkReal gconst119=((1.0)*r20*x6329);
IkReal x6331=r22*r22;
IkReal x6332=((1.0)*x6331);
CheckValue<IkReal> x6336=IKPowWithIntegerCheck(((-1.0)+x6331),-1);
if(!x6336.valid){
continue;
}
IkReal x6333=x6336.value;
if((((1.0)+(((-1.0)*x6332)))) < -0.00001)
continue;
IkReal x6334=IKsqrt(((1.0)+(((-1.0)*x6332))));
IkReal x6335=(cj0*x6333*x6334);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs((x6335+(((-1.0)*x6332*x6335))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6337=((-1.0)*r21);
CheckValue<IkReal> x6340 = IKatan2WithCheck(IkReal(x6337),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6340.valid){
continue;
}
IkReal x6338=((1.0)*(x6340.value));
IkReal x6339=x6323;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6338)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6338)));
IkReal gconst118=(x6337*x6339);
IkReal gconst119=((1.0)*r20*x6339);
IkReal x6341=r22*r22;
IkReal x6342=((1.0)*x6341);
CheckValue<IkReal> x6346=IKPowWithIntegerCheck(((-1.0)+x6341),-1);
if(!x6346.valid){
continue;
}
IkReal x6343=x6346.value;
if((((1.0)+(((-1.0)*x6342)))) < -0.00001)
continue;
IkReal x6344=IKsqrt(((1.0)+(((-1.0)*x6342))));
IkReal x6345=(sj0*x6343*x6344);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x6345+(((-1.0)*x6342*x6345))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6347=((-1.0)*r21);
CheckValue<IkReal> x6350 = IKatan2WithCheck(IkReal(x6347),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6350.valid){
continue;
}
IkReal x6348=((1.0)*(x6350.value));
IkReal x6349=x6323;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6348)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6348)));
IkReal gconst118=(x6347*x6349);
IkReal gconst119=((1.0)*r20*x6349);
IkReal x6351=r22*r22;
IkReal x6352=(r12*sj0);
IkReal x6353=(cj0*r02);
CheckValue<IkReal> x6357=IKPowWithIntegerCheck(((-1.0)+x6351),-1);
if(!x6357.valid){
continue;
}
IkReal x6354=x6357.value;
if((((1.0)+(((-1.0)*x6351)))) < -0.00001)
continue;
IkReal x6355=IKsqrt(((1.0)+(((-1.0)*x6351))));
IkReal x6356=(r22*x6354*x6355);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x6353))+(((-1.0)*x6352)))))+(IKabs((((x6353*x6356))+((x6352*x6356))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6358=((1.0)*sj0);
IkReal x6359=((1.0)*gconst118);
CheckValue<IkReal> x6360 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x6358)))),IkReal((((gconst119*r10*sj0))+(((-1.0)*gconst118*r11*x6358))+(((-1.0)*cj0*r01*x6359))+((cj0*gconst119*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6360.valid){
continue;
}
CheckValue<IkReal> x6361=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst119*r21))+(((-1.0)*r20*x6359)))),-1);
if(!x6361.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6360.value)+(((1.5707963267949)*(x6361.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6362=IKsin(j4);
IkReal x6363=IKcos(j4);
IkReal x6364=(gconst118*r01);
IkReal x6365=(sj1*sj2);
IkReal x6366=(gconst119*r20);
IkReal x6367=(gconst119*r10);
IkReal x6368=(gconst119*r00);
IkReal x6369=(gconst118*r21);
IkReal x6370=(gconst118*r11);
IkReal x6371=((1.0)*x6363);
IkReal x6372=((1.0)*cj1*cj2);
IkReal x6373=((1.0)*x6362);
evalcond[0]=((((-1.0)*x6366*x6373))+((x6362*x6369))+(((-1.0)*r22*x6371)));
evalcond[1]=(cj0+((x6362*x6370))+(((-1.0)*x6367*x6373))+(((-1.0)*r12*x6371)));
evalcond[2]=((((-1.0)*x6368*x6373))+(((-1.0)*sj0))+((x6362*x6364))+(((-1.0)*r02*x6371)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6366*x6371))+((cj1*sj2))+((x6363*x6369))+((r22*x6362)));
evalcond[4]=((((-1.0)*x6368*x6371))+((x6363*x6364))+((cj0*x6365))+((r02*x6362))+(((-1.0)*cj0*x6372)));
evalcond[5]=((((-1.0)*sj0*x6372))+((r12*x6362))+((sj0*x6365))+(((-1.0)*x6367*x6371))+((x6363*x6370)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6374=((1.0)*gconst119);
CheckValue<IkReal> x6375=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r10))+(((-1.0)*r11*x6374)))),-1);
if(!x6375.valid){
continue;
}
CheckValue<IkReal> x6376 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6374))+((gconst118*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6376.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6375.value)))+(x6376.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6377=IKsin(j4);
IkReal x6378=IKcos(j4);
IkReal x6379=(gconst118*r01);
IkReal x6380=(sj1*sj2);
IkReal x6381=(gconst119*r20);
IkReal x6382=(gconst119*r10);
IkReal x6383=(gconst119*r00);
IkReal x6384=(gconst118*r21);
IkReal x6385=(gconst118*r11);
IkReal x6386=((1.0)*x6378);
IkReal x6387=((1.0)*cj1*cj2);
IkReal x6388=((1.0)*x6377);
evalcond[0]=((((-1.0)*x6381*x6388))+(((-1.0)*r22*x6386))+((x6377*x6384)));
evalcond[1]=(cj0+(((-1.0)*r12*x6386))+(((-1.0)*x6382*x6388))+((x6377*x6385)));
evalcond[2]=(((x6377*x6379))+(((-1.0)*sj0))+(((-1.0)*x6383*x6388))+(((-1.0)*r02*x6386)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6381*x6386))+((cj1*sj2))+((x6378*x6384))+((r22*x6377)));
evalcond[4]=(((x6378*x6379))+(((-1.0)*x6383*x6386))+((cj0*x6380))+(((-1.0)*cj0*x6387))+((r02*x6377)));
evalcond[5]=(((sj0*x6380))+(((-1.0)*x6382*x6386))+((r12*x6377))+((x6378*x6385))+(((-1.0)*sj0*x6387)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6389=((1.0)*gconst119);
CheckValue<IkReal> x6390=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r00))+(((-1.0)*r01*x6389)))),-1);
if(!x6390.valid){
continue;
}
CheckValue<IkReal> x6391 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst118*r21))+(((-1.0)*cj0*r20*x6389)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6391.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6390.value)))+(x6391.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6392=IKsin(j4);
IkReal x6393=IKcos(j4);
IkReal x6394=(gconst118*r01);
IkReal x6395=(sj1*sj2);
IkReal x6396=(gconst119*r20);
IkReal x6397=(gconst119*r10);
IkReal x6398=(gconst119*r00);
IkReal x6399=(gconst118*r21);
IkReal x6400=(gconst118*r11);
IkReal x6401=((1.0)*x6393);
IkReal x6402=((1.0)*cj1*cj2);
IkReal x6403=((1.0)*x6392);
evalcond[0]=(((x6392*x6399))+(((-1.0)*x6396*x6403))+(((-1.0)*r22*x6401)));
evalcond[1]=(cj0+((x6392*x6400))+(((-1.0)*r12*x6401))+(((-1.0)*x6397*x6403)));
evalcond[2]=(((x6392*x6394))+(((-1.0)*sj0))+(((-1.0)*r02*x6401))+(((-1.0)*x6398*x6403)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6396*x6401))+((cj1*sj2))+((x6393*x6399))+((r22*x6392)));
evalcond[4]=(((cj0*x6395))+((x6393*x6394))+(((-1.0)*cj0*x6402))+(((-1.0)*x6398*x6401))+((r02*x6392)));
evalcond[5]=(((x6393*x6400))+((r12*x6392))+((sj0*x6395))+(((-1.0)*sj0*x6402))+(((-1.0)*x6397*x6401)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6404=((-1.0)*r10);
IkReal x6406 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6406)==0){
continue;
}
IkReal x6405=pow(x6406,-0.5);
CheckValue<IkReal> x6407 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x6404),IKFAST_ATAN2_MAGTHRESH);
if(!x6407.valid){
continue;
}
IkReal gconst120=((-1.0)*(x6407.value));
IkReal gconst121=(r11*x6405);
IkReal gconst122=(x6404*x6405);
CheckValue<IkReal> x6408 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6408.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6408.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6409=((-1.0)*r10);
IkReal x6410=x6405;
CheckValue<IkReal> x6412 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x6409),IKFAST_ATAN2_MAGTHRESH);
if(!x6412.valid){
continue;
}
IkReal x6411=((-1.0)*(x6412.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst121;
cj5=gconst122;
j5=x6411;
IkReal gconst120=x6411;
IkReal gconst121=(r11*x6410);
IkReal gconst122=(x6409*x6410);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6413=((1.0)*sj0);
IkReal x6414=((1.0)*gconst121);
CheckValue<IkReal> x6415 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x6413)))),IkReal(((((-1.0)*cj0*r01*x6414))+((cj0*gconst122*r00))+(((-1.0)*gconst121*r11*x6413))+((gconst122*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6415.valid){
continue;
}
CheckValue<IkReal> x6416=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x6414))+(((-1.0)*gconst122*r21)))),-1);
if(!x6416.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6415.value)+(((1.5707963267949)*(x6416.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6417=IKsin(j4);
IkReal x6418=IKcos(j4);
IkReal x6419=(gconst121*r11);
IkReal x6420=(sj1*sj2);
IkReal x6421=(gconst122*r00);
IkReal x6422=(gconst122*r10);
IkReal x6423=(gconst122*r20);
IkReal x6424=((1.0)*x6418);
IkReal x6425=((1.0)*cj1*cj2);
IkReal x6426=((1.0)*x6417);
IkReal x6427=(gconst121*x6417);
IkReal x6428=(gconst121*x6418);
evalcond[0]=(((r21*x6427))+(((-1.0)*r22*x6424))+(((-1.0)*x6423*x6426)));
evalcond[1]=((((-1.0)*x6422*x6426))+cj0+((x6417*x6419))+(((-1.0)*r12*x6424)));
evalcond[2]=((((-1.0)*x6421*x6426))+(((-1.0)*sj0))+((r01*x6427))+(((-1.0)*r02*x6424)));
evalcond[3]=(((r21*x6428))+((cj2*sj1))+((cj1*sj2))+((r22*x6417))+(((-1.0)*x6423*x6424)));
evalcond[4]=(((r02*x6417))+(((-1.0)*x6421*x6424))+(((-1.0)*cj0*x6425))+((r01*x6428))+((cj0*x6420)));
evalcond[5]=((((-1.0)*x6422*x6424))+(((-1.0)*sj0*x6425))+((r12*x6417))+((x6418*x6419))+((sj0*x6420)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6429=((1.0)*gconst122);
CheckValue<IkReal> x6430 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6429))+((cj0*gconst121*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6430.valid){
continue;
}
CheckValue<IkReal> x6431=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst121*r00))+(((-1.0)*r01*x6429)))),-1);
if(!x6431.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6430.value)+(((1.5707963267949)*(x6431.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6432=IKsin(j4);
IkReal x6433=IKcos(j4);
IkReal x6434=(gconst121*r11);
IkReal x6435=(sj1*sj2);
IkReal x6436=(gconst122*r00);
IkReal x6437=(gconst122*r10);
IkReal x6438=(gconst122*r20);
IkReal x6439=((1.0)*x6433);
IkReal x6440=((1.0)*cj1*cj2);
IkReal x6441=((1.0)*x6432);
IkReal x6442=(gconst121*x6432);
IkReal x6443=(gconst121*x6433);
evalcond[0]=((((-1.0)*x6438*x6441))+(((-1.0)*r22*x6439))+((r21*x6442)));
evalcond[1]=(cj0+(((-1.0)*r12*x6439))+((x6432*x6434))+(((-1.0)*x6437*x6441)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6439))+(((-1.0)*x6436*x6441))+((r01*x6442)));
evalcond[3]=(((r22*x6432))+((cj2*sj1))+(((-1.0)*x6438*x6439))+((cj1*sj2))+((r21*x6443)));
evalcond[4]=(((r01*x6443))+((cj0*x6435))+((r02*x6432))+(((-1.0)*cj0*x6440))+(((-1.0)*x6436*x6439)));
evalcond[5]=((((-1.0)*sj0*x6440))+((r12*x6432))+((x6433*x6434))+(((-1.0)*x6437*x6439))+((sj0*x6435)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6444=((-1.0)*r11);
IkReal x6446 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6446)==0){
continue;
}
IkReal x6445=pow(x6446,-0.5);
CheckValue<IkReal> x6447 = IKatan2WithCheck(IkReal(x6444),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6447.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x6447.value))));
IkReal gconst124=(x6444*x6445);
IkReal gconst125=((1.0)*r10*x6445);
CheckValue<IkReal> x6448 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6448.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6448.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6449=((-1.0)*r11);
CheckValue<IkReal> x6452 = IKatan2WithCheck(IkReal(x6449),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6452.valid){
continue;
}
IkReal x6450=((1.0)*(x6452.value));
IkReal x6451=x6445;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6450)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6450)));
IkReal gconst124=(x6449*x6451);
IkReal gconst125=((1.0)*r10*x6451);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6453=((-1.0)*r11);
CheckValue<IkReal> x6456 = IKatan2WithCheck(IkReal(x6453),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6456.valid){
continue;
}
IkReal x6454=((1.0)*(x6456.value));
IkReal x6455=x6445;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6454)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6454)));
IkReal gconst124=(x6453*x6455);
IkReal gconst125=((1.0)*r10*x6455);
IkReal x6457=r12*r12;
IkReal x6458=((1.0)*sj0);
IkReal x6459=(cj0*r02);
IkReal x6460=x6445;
j4eval[0]=((IKabs(((((-1.0)*x6459))+(((-1.0)*r12*x6458)))))+(IKabs(((((-1.0)*x6458*x6460))+((sj0*x6457*x6460))+((r12*x6459*x6460))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6461=((-1.0)*r11);
CheckValue<IkReal> x6464 = IKatan2WithCheck(IkReal(x6461),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6464.valid){
continue;
}
IkReal x6462=((1.0)*(x6464.value));
IkReal x6463=x6445;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6462)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6462)));
IkReal gconst124=(x6461*x6463);
IkReal gconst125=((1.0)*r10*x6463);
IkReal x6465=r12*r12;
IkReal x6466=((1.0)+(((-1.0)*x6465)));
IkReal x6467=(cj2*r22*sj1);
IkReal x6468=(cj1*r22*sj2);
CheckValue<IkReal> x6475=IKPowWithIntegerCheck(x6466,-1);
if(!x6475.valid){
continue;
}
IkReal x6469=x6475.value;
CheckValue<IkReal> x6476=IKPowWithIntegerCheck(((-1.0)+x6465),-1);
if(!x6476.valid){
continue;
}
IkReal x6470=x6476.value;
IkReal x6471=((1.0)*x6469);
if((x6466) < -0.00001)
continue;
IkReal x6472=IKsqrt(x6466);
IkReal x6473=((1.0)*r12*x6470*x6472);
IkReal x6474=((((-1.0)*x6471*(r11*r11)*(r21*r21)))+(((-1.0)*x6471*(r10*r10)*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-2.0)*r10*r11*r20*r21*x6469)));
j4eval[0]=x6474;
j4eval[1]=IKsign(x6474);
j4eval[2]=((IKabs(((((-1.0)*x6467*x6473))+(((-1.0)*x6468*x6473)))))+(IKabs((x6468+x6467))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6477=(gconst124*r21);
IkReal x6478=(cj1*sj2);
IkReal x6479=(cj2*sj1);
IkReal x6480=(gconst125*r20);
CheckValue<IkReal> x6481 = IKatan2WithCheck(IkReal((((r22*x6479))+((r22*x6478)))),IkReal(((((-1.0)*x6478*x6480))+(((-1.0)*x6479*x6480))+((x6477*x6478))+((x6477*x6479)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6481.valid){
continue;
}
CheckValue<IkReal> x6482=IKPowWithIntegerCheck(IKsign(((((2.0)*x6477*x6480))+(((-1.0)*(r22*r22)))+(((-1.0)*(x6480*x6480)))+(((-1.0)*(x6477*x6477))))),-1);
if(!x6482.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6481.value)+(((1.5707963267949)*(x6482.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6483=IKsin(j4);
IkReal x6484=IKcos(j4);
IkReal x6485=(sj1*sj2);
IkReal x6486=(gconst125*r20);
IkReal x6487=(gconst124*r01);
IkReal x6488=(gconst125*r00);
IkReal x6489=(gconst125*r10);
IkReal x6490=((1.0)*x6484);
IkReal x6491=((1.0)*cj1*cj2);
IkReal x6492=((1.0)*x6483);
IkReal x6493=(gconst124*x6483);
IkReal x6494=(gconst124*x6484);
evalcond[0]=((((-1.0)*r22*x6490))+(((-1.0)*x6486*x6492))+((r21*x6493)));
evalcond[1]=(cj0+((r11*x6493))+(((-1.0)*x6489*x6492))+(((-1.0)*r12*x6490)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6488*x6492))+(((-1.0)*r02*x6490))+((x6483*x6487)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6486*x6490))+((cj1*sj2))+((r22*x6483))+((r21*x6494)));
evalcond[4]=((((-1.0)*x6488*x6490))+((cj0*x6485))+((r02*x6483))+(((-1.0)*cj0*x6491))+((x6484*x6487)));
evalcond[5]=(((r11*x6494))+(((-1.0)*x6489*x6490))+(((-1.0)*sj0*x6491))+((r12*x6483))+((sj0*x6485)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6495=((1.0)*sj0);
IkReal x6496=((1.0)*cj0);
CheckValue<IkReal> x6497=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r20))+(((-1.0)*gconst125*r21)))),-1);
if(!x6497.valid){
continue;
}
CheckValue<IkReal> x6498 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x6496))+(((-1.0)*r12*x6495)))),IkReal((((gconst125*r10*sj0))+(((-1.0)*gconst124*r11*x6495))+(((-1.0)*gconst124*r01*x6496))+((cj0*gconst125*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6498.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6497.value)))+(x6498.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6499=IKsin(j4);
IkReal x6500=IKcos(j4);
IkReal x6501=(sj1*sj2);
IkReal x6502=(gconst125*r20);
IkReal x6503=(gconst124*r01);
IkReal x6504=(gconst125*r00);
IkReal x6505=(gconst125*r10);
IkReal x6506=((1.0)*x6500);
IkReal x6507=((1.0)*cj1*cj2);
IkReal x6508=((1.0)*x6499);
IkReal x6509=(gconst124*x6499);
IkReal x6510=(gconst124*x6500);
evalcond[0]=(((r21*x6509))+(((-1.0)*r22*x6506))+(((-1.0)*x6502*x6508)));
evalcond[1]=((((-1.0)*r12*x6506))+cj0+((r11*x6509))+(((-1.0)*x6505*x6508)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6506))+((x6499*x6503))+(((-1.0)*x6504*x6508)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6502*x6506))+((r21*x6510))+((r22*x6499)));
evalcond[4]=(((x6500*x6503))+((r02*x6499))+(((-1.0)*cj0*x6507))+((cj0*x6501))+(((-1.0)*x6504*x6506)));
evalcond[5]=(((sj0*x6501))+((r11*x6510))+((r12*x6499))+(((-1.0)*sj0*x6507))+(((-1.0)*x6505*x6506)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6511=((1.0)*gconst125);
CheckValue<IkReal> x6512 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6511))+((cj0*gconst124*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6512.valid){
continue;
}
CheckValue<IkReal> x6513=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r00))+(((-1.0)*r01*x6511)))),-1);
if(!x6513.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6512.value)+(((1.5707963267949)*(x6513.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6514=IKsin(j4);
IkReal x6515=IKcos(j4);
IkReal x6516=(sj1*sj2);
IkReal x6517=(gconst125*r20);
IkReal x6518=(gconst124*r01);
IkReal x6519=(gconst125*r00);
IkReal x6520=(gconst125*r10);
IkReal x6521=((1.0)*x6515);
IkReal x6522=((1.0)*cj1*cj2);
IkReal x6523=((1.0)*x6514);
IkReal x6524=(gconst124*x6514);
IkReal x6525=(gconst124*x6515);
evalcond[0]=((((-1.0)*r22*x6521))+(((-1.0)*x6517*x6523))+((r21*x6524)));
evalcond[1]=(cj0+(((-1.0)*r12*x6521))+(((-1.0)*x6520*x6523))+((r11*x6524)));
evalcond[2]=(((x6514*x6518))+(((-1.0)*sj0))+(((-1.0)*x6519*x6523))+(((-1.0)*r02*x6521)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6517*x6521))+((r21*x6525))+((r22*x6514)));
evalcond[4]=(((x6515*x6518))+((cj0*x6516))+(((-1.0)*x6519*x6521))+(((-1.0)*cj0*x6522))+((r02*x6514)));
evalcond[5]=(((r12*x6514))+(((-1.0)*x6520*x6521))+((sj0*x6516))+((r11*x6525))+(((-1.0)*sj0*x6522)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6526=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6526;
j4eval[1]=IKsign(x6526);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6527=((1.0)*cj5);
IkReal x6528=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6527)));
j4eval[0]=x6528;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x6527)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6528);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6529=cj5*cj5;
IkReal x6530=r11*r11;
IkReal x6531=(cj5*r10);
IkReal x6532=(r11*sj5);
IkReal x6533=((((2.0)*x6531*x6532))+(((-1.0)*x6530))+(((-1.0)*(r12*r12)))+((x6529*x6530))+(((-1.0)*x6529*(r10*r10))));
j4eval[0]=x6533;
j4eval[1]=IKsign(x6533);
j4eval[2]=((IKabs(r12))+(IKabs((x6532+(((-1.0)*x6531))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6534=cj5*cj5;
IkReal x6535=r11*r11;
IkReal x6536=(cj5*r10);
IkReal x6537=(r11*sj5);
CheckValue<IkReal> x6538 = IKatan2WithCheck(IkReal((x6537+(((-1.0)*x6536)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6538.valid){
continue;
}
CheckValue<IkReal> x6539=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6535))+(((-1.0)*x6534*(r10*r10)))+(((-1.0)*(r12*r12)))+((x6534*x6535))+(((2.0)*x6536*x6537)))),-1);
if(!x6539.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6538.value)+(((1.5707963267949)*(x6539.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6540=IKcos(j4);
IkReal x6541=IKsin(j4);
IkReal x6542=(cj5*r00);
IkReal x6543=(cj5*r10);
IkReal x6544=(r21*sj5);
IkReal x6545=(cj5*r20);
IkReal x6546=((1.0)*x6540);
IkReal x6547=((1.0)*x6541);
IkReal x6548=(sj5*x6541);
IkReal x6549=(sj5*x6540);
evalcond[0]=(((r11*x6549))+((r12*x6541))+(((-1.0)*x6543*x6546)));
evalcond[1]=((((-1.0)*x6545*x6547))+(((-1.0)*r22*x6546))+((x6541*x6544)));
evalcond[2]=((((-1.0)*x6542*x6547))+(((-1.0)*r02*x6546))+((r01*x6548)));
evalcond[3]=((1.0)+(((-1.0)*r12*x6546))+((r11*x6548))+(((-1.0)*x6543*x6547)));
evalcond[4]=((((-1.0)*x6545*x6546))+((cj2*sj1))+((cj1*sj2))+((x6540*x6544))+((r22*x6541)));
evalcond[5]=((((-1.0)*x6542*x6546))+((r02*x6541))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x6549)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6550=((1.0)*cj5);
CheckValue<IkReal> x6551 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x6550)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6551.valid){
continue;
}
CheckValue<IkReal> x6552=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6550)))),-1);
if(!x6552.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6551.value)+(((1.5707963267949)*(x6552.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6553=IKcos(j4);
IkReal x6554=IKsin(j4);
IkReal x6555=(cj5*r00);
IkReal x6556=(cj5*r10);
IkReal x6557=(r21*sj5);
IkReal x6558=(cj5*r20);
IkReal x6559=((1.0)*x6553);
IkReal x6560=((1.0)*x6554);
IkReal x6561=(sj5*x6554);
IkReal x6562=(sj5*x6553);
evalcond[0]=(((r11*x6562))+((r12*x6554))+(((-1.0)*x6556*x6559)));
evalcond[1]=((((-1.0)*r22*x6559))+((x6554*x6557))+(((-1.0)*x6558*x6560)));
evalcond[2]=((((-1.0)*x6555*x6560))+(((-1.0)*r02*x6559))+((r01*x6561)));
evalcond[3]=((1.0)+(((-1.0)*x6556*x6560))+((r11*x6561))+(((-1.0)*r12*x6559)));
evalcond[4]=(((cj2*sj1))+((x6553*x6557))+((cj1*sj2))+((r22*x6554))+(((-1.0)*x6558*x6559)));
evalcond[5]=((((-1.0)*x6555*x6559))+((r02*x6554))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x6562)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6563=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6563.valid){
continue;
}
CheckValue<IkReal> x6564 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6564.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6563.value)))+(x6564.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6565=IKcos(j4);
IkReal x6566=IKsin(j4);
IkReal x6567=(cj5*r00);
IkReal x6568=(cj5*r10);
IkReal x6569=(r21*sj5);
IkReal x6570=(cj5*r20);
IkReal x6571=((1.0)*x6565);
IkReal x6572=((1.0)*x6566);
IkReal x6573=(sj5*x6566);
IkReal x6574=(sj5*x6565);
evalcond[0]=(((r12*x6566))+((r11*x6574))+(((-1.0)*x6568*x6571)));
evalcond[1]=((((-1.0)*r22*x6571))+((x6566*x6569))+(((-1.0)*x6570*x6572)));
evalcond[2]=(((r01*x6573))+(((-1.0)*x6567*x6572))+(((-1.0)*r02*x6571)));
evalcond[3]=((1.0)+((r11*x6573))+(((-1.0)*r12*x6571))+(((-1.0)*x6568*x6572)));
evalcond[4]=(((cj2*sj1))+((r22*x6566))+((cj1*sj2))+((x6565*x6569))+(((-1.0)*x6570*x6571)));
evalcond[5]=(((r01*x6574))+(((-1.0)*x6567*x6571))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x6566)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6575=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6575;
j4eval[1]=IKsign(x6575);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6576=((1.0)*cj5);
IkReal x6577=((((-1.0)*r21*x6576))+(((-1.0)*r20*sj5)));
j4eval[0]=x6577;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x6576))))));
j4eval[2]=IKsign(x6577);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6578=cj5*cj5;
IkReal x6579=r11*r11;
IkReal x6580=(r11*sj5);
IkReal x6581=(cj5*r10);
IkReal x6582=((((-1.0)*x6578*x6579))+(r12*r12)+x6579+((x6578*(r10*r10)))+(((-2.0)*x6580*x6581)));
j4eval[0]=x6582;
j4eval[1]=IKsign(x6582);
j4eval[2]=((IKabs(((((-1.0)*x6581))+x6580)))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6583=cj5*cj5;
IkReal x6584=r11*r11;
IkReal x6585=(cj5*r10);
IkReal x6586=(r11*sj5);
CheckValue<IkReal> x6587 = IKatan2WithCheck(IkReal(((((-1.0)*x6585))+x6586)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6587.valid){
continue;
}
CheckValue<IkReal> x6588=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6583*x6584))+(r12*r12)+x6584+(((-2.0)*x6585*x6586))+((x6583*(r10*r10))))),-1);
if(!x6588.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6587.value)+(((1.5707963267949)*(x6588.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6589=IKcos(j4);
IkReal x6590=IKsin(j4);
IkReal x6591=(cj5*r00);
IkReal x6592=(cj5*r10);
IkReal x6593=(r21*sj5);
IkReal x6594=(cj5*r20);
IkReal x6595=((1.0)*x6589);
IkReal x6596=((1.0)*x6590);
IkReal x6597=(sj5*x6590);
IkReal x6598=(sj5*x6589);
evalcond[0]=(((r12*x6590))+((r11*x6598))+(((-1.0)*x6592*x6595)));
evalcond[1]=((((-1.0)*x6594*x6596))+((x6590*x6593))+(((-1.0)*r22*x6595)));
evalcond[2]=((((-1.0)*r02*x6595))+(((-1.0)*x6591*x6596))+((r01*x6597)));
evalcond[3]=((-1.0)+((r11*x6597))+(((-1.0)*r12*x6595))+(((-1.0)*x6592*x6596)));
evalcond[4]=(((cj2*sj1))+((r22*x6590))+((cj1*sj2))+((x6589*x6593))+(((-1.0)*x6594*x6595)));
evalcond[5]=(((r02*x6590))+(((-1.0)*sj1*sj2))+(((-1.0)*x6591*x6595))+((r01*x6598))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6599=((1.0)*cj5);
CheckValue<IkReal> x6600=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6599))+(((-1.0)*r20*sj5)))),-1);
if(!x6600.valid){
continue;
}
CheckValue<IkReal> x6601 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x6599))+((r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6601.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6600.value)))+(x6601.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6602=IKcos(j4);
IkReal x6603=IKsin(j4);
IkReal x6604=(cj5*r00);
IkReal x6605=(cj5*r10);
IkReal x6606=(r21*sj5);
IkReal x6607=(cj5*r20);
IkReal x6608=((1.0)*x6602);
IkReal x6609=((1.0)*x6603);
IkReal x6610=(sj5*x6603);
IkReal x6611=(sj5*x6602);
evalcond[0]=(((r11*x6611))+(((-1.0)*x6605*x6608))+((r12*x6603)));
evalcond[1]=((((-1.0)*r22*x6608))+(((-1.0)*x6607*x6609))+((x6603*x6606)));
evalcond[2]=(((r01*x6610))+(((-1.0)*r02*x6608))+(((-1.0)*x6604*x6609)));
evalcond[3]=((-1.0)+((r11*x6610))+(((-1.0)*r12*x6608))+(((-1.0)*x6605*x6609)));
evalcond[4]=(((cj2*sj1))+((r22*x6603))+((cj1*sj2))+(((-1.0)*x6607*x6608))+((x6602*x6606)));
evalcond[5]=(((r01*x6611))+(((-1.0)*sj1*sj2))+(((-1.0)*x6604*x6608))+((r02*x6603))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6612 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6612.valid){
continue;
}
CheckValue<IkReal> x6613=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6613.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6612.value)+(((1.5707963267949)*(x6613.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6614=IKcos(j4);
IkReal x6615=IKsin(j4);
IkReal x6616=(cj5*r00);
IkReal x6617=(cj5*r10);
IkReal x6618=(r21*sj5);
IkReal x6619=(cj5*r20);
IkReal x6620=((1.0)*x6614);
IkReal x6621=((1.0)*x6615);
IkReal x6622=(sj5*x6615);
IkReal x6623=(sj5*x6614);
evalcond[0]=((((-1.0)*x6617*x6620))+((r12*x6615))+((r11*x6623)));
evalcond[1]=((((-1.0)*x6619*x6621))+(((-1.0)*r22*x6620))+((x6615*x6618)));
evalcond[2]=(((r01*x6622))+(((-1.0)*r02*x6620))+(((-1.0)*x6616*x6621)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x6620))+(((-1.0)*x6617*x6621))+((r11*x6622)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6619*x6620))+((cj1*sj2))+((x6614*x6618))+((r22*x6615)));
evalcond[5]=(((r02*x6615))+((r01*x6623))+(((-1.0)*sj1*sj2))+(((-1.0)*x6616*x6620))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6624=((-1.0)*r00);
IkReal x6626 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6626)==0){
continue;
}
IkReal x6625=pow(x6626,-0.5);
CheckValue<IkReal> x6627 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x6624),IKFAST_ATAN2_MAGTHRESH);
if(!x6627.valid){
continue;
}
IkReal gconst126=((-1.0)*(x6627.value));
IkReal gconst127=(r01*x6625);
IkReal gconst128=(x6624*x6625);
CheckValue<IkReal> x6628 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6628.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6628.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6629=((-1.0)*r00);
IkReal x6630=x6625;
CheckValue<IkReal> x6632 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x6629),IKFAST_ATAN2_MAGTHRESH);
if(!x6632.valid){
continue;
}
IkReal x6631=((-1.0)*(x6632.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst127;
cj5=gconst128;
j5=x6631;
IkReal gconst126=x6631;
IkReal gconst127=(r01*x6630);
IkReal gconst128=(x6629*x6630);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6633=((1.0)*sj0);
IkReal x6634=((1.0)*gconst127);
CheckValue<IkReal> x6635 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x6633)))),IkReal((((gconst128*r10*sj0))+(((-1.0)*gconst127*r11*x6633))+((cj0*gconst128*r00))+(((-1.0)*cj0*r01*x6634)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6635.valid){
continue;
}
CheckValue<IkReal> x6636=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst128*r21))+(((-1.0)*r20*x6634)))),-1);
if(!x6636.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6635.value)+(((1.5707963267949)*(x6636.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6637=IKsin(j4);
IkReal x6638=IKcos(j4);
IkReal x6639=(gconst127*r01);
IkReal x6640=(sj1*sj2);
IkReal x6641=(gconst128*r10);
IkReal x6642=(gconst128*r00);
IkReal x6643=(gconst128*r20);
IkReal x6644=((1.0)*x6638);
IkReal x6645=((1.0)*cj1*cj2);
IkReal x6646=((1.0)*x6637);
IkReal x6647=(gconst127*x6638);
IkReal x6648=(gconst127*x6637);
evalcond[0]=((((-1.0)*r22*x6644))+((r21*x6648))+(((-1.0)*x6643*x6646)));
evalcond[1]=(cj0+(((-1.0)*x6641*x6646))+((r11*x6648))+(((-1.0)*r12*x6644)));
evalcond[2]=((((-1.0)*sj0))+((x6637*x6639))+(((-1.0)*x6642*x6646))+(((-1.0)*r02*x6644)));
evalcond[3]=(((cj2*sj1))+((r21*x6647))+((cj1*sj2))+((r22*x6637))+(((-1.0)*x6643*x6644)));
evalcond[4]=(((x6638*x6639))+(((-1.0)*x6642*x6644))+(((-1.0)*cj0*x6645))+((cj0*x6640))+((r02*x6637)));
evalcond[5]=((((-1.0)*x6641*x6644))+((r11*x6647))+((r12*x6637))+(((-1.0)*sj0*x6645))+((sj0*x6640)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6649=((1.0)*gconst128);
CheckValue<IkReal> x6650=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6649))+(((-1.0)*gconst127*r10)))),-1);
if(!x6650.valid){
continue;
}
CheckValue<IkReal> x6651 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst127*r21*sj0))+(((-1.0)*r20*sj0*x6649)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6651.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6650.value)))+(x6651.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6652=IKsin(j4);
IkReal x6653=IKcos(j4);
IkReal x6654=(gconst127*r01);
IkReal x6655=(sj1*sj2);
IkReal x6656=(gconst128*r10);
IkReal x6657=(gconst128*r00);
IkReal x6658=(gconst128*r20);
IkReal x6659=((1.0)*x6653);
IkReal x6660=((1.0)*cj1*cj2);
IkReal x6661=((1.0)*x6652);
IkReal x6662=(gconst127*x6653);
IkReal x6663=(gconst127*x6652);
evalcond[0]=((((-1.0)*r22*x6659))+(((-1.0)*x6658*x6661))+((r21*x6663)));
evalcond[1]=(cj0+(((-1.0)*r12*x6659))+((r11*x6663))+(((-1.0)*x6656*x6661)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6657*x6661))+((x6652*x6654))+(((-1.0)*r02*x6659)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6658*x6659))+((cj1*sj2))+((r21*x6662))+((r22*x6652)));
evalcond[4]=((((-1.0)*x6657*x6659))+((r02*x6652))+((x6653*x6654))+(((-1.0)*cj0*x6660))+((cj0*x6655)));
evalcond[5]=(((r12*x6652))+(((-1.0)*sj0*x6660))+((r11*x6662))+((sj0*x6655))+(((-1.0)*x6656*x6659)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6664=((-1.0)*r01);
IkReal x6666 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6666)==0){
continue;
}
IkReal x6665=pow(x6666,-0.5);
CheckValue<IkReal> x6667 = IKatan2WithCheck(IkReal(x6664),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6667.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x6667.value))));
IkReal gconst130=(x6664*x6665);
IkReal gconst131=((1.0)*r00*x6665);
CheckValue<IkReal> x6668 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6668.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6668.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x6669=((-1.0)*r01);
CheckValue<IkReal> x6672 = IKatan2WithCheck(IkReal(x6669),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6672.valid){
continue;
}
IkReal x6670=((1.0)*(x6672.value));
IkReal x6671=x6665;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6670)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6670)));
IkReal gconst130=(x6669*x6671);
IkReal gconst131=((1.0)*r00*x6671);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6673=((-1.0)*r01);
CheckValue<IkReal> x6676 = IKatan2WithCheck(IkReal(x6673),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6676.valid){
continue;
}
IkReal x6674=((1.0)*(x6676.value));
IkReal x6675=x6665;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6674)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6674)));
IkReal gconst130=(x6673*x6675);
IkReal gconst131=((1.0)*r00*x6675);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6677=((-1.0)*r01);
CheckValue<IkReal> x6680 = IKatan2WithCheck(IkReal(x6677),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6680.valid){
continue;
}
IkReal x6678=((1.0)*(x6680.value));
IkReal x6679=x6665;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6678)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6678)));
IkReal gconst130=(x6677*x6679);
IkReal gconst131=((1.0)*r00*x6679);
IkReal x6681=r02*r02;
IkReal x6682=(r12*sj0);
IkReal x6683=((1.0)*cj0);
IkReal x6684=x6665;
j4eval[0]=((IKabs(((((-1.0)*r02*x6683))+(((-1.0)*x6682)))))+(IKabs((((cj0*x6681*x6684))+(((-1.0)*x6683*x6684))+((r02*x6682*x6684))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6685=((1.0)*sj0);
IkReal x6686=((1.0)*gconst130);
CheckValue<IkReal> x6687=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x6686))+(((-1.0)*gconst131*r21)))),-1);
if(!x6687.valid){
continue;
}
CheckValue<IkReal> x6688 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x6685)))),IkReal(((((-1.0)*gconst130*r11*x6685))+((gconst131*r10*sj0))+(((-1.0)*cj0*r01*x6686))+((cj0*gconst131*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6688.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6687.value)))+(x6688.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6689=IKsin(j4);
IkReal x6690=IKcos(j4);
IkReal x6691=(gconst131*r10);
IkReal x6692=(sj1*sj2);
IkReal x6693=(gconst131*r20);
IkReal x6694=(gconst131*r00);
IkReal x6695=((1.0)*x6690);
IkReal x6696=((1.0)*cj1*cj2);
IkReal x6697=(gconst130*x6689);
IkReal x6698=((1.0)*x6689);
IkReal x6699=(gconst130*x6690);
evalcond[0]=((((-1.0)*x6693*x6698))+((r21*x6697))+(((-1.0)*r22*x6695)));
evalcond[1]=(((r11*x6697))+cj0+(((-1.0)*r12*x6695))+(((-1.0)*x6691*x6698)));
evalcond[2]=((((-1.0)*x6694*x6698))+(((-1.0)*sj0))+(((-1.0)*r02*x6695))+((r01*x6697)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x6689))+(((-1.0)*x6693*x6695))+((r21*x6699)));
evalcond[4]=((((-1.0)*x6694*x6695))+((r02*x6689))+((cj0*x6692))+(((-1.0)*cj0*x6696))+((r01*x6699)));
evalcond[5]=(((r12*x6689))+((r11*x6699))+(((-1.0)*sj0*x6696))+((sj0*x6692))+(((-1.0)*x6691*x6695)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6700=((1.0)*gconst131);
CheckValue<IkReal> x6701 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst130*r21*sj0))+(((-1.0)*r20*sj0*x6700)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6701.valid){
continue;
}
CheckValue<IkReal> x6702=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst130*r10))+(((-1.0)*r11*x6700)))),-1);
if(!x6702.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6701.value)+(((1.5707963267949)*(x6702.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6703=IKsin(j4);
IkReal x6704=IKcos(j4);
IkReal x6705=(gconst131*r10);
IkReal x6706=(sj1*sj2);
IkReal x6707=(gconst131*r20);
IkReal x6708=(gconst131*r00);
IkReal x6709=((1.0)*x6704);
IkReal x6710=((1.0)*cj1*cj2);
IkReal x6711=(gconst130*x6703);
IkReal x6712=((1.0)*x6703);
IkReal x6713=(gconst130*x6704);
evalcond[0]=((((-1.0)*r22*x6709))+(((-1.0)*x6707*x6712))+((r21*x6711)));
evalcond[1]=(cj0+((r11*x6711))+(((-1.0)*x6705*x6712))+(((-1.0)*r12*x6709)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6709))+(((-1.0)*x6708*x6712))+((r01*x6711)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x6713))+((r22*x6703))+(((-1.0)*x6707*x6709)));
evalcond[4]=((((-1.0)*x6708*x6709))+(((-1.0)*cj0*x6710))+((cj0*x6706))+((r01*x6713))+((r02*x6703)));
evalcond[5]=((((-1.0)*sj0*x6710))+(((-1.0)*x6705*x6709))+((r11*x6713))+((sj0*x6706))+((r12*x6703)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6714=((1.0)*gconst131);
CheckValue<IkReal> x6715=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6714))+(((-1.0)*gconst130*r00)))),-1);
if(!x6715.valid){
continue;
}
CheckValue<IkReal> x6716 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6714))+((cj0*gconst130*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6716.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6715.value)))+(x6716.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6717=IKsin(j4);
IkReal x6718=IKcos(j4);
IkReal x6719=(gconst131*r10);
IkReal x6720=(sj1*sj2);
IkReal x6721=(gconst131*r20);
IkReal x6722=(gconst131*r00);
IkReal x6723=((1.0)*x6718);
IkReal x6724=((1.0)*cj1*cj2);
IkReal x6725=(gconst130*x6717);
IkReal x6726=((1.0)*x6717);
IkReal x6727=(gconst130*x6718);
evalcond[0]=((((-1.0)*r22*x6723))+(((-1.0)*x6721*x6726))+((r21*x6725)));
evalcond[1]=(((r11*x6725))+cj0+(((-1.0)*x6719*x6726))+(((-1.0)*r12*x6723)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6722*x6726))+(((-1.0)*r02*x6723))+((r01*x6725)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x6717))+(((-1.0)*x6721*x6723))+((r21*x6727)));
evalcond[4]=(((cj0*x6720))+((r02*x6717))+(((-1.0)*cj0*x6724))+(((-1.0)*x6722*x6723))+((r01*x6727)));
evalcond[5]=(((r11*x6727))+(((-1.0)*sj0*x6724))+(((-1.0)*x6719*x6723))+((sj0*x6720))+((r12*x6717)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6728=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6728;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x6728);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6729=((1.0)*cj5);
IkReal x6730=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6729)));
j4eval[0]=x6730;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x6729))+((r21*sj5))))));
j4eval[2]=IKsign(x6730);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6731=cj5*cj5;
IkReal x6732=r01*r01;
IkReal x6733=(cj5*r00);
IkReal x6734=(r01*sj5);
IkReal x6735=((((-2.0)*x6733*x6734))+x6732+((x6731*(r00*r00)))+(r02*r02)+(((-1.0)*x6731*x6732)));
j4eval[0]=x6735;
j4eval[1]=IKsign(x6735);
j4eval[2]=((IKabs(((((-1.0)*x6733))+x6734)))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6736=cj5*cj5;
IkReal x6737=r01*r01;
IkReal x6738=(r01*sj5);
IkReal x6739=(cj5*r00);
CheckValue<IkReal> x6740 = IKatan2WithCheck(IkReal(((((-1.0)*x6739))+x6738)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x6740.valid){
continue;
}
CheckValue<IkReal> x6741=IKPowWithIntegerCheck(IKsign(((((-2.0)*x6738*x6739))+x6737+((x6736*(r00*r00)))+(((-1.0)*x6736*x6737))+(r02*r02))),-1);
if(!x6741.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6740.value)+(((1.5707963267949)*(x6741.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6742=IKcos(j4);
IkReal x6743=IKsin(j4);
IkReal x6744=(cj5*r00);
IkReal x6745=(cj5*r10);
IkReal x6746=(r21*sj5);
IkReal x6747=(cj5*r20);
IkReal x6748=((1.0)*x6742);
IkReal x6749=((1.0)*x6743);
IkReal x6750=(sj5*x6743);
IkReal x6751=(sj5*x6742);
evalcond[0]=(((r02*x6743))+(((-1.0)*x6744*x6748))+((r01*x6751)));
evalcond[1]=((((-1.0)*r22*x6748))+(((-1.0)*x6747*x6749))+((x6743*x6746)));
evalcond[2]=((((-1.0)*r12*x6748))+((r11*x6750))+(((-1.0)*x6745*x6749)));
evalcond[3]=((-1.0)+(((-1.0)*x6744*x6749))+((r01*x6750))+(((-1.0)*r02*x6748)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6747*x6748))+((x6742*x6746))+((cj1*sj2))+((r22*x6743)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r11*x6751))+((r12*x6743))+(((-1.0)*x6745*x6748)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6752=((1.0)*cj5);
CheckValue<IkReal> x6753 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x6752))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6753.valid){
continue;
}
CheckValue<IkReal> x6754=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6752)))),-1);
if(!x6754.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6753.value)+(((1.5707963267949)*(x6754.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6755=IKcos(j4);
IkReal x6756=IKsin(j4);
IkReal x6757=(cj5*r00);
IkReal x6758=(cj5*r10);
IkReal x6759=(r21*sj5);
IkReal x6760=(cj5*r20);
IkReal x6761=((1.0)*x6755);
IkReal x6762=((1.0)*x6756);
IkReal x6763=(sj5*x6756);
IkReal x6764=(sj5*x6755);
evalcond[0]=(((r01*x6764))+((r02*x6756))+(((-1.0)*x6757*x6761)));
evalcond[1]=((((-1.0)*x6760*x6762))+((x6756*x6759))+(((-1.0)*r22*x6761)));
evalcond[2]=((((-1.0)*x6758*x6762))+((r11*x6763))+(((-1.0)*r12*x6761)));
evalcond[3]=((-1.0)+((r01*x6763))+(((-1.0)*r02*x6761))+(((-1.0)*x6757*x6762)));
evalcond[4]=((((-1.0)*x6760*x6761))+((cj2*sj1))+((r22*x6756))+((cj1*sj2))+((x6755*x6759)));
evalcond[5]=((((-1.0)*x6758*x6761))+((r12*x6756))+(((-1.0)*cj1*cj2))+((r11*x6764))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6765=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6765.valid){
continue;
}
CheckValue<IkReal> x6766 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6766.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6765.value)))+(x6766.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6767=IKcos(j4);
IkReal x6768=IKsin(j4);
IkReal x6769=(cj5*r00);
IkReal x6770=(cj5*r10);
IkReal x6771=(r21*sj5);
IkReal x6772=(cj5*r20);
IkReal x6773=((1.0)*x6767);
IkReal x6774=((1.0)*x6768);
IkReal x6775=(sj5*x6768);
IkReal x6776=(sj5*x6767);
evalcond[0]=((((-1.0)*x6769*x6773))+((r02*x6768))+((r01*x6776)));
evalcond[1]=((((-1.0)*r22*x6773))+(((-1.0)*x6772*x6774))+((x6768*x6771)));
evalcond[2]=(((r11*x6775))+(((-1.0)*x6770*x6774))+(((-1.0)*r12*x6773)));
evalcond[3]=((-1.0)+(((-1.0)*x6769*x6774))+(((-1.0)*r02*x6773))+((r01*x6775)));
evalcond[4]=(((cj2*sj1))+((r22*x6768))+((cj1*sj2))+(((-1.0)*x6772*x6773))+((x6767*x6771)));
evalcond[5]=(((r11*x6776))+((r12*x6768))+(((-1.0)*x6770*x6773))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6777=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6777;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6777);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6778=((1.0)*cj5);
IkReal x6779=((((-1.0)*r21*x6778))+(((-1.0)*r20*sj5)));
j4eval[0]=x6779;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x6778))))));
j4eval[2]=IKsign(x6779);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6780=(r01*sj5);
IkReal x6781=(cj1*sj2);
IkReal x6782=(cj2*sj1);
IkReal x6783=((1.0)*r02);
IkReal x6784=((1.0)*cj5*r00);
IkReal x6785=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6785;
j4eval[1]=((IKabs(((((-1.0)*x6782*x6783))+(((-1.0)*x6781*x6783)))))+(IKabs(((((-1.0)*x6782*x6784))+(((-1.0)*x6781*x6784))+((x6780*x6781))+((x6780*x6782))))));
j4eval[2]=IKsign(x6785);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6786=(r01*sj5);
IkReal x6787=(cj1*sj2);
IkReal x6788=(cj2*sj1);
IkReal x6789=((1.0)*r02);
IkReal x6790=((1.0)*cj5*r00);
CheckValue<IkReal> x6791 = IKatan2WithCheck(IkReal(((((-1.0)*x6788*x6790))+(((-1.0)*x6787*x6790))+((x6786*x6787))+((x6786*x6788)))),IkReal(((((-1.0)*x6787*x6789))+(((-1.0)*x6788*x6789)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6791.valid){
continue;
}
CheckValue<IkReal> x6792=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6792.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6791.value)+(((1.5707963267949)*(x6792.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6793=IKcos(j4);
IkReal x6794=IKsin(j4);
IkReal x6795=(cj5*r00);
IkReal x6796=(cj5*r10);
IkReal x6797=(r21*sj5);
IkReal x6798=(cj5*r20);
IkReal x6799=((1.0)*x6793);
IkReal x6800=((1.0)*x6794);
IkReal x6801=(sj5*x6794);
IkReal x6802=(sj5*x6793);
evalcond[0]=(((r02*x6794))+(((-1.0)*x6795*x6799))+((r01*x6802)));
evalcond[1]=(((x6794*x6797))+(((-1.0)*r22*x6799))+(((-1.0)*x6798*x6800)));
evalcond[2]=((((-1.0)*x6796*x6800))+((r11*x6801))+(((-1.0)*r12*x6799)));
evalcond[3]=((1.0)+(((-1.0)*x6795*x6800))+((r01*x6801))+(((-1.0)*r02*x6799)));
evalcond[4]=(((cj2*sj1))+((r22*x6794))+((x6793*x6797))+((cj1*sj2))+(((-1.0)*x6798*x6799)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r11*x6802))+((r12*x6794))+((cj1*cj2))+(((-1.0)*x6796*x6799)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6803=((1.0)*cj5);
CheckValue<IkReal> x6804 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x6803)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6804.valid){
continue;
}
CheckValue<IkReal> x6805=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6803))+(((-1.0)*r20*sj5)))),-1);
if(!x6805.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6804.value)+(((1.5707963267949)*(x6805.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6806=IKcos(j4);
IkReal x6807=IKsin(j4);
IkReal x6808=(cj5*r00);
IkReal x6809=(cj5*r10);
IkReal x6810=(r21*sj5);
IkReal x6811=(cj5*r20);
IkReal x6812=((1.0)*x6806);
IkReal x6813=((1.0)*x6807);
IkReal x6814=(sj5*x6807);
IkReal x6815=(sj5*x6806);
evalcond[0]=((((-1.0)*x6808*x6812))+((r01*x6815))+((r02*x6807)));
evalcond[1]=(((x6807*x6810))+(((-1.0)*x6811*x6813))+(((-1.0)*r22*x6812)));
evalcond[2]=(((r11*x6814))+(((-1.0)*x6809*x6813))+(((-1.0)*r12*x6812)));
evalcond[3]=((1.0)+(((-1.0)*x6808*x6813))+(((-1.0)*r02*x6812))+((r01*x6814)));
evalcond[4]=(((cj2*sj1))+((r22*x6807))+((cj1*sj2))+(((-1.0)*x6811*x6812))+((x6806*x6810)));
evalcond[5]=(((r11*x6815))+(((-1.0)*sj1*sj2))+(((-1.0)*x6809*x6812))+((r12*x6807))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6816 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6816.valid){
continue;
}
CheckValue<IkReal> x6817=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6817.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6816.value)+(((1.5707963267949)*(x6817.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6818=IKcos(j4);
IkReal x6819=IKsin(j4);
IkReal x6820=(cj5*r00);
IkReal x6821=(cj5*r10);
IkReal x6822=(r21*sj5);
IkReal x6823=(cj5*r20);
IkReal x6824=((1.0)*x6818);
IkReal x6825=((1.0)*x6819);
IkReal x6826=(sj5*x6819);
IkReal x6827=(sj5*x6818);
evalcond[0]=(((r01*x6827))+((r02*x6819))+(((-1.0)*x6820*x6824)));
evalcond[1]=((((-1.0)*x6823*x6825))+((x6819*x6822))+(((-1.0)*r22*x6824)));
evalcond[2]=((((-1.0)*r12*x6824))+((r11*x6826))+(((-1.0)*x6821*x6825)));
evalcond[3]=((1.0)+(((-1.0)*r02*x6824))+((r01*x6826))+(((-1.0)*x6820*x6825)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6823*x6824))+((cj1*sj2))+((r22*x6819))+((x6818*x6822)));
evalcond[5]=(((r12*x6819))+(((-1.0)*sj1*sj2))+((r11*x6827))+((cj1*cj2))+(((-1.0)*x6821*x6824)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6828=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6828);
rxp1_1=(px*r21);
rxp1_2=(r11*x6828);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6829=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6829);
rxp1_1=(px*r21);
rxp1_2=(r11*x6829);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6830=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6830);
rxp1_1=(px*r21);
rxp1_2=(r11*x6830);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6833=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x6833.valid){
continue;
}
IkReal x6831=x6833.value;
IkReal x6832=(sj0*x6831);
cj4array[0]=(((cj1*cj2*x6832))+(((-1.0)*sj1*sj2*x6832)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6834=IKsin(j4);
IkReal x6835=IKcos(j4);
IkReal x6836=(r21*sj5);
IkReal x6837=((1.0)*cj5*r20);
evalcond[0]=(r02*x6834);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x6835)));
evalcond[2]=(((x6834*x6836))+(((-1.0)*x6834*x6837)));
evalcond[3]=((((-1.0)*cj5*r10*x6834))+((r11*sj5*x6834)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x6835*x6836))+(((-1.0)*x6835*x6837)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6840=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x6840.valid){
continue;
}
IkReal x6838=x6840.value;
IkReal x6839=((1.0)*x6838);
cj4array[0]=((((-1.0)*cj2*sj1*x6839))+(((-1.0)*cj1*sj2*x6839)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6841=IKsin(j4);
IkReal x6842=IKcos(j4);
IkReal x6843=((1.0)*sj0);
IkReal x6844=((1.0)*cj5);
IkReal x6845=(sj5*x6841);
evalcond[0]=(r02*x6841);
evalcond[1]=((((-1.0)*x6843))+(((-1.0)*r02*x6842)));
evalcond[2]=((((-1.0)*r20*x6841*x6844))+((r21*x6845)));
evalcond[3]=(((r11*x6845))+(((-1.0)*r10*x6841*x6844)));
evalcond[4]=(((r11*sj5*x6842))+(((-1.0)*cj1*cj2*x6843))+((sj0*sj1*sj2))+(((-1.0)*r10*x6842*x6844)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6846=IKPowWithIntegerCheck(r02,-1);
if(!x6846.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x6846.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6847=IKsin(j4);
IkReal x6848=IKcos(j4);
IkReal x6849=(r21*sj5);
IkReal x6850=((1.0)*cj5);
IkReal x6851=(r11*sj5);
evalcond[0]=(r02*x6847);
evalcond[1]=(((x6847*x6849))+(((-1.0)*r20*x6847*x6850)));
evalcond[2]=((((-1.0)*r10*x6847*x6850))+((x6847*x6851)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x6848*x6849))+(((-1.0)*r20*x6848*x6850)));
evalcond[4]=((((-1.0)*cj1*cj2*sj0))+((x6848*x6851))+(((-1.0)*r10*x6848*x6850))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6852=((1.0)*sj0);
IkReal x6853=((1.0)*cj0);
CheckValue<IkReal> x6854 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x6853))+(((-1.0)*r12*x6852)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x6852))+(((-1.0)*r01*sj5*x6853)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6854.valid){
continue;
}
CheckValue<IkReal> x6855=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x6855.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6854.value)+(((1.5707963267949)*(x6855.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6856=IKsin(j4);
IkReal x6857=IKcos(j4);
IkReal x6858=(cj5*r00);
IkReal x6859=(cj5*r10);
IkReal x6860=(r21*sj5);
IkReal x6861=(sj1*sj2);
IkReal x6862=(cj5*r20);
IkReal x6863=((1.0)*x6857);
IkReal x6864=((1.0)*cj1*cj2);
IkReal x6865=((1.0)*x6856);
IkReal x6866=(sj5*x6856);
IkReal x6867=(sj5*x6857);
evalcond[0]=((((-1.0)*x6862*x6865))+(((-1.0)*r22*x6863))+((x6856*x6860)));
evalcond[1]=(((r11*x6866))+cj0+(((-1.0)*r12*x6863))+(((-1.0)*x6859*x6865)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6863))+((r01*x6866))+(((-1.0)*x6858*x6865)));
evalcond[3]=(((cj2*sj1))+((r22*x6856))+((cj1*sj2))+(((-1.0)*x6862*x6863))+((x6857*x6860)));
evalcond[4]=(((r02*x6856))+((cj0*x6861))+((r01*x6867))+(((-1.0)*x6858*x6863))+(((-1.0)*cj0*x6864)));
evalcond[5]=(((sj0*x6861))+((r11*x6867))+((r12*x6856))+(((-1.0)*sj0*x6864))+(((-1.0)*x6859*x6863)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6868=((1.0)*cj5);
CheckValue<IkReal> x6869 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6868))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6869.valid){
continue;
}
CheckValue<IkReal> x6870=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6868)))),-1);
if(!x6870.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6869.value)+(((1.5707963267949)*(x6870.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6871=IKsin(j4);
IkReal x6872=IKcos(j4);
IkReal x6873=(cj5*r00);
IkReal x6874=(cj5*r10);
IkReal x6875=(r21*sj5);
IkReal x6876=(sj1*sj2);
IkReal x6877=(cj5*r20);
IkReal x6878=((1.0)*x6872);
IkReal x6879=((1.0)*cj1*cj2);
IkReal x6880=((1.0)*x6871);
IkReal x6881=(sj5*x6871);
IkReal x6882=(sj5*x6872);
evalcond[0]=((((-1.0)*r22*x6878))+((x6871*x6875))+(((-1.0)*x6877*x6880)));
evalcond[1]=(((r11*x6881))+cj0+(((-1.0)*r12*x6878))+(((-1.0)*x6874*x6880)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6873*x6880))+(((-1.0)*r02*x6878))+((r01*x6881)));
evalcond[3]=(((cj2*sj1))+((r22*x6871))+(((-1.0)*x6877*x6878))+((cj1*sj2))+((x6872*x6875)));
evalcond[4]=(((r02*x6871))+((cj0*x6876))+(((-1.0)*x6873*x6878))+((r01*x6882))+(((-1.0)*cj0*x6879)));
evalcond[5]=(((sj0*x6876))+((r11*x6882))+((r12*x6871))+(((-1.0)*x6874*x6878))+(((-1.0)*sj0*x6879)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6883=((1.0)*cj5);
CheckValue<IkReal> x6884=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6883)))),-1);
if(!x6884.valid){
continue;
}
CheckValue<IkReal> x6885 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6883)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6885.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6884.value)))+(x6885.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6886=IKsin(j4);
IkReal x6887=IKcos(j4);
IkReal x6888=(cj5*r00);
IkReal x6889=(cj5*r10);
IkReal x6890=(r21*sj5);
IkReal x6891=(sj1*sj2);
IkReal x6892=(cj5*r20);
IkReal x6893=((1.0)*x6887);
IkReal x6894=((1.0)*cj1*cj2);
IkReal x6895=((1.0)*x6886);
IkReal x6896=(sj5*x6886);
IkReal x6897=(sj5*x6887);
evalcond[0]=(((x6886*x6890))+(((-1.0)*x6892*x6895))+(((-1.0)*r22*x6893)));
evalcond[1]=((((-1.0)*x6889*x6895))+cj0+(((-1.0)*r12*x6893))+((r11*x6896)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6888*x6895))+(((-1.0)*r02*x6893))+((r01*x6896)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6892*x6893))+((r22*x6886))+((x6887*x6890)));
evalcond[4]=((((-1.0)*cj0*x6894))+(((-1.0)*x6888*x6893))+((r02*x6886))+((cj0*x6891))+((r01*x6897)));
evalcond[5]=((((-1.0)*x6889*x6893))+((sj0*x6891))+(((-1.0)*sj0*x6894))+((r11*x6897))+((r12*x6886)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6898=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
j0eval[0]=x6898;
j0eval[1]=IKsign(x6898);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6899=cj5*cj5;
IkReal x6900=r21*r21;
IkReal x6901=(cj2*sj1);
IkReal x6902=(cj1*sj2);
IkReal x6903=(r21*sj5);
IkReal x6904=((1.0)*cj5*r20);
IkReal x6905=((r22*r22)+(((-1.0)*x6899*x6900))+x6900+(((-2.0)*cj5*r20*x6903))+((x6899*(r20*r20))));
j4eval[0]=x6905;
j4eval[1]=IKsign(x6905);
j4eval[2]=((IKabs((((x6901*x6903))+((x6902*x6903))+(((-1.0)*x6901*x6904))+(((-1.0)*x6902*x6904)))))+(IKabs((((r22*x6902))+((r22*x6901))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6906=cj1*cj1;
IkReal x6907=(cj2*sj2);
IkReal x6908=(cj2*sj1);
IkReal x6909=(cj1*sj1);
j0eval[0]=((((-2.0)*cj1*cj2*x6908))+(((-2.0)*x6906*x6907))+(((-1.14553990610329)*sj2*x6906))+x6907+x6909+(((-1.14553990610329)*cj1*x6908)));
j0eval[1]=((((-1.0)*cj1*sj2))+(((-1.0)*x6908)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.02203442325561)*py))+(((-0.579620370780054)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.02203442325561)*px))+(((0.579620370780054)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.02203442325561)*py))+(((-0.579620370780054)*px))))+IKsqr(((((2.02203442325561)*px))+(((0.579620370780054)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.02203442325561)*py))+(((-0.579620370780054)*px))), ((((2.02203442325561)*px))+(((0.579620370780054)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6910=IKsin(j0);
IkReal x6911=IKcos(j0);
evalcond[0]=((((-0.131)*x6910))+(((-1.0)*px))+(((0.457)*x6911)));
evalcond[1]=((((0.131)*x6911))+(((-1.0)*py))+(((0.457)*x6910)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6912=((1.0)*cj5);
IkReal x6913=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6912)));
j4eval[0]=x6913;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6912)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6913);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6914=((1.0)*cj5);
IkReal x6915=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6914)));
j4eval[0]=x6915;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x6914))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x6915);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6916=cj5*cj5;
IkReal x6917=((1.0)*sj5);
IkReal x6918=(cj5*r20);
IkReal x6919=(r11*r21);
IkReal x6920=(((r12*r22))+(((-1.0)*x6916*x6919))+(((-1.0)*r11*x6917*x6918))+((r10*r20*x6916))+(((-1.0)*cj5*r10*r21*x6917))+x6919);
j4eval[0]=x6920;
j4eval[1]=IKsign(x6920);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x6917))+((cj0*x6918)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6921=cj5*cj5;
IkReal x6922=((1.0)*sj5);
IkReal x6923=(cj5*r20);
IkReal x6924=(r11*r21);
CheckValue<IkReal> x6925=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*r21*x6922))+(((-1.0)*r11*x6922*x6923))+((r12*r22))+(((-1.0)*x6921*x6924))+x6924+((r10*r20*x6921)))),-1);
if(!x6925.valid){
continue;
}
CheckValue<IkReal> x6926 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x6922))+((cj0*x6923)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6926.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6925.value)))+(x6926.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6927=IKsin(j4);
IkReal x6928=IKcos(j4);
IkReal x6929=((1.0)*sj0);
IkReal x6930=(cj5*r00);
IkReal x6931=(r11*sj5);
IkReal x6932=(cj5*r10);
IkReal x6933=(r21*sj5);
IkReal x6934=(cj5*r20);
IkReal x6935=(r01*sj5);
IkReal x6936=((1.0)*x6928);
IkReal x6937=((1.0)*x6927);
evalcond[0]=(((x6927*x6933))+(((-1.0)*r22*x6936))+(((-1.0)*x6934*x6937)));
evalcond[1]=((((-1.0)*r22*x6937))+((x6928*x6934))+(((-1.0)*x6933*x6936)));
evalcond[2]=(((x6927*x6931))+(((-1.0)*x6932*x6937))+cj0+(((-1.0)*r12*x6936)));
evalcond[3]=(((x6927*x6935))+(((-1.0)*x6930*x6937))+(((-1.0)*r02*x6936))+(((-1.0)*x6929)));
evalcond[4]=((((-1.0)*r02*x6937))+(((-1.0)*x6935*x6936))+((x6928*x6930))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x6937))+((x6928*x6932))+(((-1.0)*x6929))+(((-1.0)*x6931*x6936)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6938=((1.0)*cj5);
CheckValue<IkReal> x6939=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6938)))),-1);
if(!x6939.valid){
continue;
}
CheckValue<IkReal> x6940 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x6938)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6940.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6939.value)))+(x6940.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6941=IKsin(j4);
IkReal x6942=IKcos(j4);
IkReal x6943=((1.0)*sj0);
IkReal x6944=(cj5*r00);
IkReal x6945=(r11*sj5);
IkReal x6946=(cj5*r10);
IkReal x6947=(r21*sj5);
IkReal x6948=(cj5*r20);
IkReal x6949=(r01*sj5);
IkReal x6950=((1.0)*x6942);
IkReal x6951=((1.0)*x6941);
evalcond[0]=(((x6941*x6947))+(((-1.0)*x6948*x6951))+(((-1.0)*r22*x6950)));
evalcond[1]=(((x6942*x6948))+(((-1.0)*r22*x6951))+(((-1.0)*x6947*x6950)));
evalcond[2]=(cj0+(((-1.0)*r12*x6950))+((x6941*x6945))+(((-1.0)*x6946*x6951)));
evalcond[3]=(((x6941*x6949))+(((-1.0)*x6943))+(((-1.0)*r02*x6950))+(((-1.0)*x6944*x6951)));
evalcond[4]=(((x6942*x6944))+(((-1.0)*r02*x6951))+(((-1.0)*x6949*x6950))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x6951))+(((-1.0)*x6943))+((x6942*x6946))+(((-1.0)*x6945*x6950)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6952=((1.0)*cj5);
CheckValue<IkReal> x6953=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6952)))),-1);
if(!x6953.valid){
continue;
}
CheckValue<IkReal> x6954 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6952)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6954.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6953.value)))+(x6954.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6955=IKsin(j4);
IkReal x6956=IKcos(j4);
IkReal x6957=((1.0)*sj0);
IkReal x6958=(cj5*r00);
IkReal x6959=(r11*sj5);
IkReal x6960=(cj5*r10);
IkReal x6961=(r21*sj5);
IkReal x6962=(cj5*r20);
IkReal x6963=(r01*sj5);
IkReal x6964=((1.0)*x6956);
IkReal x6965=((1.0)*x6955);
evalcond[0]=(((x6955*x6961))+(((-1.0)*r22*x6964))+(((-1.0)*x6962*x6965)));
evalcond[1]=((((-1.0)*x6961*x6964))+((x6956*x6962))+(((-1.0)*r22*x6965)));
evalcond[2]=(cj0+(((-1.0)*r12*x6964))+((x6955*x6959))+(((-1.0)*x6960*x6965)));
evalcond[3]=(((x6955*x6963))+(((-1.0)*r02*x6964))+(((-1.0)*x6958*x6965))+(((-1.0)*x6957)));
evalcond[4]=(((x6956*x6958))+(((-1.0)*r02*x6965))+(((-1.0)*x6963*x6964))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x6959*x6964))+(((-1.0)*x6957))+(((-1.0)*r12*x6965))+((x6956*x6960)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-7.22878269506677)*px))+(((1.71062796600817)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((7.22878269506677)*py))+(((1.71062796600817)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-7.22878269506677)*px))+(((1.71062796600817)*py))))+IKsqr(((((7.22878269506677)*py))+(((1.71062796600817)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-7.22878269506677)*px))+(((1.71062796600817)*py))), ((((7.22878269506677)*py))+(((1.71062796600817)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6966=IKsin(j0);
IkReal x6967=IKcos(j0);
evalcond[0]=((((0.031)*x6967))+(((-1.0)*px))+(((-0.131)*x6966)));
evalcond[1]=((((0.131)*x6967))+(((0.031)*x6966))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6968=((1.0)*cj5);
IkReal x6969=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6968)));
j4eval[0]=x6969;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x6968))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x6969);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6970=cj5*cj5;
IkReal x6971=((1.0)*r21);
IkReal x6972=(cj5*sj5);
IkReal x6973=((1.0)*r20);
IkReal x6974=((((-1.0)*r01*x6972*x6973))+(((-1.0)*r00*x6971*x6972))+((r01*r21))+((r00*r20*x6970))+((r02*r22))+(((-1.0)*r01*x6970*x6971)));
j4eval[0]=x6974;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6973))))));
j4eval[2]=IKsign(x6974);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6975=cj5*cj5;
IkReal x6976=(r21*sj5);
IkReal x6977=(r11*r21);
IkReal x6978=((1.0)*cj5*r20);
IkReal x6979=(((r10*r20*x6975))+(((-1.0)*cj5*r10*x6976))+(((-1.0)*r11*sj5*x6978))+((r12*r22))+(((-1.0)*x6975*x6977))+x6977);
j4eval[0]=x6979;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((sj0*x6976))+(((-1.0)*sj0*x6978))))));
j4eval[2]=IKsign(x6979);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6980=cj5*cj5;
IkReal x6981=(r21*sj5);
IkReal x6982=(r11*r21);
IkReal x6983=((1.0)*cj5*r20);
CheckValue<IkReal> x6984 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x6983))+((sj0*x6981)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6984.valid){
continue;
}
CheckValue<IkReal> x6985=IKPowWithIntegerCheck(IKsign((((r12*r22))+(((-1.0)*r11*sj5*x6983))+(((-1.0)*cj5*r10*x6981))+x6982+((r10*r20*x6980))+(((-1.0)*x6980*x6982)))),-1);
if(!x6985.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6984.value)+(((1.5707963267949)*(x6985.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6986=IKsin(j4);
IkReal x6987=IKcos(j4);
IkReal x6988=(r11*sj5);
IkReal x6989=(cj5*r00);
IkReal x6990=(cj5*r10);
IkReal x6991=(r21*sj5);
IkReal x6992=(cj5*r20);
IkReal x6993=(r01*sj5);
IkReal x6994=((1.0)*x6987);
IkReal x6995=((1.0)*x6986);
evalcond[0]=(((x6986*x6991))+(((-1.0)*r22*x6994))+(((-1.0)*x6992*x6995)));
evalcond[1]=(((x6987*x6992))+(((-1.0)*r22*x6995))+(((-1.0)*x6991*x6994)));
evalcond[2]=((((-1.0)*r12*x6994))+cj0+((x6986*x6988))+(((-1.0)*x6990*x6995)));
evalcond[3]=((((-1.0)*x6993*x6994))+cj0+((x6987*x6989))+(((-1.0)*r02*x6995)));
evalcond[4]=((((-1.0)*r12*x6995))+sj0+((x6987*x6990))+(((-1.0)*x6988*x6994)));
evalcond[5]=(((x6986*x6993))+(((-1.0)*sj0))+(((-1.0)*r02*x6994))+(((-1.0)*x6989*x6995)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6996=cj5*cj5;
IkReal x6997=((1.0)*r21);
IkReal x6998=(cj5*sj5);
IkReal x6999=((1.0)*r20);
CheckValue<IkReal> x7000=IKPowWithIntegerCheck(IKsign((((r01*r21))+((r00*r20*x6996))+((r02*r22))+(((-1.0)*r00*x6997*x6998))+(((-1.0)*r01*x6998*x6999))+(((-1.0)*r01*x6996*x6997)))),-1);
if(!x7000.valid){
continue;
}
CheckValue<IkReal> x7001 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6999)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7001.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7000.value)))+(x7001.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7002=IKsin(j4);
IkReal x7003=IKcos(j4);
IkReal x7004=(r11*sj5);
IkReal x7005=(cj5*r00);
IkReal x7006=(cj5*r10);
IkReal x7007=(r21*sj5);
IkReal x7008=(cj5*r20);
IkReal x7009=(r01*sj5);
IkReal x7010=((1.0)*x7003);
IkReal x7011=((1.0)*x7002);
evalcond[0]=((((-1.0)*r22*x7010))+((x7002*x7007))+(((-1.0)*x7008*x7011)));
evalcond[1]=((((-1.0)*r22*x7011))+((x7003*x7008))+(((-1.0)*x7007*x7010)));
evalcond[2]=(cj0+((x7002*x7004))+(((-1.0)*r12*x7010))+(((-1.0)*x7006*x7011)));
evalcond[3]=((((-1.0)*x7009*x7010))+cj0+((x7003*x7005))+(((-1.0)*r02*x7011)));
evalcond[4]=(sj0+((x7003*x7006))+(((-1.0)*r12*x7011))+(((-1.0)*x7004*x7010)));
evalcond[5]=((((-1.0)*sj0))+((x7002*x7009))+(((-1.0)*r02*x7010))+(((-1.0)*x7005*x7011)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7012=((1.0)*cj5);
CheckValue<IkReal> x7013 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7012)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7013.valid){
continue;
}
CheckValue<IkReal> x7014=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7012)))),-1);
if(!x7014.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7013.value)+(((1.5707963267949)*(x7014.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7015=IKsin(j4);
IkReal x7016=IKcos(j4);
IkReal x7017=(r11*sj5);
IkReal x7018=(cj5*r00);
IkReal x7019=(cj5*r10);
IkReal x7020=(r21*sj5);
IkReal x7021=(cj5*r20);
IkReal x7022=(r01*sj5);
IkReal x7023=((1.0)*x7016);
IkReal x7024=((1.0)*x7015);
evalcond[0]=((((-1.0)*r22*x7023))+(((-1.0)*x7021*x7024))+((x7015*x7020)));
evalcond[1]=((((-1.0)*r22*x7024))+((x7016*x7021))+(((-1.0)*x7020*x7023)));
evalcond[2]=((((-1.0)*r12*x7023))+cj0+((x7015*x7017))+(((-1.0)*x7019*x7024)));
evalcond[3]=(cj0+(((-1.0)*r02*x7024))+((x7016*x7018))+(((-1.0)*x7022*x7023)));
evalcond[4]=((((-1.0)*r12*x7024))+sj0+((x7016*x7019))+(((-1.0)*x7017*x7023)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7018*x7024))+(((-1.0)*r02*x7023))+((x7015*x7022)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7025=((1.0)*sj5);
IkReal x7026=((1.0)*cj5);
if( IKabs(((((-1.0)*r11*x7026))+(((-1.0)*r10*x7025)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x7025))+(((-1.0)*r01*x7026)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x7026))+(((-1.0)*r10*x7025))))+IKsqr(((((-1.0)*r00*x7025))+(((-1.0)*r01*x7026))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r11*x7026))+(((-1.0)*r10*x7025))), ((((-1.0)*r00*x7025))+(((-1.0)*r01*x7026))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7027=IKsin(j0);
IkReal x7028=IKcos(j0);
IkReal x7029=((0.085)*sj5);
IkReal x7030=((1.0)*cj5);
IkReal x7031=((1.0)*sj5);
IkReal x7032=((0.085)*cj5);
evalcond[0]=((((-1.0)*r01*x7030))+(((-1.0)*x7028))+(((-1.0)*r00*x7031)));
evalcond[1]=((((-1.0)*r11*x7030))+(((-1.0)*x7027))+(((-1.0)*r10*x7031)));
evalcond[2]=((((-1.0)*r01*x7032))+(((-1.0)*px))+(((-1.0)*r00*x7029))+(((-0.131)*x7027)));
evalcond[3]=((((0.131)*x7028))+(((-1.0)*r10*x7029))+(((-1.0)*r11*x7032))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7033=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7033;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x7033);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7034=((1.0)*cj5);
IkReal x7035=((((-1.0)*r01*x7034))+(((-1.0)*r00*sj5)));
j4eval[0]=x7035;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7034)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7035);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7036=cj5*cj5;
IkReal x7037=r21*r21;
IkReal x7038=(r21*sj5);
IkReal x7039=(cj5*r20);
IkReal x7040=(x7037+(r22*r22)+(((-1.0)*x7036*x7037))+((x7036*(r20*r20)))+(((-2.0)*x7038*x7039)));
j4eval[0]=x7040;
j4eval[1]=IKsign(x7040);
j4eval[2]=((IKabs((x7038+(((-1.0)*x7039)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7041=cj5*cj5;
IkReal x7042=r21*r21;
IkReal x7043=(r21*sj5);
IkReal x7044=(cj5*r20);
CheckValue<IkReal> x7045 = IKatan2WithCheck(IkReal(r22),IkReal((x7043+(((-1.0)*x7044)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7045.valid){
continue;
}
CheckValue<IkReal> x7046=IKPowWithIntegerCheck(IKsign((((x7041*(r20*r20)))+x7042+(r22*r22)+(((-1.0)*x7041*x7042))+(((-2.0)*x7043*x7044)))),-1);
if(!x7046.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7045.value)+(((1.5707963267949)*(x7046.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7047=IKsin(j4);
IkReal x7048=IKcos(j4);
IkReal x7049=(r11*sj5);
IkReal x7050=(r21*sj5);
IkReal x7051=(cj5*r00);
IkReal x7052=(cj5*r20);
IkReal x7053=(r01*sj5);
IkReal x7054=(cj5*r10);
IkReal x7055=((1.0)*x7048);
IkReal x7056=((1.0)*x7047);
evalcond[0]=((((-1.0)*r22*x7055))+(((-1.0)*x7052*x7056))+((x7047*x7050)));
evalcond[1]=((((-1.0)*x7053*x7055))+((x7048*x7051))+(((-1.0)*r02*x7056)));
evalcond[2]=((((-1.0)*x7049*x7055))+(((-1.0)*r12*x7056))+((x7048*x7054)));
evalcond[3]=((((-1.0)*x7054*x7056))+((x7047*x7049))+cj0+(((-1.0)*r12*x7055)));
evalcond[4]=((1.0)+(((-1.0)*r22*x7056))+((x7048*x7052))+(((-1.0)*x7050*x7055)));
evalcond[5]=((((-1.0)*sj0))+((x7047*x7053))+(((-1.0)*x7051*x7056))+(((-1.0)*r02*x7055)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7057=((1.0)*cj5);
CheckValue<IkReal> x7058 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7057))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7058.valid){
continue;
}
CheckValue<IkReal> x7059=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7057))+(((-1.0)*r00*sj5)))),-1);
if(!x7059.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7058.value)+(((1.5707963267949)*(x7059.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7060=IKsin(j4);
IkReal x7061=IKcos(j4);
IkReal x7062=(r11*sj5);
IkReal x7063=(r21*sj5);
IkReal x7064=(cj5*r00);
IkReal x7065=(cj5*r20);
IkReal x7066=(r01*sj5);
IkReal x7067=(cj5*r10);
IkReal x7068=((1.0)*x7061);
IkReal x7069=((1.0)*x7060);
evalcond[0]=((((-1.0)*x7065*x7069))+((x7060*x7063))+(((-1.0)*r22*x7068)));
evalcond[1]=((((-1.0)*x7066*x7068))+((x7061*x7064))+(((-1.0)*r02*x7069)));
evalcond[2]=((((-1.0)*x7062*x7068))+(((-1.0)*r12*x7069))+((x7061*x7067)));
evalcond[3]=(cj0+(((-1.0)*r12*x7068))+(((-1.0)*x7067*x7069))+((x7060*x7062)));
evalcond[4]=((1.0)+(((-1.0)*x7063*x7068))+((x7061*x7065))+(((-1.0)*r22*x7069)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7064*x7069))+((x7060*x7066))+(((-1.0)*r02*x7068)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7070 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7070.valid){
continue;
}
CheckValue<IkReal> x7071=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7071.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7070.value)+(((1.5707963267949)*(x7071.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7072=IKsin(j4);
IkReal x7073=IKcos(j4);
IkReal x7074=(r11*sj5);
IkReal x7075=(r21*sj5);
IkReal x7076=(cj5*r00);
IkReal x7077=(cj5*r20);
IkReal x7078=(r01*sj5);
IkReal x7079=(cj5*r10);
IkReal x7080=((1.0)*x7073);
IkReal x7081=((1.0)*x7072);
evalcond[0]=(((x7072*x7075))+(((-1.0)*r22*x7080))+(((-1.0)*x7077*x7081)));
evalcond[1]=(((x7073*x7076))+(((-1.0)*r02*x7081))+(((-1.0)*x7078*x7080)));
evalcond[2]=(((x7073*x7079))+(((-1.0)*r12*x7081))+(((-1.0)*x7074*x7080)));
evalcond[3]=(cj0+(((-1.0)*x7079*x7081))+((x7072*x7074))+(((-1.0)*r12*x7080)));
evalcond[4]=((1.0)+((x7073*x7077))+(((-1.0)*x7075*x7080))+(((-1.0)*r22*x7081)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7076*x7081))+((x7072*x7078))+(((-1.0)*r02*x7080)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-3.40636494482648)*py))+(((-2.09499440268671)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.09499440268671)*py))+(((-3.40636494482648)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.40636494482648)*py))+(((-2.09499440268671)*px))))+IKsqr(((((2.09499440268671)*py))+(((-3.40636494482648)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-3.40636494482648)*py))+(((-2.09499440268671)*px))), ((((2.09499440268671)*py))+(((-3.40636494482648)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7082=IKcos(j0);
IkReal x7083=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.131)*x7083))+(((-0.213)*x7082)));
evalcond[1]=((((-1.0)*py))+(((0.131)*x7082))+(((-0.213)*x7083)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7084=((1.0)*cj5);
IkReal x7085=((((-1.0)*r01*x7084))+(((-1.0)*r00*sj5)));
j4eval[0]=x7085;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7084))))));
j4eval[2]=IKsign(x7085);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7086=cj5*cj5;
IkReal x7087=((1.0)*r21);
IkReal x7088=(cj5*sj5);
IkReal x7089=((1.0)*r20);
IkReal x7090=((((-1.0)*r01*x7086*x7087))+((r01*r21))+(((-1.0)*r00*x7087*x7088))+((r00*r20*x7086))+(((-1.0)*r01*x7088*x7089))+((r02*r22)));
j4eval[0]=x7090;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7089))))));
j4eval[2]=IKsign(x7090);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7091=cj5*cj5;
IkReal x7092=(r21*sj5);
IkReal x7093=(r11*r21);
IkReal x7094=((1.0)*cj5*r20);
IkReal x7095=(x7093+(((-1.0)*cj5*r10*x7092))+((r12*r22))+((r10*r20*x7091))+(((-1.0)*r11*sj5*x7094))+(((-1.0)*x7091*x7093)));
j4eval[0]=x7095;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((sj0*x7092))+(((-1.0)*sj0*x7094))))));
j4eval[2]=IKsign(x7095);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7096=cj5*cj5;
IkReal x7097=(r21*sj5);
IkReal x7098=(r11*r21);
IkReal x7099=((1.0)*cj5*r20);
CheckValue<IkReal> x7100 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x7097))+(((-1.0)*sj0*x7099)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7100.valid){
continue;
}
CheckValue<IkReal> x7101=IKPowWithIntegerCheck(IKsign((x7098+(((-1.0)*cj5*r10*x7097))+(((-1.0)*x7096*x7098))+((r12*r22))+((r10*r20*x7096))+(((-1.0)*r11*sj5*x7099)))),-1);
if(!x7101.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7100.value)+(((1.5707963267949)*(x7101.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7102=IKsin(j4);
IkReal x7103=IKcos(j4);
IkReal x7104=(r11*sj5);
IkReal x7105=(cj5*r00);
IkReal x7106=(cj5*r10);
IkReal x7107=(r21*sj5);
IkReal x7108=(cj5*r20);
IkReal x7109=(r01*sj5);
IkReal x7110=((1.0)*x7103);
IkReal x7111=((1.0)*x7102);
evalcond[0]=(((x7102*x7107))+(((-1.0)*r22*x7110))+(((-1.0)*x7108*x7111)));
evalcond[1]=((((-1.0)*x7107*x7110))+(((-1.0)*r22*x7111))+((x7103*x7108)));
evalcond[2]=(((x7102*x7104))+cj0+(((-1.0)*r12*x7110))+(((-1.0)*x7106*x7111)));
evalcond[3]=(cj0+(((-1.0)*r02*x7111))+(((-1.0)*x7109*x7110))+((x7103*x7105)));
evalcond[4]=((((-1.0)*x7104*x7110))+sj0+(((-1.0)*r12*x7111))+((x7103*x7106)));
evalcond[5]=(((x7102*x7109))+(((-1.0)*sj0))+(((-1.0)*r02*x7110))+(((-1.0)*x7105*x7111)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7112=cj5*cj5;
IkReal x7113=((1.0)*r21);
IkReal x7114=(cj5*sj5);
IkReal x7115=((1.0)*r20);
CheckValue<IkReal> x7116=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x7113*x7114))+((r01*r21))+(((-1.0)*r01*x7114*x7115))+(((-1.0)*r01*x7112*x7113))+((r00*r20*x7112))+((r02*r22)))),-1);
if(!x7116.valid){
continue;
}
CheckValue<IkReal> x7117 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7115)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7117.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7116.value)))+(x7117.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7118=IKsin(j4);
IkReal x7119=IKcos(j4);
IkReal x7120=(r11*sj5);
IkReal x7121=(cj5*r00);
IkReal x7122=(cj5*r10);
IkReal x7123=(r21*sj5);
IkReal x7124=(cj5*r20);
IkReal x7125=(r01*sj5);
IkReal x7126=((1.0)*x7119);
IkReal x7127=((1.0)*x7118);
evalcond[0]=((((-1.0)*r22*x7126))+((x7118*x7123))+(((-1.0)*x7124*x7127)));
evalcond[1]=((((-1.0)*x7123*x7126))+((x7119*x7124))+(((-1.0)*r22*x7127)));
evalcond[2]=(cj0+(((-1.0)*x7122*x7127))+((x7118*x7120))+(((-1.0)*r12*x7126)));
evalcond[3]=(cj0+((x7119*x7121))+(((-1.0)*r02*x7127))+(((-1.0)*x7125*x7126)));
evalcond[4]=((((-1.0)*x7120*x7126))+sj0+((x7119*x7122))+(((-1.0)*r12*x7127)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7121*x7127))+((x7118*x7125))+(((-1.0)*r02*x7126)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7128=((1.0)*cj5);
CheckValue<IkReal> x7129=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7128)))),-1);
if(!x7129.valid){
continue;
}
CheckValue<IkReal> x7130 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7128)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7130.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7129.value)))+(x7130.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7131=IKsin(j4);
IkReal x7132=IKcos(j4);
IkReal x7133=(r11*sj5);
IkReal x7134=(cj5*r00);
IkReal x7135=(cj5*r10);
IkReal x7136=(r21*sj5);
IkReal x7137=(cj5*r20);
IkReal x7138=(r01*sj5);
IkReal x7139=((1.0)*x7132);
IkReal x7140=((1.0)*x7131);
evalcond[0]=((((-1.0)*r22*x7139))+(((-1.0)*x7137*x7140))+((x7131*x7136)));
evalcond[1]=((((-1.0)*r22*x7140))+(((-1.0)*x7136*x7139))+((x7132*x7137)));
evalcond[2]=((((-1.0)*r12*x7139))+cj0+(((-1.0)*x7135*x7140))+((x7131*x7133)));
evalcond[3]=(cj0+(((-1.0)*x7138*x7139))+((x7132*x7134))+(((-1.0)*r02*x7140)));
evalcond[4]=(sj0+((x7132*x7135))+(((-1.0)*r12*x7140))+(((-1.0)*x7133*x7139)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7134*x7140))+((x7131*x7138))+(((-1.0)*r02*x7139)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7141=IKsin(j0);
IkReal x7142=IKcos(j0);
IkReal x7143=((0.085)*sj5);
IkReal x7144=((1.0)*cj5);
IkReal x7145=((1.0)*sj5);
IkReal x7146=((0.085)*cj5);
evalcond[0]=(x7142+(((-1.0)*r01*x7144))+(((-1.0)*r00*x7145)));
evalcond[1]=(x7141+(((-1.0)*r11*x7144))+(((-1.0)*r10*x7145)));
evalcond[2]=((((-1.0)*r01*x7146))+(((-1.0)*px))+(((-1.0)*r00*x7143))+(((-0.131)*x7141)));
evalcond[3]=((((-1.0)*py))+(((-1.0)*r11*x7146))+(((0.131)*x7142))+(((-1.0)*r10*x7143)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7147=((1.0)*sj5);
IkReal x7148=((((-1.0)*cj5*r11))+(((-1.0)*r10*x7147)));
j4eval[0]=x7148;
j4eval[1]=IKsign(x7148);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x7147))+((cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7149=((1.0)*cj5);
IkReal x7150=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7149)));
j4eval[0]=x7150;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7149))))));
j4eval[2]=IKsign(x7150);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7151=r21*r21;
IkReal x7152=cj5*cj5;
IkReal x7153=(r21*sj5);
IkReal x7154=(cj5*r20);
IkReal x7155=((((-1.0)*x7152*(r20*r20)))+(((2.0)*x7153*x7154))+(((-1.0)*x7151))+(((-1.0)*(r22*r22)))+((x7151*x7152)));
j4eval[0]=x7155;
j4eval[1]=((IKabs((x7153+(((-1.0)*x7154)))))+(IKabs(r22)));
j4eval[2]=IKsign(x7155);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7156=r21*r21;
IkReal x7157=cj5*cj5;
IkReal x7158=(r21*sj5);
IkReal x7159=(cj5*r20);
CheckValue<IkReal> x7160 = IKatan2WithCheck(IkReal(r22),IkReal((x7158+(((-1.0)*x7159)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7160.valid){
continue;
}
CheckValue<IkReal> x7161=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7157*(r20*r20)))+(((2.0)*x7158*x7159))+(((-1.0)*x7156))+(((-1.0)*(r22*r22)))+((x7156*x7157)))),-1);
if(!x7161.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7160.value)+(((1.5707963267949)*(x7161.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7162=IKsin(j4);
IkReal x7163=IKcos(j4);
IkReal x7164=(r11*sj5);
IkReal x7165=(r21*sj5);
IkReal x7166=(cj5*r00);
IkReal x7167=(cj5*r20);
IkReal x7168=(r01*sj5);
IkReal x7169=(cj5*r10);
IkReal x7170=((1.0)*x7163);
IkReal x7171=((1.0)*x7162);
evalcond[0]=(((x7162*x7165))+(((-1.0)*x7167*x7171))+(((-1.0)*r22*x7170)));
evalcond[1]=((((-1.0)*x7168*x7170))+(((-1.0)*r02*x7171))+((x7163*x7166)));
evalcond[2]=((((-1.0)*r12*x7171))+(((-1.0)*x7164*x7170))+((x7163*x7169)));
evalcond[3]=(((x7162*x7164))+(((-1.0)*x7169*x7171))+cj0+(((-1.0)*r12*x7170)));
evalcond[4]=((-1.0)+(((-1.0)*x7165*x7170))+(((-1.0)*r22*x7171))+((x7163*x7167)));
evalcond[5]=(((x7162*x7168))+(((-1.0)*sj0))+(((-1.0)*r02*x7170))+(((-1.0)*x7166*x7171)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7172=((1.0)*cj5);
CheckValue<IkReal> x7173 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7172))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7173.valid){
continue;
}
CheckValue<IkReal> x7174=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7172)))),-1);
if(!x7174.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7173.value)+(((1.5707963267949)*(x7174.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7175=IKsin(j4);
IkReal x7176=IKcos(j4);
IkReal x7177=(r11*sj5);
IkReal x7178=(r21*sj5);
IkReal x7179=(cj5*r00);
IkReal x7180=(cj5*r20);
IkReal x7181=(r01*sj5);
IkReal x7182=(cj5*r10);
IkReal x7183=((1.0)*x7176);
IkReal x7184=((1.0)*x7175);
evalcond[0]=((((-1.0)*x7180*x7184))+(((-1.0)*r22*x7183))+((x7175*x7178)));
evalcond[1]=(((x7176*x7179))+(((-1.0)*x7181*x7183))+(((-1.0)*r02*x7184)));
evalcond[2]=(((x7176*x7182))+(((-1.0)*x7177*x7183))+(((-1.0)*r12*x7184)));
evalcond[3]=(cj0+(((-1.0)*x7182*x7184))+(((-1.0)*r12*x7183))+((x7175*x7177)));
evalcond[4]=((-1.0)+(((-1.0)*x7178*x7183))+((x7176*x7180))+(((-1.0)*r22*x7184)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7179*x7184))+(((-1.0)*r02*x7183))+((x7175*x7181)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7185=((1.0)*sj5);
CheckValue<IkReal> x7186=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x7185)))),-1);
if(!x7186.valid){
continue;
}
CheckValue<IkReal> x7187 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x7185))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7187.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7186.value)))+(x7187.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7188=IKsin(j4);
IkReal x7189=IKcos(j4);
IkReal x7190=(r11*sj5);
IkReal x7191=(r21*sj5);
IkReal x7192=(cj5*r00);
IkReal x7193=(cj5*r20);
IkReal x7194=(r01*sj5);
IkReal x7195=(cj5*r10);
IkReal x7196=((1.0)*x7189);
IkReal x7197=((1.0)*x7188);
evalcond[0]=((((-1.0)*x7193*x7197))+(((-1.0)*r22*x7196))+((x7188*x7191)));
evalcond[1]=(((x7189*x7192))+(((-1.0)*x7194*x7196))+(((-1.0)*r02*x7197)));
evalcond[2]=(((x7189*x7195))+(((-1.0)*x7190*x7196))+(((-1.0)*r12*x7197)));
evalcond[3]=(cj0+(((-1.0)*x7195*x7197))+(((-1.0)*r12*x7196))+((x7188*x7190)));
evalcond[4]=((-1.0)+((x7189*x7193))+(((-1.0)*x7191*x7196))+(((-1.0)*r22*x7197)));
evalcond[5]=((((-1.0)*sj0))+((x7188*x7194))+(((-1.0)*r02*x7196))+(((-1.0)*x7192*x7197)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((3.40636494482648)*py))+(((-2.09499440268671)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.09499440268671)*py))+(((3.40636494482648)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((3.40636494482648)*py))+(((-2.09499440268671)*px))))+IKsqr(((((2.09499440268671)*py))+(((3.40636494482648)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((3.40636494482648)*py))+(((-2.09499440268671)*px))), ((((2.09499440268671)*py))+(((3.40636494482648)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7198=IKsin(j0);
IkReal x7199=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((-0.131)*x7198))+(((0.213)*x7199)));
evalcond[1]=((((-1.0)*py))+(((0.131)*x7199))+(((0.213)*x7198)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7200=((1.0)*cj5);
IkReal x7201=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7200)));
j4eval[0]=x7201;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x7200))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x7201);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7202=((1.0)*cj5);
IkReal x7203=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7202)));
j4eval[0]=x7203;
j4eval[1]=((IKabs(((((-1.0)*r20*sj0*x7202))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x7203);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7204=cj5*cj5;
IkReal x7205=((1.0)*sj5);
IkReal x7206=(cj5*r20);
IkReal x7207=(r11*r21);
IkReal x7208=(x7207+((r10*r20*x7204))+(((-1.0)*r11*x7205*x7206))+((r12*r22))+(((-1.0)*cj5*r10*r21*x7205))+(((-1.0)*x7204*x7207)));
j4eval[0]=x7208;
j4eval[1]=IKsign(x7208);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*x7205))+((cj0*x7206))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7209=cj5*cj5;
IkReal x7210=((1.0)*sj5);
IkReal x7211=(cj5*r20);
IkReal x7212=(r11*r21);
CheckValue<IkReal> x7213=IKPowWithIntegerCheck(IKsign((x7212+(((-1.0)*x7209*x7212))+((r10*r20*x7209))+(((-1.0)*cj5*r10*r21*x7210))+((r12*r22))+(((-1.0)*r11*x7210*x7211)))),-1);
if(!x7213.valid){
continue;
}
CheckValue<IkReal> x7214 = IKatan2WithCheck(IkReal((((cj0*x7211))+(((-1.0)*cj0*r21*x7210)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7214.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7213.value)))+(x7214.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7215=IKsin(j4);
IkReal x7216=IKcos(j4);
IkReal x7217=((1.0)*sj0);
IkReal x7218=(cj5*r00);
IkReal x7219=(r11*sj5);
IkReal x7220=(cj5*r10);
IkReal x7221=(r21*sj5);
IkReal x7222=(cj5*r20);
IkReal x7223=(r01*sj5);
IkReal x7224=((1.0)*x7216);
IkReal x7225=((1.0)*x7215);
evalcond[0]=(((x7215*x7221))+(((-1.0)*x7222*x7225))+(((-1.0)*r22*x7224)));
evalcond[1]=((((-1.0)*x7221*x7224))+((x7216*x7222))+(((-1.0)*r22*x7225)));
evalcond[2]=(cj0+(((-1.0)*r12*x7224))+((x7215*x7219))+(((-1.0)*x7220*x7225)));
evalcond[3]=((((-1.0)*r02*x7224))+(((-1.0)*x7217))+((x7215*x7223))+(((-1.0)*x7218*x7225)));
evalcond[4]=((((-1.0)*r02*x7225))+((x7216*x7218))+(((-1.0)*x7223*x7224))+(((-1.0)*cj0)));
evalcond[5]=(((x7216*x7220))+(((-1.0)*x7217))+(((-1.0)*r12*x7225))+(((-1.0)*x7219*x7224)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7226=((1.0)*cj5);
CheckValue<IkReal> x7227=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7226)))),-1);
if(!x7227.valid){
continue;
}
CheckValue<IkReal> x7228 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x7226)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7228.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7227.value)))+(x7228.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7229=IKsin(j4);
IkReal x7230=IKcos(j4);
IkReal x7231=((1.0)*sj0);
IkReal x7232=(cj5*r00);
IkReal x7233=(r11*sj5);
IkReal x7234=(cj5*r10);
IkReal x7235=(r21*sj5);
IkReal x7236=(cj5*r20);
IkReal x7237=(r01*sj5);
IkReal x7238=((1.0)*x7230);
IkReal x7239=((1.0)*x7229);
evalcond[0]=(((x7229*x7235))+(((-1.0)*x7236*x7239))+(((-1.0)*r22*x7238)));
evalcond[1]=(((x7230*x7236))+(((-1.0)*r22*x7239))+(((-1.0)*x7235*x7238)));
evalcond[2]=(((x7229*x7233))+cj0+(((-1.0)*x7234*x7239))+(((-1.0)*r12*x7238)));
evalcond[3]=(((x7229*x7237))+(((-1.0)*x7232*x7239))+(((-1.0)*x7231))+(((-1.0)*r02*x7238)));
evalcond[4]=(((x7230*x7232))+(((-1.0)*x7237*x7238))+(((-1.0)*r02*x7239))+(((-1.0)*cj0)));
evalcond[5]=(((x7230*x7234))+(((-1.0)*x7233*x7238))+(((-1.0)*x7231))+(((-1.0)*r12*x7239)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7240=((1.0)*cj5);
CheckValue<IkReal> x7241 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7240)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7241.valid){
continue;
}
CheckValue<IkReal> x7242=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7240)))),-1);
if(!x7242.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7241.value)+(((1.5707963267949)*(x7242.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7243=IKsin(j4);
IkReal x7244=IKcos(j4);
IkReal x7245=((1.0)*sj0);
IkReal x7246=(cj5*r00);
IkReal x7247=(r11*sj5);
IkReal x7248=(cj5*r10);
IkReal x7249=(r21*sj5);
IkReal x7250=(cj5*r20);
IkReal x7251=(r01*sj5);
IkReal x7252=((1.0)*x7244);
IkReal x7253=((1.0)*x7243);
evalcond[0]=(((x7243*x7249))+(((-1.0)*r22*x7252))+(((-1.0)*x7250*x7253)));
evalcond[1]=(((x7244*x7250))+(((-1.0)*x7249*x7252))+(((-1.0)*r22*x7253)));
evalcond[2]=(cj0+(((-1.0)*r12*x7252))+((x7243*x7247))+(((-1.0)*x7248*x7253)));
evalcond[3]=(((x7243*x7251))+(((-1.0)*x7246*x7253))+(((-1.0)*r02*x7252))+(((-1.0)*x7245)));
evalcond[4]=((((-1.0)*x7251*x7252))+((x7244*x7246))+(((-1.0)*r02*x7253))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x7247*x7252))+((x7244*x7248))+(((-1.0)*r12*x7253))+(((-1.0)*x7245)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.02203442325561)*py))+(((-0.579620370780054)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.579620370780054)*py))+(((-2.02203442325561)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.02203442325561)*py))+(((-0.579620370780054)*px))))+IKsqr(((((0.579620370780054)*py))+(((-2.02203442325561)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.02203442325561)*py))+(((-0.579620370780054)*px))), ((((0.579620370780054)*py))+(((-2.02203442325561)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7254=IKcos(j0);
IkReal x7255=IKsin(j0);
evalcond[0]=((((-0.457)*x7254))+(((-1.0)*px))+(((-0.131)*x7255)));
evalcond[1]=((((-0.457)*x7255))+(((-1.0)*py))+(((0.131)*x7254)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7256=((1.0)*cj5);
IkReal x7257=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7256)));
j4eval[0]=x7257;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7256))))));
j4eval[2]=IKsign(x7257);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7258=cj5*cj5;
IkReal x7259=((1.0)*r21);
IkReal x7260=(cj5*sj5);
IkReal x7261=((1.0)*r20);
IkReal x7262=((((-1.0)*r01*x7260*x7261))+((r01*r21))+(((-1.0)*r00*x7259*x7260))+(((-1.0)*r01*x7258*x7259))+((r02*r22))+((r00*r20*x7258)));
j4eval[0]=x7262;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7261)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7262);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7263=cj5*cj5;
IkReal x7264=(r21*sj5);
IkReal x7265=(r11*r21);
IkReal x7266=((1.0)*cj5*r20);
IkReal x7267=((((-1.0)*r11*sj5*x7266))+(((-1.0)*cj5*r10*x7264))+x7265+(((-1.0)*x7263*x7265))+((r12*r22))+((r10*r20*x7263)));
j4eval[0]=x7267;
j4eval[1]=((IKabs((((sj0*x7264))+(((-1.0)*sj0*x7266)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x7267);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7268=cj5*cj5;
IkReal x7269=(r21*sj5);
IkReal x7270=(r11*r21);
IkReal x7271=((1.0)*cj5*r20);
CheckValue<IkReal> x7272 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x7269))+(((-1.0)*sj0*x7271)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7272.valid){
continue;
}
CheckValue<IkReal> x7273=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*x7269))+x7270+(((-1.0)*r11*sj5*x7271))+((r12*r22))+((r10*r20*x7268))+(((-1.0)*x7268*x7270)))),-1);
if(!x7273.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7272.value)+(((1.5707963267949)*(x7273.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7274=IKsin(j4);
IkReal x7275=IKcos(j4);
IkReal x7276=(r11*sj5);
IkReal x7277=(cj5*r00);
IkReal x7278=(cj5*r10);
IkReal x7279=(r21*sj5);
IkReal x7280=(cj5*r20);
IkReal x7281=(r01*sj5);
IkReal x7282=((1.0)*x7275);
IkReal x7283=((1.0)*x7274);
evalcond[0]=((((-1.0)*x7280*x7283))+((x7274*x7279))+(((-1.0)*r22*x7282)));
evalcond[1]=(((x7275*x7280))+(((-1.0)*x7279*x7282))+(((-1.0)*r22*x7283)));
evalcond[2]=(cj0+(((-1.0)*x7278*x7283))+(((-1.0)*r12*x7282))+((x7274*x7276)));
evalcond[3]=(cj0+((x7275*x7277))+(((-1.0)*x7281*x7282))+(((-1.0)*r02*x7283)));
evalcond[4]=(sj0+((x7275*x7278))+(((-1.0)*x7276*x7282))+(((-1.0)*r12*x7283)));
evalcond[5]=((((-1.0)*sj0))+((x7274*x7281))+(((-1.0)*x7277*x7283))+(((-1.0)*r02*x7282)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7284=cj5*cj5;
IkReal x7285=((1.0)*r21);
IkReal x7286=(cj5*sj5);
IkReal x7287=((1.0)*r20);
CheckValue<IkReal> x7288 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7287)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7288.valid){
continue;
}
CheckValue<IkReal> x7289=IKPowWithIntegerCheck(IKsign((((r00*r20*x7284))+((r01*r21))+(((-1.0)*r00*x7285*x7286))+(((-1.0)*r01*x7284*x7285))+((r02*r22))+(((-1.0)*r01*x7286*x7287)))),-1);
if(!x7289.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7288.value)+(((1.5707963267949)*(x7289.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7290=IKsin(j4);
IkReal x7291=IKcos(j4);
IkReal x7292=(r11*sj5);
IkReal x7293=(cj5*r00);
IkReal x7294=(cj5*r10);
IkReal x7295=(r21*sj5);
IkReal x7296=(cj5*r20);
IkReal x7297=(r01*sj5);
IkReal x7298=((1.0)*x7291);
IkReal x7299=((1.0)*x7290);
evalcond[0]=((((-1.0)*r22*x7298))+(((-1.0)*x7296*x7299))+((x7290*x7295)));
evalcond[1]=((((-1.0)*r22*x7299))+(((-1.0)*x7295*x7298))+((x7291*x7296)));
evalcond[2]=(cj0+(((-1.0)*x7294*x7299))+((x7290*x7292))+(((-1.0)*r12*x7298)));
evalcond[3]=(cj0+(((-1.0)*r02*x7299))+((x7291*x7293))+(((-1.0)*x7297*x7298)));
evalcond[4]=(sj0+((x7291*x7294))+(((-1.0)*r12*x7299))+(((-1.0)*x7292*x7298)));
evalcond[5]=((((-1.0)*sj0))+((x7290*x7297))+(((-1.0)*r02*x7298))+(((-1.0)*x7293*x7299)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7300=((1.0)*cj5);
CheckValue<IkReal> x7301=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7300)))),-1);
if(!x7301.valid){
continue;
}
CheckValue<IkReal> x7302 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7300)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7302.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7301.value)))+(x7302.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7303=IKsin(j4);
IkReal x7304=IKcos(j4);
IkReal x7305=(r11*sj5);
IkReal x7306=(cj5*r00);
IkReal x7307=(cj5*r10);
IkReal x7308=(r21*sj5);
IkReal x7309=(cj5*r20);
IkReal x7310=(r01*sj5);
IkReal x7311=((1.0)*x7304);
IkReal x7312=((1.0)*x7303);
evalcond[0]=((((-1.0)*x7309*x7312))+((x7303*x7308))+(((-1.0)*r22*x7311)));
evalcond[1]=(((x7304*x7309))+(((-1.0)*x7308*x7311))+(((-1.0)*r22*x7312)));
evalcond[2]=(cj0+((x7303*x7305))+(((-1.0)*r12*x7311))+(((-1.0)*x7307*x7312)));
evalcond[3]=(cj0+((x7304*x7306))+(((-1.0)*x7310*x7311))+(((-1.0)*r02*x7312)));
evalcond[4]=(sj0+((x7304*x7307))+(((-1.0)*r12*x7312))+(((-1.0)*x7305*x7311)));
evalcond[5]=((((-1.0)*sj0))+((x7303*x7310))+(((-1.0)*x7306*x7312))+(((-1.0)*r02*x7311)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.71062796600817)*py))+(((-7.22878269506677)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.71062796600817)*px))+(((7.22878269506677)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.71062796600817)*py))+(((-7.22878269506677)*px))))+IKsqr(((((-1.71062796600817)*px))+(((7.22878269506677)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.71062796600817)*py))+(((-7.22878269506677)*px))), ((((-1.71062796600817)*px))+(((7.22878269506677)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7313=IKcos(j0);
IkReal x7314=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.131)*x7314))+(((-0.031)*x7313)));
evalcond[1]=((((-1.0)*py))+(((0.131)*x7313))+(((-0.031)*x7314)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7315=((1.0)*cj5);
IkReal x7316=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7315)));
j4eval[0]=x7316;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7315))))));
j4eval[2]=IKsign(x7316);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7317=((1.0)*cj5);
IkReal x7318=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7317)));
j4eval[0]=x7318;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x7317))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x7318);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7319=cj5*cj5;
IkReal x7320=((1.0)*sj5);
IkReal x7321=(cj5*r20);
IkReal x7322=(r11*r21);
IkReal x7323=(x7322+(((-1.0)*cj5*r10*r21*x7320))+((r12*r22))+((r10*r20*x7319))+(((-1.0)*x7319*x7322))+(((-1.0)*r11*x7320*x7321)));
j4eval[0]=x7323;
j4eval[1]=IKsign(x7323);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*x7320))+((cj0*x7321))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7324=cj5*cj5;
IkReal x7325=((1.0)*sj5);
IkReal x7326=(cj5*r20);
IkReal x7327=(r11*r21);
CheckValue<IkReal> x7328 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x7325))+((cj0*x7326)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7328.valid){
continue;
}
CheckValue<IkReal> x7329=IKPowWithIntegerCheck(IKsign((x7327+(((-1.0)*x7324*x7327))+(((-1.0)*r11*x7325*x7326))+(((-1.0)*cj5*r10*r21*x7325))+((r12*r22))+((r10*r20*x7324)))),-1);
if(!x7329.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7328.value)+(((1.5707963267949)*(x7329.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7330=IKsin(j4);
IkReal x7331=IKcos(j4);
IkReal x7332=((1.0)*sj0);
IkReal x7333=(cj5*r00);
IkReal x7334=(r11*sj5);
IkReal x7335=(cj5*r10);
IkReal x7336=(r21*sj5);
IkReal x7337=(cj5*r20);
IkReal x7338=(r01*sj5);
IkReal x7339=((1.0)*x7331);
IkReal x7340=((1.0)*x7330);
evalcond[0]=((((-1.0)*x7337*x7340))+((x7330*x7336))+(((-1.0)*r22*x7339)));
evalcond[1]=((((-1.0)*r22*x7340))+(((-1.0)*x7336*x7339))+((x7331*x7337)));
evalcond[2]=(cj0+(((-1.0)*r12*x7339))+((x7330*x7334))+(((-1.0)*x7335*x7340)));
evalcond[3]=((((-1.0)*r02*x7339))+((x7330*x7338))+(((-1.0)*x7333*x7340))+(((-1.0)*x7332)));
evalcond[4]=((((-1.0)*x7338*x7339))+(((-1.0)*r02*x7340))+((x7331*x7333))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x7340))+((x7331*x7335))+(((-1.0)*x7332))+(((-1.0)*x7334*x7339)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7341=((1.0)*cj5);
CheckValue<IkReal> x7342=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7341)))),-1);
if(!x7342.valid){
continue;
}
CheckValue<IkReal> x7343 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x7341)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7343.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7342.value)))+(x7343.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7344=IKsin(j4);
IkReal x7345=IKcos(j4);
IkReal x7346=((1.0)*sj0);
IkReal x7347=(cj5*r00);
IkReal x7348=(r11*sj5);
IkReal x7349=(cj5*r10);
IkReal x7350=(r21*sj5);
IkReal x7351=(cj5*r20);
IkReal x7352=(r01*sj5);
IkReal x7353=((1.0)*x7345);
IkReal x7354=((1.0)*x7344);
evalcond[0]=((((-1.0)*r22*x7353))+(((-1.0)*x7351*x7354))+((x7344*x7350)));
evalcond[1]=((((-1.0)*r22*x7354))+((x7345*x7351))+(((-1.0)*x7350*x7353)));
evalcond[2]=(cj0+((x7344*x7348))+(((-1.0)*r12*x7353))+(((-1.0)*x7349*x7354)));
evalcond[3]=(((x7344*x7352))+(((-1.0)*x7346))+(((-1.0)*r02*x7353))+(((-1.0)*x7347*x7354)));
evalcond[4]=(((x7345*x7347))+(((-1.0)*r02*x7354))+(((-1.0)*x7352*x7353))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x7354))+((x7345*x7349))+(((-1.0)*x7346))+(((-1.0)*x7348*x7353)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7355=((1.0)*cj5);
CheckValue<IkReal> x7356 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7355)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7356.valid){
continue;
}
CheckValue<IkReal> x7357=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7355))+(((-1.0)*r00*sj5)))),-1);
if(!x7357.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7356.value)+(((1.5707963267949)*(x7357.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7358=IKsin(j4);
IkReal x7359=IKcos(j4);
IkReal x7360=((1.0)*sj0);
IkReal x7361=(cj5*r00);
IkReal x7362=(r11*sj5);
IkReal x7363=(cj5*r10);
IkReal x7364=(r21*sj5);
IkReal x7365=(cj5*r20);
IkReal x7366=(r01*sj5);
IkReal x7367=((1.0)*x7359);
IkReal x7368=((1.0)*x7358);
evalcond[0]=(((x7358*x7364))+(((-1.0)*x7365*x7368))+(((-1.0)*r22*x7367)));
evalcond[1]=(((x7359*x7365))+(((-1.0)*x7364*x7367))+(((-1.0)*r22*x7368)));
evalcond[2]=(cj0+(((-1.0)*x7363*x7368))+((x7358*x7362))+(((-1.0)*r12*x7367)));
evalcond[3]=(((x7358*x7366))+(((-1.0)*x7360))+(((-1.0)*r02*x7367))+(((-1.0)*x7361*x7368)));
evalcond[4]=(((x7359*x7361))+(((-1.0)*x7366*x7367))+(((-1.0)*r02*x7368))+(((-1.0)*cj0)));
evalcond[5]=(((x7359*x7363))+(((-1.0)*r12*x7368))+(((-1.0)*x7360))+(((-1.0)*x7362*x7367)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7369=IKsin(j0);
IkReal x7370=IKcos(j0);
IkReal x7371=((0.085)*sj5);
IkReal x7372=((1.0)*cj5);
IkReal x7373=((1.0)*sj5);
IkReal x7374=((0.085)*cj5);
evalcond[0]=((((-1.0)*r01*x7372))+x7370+(((-1.0)*r00*x7373)));
evalcond[1]=(x7369+(((-1.0)*r11*x7372))+(((-1.0)*r10*x7373)));
evalcond[2]=((((-1.0)*r01*x7374))+(((-0.131)*x7369))+(((-1.0)*px))+(((-1.0)*r00*x7371)));
evalcond[3]=((((-1.0)*r11*x7374))+(((0.131)*x7370))+(((-1.0)*py))+(((-1.0)*r10*x7371)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7375=((1.0)*sj5);
IkReal x7376=((((-1.0)*cj5*r11))+(((-1.0)*r10*x7375)));
j4eval[0]=x7376;
j4eval[1]=IKsign(x7376);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x7375))+((cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7377=((1.0)*cj5);
IkReal x7378=((((-1.0)*r01*x7377))+(((-1.0)*r00*sj5)));
j4eval[0]=x7378;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7377)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7378);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7379=r21*r21;
IkReal x7380=cj5*cj5;
IkReal x7381=(r21*sj5);
IkReal x7382=(cj5*r20);
IkReal x7383=(((x7379*x7380))+(((2.0)*x7381*x7382))+(((-1.0)*(r22*r22)))+(((-1.0)*x7379))+(((-1.0)*x7380*(r20*r20))));
j4eval[0]=x7383;
j4eval[1]=((IKabs((x7381+(((-1.0)*x7382)))))+(IKabs(r22)));
j4eval[2]=IKsign(x7383);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7384=r21*r21;
IkReal x7385=cj5*cj5;
IkReal x7386=(r21*sj5);
IkReal x7387=(cj5*r20);
CheckValue<IkReal> x7388=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7385*(r20*r20)))+(((-1.0)*x7384))+(((2.0)*x7386*x7387))+((x7384*x7385))+(((-1.0)*(r22*r22))))),-1);
if(!x7388.valid){
continue;
}
CheckValue<IkReal> x7389 = IKatan2WithCheck(IkReal(r22),IkReal((x7386+(((-1.0)*x7387)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7389.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7388.value)))+(x7389.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7390=IKsin(j4);
IkReal x7391=IKcos(j4);
IkReal x7392=(r11*sj5);
IkReal x7393=(r21*sj5);
IkReal x7394=(cj5*r00);
IkReal x7395=(cj5*r20);
IkReal x7396=(r01*sj5);
IkReal x7397=(cj5*r10);
IkReal x7398=((1.0)*x7391);
IkReal x7399=((1.0)*x7390);
evalcond[0]=((((-1.0)*r22*x7398))+(((-1.0)*x7395*x7399))+((x7390*x7393)));
evalcond[1]=((((-1.0)*r02*x7399))+(((-1.0)*x7396*x7398))+((x7391*x7394)));
evalcond[2]=((((-1.0)*r12*x7399))+(((-1.0)*x7392*x7398))+((x7391*x7397)));
evalcond[3]=((((-1.0)*r12*x7398))+cj0+(((-1.0)*x7397*x7399))+((x7390*x7392)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x7399))+(((-1.0)*x7393*x7398))+((x7391*x7395)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7394*x7399))+(((-1.0)*r02*x7398))+((x7390*x7396)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7400=((1.0)*cj5);
CheckValue<IkReal> x7401 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7400)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7401.valid){
continue;
}
CheckValue<IkReal> x7402=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7400))+(((-1.0)*r00*sj5)))),-1);
if(!x7402.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7401.value)+(((1.5707963267949)*(x7402.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7403=IKsin(j4);
IkReal x7404=IKcos(j4);
IkReal x7405=(r11*sj5);
IkReal x7406=(r21*sj5);
IkReal x7407=(cj5*r00);
IkReal x7408=(cj5*r20);
IkReal x7409=(r01*sj5);
IkReal x7410=(cj5*r10);
IkReal x7411=((1.0)*x7404);
IkReal x7412=((1.0)*x7403);
evalcond[0]=(((x7403*x7406))+(((-1.0)*x7408*x7412))+(((-1.0)*r22*x7411)));
evalcond[1]=((((-1.0)*x7409*x7411))+((x7404*x7407))+(((-1.0)*r02*x7412)));
evalcond[2]=((((-1.0)*r12*x7412))+(((-1.0)*x7405*x7411))+((x7404*x7410)));
evalcond[3]=((((-1.0)*r12*x7411))+cj0+((x7403*x7405))+(((-1.0)*x7410*x7412)));
evalcond[4]=((-1.0)+((x7404*x7408))+(((-1.0)*r22*x7412))+(((-1.0)*x7406*x7411)));
evalcond[5]=((((-1.0)*sj0))+((x7403*x7409))+(((-1.0)*x7407*x7412))+(((-1.0)*r02*x7411)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7413=((1.0)*sj5);
CheckValue<IkReal> x7414=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x7413)))),-1);
if(!x7414.valid){
continue;
}
CheckValue<IkReal> x7415 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x7413))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7415.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7414.value)))+(x7415.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7416=IKsin(j4);
IkReal x7417=IKcos(j4);
IkReal x7418=(r11*sj5);
IkReal x7419=(r21*sj5);
IkReal x7420=(cj5*r00);
IkReal x7421=(cj5*r20);
IkReal x7422=(r01*sj5);
IkReal x7423=(cj5*r10);
IkReal x7424=((1.0)*x7417);
IkReal x7425=((1.0)*x7416);
evalcond[0]=((((-1.0)*x7421*x7425))+(((-1.0)*r22*x7424))+((x7416*x7419)));
evalcond[1]=((((-1.0)*x7422*x7424))+(((-1.0)*r02*x7425))+((x7417*x7420)));
evalcond[2]=((((-1.0)*r12*x7425))+(((-1.0)*x7418*x7424))+((x7417*x7423)));
evalcond[3]=(cj0+(((-1.0)*r12*x7424))+((x7416*x7418))+(((-1.0)*x7423*x7425)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x7425))+(((-1.0)*x7419*x7424))+((x7417*x7421)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7424))+(((-1.0)*x7420*x7425))+((x7416*x7422)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((3.40636494482648)*py))+(((-2.09499440268671)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.09499440268671)*py))+(((3.40636494482648)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((3.40636494482648)*py))+(((-2.09499440268671)*px))))+IKsqr(((((2.09499440268671)*py))+(((3.40636494482648)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((3.40636494482648)*py))+(((-2.09499440268671)*px))), ((((2.09499440268671)*py))+(((3.40636494482648)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7426=IKsin(j0);
IkReal x7427=IKcos(j0);
evalcond[0]=((((0.213)*x7427))+(((-0.131)*x7426))+(((-1.0)*px)));
evalcond[1]=((((0.213)*x7426))+(((-1.0)*py))+(((0.131)*x7427)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7428=((1.0)*cj5);
IkReal x7429=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7428)));
j4eval[0]=x7429;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7428))))));
j4eval[2]=IKsign(x7429);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7430=((1.0)*cj5);
IkReal x7431=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7430)));
j4eval[0]=x7431;
j4eval[1]=((IKabs(((((-1.0)*r20*sj0*x7430))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x7431);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7432=cj5*cj5;
IkReal x7433=((1.0)*sj5);
IkReal x7434=(cj5*r20);
IkReal x7435=(r11*r21);
IkReal x7436=((((-1.0)*cj5*r10*r21*x7433))+((r12*r22))+(((-1.0)*x7432*x7435))+((r10*r20*x7432))+x7435+(((-1.0)*r11*x7433*x7434)));
j4eval[0]=x7436;
j4eval[1]=IKsign(x7436);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x7433))+((cj0*x7434)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7437=cj5*cj5;
IkReal x7438=((1.0)*sj5);
IkReal x7439=(cj5*r20);
IkReal x7440=(r11*r21);
CheckValue<IkReal> x7441=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*r21*x7438))+((r12*r22))+((r10*r20*x7437))+x7440+(((-1.0)*r11*x7438*x7439))+(((-1.0)*x7437*x7440)))),-1);
if(!x7441.valid){
continue;
}
CheckValue<IkReal> x7442 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x7438))+((cj0*x7439)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7442.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7441.value)))+(x7442.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7443=IKsin(j4);
IkReal x7444=IKcos(j4);
IkReal x7445=((1.0)*sj0);
IkReal x7446=(cj5*r00);
IkReal x7447=(r11*sj5);
IkReal x7448=(cj5*r10);
IkReal x7449=(r21*sj5);
IkReal x7450=(cj5*r20);
IkReal x7451=(r01*sj5);
IkReal x7452=((1.0)*x7444);
IkReal x7453=((1.0)*x7443);
evalcond[0]=((((-1.0)*x7450*x7453))+((x7443*x7449))+(((-1.0)*r22*x7452)));
evalcond[1]=(((x7444*x7450))+(((-1.0)*x7449*x7452))+(((-1.0)*r22*x7453)));
evalcond[2]=(cj0+((x7443*x7447))+(((-1.0)*r12*x7452))+(((-1.0)*x7448*x7453)));
evalcond[3]=((((-1.0)*x7445))+((x7443*x7451))+(((-1.0)*x7446*x7453))+(((-1.0)*r02*x7452)));
evalcond[4]=(((x7444*x7446))+(((-1.0)*x7451*x7452))+(((-1.0)*r02*x7453))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x7445))+((x7444*x7448))+(((-1.0)*x7447*x7452))+(((-1.0)*r12*x7453)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7454=((1.0)*cj5);
CheckValue<IkReal> x7455=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7454)))),-1);
if(!x7455.valid){
continue;
}
CheckValue<IkReal> x7456 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x7454)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7456.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7455.value)))+(x7456.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7457=IKsin(j4);
IkReal x7458=IKcos(j4);
IkReal x7459=((1.0)*sj0);
IkReal x7460=(cj5*r00);
IkReal x7461=(r11*sj5);
IkReal x7462=(cj5*r10);
IkReal x7463=(r21*sj5);
IkReal x7464=(cj5*r20);
IkReal x7465=(r01*sj5);
IkReal x7466=((1.0)*x7458);
IkReal x7467=((1.0)*x7457);
evalcond[0]=(((x7457*x7463))+(((-1.0)*x7464*x7467))+(((-1.0)*r22*x7466)));
evalcond[1]=(((x7458*x7464))+(((-1.0)*r22*x7467))+(((-1.0)*x7463*x7466)));
evalcond[2]=(((x7457*x7461))+cj0+(((-1.0)*r12*x7466))+(((-1.0)*x7462*x7467)));
evalcond[3]=(((x7457*x7465))+(((-1.0)*x7459))+(((-1.0)*r02*x7466))+(((-1.0)*x7460*x7467)));
evalcond[4]=(((x7458*x7460))+(((-1.0)*r02*x7467))+(((-1.0)*x7465*x7466))+(((-1.0)*cj0)));
evalcond[5]=(((x7458*x7462))+(((-1.0)*x7459))+(((-1.0)*r12*x7467))+(((-1.0)*x7461*x7466)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7468=((1.0)*cj5);
CheckValue<IkReal> x7469=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7468)))),-1);
if(!x7469.valid){
continue;
}
CheckValue<IkReal> x7470 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7468)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7470.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7469.value)))+(x7470.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7471=IKsin(j4);
IkReal x7472=IKcos(j4);
IkReal x7473=((1.0)*sj0);
IkReal x7474=(cj5*r00);
IkReal x7475=(r11*sj5);
IkReal x7476=(cj5*r10);
IkReal x7477=(r21*sj5);
IkReal x7478=(cj5*r20);
IkReal x7479=(r01*sj5);
IkReal x7480=((1.0)*x7472);
IkReal x7481=((1.0)*x7471);
evalcond[0]=((((-1.0)*x7478*x7481))+((x7471*x7477))+(((-1.0)*r22*x7480)));
evalcond[1]=(((x7472*x7478))+(((-1.0)*r22*x7481))+(((-1.0)*x7477*x7480)));
evalcond[2]=((((-1.0)*x7476*x7481))+cj0+((x7471*x7475))+(((-1.0)*r12*x7480)));
evalcond[3]=((((-1.0)*x7474*x7481))+(((-1.0)*x7473))+((x7471*x7479))+(((-1.0)*r02*x7480)));
evalcond[4]=((((-1.0)*x7479*x7480))+((x7472*x7474))+(((-1.0)*r02*x7481))+(((-1.0)*cj0)));
evalcond[5]=(((x7472*x7476))+(((-1.0)*x7475*x7480))+(((-1.0)*x7473))+(((-1.0)*r12*x7481)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7482=((1.0)*sj5);
IkReal x7483=((1.0)*cj5);
if( IKabs(((((-1.0)*r10*x7482))+(((-1.0)*r11*x7483)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x7483))+(((-1.0)*r00*x7482)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x7482))+(((-1.0)*r11*x7483))))+IKsqr(((((-1.0)*r01*x7483))+(((-1.0)*r00*x7482))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r10*x7482))+(((-1.0)*r11*x7483))), ((((-1.0)*r01*x7483))+(((-1.0)*r00*x7482))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7484=IKsin(j0);
IkReal x7485=IKcos(j0);
IkReal x7486=((0.085)*sj5);
IkReal x7487=((1.0)*cj5);
IkReal x7488=((1.0)*sj5);
IkReal x7489=((0.085)*cj5);
evalcond[0]=((((-1.0)*x7485))+(((-1.0)*r01*x7487))+(((-1.0)*r00*x7488)));
evalcond[1]=((((-1.0)*x7484))+(((-1.0)*r10*x7488))+(((-1.0)*r11*x7487)));
evalcond[2]=((((-1.0)*r01*x7489))+(((-1.0)*px))+(((-1.0)*r00*x7486))+(((-0.131)*x7484)));
evalcond[3]=((((0.131)*x7485))+(((-1.0)*py))+(((-1.0)*r10*x7486))+(((-1.0)*r11*x7489)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7490=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7490;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x7490);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7491=((1.0)*cj5);
IkReal x7492=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7491)));
j4eval[0]=x7492;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7491)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7492);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7493=cj5*cj5;
IkReal x7494=r21*r21;
IkReal x7495=(r21*sj5);
IkReal x7496=(cj5*r20);
IkReal x7497=((((-1.0)*x7493*x7494))+(r22*r22)+((x7493*(r20*r20)))+x7494+(((-2.0)*x7495*x7496)));
j4eval[0]=x7497;
j4eval[1]=IKsign(x7497);
j4eval[2]=((IKabs(((((-1.0)*x7496))+x7495)))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7498=cj5*cj5;
IkReal x7499=r21*r21;
IkReal x7500=(r21*sj5);
IkReal x7501=(cj5*r20);
CheckValue<IkReal> x7502=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7498*x7499))+((x7498*(r20*r20)))+(r22*r22)+(((-2.0)*x7500*x7501))+x7499)),-1);
if(!x7502.valid){
continue;
}
CheckValue<IkReal> x7503 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*x7501))+x7500)),IKFAST_ATAN2_MAGTHRESH);
if(!x7503.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7502.value)))+(x7503.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7504=IKsin(j4);
IkReal x7505=IKcos(j4);
IkReal x7506=(r11*sj5);
IkReal x7507=(r21*sj5);
IkReal x7508=(cj5*r00);
IkReal x7509=(cj5*r20);
IkReal x7510=(r01*sj5);
IkReal x7511=(cj5*r10);
IkReal x7512=((1.0)*x7505);
IkReal x7513=((1.0)*x7504);
evalcond[0]=(((x7504*x7507))+(((-1.0)*x7509*x7513))+(((-1.0)*r22*x7512)));
evalcond[1]=(((x7505*x7508))+(((-1.0)*x7510*x7512))+(((-1.0)*r02*x7513)));
evalcond[2]=(((x7505*x7511))+(((-1.0)*x7506*x7512))+(((-1.0)*r12*x7513)));
evalcond[3]=(cj0+((x7504*x7506))+(((-1.0)*x7511*x7513))+(((-1.0)*r12*x7512)));
evalcond[4]=((1.0)+((x7505*x7509))+(((-1.0)*x7507*x7512))+(((-1.0)*r22*x7513)));
evalcond[5]=((((-1.0)*sj0))+((x7504*x7510))+(((-1.0)*x7508*x7513))+(((-1.0)*r02*x7512)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7514=((1.0)*cj5);
CheckValue<IkReal> x7515=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7514))+(((-1.0)*r00*sj5)))),-1);
if(!x7515.valid){
continue;
}
CheckValue<IkReal> x7516 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7514)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7516.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7515.value)))+(x7516.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7517=IKsin(j4);
IkReal x7518=IKcos(j4);
IkReal x7519=(r11*sj5);
IkReal x7520=(r21*sj5);
IkReal x7521=(cj5*r00);
IkReal x7522=(cj5*r20);
IkReal x7523=(r01*sj5);
IkReal x7524=(cj5*r10);
IkReal x7525=((1.0)*x7518);
IkReal x7526=((1.0)*x7517);
evalcond[0]=((((-1.0)*x7522*x7526))+((x7517*x7520))+(((-1.0)*r22*x7525)));
evalcond[1]=(((x7518*x7521))+(((-1.0)*x7523*x7525))+(((-1.0)*r02*x7526)));
evalcond[2]=(((x7518*x7524))+(((-1.0)*x7519*x7525))+(((-1.0)*r12*x7526)));
evalcond[3]=(cj0+((x7517*x7519))+(((-1.0)*x7524*x7526))+(((-1.0)*r12*x7525)));
evalcond[4]=((1.0)+((x7518*x7522))+(((-1.0)*x7520*x7525))+(((-1.0)*r22*x7526)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7525))+(((-1.0)*x7521*x7526))+((x7517*x7523)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7527 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7527.valid){
continue;
}
CheckValue<IkReal> x7528=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7528.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7527.value)+(((1.5707963267949)*(x7528.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7529=IKsin(j4);
IkReal x7530=IKcos(j4);
IkReal x7531=(r11*sj5);
IkReal x7532=(r21*sj5);
IkReal x7533=(cj5*r00);
IkReal x7534=(cj5*r20);
IkReal x7535=(r01*sj5);
IkReal x7536=(cj5*r10);
IkReal x7537=((1.0)*x7530);
IkReal x7538=((1.0)*x7529);
evalcond[0]=((((-1.0)*r22*x7537))+(((-1.0)*x7534*x7538))+((x7529*x7532)));
evalcond[1]=(((x7530*x7533))+(((-1.0)*x7535*x7537))+(((-1.0)*r02*x7538)));
evalcond[2]=((((-1.0)*r12*x7538))+((x7530*x7536))+(((-1.0)*x7531*x7537)));
evalcond[3]=(cj0+(((-1.0)*r12*x7537))+(((-1.0)*x7536*x7538))+((x7529*x7531)));
evalcond[4]=((1.0)+(((-1.0)*x7532*x7537))+((x7530*x7534))+(((-1.0)*r22*x7538)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7533*x7538))+((x7529*x7535))+(((-1.0)*r02*x7537)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-3.40636494482648)*py))+(((-2.09499440268671)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.09499440268671)*py))+(((-3.40636494482648)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.40636494482648)*py))+(((-2.09499440268671)*px))))+IKsqr(((((2.09499440268671)*py))+(((-3.40636494482648)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-3.40636494482648)*py))+(((-2.09499440268671)*px))), ((((2.09499440268671)*py))+(((-3.40636494482648)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7539=IKcos(j0);
IkReal x7540=IKsin(j0);
evalcond[0]=((((-0.131)*x7540))+(((-0.213)*x7539))+(((-1.0)*px)));
evalcond[1]=((((-0.213)*x7540))+(((-1.0)*py))+(((0.131)*x7539)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7541=((1.0)*cj5);
IkReal x7542=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7541)));
j4eval[0]=x7542;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7541))))));
j4eval[2]=IKsign(x7542);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7543=cj5*cj5;
IkReal x7544=((1.0)*r21);
IkReal x7545=(cj5*sj5);
IkReal x7546=((1.0)*r20);
IkReal x7547=(((r00*r20*x7543))+(((-1.0)*r01*x7545*x7546))+((r01*r21))+(((-1.0)*r00*x7544*x7545))+((r02*r22))+(((-1.0)*r01*x7543*x7544)));
j4eval[0]=x7547;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7546))))));
j4eval[2]=IKsign(x7547);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7548=cj5*cj5;
IkReal x7549=(r21*sj5);
IkReal x7550=(r11*r21);
IkReal x7551=((1.0)*cj5*r20);
IkReal x7552=((((-1.0)*r11*sj5*x7551))+((r10*r20*x7548))+(((-1.0)*x7548*x7550))+((r12*r22))+x7550+(((-1.0)*cj5*r10*x7549)));
j4eval[0]=x7552;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((sj0*x7549))+(((-1.0)*sj0*x7551))))));
j4eval[2]=IKsign(x7552);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7553=cj5*cj5;
IkReal x7554=(r21*sj5);
IkReal x7555=(r11*r21);
IkReal x7556=((1.0)*cj5*r20);
CheckValue<IkReal> x7557=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj5*x7556))+((r10*r20*x7553))+(((-1.0)*x7553*x7555))+((r12*r22))+x7555+(((-1.0)*cj5*r10*x7554)))),-1);
if(!x7557.valid){
continue;
}
CheckValue<IkReal> x7558 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x7554))+(((-1.0)*sj0*x7556)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7558.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7557.value)))+(x7558.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7559=IKsin(j4);
IkReal x7560=IKcos(j4);
IkReal x7561=(r11*sj5);
IkReal x7562=(cj5*r00);
IkReal x7563=(cj5*r10);
IkReal x7564=(r21*sj5);
IkReal x7565=(cj5*r20);
IkReal x7566=(r01*sj5);
IkReal x7567=((1.0)*x7560);
IkReal x7568=((1.0)*x7559);
evalcond[0]=((((-1.0)*x7565*x7568))+(((-1.0)*r22*x7567))+((x7559*x7564)));
evalcond[1]=((((-1.0)*x7564*x7567))+(((-1.0)*r22*x7568))+((x7560*x7565)));
evalcond[2]=((((-1.0)*x7563*x7568))+cj0+((x7559*x7561))+(((-1.0)*r12*x7567)));
evalcond[3]=((((-1.0)*r02*x7568))+cj0+(((-1.0)*x7566*x7567))+((x7560*x7562)));
evalcond[4]=(sj0+((x7560*x7563))+(((-1.0)*r12*x7568))+(((-1.0)*x7561*x7567)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7562*x7568))+(((-1.0)*r02*x7567))+((x7559*x7566)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7569=cj5*cj5;
IkReal x7570=((1.0)*r21);
IkReal x7571=(cj5*sj5);
IkReal x7572=((1.0)*r20);
CheckValue<IkReal> x7573=IKPowWithIntegerCheck(IKsign((((r00*r20*x7569))+((r01*r21))+(((-1.0)*r01*x7571*x7572))+((r02*r22))+(((-1.0)*r01*x7569*x7570))+(((-1.0)*r00*x7570*x7571)))),-1);
if(!x7573.valid){
continue;
}
CheckValue<IkReal> x7574 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7572)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7574.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7573.value)))+(x7574.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7575=IKsin(j4);
IkReal x7576=IKcos(j4);
IkReal x7577=(r11*sj5);
IkReal x7578=(cj5*r00);
IkReal x7579=(cj5*r10);
IkReal x7580=(r21*sj5);
IkReal x7581=(cj5*r20);
IkReal x7582=(r01*sj5);
IkReal x7583=((1.0)*x7576);
IkReal x7584=((1.0)*x7575);
evalcond[0]=((((-1.0)*r22*x7583))+(((-1.0)*x7581*x7584))+((x7575*x7580)));
evalcond[1]=(((x7576*x7581))+(((-1.0)*r22*x7584))+(((-1.0)*x7580*x7583)));
evalcond[2]=(cj0+((x7575*x7577))+(((-1.0)*r12*x7583))+(((-1.0)*x7579*x7584)));
evalcond[3]=(cj0+((x7576*x7578))+(((-1.0)*r02*x7584))+(((-1.0)*x7582*x7583)));
evalcond[4]=(sj0+((x7576*x7579))+(((-1.0)*x7577*x7583))+(((-1.0)*r12*x7584)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7583))+(((-1.0)*x7578*x7584))+((x7575*x7582)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7585=((1.0)*cj5);
CheckValue<IkReal> x7586 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7585))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7586.valid){
continue;
}
CheckValue<IkReal> x7587=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7585))+(((-1.0)*r00*sj5)))),-1);
if(!x7587.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7586.value)+(((1.5707963267949)*(x7587.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7588=IKsin(j4);
IkReal x7589=IKcos(j4);
IkReal x7590=(r11*sj5);
IkReal x7591=(cj5*r00);
IkReal x7592=(cj5*r10);
IkReal x7593=(r21*sj5);
IkReal x7594=(cj5*r20);
IkReal x7595=(r01*sj5);
IkReal x7596=((1.0)*x7589);
IkReal x7597=((1.0)*x7588);
evalcond[0]=(((x7588*x7593))+(((-1.0)*r22*x7596))+(((-1.0)*x7594*x7597)));
evalcond[1]=(((x7589*x7594))+(((-1.0)*r22*x7597))+(((-1.0)*x7593*x7596)));
evalcond[2]=(((x7588*x7590))+(((-1.0)*x7592*x7597))+cj0+(((-1.0)*r12*x7596)));
evalcond[3]=(cj0+((x7589*x7591))+(((-1.0)*x7595*x7596))+(((-1.0)*r02*x7597)));
evalcond[4]=(sj0+(((-1.0)*x7590*x7596))+(((-1.0)*r12*x7597))+((x7589*x7592)));
evalcond[5]=(((x7588*x7595))+(((-1.0)*sj0))+(((-1.0)*x7591*x7597))+(((-1.0)*r02*x7596)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7598=cj1*cj1;
IkReal x7599=(cj5*r01);
IkReal x7600=(cj1*sj2);
IkReal x7601=(r00*sj5);
IkReal x7602=(cj1*sj1);
IkReal x7603=(cj2*sj2);
IkReal x7604=(cj2*sj1);
IkReal x7605=((1000.0)*py);
IkReal x7606=((85.0)*cj5*r11);
IkReal x7607=((85.0)*r10*sj5);
CheckValue<IkReal> x7608=IKPowWithIntegerCheck(((((-426.0)*x7602*(cj2*cj2)))+(((-426.0)*x7598*x7603))+(((-244.0)*cj2*x7602))+(((-244.0)*sj2*x7598))+(((213.0)*x7602))+(((213.0)*x7603))),-1);
if(!x7608.valid){
continue;
}
CheckValue<IkReal> x7609=IKPowWithIntegerCheck(((((-1.0)*x7600))+(((-1.0)*x7604))),-1);
if(!x7609.valid){
continue;
}
if( IKabs(((x7608.value)*(((((-131.0)*x7599))+(((-1.0)*x7604*x7607))+(((-1.0)*x7604*x7606))+(((-1.0)*x7604*x7605))+(((-1.0)*x7600*x7607))+(((-1.0)*x7600*x7605))+(((-1.0)*x7600*x7606))+(((-131.0)*x7601)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x7609.value)*((x7599+x7601)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x7608.value)*(((((-131.0)*x7599))+(((-1.0)*x7604*x7607))+(((-1.0)*x7604*x7606))+(((-1.0)*x7604*x7605))+(((-1.0)*x7600*x7607))+(((-1.0)*x7600*x7605))+(((-1.0)*x7600*x7606))+(((-131.0)*x7601))))))+IKsqr(((x7609.value)*((x7599+x7601))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x7608.value)*(((((-131.0)*x7599))+(((-1.0)*x7604*x7607))+(((-1.0)*x7604*x7606))+(((-1.0)*x7604*x7605))+(((-1.0)*x7600*x7607))+(((-1.0)*x7600*x7605))+(((-1.0)*x7600*x7606))+(((-131.0)*x7601))))), ((x7609.value)*((x7599+x7601))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7610=IKcos(j0);
IkReal x7611=IKsin(j0);
IkReal x7612=((0.213)*sj1);
IkReal x7613=((1.0)*cj1);
IkReal x7614=(r00*sj5);
IkReal x7615=((1.0)*cj5);
IkReal x7616=(r10*sj5);
IkReal x7617=((0.213)*cj1);
IkReal x7618=((1.0)*sj1);
IkReal x7619=((0.244)*cj1);
IkReal x7620=((0.085)*cj5);
IkReal x7621=(sj2*x7610);
IkReal x7622=(sj2*x7611);
IkReal x7623=(cj2*x7610);
IkReal x7624=(cj2*x7611);
evalcond[0]=((((-1.0)*r01*x7615))+(((-1.0)*x7614))+(((-1.0)*x7618*x7623))+(((-1.0)*x7613*x7621)));
evalcond[1]=((((-1.0)*r11*x7615))+(((-1.0)*x7616))+(((-1.0)*x7618*x7624))+(((-1.0)*x7613*x7622)));
evalcond[2]=(((x7617*x7623))+(((-1.0)*x7612*x7621))+(((-0.131)*x7611))+(((-1.0)*r01*x7620))+(((-0.085)*x7614))+(((-1.0)*px))+((x7610*x7619)));
evalcond[3]=(((x7617*x7624))+(((-1.0)*x7612*x7622))+(((0.131)*x7610))+(((-1.0)*r11*x7620))+(((-0.085)*x7616))+(((-1.0)*py))+((x7611*x7619)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7625=((1.0)*cj5);
IkReal x7626=((((-1.0)*r01*x7625))+(((-1.0)*r00*sj5)));
j4eval[0]=x7626;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7625))))));
j4eval[2]=IKsign(x7626);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7627=((1.0)*cj5);
IkReal x7628=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7627)));
j4eval[0]=x7628;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x7627))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x7628);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7629=((1.0)*sj0);
IkReal x7630=((1.0)*cj0);
IkReal x7631=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x7631;
j4eval[1]=((IKabs(((((-1.0)*r12*x7629))+(((-1.0)*r02*x7630)))))+(IKabs(((((-1.0)*r11*sj5*x7629))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x7630))))));
j4eval[2]=IKsign(x7631);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x7632=((-1.0)*r20);
IkReal x7634 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7634)==0){
continue;
}
IkReal x7633=pow(x7634,-0.5);
CheckValue<IkReal> x7635 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7632),IKFAST_ATAN2_MAGTHRESH);
if(!x7635.valid){
continue;
}
IkReal gconst132=((-1.0)*(x7635.value));
IkReal gconst133=(r21*x7633);
IkReal gconst134=(x7632*x7633);
CheckValue<IkReal> x7636 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7636.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7636.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7637=((-1.0)*r20);
IkReal x7638=x7633;
CheckValue<IkReal> x7640 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7637),IKFAST_ATAN2_MAGTHRESH);
if(!x7640.valid){
continue;
}
IkReal x7639=((-1.0)*(x7640.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7639;
IkReal gconst132=x7639;
IkReal gconst133=(r21*x7638);
IkReal gconst134=(x7637*x7638);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7641=((-1.0)*r20);
IkReal x7642=x7633;
CheckValue<IkReal> x7644 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7641),IKFAST_ATAN2_MAGTHRESH);
if(!x7644.valid){
continue;
}
IkReal x7643=((-1.0)*(x7644.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7643;
IkReal gconst132=x7643;
IkReal gconst133=(r21*x7642);
IkReal gconst134=(x7641*x7642);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x7645=((-1.0)*r20);
IkReal x7646=x7633;
CheckValue<IkReal> x7648 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7645),IKFAST_ATAN2_MAGTHRESH);
if(!x7648.valid){
continue;
}
IkReal x7647=((-1.0)*(x7648.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7647;
IkReal gconst132=x7647;
IkReal gconst133=(r21*x7646);
IkReal gconst134=(x7645*x7646);
IkReal x7649=r22*r22;
CheckValue<IkReal> x7652=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7649))),-1);
if(!x7652.valid){
continue;
}
IkReal x7650=x7652.value;
IkReal x7651=((((2.0)*x7650*(r20*r20)*(r21*r21)))+((x7650*(r20*r20*r20*r20)))+((x7650*(r21*r21*r21*r21)))+x7649);
j4eval[0]=x7651;
j4eval[1]=IKsign(x7651);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7653=(gconst133*r21);
IkReal x7654=(cj1*sj2);
IkReal x7655=(gconst134*r20);
IkReal x7656=(cj2*sj1);
CheckValue<IkReal> x7657=IKPowWithIntegerCheck(IKsign(((x7655*x7655)+(r22*r22)+(((-2.0)*x7653*x7655))+(x7653*x7653))),-1);
if(!x7657.valid){
continue;
}
CheckValue<IkReal> x7658 = IKatan2WithCheck(IkReal((((r22*x7654))+((r22*x7656)))),IkReal(((((-1.0)*x7654*x7655))+(((-1.0)*x7655*x7656))+((x7653*x7654))+((x7653*x7656)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7658.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7657.value)))+(x7658.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7659=IKsin(j4);
IkReal x7660=IKcos(j4);
IkReal x7661=(sj1*sj2);
IkReal x7662=(gconst133*r11);
IkReal x7663=(gconst133*r21);
IkReal x7664=(gconst133*r01);
IkReal x7665=((1.0)*x7660);
IkReal x7666=(gconst134*x7660);
IkReal x7667=((1.0)*x7659);
IkReal x7668=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*gconst134*r20*x7667))+(((-1.0)*r22*x7665))+((x7659*x7663)));
evalcond[1]=((((-1.0)*gconst134*r10*x7667))+(((-1.0)*r12*x7665))+cj0+((x7659*x7662)));
evalcond[2]=((((-1.0)*sj0))+((x7659*x7664))+(((-1.0)*r02*x7665))+(((-1.0)*gconst134*r00*x7667)));
evalcond[3]=(((cj2*sj1))+((r20*x7666))+((cj1*sj2))+(((-1.0)*r22*x7667))+(((-1.0)*x7663*x7665)));
evalcond[4]=((((-1.0)*cj0*x7668))+((r00*x7666))+(((-1.0)*r02*x7667))+((cj0*x7661))+(((-1.0)*x7664*x7665)));
evalcond[5]=((((-1.0)*r12*x7667))+((r10*x7666))+(((-1.0)*x7662*x7665))+((sj0*x7661))+(((-1.0)*sj0*x7668)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7669=((1.0)*gconst134);
CheckValue<IkReal> x7670 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7669))+((gconst133*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7670.valid){
continue;
}
CheckValue<IkReal> x7671=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r10))+(((-1.0)*r11*x7669)))),-1);
if(!x7671.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7670.value)+(((1.5707963267949)*(x7671.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7672=IKsin(j4);
IkReal x7673=IKcos(j4);
IkReal x7674=(sj1*sj2);
IkReal x7675=(gconst133*r11);
IkReal x7676=(gconst133*r21);
IkReal x7677=(gconst133*r01);
IkReal x7678=((1.0)*x7673);
IkReal x7679=(gconst134*x7673);
IkReal x7680=((1.0)*x7672);
IkReal x7681=((1.0)*cj1*cj2);
evalcond[0]=(((x7672*x7676))+(((-1.0)*gconst134*r20*x7680))+(((-1.0)*r22*x7678)));
evalcond[1]=(((x7672*x7675))+(((-1.0)*gconst134*r10*x7680))+cj0+(((-1.0)*r12*x7678)));
evalcond[2]=(((x7672*x7677))+(((-1.0)*gconst134*r00*x7680))+(((-1.0)*sj0))+(((-1.0)*r02*x7678)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7680))+((r20*x7679))+(((-1.0)*x7676*x7678)));
evalcond[4]=((((-1.0)*cj0*x7681))+(((-1.0)*x7677*x7678))+((cj0*x7674))+((r00*x7679))+(((-1.0)*r02*x7680)));
evalcond[5]=(((sj0*x7674))+(((-1.0)*r12*x7680))+(((-1.0)*sj0*x7681))+((r10*x7679))+(((-1.0)*x7675*x7678)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7682=((1.0)*gconst134);
CheckValue<IkReal> x7683=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r00))+(((-1.0)*r01*x7682)))),-1);
if(!x7683.valid){
continue;
}
CheckValue<IkReal> x7684 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst133*r21))+(((-1.0)*cj0*r20*x7682)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7684.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7683.value)))+(x7684.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7685=IKsin(j4);
IkReal x7686=IKcos(j4);
IkReal x7687=(sj1*sj2);
IkReal x7688=(gconst133*r11);
IkReal x7689=(gconst133*r21);
IkReal x7690=(gconst133*r01);
IkReal x7691=((1.0)*x7686);
IkReal x7692=(gconst134*x7686);
IkReal x7693=((1.0)*x7685);
IkReal x7694=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*gconst134*r20*x7693))+(((-1.0)*r22*x7691))+((x7685*x7689)));
evalcond[1]=((((-1.0)*gconst134*r10*x7693))+cj0+((x7685*x7688))+(((-1.0)*r12*x7691)));
evalcond[2]=((((-1.0)*r02*x7691))+(((-1.0)*sj0))+(((-1.0)*gconst134*r00*x7693))+((x7685*x7690)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7693))+((r20*x7692))+(((-1.0)*x7689*x7691)));
evalcond[4]=((((-1.0)*r02*x7693))+(((-1.0)*cj0*x7694))+((cj0*x7687))+((r00*x7692))+(((-1.0)*x7690*x7691)));
evalcond[5]=(((sj0*x7687))+((r10*x7692))+(((-1.0)*r12*x7693))+(((-1.0)*sj0*x7694))+(((-1.0)*x7688*x7691)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7695=((-1.0)*r21);
IkReal x7697 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7697)==0){
continue;
}
IkReal x7696=pow(x7697,-0.5);
CheckValue<IkReal> x7698 = IKatan2WithCheck(IkReal(x7695),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7698.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x7698.value))));
IkReal gconst136=(x7695*x7696);
IkReal gconst137=((1.0)*r20*x7696);
CheckValue<IkReal> x7699 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7699.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7699.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7700=((-1.0)*r21);
CheckValue<IkReal> x7703 = IKatan2WithCheck(IkReal(x7700),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7703.valid){
continue;
}
IkReal x7701=((1.0)*(x7703.value));
IkReal x7702=x7696;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7701)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7701)));
IkReal gconst136=(x7700*x7702);
IkReal gconst137=((1.0)*r20*x7702);
IkReal x7704=r22*r22;
IkReal x7705=((1.0)*x7704);
CheckValue<IkReal> x7709=IKPowWithIntegerCheck(((-1.0)+x7704),-1);
if(!x7709.valid){
continue;
}
IkReal x7706=x7709.value;
if((((1.0)+(((-1.0)*x7705)))) < -0.00001)
continue;
IkReal x7707=IKsqrt(((1.0)+(((-1.0)*x7705))));
IkReal x7708=(cj0*x7706*x7707);
j4eval[0]=((IKabs(((((-1.0)*x7705*x7708))+x7708)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7710=((-1.0)*r21);
CheckValue<IkReal> x7713 = IKatan2WithCheck(IkReal(x7710),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7713.valid){
continue;
}
IkReal x7711=((1.0)*(x7713.value));
IkReal x7712=x7696;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7711)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7711)));
IkReal gconst136=(x7710*x7712);
IkReal gconst137=((1.0)*r20*x7712);
IkReal x7714=r22*r22;
IkReal x7715=((1.0)*x7714);
CheckValue<IkReal> x7719=IKPowWithIntegerCheck(((-1.0)+x7714),-1);
if(!x7719.valid){
continue;
}
IkReal x7716=x7719.value;
if((((1.0)+(((-1.0)*x7715)))) < -0.00001)
continue;
IkReal x7717=IKsqrt(((1.0)+(((-1.0)*x7715))));
IkReal x7718=(sj0*x7716*x7717);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x7715*x7718))+x7718))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7720=((-1.0)*r21);
CheckValue<IkReal> x7723 = IKatan2WithCheck(IkReal(x7720),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7723.valid){
continue;
}
IkReal x7721=((1.0)*(x7723.value));
IkReal x7722=x7696;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7721)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7721)));
IkReal gconst136=(x7720*x7722);
IkReal gconst137=((1.0)*r20*x7722);
IkReal x7724=r22*r22;
IkReal x7725=(r12*sj0);
IkReal x7726=(cj0*r02);
CheckValue<IkReal> x7730=IKPowWithIntegerCheck(((-1.0)+x7724),-1);
if(!x7730.valid){
continue;
}
IkReal x7727=x7730.value;
if((((1.0)+(((-1.0)*x7724)))) < -0.00001)
continue;
IkReal x7728=IKsqrt(((1.0)+(((-1.0)*x7724))));
IkReal x7729=(r22*x7727*x7728);
j4eval[0]=0;
j4eval[1]=((IKabs((((x7725*x7729))+((x7726*x7729)))))+(IKabs(((((-1.0)*x7725))+(((-1.0)*x7726))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7731=((1.0)*sj0);
IkReal x7732=((1.0)*cj0);
CheckValue<IkReal> x7733=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r20))+(((-1.0)*gconst137*r21)))),-1);
if(!x7733.valid){
continue;
}
CheckValue<IkReal> x7734 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x7731))+(((-1.0)*r02*x7732)))),IkReal((((gconst137*r10*sj0))+(((-1.0)*gconst136*r01*x7732))+(((-1.0)*gconst136*r11*x7731))+((cj0*gconst137*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7734.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7733.value)))+(x7734.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7735=IKsin(j4);
IkReal x7736=IKcos(j4);
IkReal x7737=(gconst136*r01);
IkReal x7738=(gconst137*r10);
IkReal x7739=(sj1*sj2);
IkReal x7740=(gconst137*r20);
IkReal x7741=(gconst136*r11);
IkReal x7742=(gconst136*r21);
IkReal x7743=(gconst137*r00);
IkReal x7744=((1.0)*x7736);
IkReal x7745=((1.0)*cj1*cj2);
IkReal x7746=((1.0)*x7735);
evalcond[0]=((((-1.0)*r22*x7744))+(((-1.0)*x7740*x7746))+((x7735*x7742)));
evalcond[1]=(cj0+(((-1.0)*r12*x7744))+(((-1.0)*x7738*x7746))+((x7735*x7741)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7744))+(((-1.0)*x7743*x7746))+((x7735*x7737)));
evalcond[3]=((((-1.0)*x7742*x7744))+((cj2*sj1))+(((-1.0)*r22*x7746))+((cj1*sj2))+((x7736*x7740)));
evalcond[4]=((((-1.0)*r02*x7746))+((cj0*x7739))+(((-1.0)*x7737*x7744))+(((-1.0)*cj0*x7745))+((x7736*x7743)));
evalcond[5]=((((-1.0)*x7741*x7744))+((x7736*x7738))+(((-1.0)*r12*x7746))+((sj0*x7739))+(((-1.0)*sj0*x7745)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7747=((1.0)*gconst137);
CheckValue<IkReal> x7748=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r10))+(((-1.0)*r11*x7747)))),-1);
if(!x7748.valid){
continue;
}
CheckValue<IkReal> x7749 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7747))+((gconst136*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7749.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7748.value)))+(x7749.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7750=IKsin(j4);
IkReal x7751=IKcos(j4);
IkReal x7752=(gconst136*r01);
IkReal x7753=(gconst137*r10);
IkReal x7754=(sj1*sj2);
IkReal x7755=(gconst137*r20);
IkReal x7756=(gconst136*r11);
IkReal x7757=(gconst136*r21);
IkReal x7758=(gconst137*r00);
IkReal x7759=((1.0)*x7751);
IkReal x7760=((1.0)*cj1*cj2);
IkReal x7761=((1.0)*x7750);
evalcond[0]=((((-1.0)*r22*x7759))+(((-1.0)*x7755*x7761))+((x7750*x7757)));
evalcond[1]=(cj0+(((-1.0)*r12*x7759))+((x7750*x7756))+(((-1.0)*x7753*x7761)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7759))+(((-1.0)*x7758*x7761))+((x7750*x7752)));
evalcond[3]=((((-1.0)*x7757*x7759))+((cj2*sj1))+(((-1.0)*r22*x7761))+((cj1*sj2))+((x7751*x7755)));
evalcond[4]=((((-1.0)*r02*x7761))+(((-1.0)*x7752*x7759))+(((-1.0)*cj0*x7760))+((cj0*x7754))+((x7751*x7758)));
evalcond[5]=(((sj0*x7754))+(((-1.0)*x7756*x7759))+(((-1.0)*sj0*x7760))+(((-1.0)*r12*x7761))+((x7751*x7753)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7762=((1.0)*gconst137);
CheckValue<IkReal> x7763 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst136*r21))+(((-1.0)*cj0*r20*x7762)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7763.valid){
continue;
}
CheckValue<IkReal> x7764=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7762))+(((-1.0)*gconst136*r00)))),-1);
if(!x7764.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7763.value)+(((1.5707963267949)*(x7764.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7765=IKsin(j4);
IkReal x7766=IKcos(j4);
IkReal x7767=(gconst136*r01);
IkReal x7768=(gconst137*r10);
IkReal x7769=(sj1*sj2);
IkReal x7770=(gconst137*r20);
IkReal x7771=(gconst136*r11);
IkReal x7772=(gconst136*r21);
IkReal x7773=(gconst137*r00);
IkReal x7774=((1.0)*x7766);
IkReal x7775=((1.0)*cj1*cj2);
IkReal x7776=((1.0)*x7765);
evalcond[0]=(((x7765*x7772))+(((-1.0)*r22*x7774))+(((-1.0)*x7770*x7776)));
evalcond[1]=(((x7765*x7771))+(((-1.0)*x7768*x7776))+cj0+(((-1.0)*r12*x7774)));
evalcond[2]=((((-1.0)*r02*x7774))+(((-1.0)*sj0))+(((-1.0)*x7773*x7776))+((x7765*x7767)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x7772*x7774))+(((-1.0)*r22*x7776))+((cj1*sj2))+((x7766*x7770)));
evalcond[4]=((((-1.0)*x7767*x7774))+(((-1.0)*r02*x7776))+(((-1.0)*cj0*x7775))+((cj0*x7769))+((x7766*x7773)));
evalcond[5]=((((-1.0)*x7771*x7774))+((x7766*x7768))+((sj0*x7769))+(((-1.0)*sj0*x7775))+(((-1.0)*r12*x7776)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7777=((-1.0)*r10);
IkReal x7779 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7779)==0){
continue;
}
IkReal x7778=pow(x7779,-0.5);
CheckValue<IkReal> x7780 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7777),IKFAST_ATAN2_MAGTHRESH);
if(!x7780.valid){
continue;
}
IkReal gconst138=((-1.0)*(x7780.value));
IkReal gconst139=(r11*x7778);
IkReal gconst140=(x7777*x7778);
CheckValue<IkReal> x7781 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7781.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7781.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7782=((-1.0)*r10);
IkReal x7783=x7778;
CheckValue<IkReal> x7785 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7782),IKFAST_ATAN2_MAGTHRESH);
if(!x7785.valid){
continue;
}
IkReal x7784=((-1.0)*(x7785.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst139;
cj5=gconst140;
j5=x7784;
IkReal gconst138=x7784;
IkReal gconst139=(r11*x7783);
IkReal gconst140=(x7782*x7783);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7786=((1.0)*sj0);
IkReal x7787=((1.0)*gconst139);
CheckValue<IkReal> x7788=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst140*r21))+(((-1.0)*r20*x7787)))),-1);
if(!x7788.valid){
continue;
}
CheckValue<IkReal> x7789 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x7786)))),IkReal(((((-1.0)*gconst139*r11*x7786))+((gconst140*r10*sj0))+(((-1.0)*cj0*r01*x7787))+((cj0*gconst140*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7789.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7788.value)))+(x7789.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7790=IKsin(j4);
IkReal x7791=IKcos(j4);
IkReal x7792=(gconst140*r00);
IkReal x7793=(sj1*sj2);
IkReal x7794=(gconst139*r11);
IkReal x7795=(gconst139*r01);
IkReal x7796=(gconst139*r21);
IkReal x7797=((1.0)*x7791);
IkReal x7798=((1.0)*x7790);
IkReal x7799=((1.0)*cj1*cj2);
IkReal x7800=(gconst140*x7791);
evalcond[0]=((((-1.0)*r22*x7797))+((x7790*x7796))+(((-1.0)*gconst140*r20*x7798)));
evalcond[1]=(cj0+(((-1.0)*r12*x7797))+(((-1.0)*gconst140*r10*x7798))+((x7790*x7794)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x7792*x7798))+(((-1.0)*r02*x7797))+((x7790*x7795)));
evalcond[3]=((((-1.0)*r22*x7798))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x7796*x7797))+((r20*x7800)));
evalcond[4]=((((-1.0)*cj0*x7799))+(((-1.0)*x7795*x7797))+((cj0*x7793))+(((-1.0)*r02*x7798))+((x7791*x7792)));
evalcond[5]=((((-1.0)*r12*x7798))+(((-1.0)*sj0*x7799))+((sj0*x7793))+(((-1.0)*x7794*x7797))+((r10*x7800)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7801=((1.0)*gconst140);
CheckValue<IkReal> x7802=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst139*r00))+(((-1.0)*r01*x7801)))),-1);
if(!x7802.valid){
continue;
}
CheckValue<IkReal> x7803 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7801))+((cj0*gconst139*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7803.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7802.value)))+(x7803.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7804=IKsin(j4);
IkReal x7805=IKcos(j4);
IkReal x7806=(gconst140*r00);
IkReal x7807=(sj1*sj2);
IkReal x7808=(gconst139*r11);
IkReal x7809=(gconst139*r01);
IkReal x7810=(gconst139*r21);
IkReal x7811=((1.0)*x7805);
IkReal x7812=((1.0)*x7804);
IkReal x7813=((1.0)*cj1*cj2);
IkReal x7814=(gconst140*x7805);
evalcond[0]=((((-1.0)*r22*x7811))+((x7804*x7810))+(((-1.0)*gconst140*r20*x7812)));
evalcond[1]=((((-1.0)*gconst140*r10*x7812))+cj0+((x7804*x7808))+(((-1.0)*r12*x7811)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x7806*x7812))+(((-1.0)*r02*x7811))+((x7804*x7809)));
evalcond[3]=(((cj2*sj1))+((r20*x7814))+((cj1*sj2))+(((-1.0)*r22*x7812))+(((-1.0)*x7810*x7811)));
evalcond[4]=(((cj0*x7807))+(((-1.0)*r02*x7812))+((x7805*x7806))+(((-1.0)*cj0*x7813))+(((-1.0)*x7809*x7811)));
evalcond[5]=(((r10*x7814))+((sj0*x7807))+(((-1.0)*r12*x7812))+(((-1.0)*sj0*x7813))+(((-1.0)*x7808*x7811)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7815=((-1.0)*r11);
IkReal x7817 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7817)==0){
continue;
}
IkReal x7816=pow(x7817,-0.5);
CheckValue<IkReal> x7818 = IKatan2WithCheck(IkReal(x7815),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7818.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x7818.value))));
IkReal gconst142=(x7815*x7816);
IkReal gconst143=((1.0)*r10*x7816);
CheckValue<IkReal> x7819 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7819.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7819.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7820=((-1.0)*r11);
CheckValue<IkReal> x7823 = IKatan2WithCheck(IkReal(x7820),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7823.valid){
continue;
}
IkReal x7821=((1.0)*(x7823.value));
IkReal x7822=x7816;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7821)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7821)));
IkReal gconst142=(x7820*x7822);
IkReal gconst143=((1.0)*r10*x7822);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7824=((-1.0)*r11);
CheckValue<IkReal> x7827 = IKatan2WithCheck(IkReal(x7824),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7827.valid){
continue;
}
IkReal x7825=((1.0)*(x7827.value));
IkReal x7826=x7816;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7825)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7825)));
IkReal gconst142=(x7824*x7826);
IkReal gconst143=((1.0)*r10*x7826);
IkReal x7828=r12*r12;
IkReal x7829=((1.0)*sj0);
IkReal x7830=(cj0*r02);
IkReal x7831=x7816;
j4eval[0]=((IKabs(((((-1.0)*x7830))+(((-1.0)*r12*x7829)))))+(IKabs(((((-1.0)*x7829*x7831))+((r12*x7830*x7831))+((sj0*x7828*x7831))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7832=((-1.0)*r11);
CheckValue<IkReal> x7835 = IKatan2WithCheck(IkReal(x7832),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7835.valid){
continue;
}
IkReal x7833=((1.0)*(x7835.value));
IkReal x7834=x7816;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7833)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7833)));
IkReal gconst142=(x7832*x7834);
IkReal gconst143=((1.0)*r10*x7834);
IkReal x7836=r12*r12;
IkReal x7837=(cj1*r22*sj2);
IkReal x7838=(cj2*r22*sj1);
CheckValue<IkReal> x7842=IKPowWithIntegerCheck(((-1.0)+x7836),-1);
if(!x7842.valid){
continue;
}
IkReal x7839=x7842.value;
if((((1.0)+(((-1.0)*x7836)))) < -0.00001)
continue;
IkReal x7840=IKsqrt(((1.0)+(((-1.0)*x7836))));
IkReal x7841=((1.0)*r12*x7839*x7840);
j4eval[0]=((IKabs((x7838+x7837)))+(IKabs(((((-1.0)*x7837*x7841))+(((-1.0)*x7838*x7841))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7843=(gconst142*r21);
IkReal x7844=(cj1*sj2);
IkReal x7845=(cj2*sj1);
IkReal x7846=(gconst143*r20);
CheckValue<IkReal> x7847 = IKatan2WithCheck(IkReal((((r22*x7845))+((r22*x7844)))),IkReal((((x7843*x7844))+((x7843*x7845))+(((-1.0)*x7844*x7846))+(((-1.0)*x7845*x7846)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7847.valid){
continue;
}
CheckValue<IkReal> x7848=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x7843*x7843)+(x7846*x7846)+(((-2.0)*x7843*x7846)))),-1);
if(!x7848.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7847.value)+(((1.5707963267949)*(x7848.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7849=IKsin(j4);
IkReal x7850=IKcos(j4);
IkReal x7851=(sj1*sj2);
IkReal x7852=(gconst143*r20);
IkReal x7853=((1.0)*x7850);
IkReal x7854=((1.0)*cj1*cj2);
IkReal x7855=((1.0)*x7849);
IkReal x7856=(gconst142*x7849);
IkReal x7857=(gconst143*x7850);
evalcond[0]=(((r21*x7856))+(((-1.0)*x7852*x7855))+(((-1.0)*r22*x7853)));
evalcond[1]=(((r11*x7856))+cj0+(((-1.0)*gconst143*r10*x7855))+(((-1.0)*r12*x7853)));
evalcond[2]=((((-1.0)*sj0))+((r01*x7856))+(((-1.0)*r02*x7853))+(((-1.0)*gconst143*r00*x7855)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst142*r21*x7853))+((x7850*x7852))+(((-1.0)*r22*x7855)));
evalcond[4]=((((-1.0)*cj0*x7854))+((cj0*x7851))+((r00*x7857))+(((-1.0)*r02*x7855))+(((-1.0)*gconst142*r01*x7853)));
evalcond[5]=((((-1.0)*sj0*x7854))+((sj0*x7851))+(((-1.0)*gconst142*r11*x7853))+((r10*x7857))+(((-1.0)*r12*x7855)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7858=((1.0)*sj0);
IkReal x7859=((1.0)*gconst142);
CheckValue<IkReal> x7860=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst143*r21))+(((-1.0)*r20*x7859)))),-1);
if(!x7860.valid){
continue;
}
CheckValue<IkReal> x7861 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x7858)))),IkReal(((((-1.0)*gconst142*r11*x7858))+((cj0*gconst143*r00))+(((-1.0)*cj0*r01*x7859))+((gconst143*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7861.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7860.value)))+(x7861.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7862=IKsin(j4);
IkReal x7863=IKcos(j4);
IkReal x7864=(sj1*sj2);
IkReal x7865=(gconst143*r20);
IkReal x7866=((1.0)*x7863);
IkReal x7867=((1.0)*cj1*cj2);
IkReal x7868=((1.0)*x7862);
IkReal x7869=(gconst142*x7862);
IkReal x7870=(gconst143*x7863);
evalcond[0]=(((r21*x7869))+(((-1.0)*x7865*x7868))+(((-1.0)*r22*x7866)));
evalcond[1]=(cj0+((r11*x7869))+(((-1.0)*r12*x7866))+(((-1.0)*gconst143*r10*x7868)));
evalcond[2]=((((-1.0)*gconst143*r00*x7868))+(((-1.0)*sj0))+((r01*x7869))+(((-1.0)*r02*x7866)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst142*r21*x7866))+((x7863*x7865))+(((-1.0)*r22*x7868)));
evalcond[4]=(((cj0*x7864))+(((-1.0)*gconst142*r01*x7866))+((r00*x7870))+(((-1.0)*r02*x7868))+(((-1.0)*cj0*x7867)));
evalcond[5]=(((r10*x7870))+((sj0*x7864))+(((-1.0)*r12*x7868))+(((-1.0)*sj0*x7867))+(((-1.0)*gconst142*r11*x7866)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7871=((1.0)*gconst143);
CheckValue<IkReal> x7872=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7871))+(((-1.0)*gconst142*r00)))),-1);
if(!x7872.valid){
continue;
}
CheckValue<IkReal> x7873 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7871))+((cj0*gconst142*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7873.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7872.value)))+(x7873.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7874=IKsin(j4);
IkReal x7875=IKcos(j4);
IkReal x7876=(sj1*sj2);
IkReal x7877=(gconst143*r20);
IkReal x7878=((1.0)*x7875);
IkReal x7879=((1.0)*cj1*cj2);
IkReal x7880=((1.0)*x7874);
IkReal x7881=(gconst142*x7874);
IkReal x7882=(gconst143*x7875);
evalcond[0]=((((-1.0)*r22*x7878))+(((-1.0)*x7877*x7880))+((r21*x7881)));
evalcond[1]=(cj0+(((-1.0)*r12*x7878))+((r11*x7881))+(((-1.0)*gconst143*r10*x7880)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst143*r00*x7880))+((r01*x7881))+(((-1.0)*r02*x7878)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7880))+((x7875*x7877))+((cj1*sj2))+(((-1.0)*gconst142*r21*x7878)));
evalcond[4]=(((cj0*x7876))+(((-1.0)*r02*x7880))+((r00*x7882))+(((-1.0)*gconst142*r01*x7878))+(((-1.0)*cj0*x7879)));
evalcond[5]=((((-1.0)*gconst142*r11*x7878))+((r10*x7882))+((sj0*x7876))+(((-1.0)*sj0*x7879))+(((-1.0)*r12*x7880)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7883=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7883;
j4eval[1]=IKsign(x7883);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7884=((1.0)*cj5);
IkReal x7885=((((-1.0)*r01*x7884))+(((-1.0)*r00*sj5)));
j4eval[0]=x7885;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x7884)))))+(IKabs(r22)));
j4eval[2]=IKsign(x7885);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7886=cj5*cj5;
IkReal x7887=r11*r11;
IkReal x7888=(r11*sj5);
IkReal x7889=(cj5*r10);
IkReal x7890=((r12*r12)+x7887+(((-2.0)*x7888*x7889))+((x7886*(r10*r10)))+(((-1.0)*x7886*x7887)));
j4eval[0]=x7890;
j4eval[1]=IKsign(x7890);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x7888))+x7889))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7891=cj5*cj5;
IkReal x7892=r11*r11;
IkReal x7893=(cj5*r10);
IkReal x7894=(r11*sj5);
CheckValue<IkReal> x7895 = IKatan2WithCheck(IkReal((x7893+(((-1.0)*x7894)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7895.valid){
continue;
}
CheckValue<IkReal> x7896=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x7891*(r10*r10)))+x7892+(((-1.0)*x7891*x7892))+(((-2.0)*x7893*x7894)))),-1);
if(!x7896.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7895.value)+(((1.5707963267949)*(x7896.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7897=IKsin(j4);
IkReal x7898=IKcos(j4);
IkReal x7899=(cj5*r10);
IkReal x7900=(r01*sj5);
IkReal x7901=(cj5*r00);
IkReal x7902=(cj5*r20);
IkReal x7903=((1.0)*x7898);
IkReal x7904=((1.0)*x7897);
IkReal x7905=(sj5*x7897);
evalcond[0]=(((r21*x7905))+(((-1.0)*r22*x7903))+(((-1.0)*x7902*x7904)));
evalcond[1]=(((x7897*x7900))+(((-1.0)*x7901*x7904))+(((-1.0)*r02*x7903)));
evalcond[2]=((((-1.0)*r12*x7904))+(((-1.0)*r11*sj5*x7903))+((x7898*x7899)));
evalcond[3]=((1.0)+(((-1.0)*r12*x7903))+(((-1.0)*x7899*x7904))+((r11*x7905)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x7898*x7902))+(((-1.0)*r22*x7904))+(((-1.0)*r21*sj5*x7903)));
evalcond[5]=(((x7898*x7901))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x7900*x7903))+(((-1.0)*r02*x7904)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7906=((1.0)*cj5);
CheckValue<IkReal> x7907=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7906))+(((-1.0)*r00*sj5)))),-1);
if(!x7907.valid){
continue;
}
CheckValue<IkReal> x7908 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x7906)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7908.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7907.value)))+(x7908.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7909=IKsin(j4);
IkReal x7910=IKcos(j4);
IkReal x7911=(cj5*r10);
IkReal x7912=(r01*sj5);
IkReal x7913=(cj5*r00);
IkReal x7914=(cj5*r20);
IkReal x7915=((1.0)*x7910);
IkReal x7916=((1.0)*x7909);
IkReal x7917=(sj5*x7909);
evalcond[0]=(((r21*x7917))+(((-1.0)*r22*x7915))+(((-1.0)*x7914*x7916)));
evalcond[1]=((((-1.0)*r02*x7915))+(((-1.0)*x7913*x7916))+((x7909*x7912)));
evalcond[2]=((((-1.0)*r11*sj5*x7915))+(((-1.0)*r12*x7916))+((x7910*x7911)));
evalcond[3]=((1.0)+(((-1.0)*x7911*x7916))+((r11*x7917))+(((-1.0)*r12*x7915)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7916))+(((-1.0)*r21*sj5*x7915))+((x7910*x7914)));
evalcond[5]=((((-1.0)*r02*x7916))+(((-1.0)*cj1*cj2))+(((-1.0)*x7912*x7915))+((sj1*sj2))+((x7910*x7913)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7918=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x7918.valid){
continue;
}
CheckValue<IkReal> x7919 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7919.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7918.value)))+(x7919.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7920=IKsin(j4);
IkReal x7921=IKcos(j4);
IkReal x7922=(cj5*r10);
IkReal x7923=(r01*sj5);
IkReal x7924=(cj5*r00);
IkReal x7925=(cj5*r20);
IkReal x7926=((1.0)*x7921);
IkReal x7927=((1.0)*x7920);
IkReal x7928=(sj5*x7920);
evalcond[0]=((((-1.0)*x7925*x7927))+(((-1.0)*r22*x7926))+((r21*x7928)));
evalcond[1]=((((-1.0)*r02*x7926))+(((-1.0)*x7924*x7927))+((x7920*x7923)));
evalcond[2]=(((x7921*x7922))+(((-1.0)*r11*sj5*x7926))+(((-1.0)*r12*x7927)));
evalcond[3]=((1.0)+(((-1.0)*x7922*x7927))+(((-1.0)*r12*x7926))+((r11*x7928)));
evalcond[4]=(((x7921*x7925))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7927))+(((-1.0)*r21*sj5*x7926)));
evalcond[5]=(((x7921*x7924))+(((-1.0)*r02*x7927))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x7923*x7926)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7929=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7929;
j4eval[1]=IKsign(x7929);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7930=((1.0)*cj5);
IkReal x7931=((((-1.0)*r21*x7930))+(((-1.0)*r20*sj5)));
j4eval[0]=x7931;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x7930))+((r01*sj5))))));
j4eval[2]=IKsign(x7931);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7932=cj5*cj5;
IkReal x7933=r11*r11;
IkReal x7934=(cj5*r10);
IkReal x7935=(r11*sj5);
IkReal x7936=(((x7932*x7933))+(((2.0)*x7934*x7935))+(((-1.0)*x7933))+(((-1.0)*(r12*r12)))+(((-1.0)*x7932*(r10*r10))));
j4eval[0]=x7936;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x7935))+x7934))));
j4eval[2]=IKsign(x7936);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7937=cj5*cj5;
IkReal x7938=r11*r11;
IkReal x7939=(cj5*r10);
IkReal x7940=(r11*sj5);
CheckValue<IkReal> x7941 = IKatan2WithCheck(IkReal((x7939+(((-1.0)*x7940)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7941.valid){
continue;
}
CheckValue<IkReal> x7942=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7938))+(((-1.0)*(r12*r12)))+(((-1.0)*x7937*(r10*r10)))+(((2.0)*x7939*x7940))+((x7937*x7938)))),-1);
if(!x7942.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7941.value)+(((1.5707963267949)*(x7942.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7943=IKsin(j4);
IkReal x7944=IKcos(j4);
IkReal x7945=(cj5*r10);
IkReal x7946=(r01*sj5);
IkReal x7947=(cj5*r00);
IkReal x7948=(cj5*r20);
IkReal x7949=((1.0)*x7944);
IkReal x7950=((1.0)*x7943);
IkReal x7951=(sj5*x7943);
evalcond[0]=((((-1.0)*r22*x7949))+(((-1.0)*x7948*x7950))+((r21*x7951)));
evalcond[1]=((((-1.0)*x7947*x7950))+(((-1.0)*r02*x7949))+((x7943*x7946)));
evalcond[2]=((((-1.0)*r11*sj5*x7949))+(((-1.0)*r12*x7950))+((x7944*x7945)));
evalcond[3]=((-1.0)+((r11*x7951))+(((-1.0)*r12*x7949))+(((-1.0)*x7945*x7950)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x7949))+(((-1.0)*r22*x7950))+((cj1*sj2))+((x7944*x7948)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r02*x7950))+((cj1*cj2))+(((-1.0)*x7946*x7949))+((x7944*x7947)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7952=((1.0)*cj5);
CheckValue<IkReal> x7953=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7952))+(((-1.0)*r20*sj5)))),-1);
if(!x7953.valid){
continue;
}
CheckValue<IkReal> x7954 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x7952)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7954.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7953.value)))+(x7954.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7955=IKsin(j4);
IkReal x7956=IKcos(j4);
IkReal x7957=(cj5*r10);
IkReal x7958=(r01*sj5);
IkReal x7959=(cj5*r00);
IkReal x7960=(cj5*r20);
IkReal x7961=((1.0)*x7956);
IkReal x7962=((1.0)*x7955);
IkReal x7963=(sj5*x7955);
evalcond[0]=(((r21*x7963))+(((-1.0)*x7960*x7962))+(((-1.0)*r22*x7961)));
evalcond[1]=(((x7955*x7958))+(((-1.0)*r02*x7961))+(((-1.0)*x7959*x7962)));
evalcond[2]=((((-1.0)*r11*sj5*x7961))+(((-1.0)*r12*x7962))+((x7956*x7957)));
evalcond[3]=((-1.0)+(((-1.0)*x7957*x7962))+((r11*x7963))+(((-1.0)*r12*x7961)));
evalcond[4]=(((cj2*sj1))+((x7956*x7960))+(((-1.0)*r22*x7962))+((cj1*sj2))+(((-1.0)*r21*sj5*x7961)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x7958*x7961))+(((-1.0)*r02*x7962))+((cj1*cj2))+((x7956*x7959)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7964 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7964.valid){
continue;
}
CheckValue<IkReal> x7965=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7965.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7964.value)+(((1.5707963267949)*(x7965.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7966=IKsin(j4);
IkReal x7967=IKcos(j4);
IkReal x7968=(cj5*r10);
IkReal x7969=(r01*sj5);
IkReal x7970=(cj5*r00);
IkReal x7971=(cj5*r20);
IkReal x7972=((1.0)*x7967);
IkReal x7973=((1.0)*x7966);
IkReal x7974=(sj5*x7966);
evalcond[0]=((((-1.0)*r22*x7972))+(((-1.0)*x7971*x7973))+((r21*x7974)));
evalcond[1]=((((-1.0)*x7970*x7973))+(((-1.0)*r02*x7972))+((x7966*x7969)));
evalcond[2]=((((-1.0)*r11*sj5*x7972))+((x7967*x7968))+(((-1.0)*r12*x7973)));
evalcond[3]=((-1.0)+(((-1.0)*x7968*x7973))+((r11*x7974))+(((-1.0)*r12*x7972)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x7973))+((cj1*sj2))+(((-1.0)*r21*sj5*x7972))+((x7967*x7971)));
evalcond[5]=((((-1.0)*sj1*sj2))+((x7967*x7970))+(((-1.0)*r02*x7973))+((cj1*cj2))+(((-1.0)*x7969*x7972)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7975=((-1.0)*r00);
IkReal x7977 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7977)==0){
continue;
}
IkReal x7976=pow(x7977,-0.5);
CheckValue<IkReal> x7978 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x7975),IKFAST_ATAN2_MAGTHRESH);
if(!x7978.valid){
continue;
}
IkReal gconst144=((-1.0)*(x7978.value));
IkReal gconst145=(r01*x7976);
IkReal gconst146=(x7975*x7976);
CheckValue<IkReal> x7979 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7979.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7979.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7980=((-1.0)*r00);
IkReal x7981=x7976;
CheckValue<IkReal> x7983 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x7980),IKFAST_ATAN2_MAGTHRESH);
if(!x7983.valid){
continue;
}
IkReal x7982=((-1.0)*(x7983.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst145;
cj5=gconst146;
j5=x7982;
IkReal gconst144=x7982;
IkReal gconst145=(r01*x7981);
IkReal gconst146=(x7980*x7981);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7984=((1.0)*sj0);
IkReal x7985=((1.0)*gconst145);
CheckValue<IkReal> x7986 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x7984))+(((-1.0)*cj0*r02)))),IkReal((((cj0*gconst146*r00))+((gconst146*r10*sj0))+(((-1.0)*gconst145*r11*x7984))+(((-1.0)*cj0*r01*x7985)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7986.valid){
continue;
}
CheckValue<IkReal> x7987=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x7985))+(((-1.0)*gconst146*r21)))),-1);
if(!x7987.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7986.value)+(((1.5707963267949)*(x7987.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7988=IKsin(j4);
IkReal x7989=IKcos(j4);
IkReal x7990=(gconst146*r10);
IkReal x7991=(sj1*sj2);
IkReal x7992=(gconst146*r20);
IkReal x7993=(gconst146*r00);
IkReal x7994=((1.0)*x7989);
IkReal x7995=((1.0)*x7988);
IkReal x7996=(gconst145*x7988);
IkReal x7997=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*x7992*x7995))+((r21*x7996))+(((-1.0)*r22*x7994)));
evalcond[1]=(((r11*x7996))+(((-1.0)*r12*x7994))+cj0+(((-1.0)*x7990*x7995)));
evalcond[2]=((((-1.0)*sj0))+((r01*x7996))+(((-1.0)*r02*x7994))+(((-1.0)*x7993*x7995)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst145*r21*x7994))+((cj1*sj2))+((x7989*x7992))+(((-1.0)*r22*x7995)));
evalcond[4]=((((-1.0)*gconst145*r01*x7994))+((x7989*x7993))+((cj0*x7991))+(((-1.0)*cj0*x7997))+(((-1.0)*r02*x7995)));
evalcond[5]=((((-1.0)*r12*x7995))+(((-1.0)*gconst145*r11*x7994))+((x7989*x7990))+((sj0*x7991))+(((-1.0)*sj0*x7997)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7998=((1.0)*gconst146);
CheckValue<IkReal> x7999 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7998))+((gconst145*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7999.valid){
continue;
}
CheckValue<IkReal> x8000=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7998))+(((-1.0)*gconst145*r10)))),-1);
if(!x8000.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7999.value)+(((1.5707963267949)*(x8000.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8001=IKsin(j4);
IkReal x8002=IKcos(j4);
IkReal x8003=(gconst146*r10);
IkReal x8004=(sj1*sj2);
IkReal x8005=(gconst146*r20);
IkReal x8006=(gconst146*r00);
IkReal x8007=((1.0)*x8002);
IkReal x8008=((1.0)*x8001);
IkReal x8009=(gconst145*x8001);
IkReal x8010=((1.0)*cj1*cj2);
evalcond[0]=(((r21*x8009))+(((-1.0)*r22*x8007))+(((-1.0)*x8005*x8008)));
evalcond[1]=(cj0+((r11*x8009))+(((-1.0)*r12*x8007))+(((-1.0)*x8003*x8008)));
evalcond[2]=(((r01*x8009))+(((-1.0)*sj0))+(((-1.0)*x8006*x8008))+(((-1.0)*r02*x8007)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst145*r21*x8007))+((cj1*sj2))+(((-1.0)*r22*x8008))+((x8002*x8005)));
evalcond[4]=(((cj0*x8004))+(((-1.0)*cj0*x8010))+(((-1.0)*gconst145*r01*x8007))+(((-1.0)*r02*x8008))+((x8002*x8006)));
evalcond[5]=(((sj0*x8004))+(((-1.0)*gconst145*r11*x8007))+(((-1.0)*r12*x8008))+(((-1.0)*sj0*x8010))+((x8002*x8003)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8011=((-1.0)*r01);
IkReal x8013 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8013)==0){
continue;
}
IkReal x8012=pow(x8013,-0.5);
CheckValue<IkReal> x8014 = IKatan2WithCheck(IkReal(x8011),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8014.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x8014.value))));
IkReal gconst148=(x8011*x8012);
IkReal gconst149=((1.0)*r00*x8012);
CheckValue<IkReal> x8015 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8015.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8015.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x8016=((-1.0)*r01);
CheckValue<IkReal> x8019 = IKatan2WithCheck(IkReal(x8016),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8019.valid){
continue;
}
IkReal x8017=((1.0)*(x8019.value));
IkReal x8018=x8012;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8017)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8017)));
IkReal gconst148=(x8016*x8018);
IkReal gconst149=((1.0)*r00*x8018);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8020=((-1.0)*r01);
CheckValue<IkReal> x8023 = IKatan2WithCheck(IkReal(x8020),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8023.valid){
continue;
}
IkReal x8021=((1.0)*(x8023.value));
IkReal x8022=x8012;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8021)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8021)));
IkReal gconst148=(x8020*x8022);
IkReal gconst149=((1.0)*r00*x8022);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8024=((-1.0)*r01);
CheckValue<IkReal> x8027 = IKatan2WithCheck(IkReal(x8024),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8027.valid){
continue;
}
IkReal x8025=((1.0)*(x8027.value));
IkReal x8026=x8012;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8025)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8025)));
IkReal gconst148=(x8024*x8026);
IkReal gconst149=((1.0)*r00*x8026);
IkReal x8028=r02*r02;
IkReal x8029=(r12*sj0);
IkReal x8030=((1.0)*cj0);
IkReal x8031=x8012;
j4eval[0]=((IKabs(((((-1.0)*x8029))+(((-1.0)*r02*x8030)))))+(IKabs((((r02*x8029*x8031))+((cj0*x8028*x8031))+(((-1.0)*x8030*x8031))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8032=((1.0)*sj0);
IkReal x8033=((1.0)*gconst148);
CheckValue<IkReal> x8034 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8032))+(((-1.0)*cj0*r02)))),IkReal((((gconst149*r10*sj0))+(((-1.0)*cj0*r01*x8033))+((cj0*gconst149*r00))+(((-1.0)*gconst148*r11*x8032)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8034.valid){
continue;
}
CheckValue<IkReal> x8035=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x8033))+(((-1.0)*gconst149*r21)))),-1);
if(!x8035.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8034.value)+(((1.5707963267949)*(x8035.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8036=IKsin(j4);
IkReal x8037=IKcos(j4);
IkReal x8038=(gconst148*r11);
IkReal x8039=(sj1*sj2);
IkReal x8040=((1.0)*x8037);
IkReal x8041=(gconst149*x8037);
IkReal x8042=(gconst148*x8036);
IkReal x8043=((1.0)*cj1*cj2);
IkReal x8044=((1.0)*x8036);
evalcond[0]=((((-1.0)*gconst149*r20*x8044))+((r21*x8042))+(((-1.0)*r22*x8040)));
evalcond[1]=(cj0+(((-1.0)*gconst149*r10*x8044))+((x8036*x8038))+(((-1.0)*r12*x8040)));
evalcond[2]=(((r01*x8042))+(((-1.0)*sj0))+(((-1.0)*r02*x8040))+(((-1.0)*gconst149*r00*x8044)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst148*r21*x8040))+((cj1*sj2))+((r20*x8041))+(((-1.0)*r22*x8044)));
evalcond[4]=((((-1.0)*cj0*x8043))+(((-1.0)*gconst148*r01*x8040))+((cj0*x8039))+(((-1.0)*r02*x8044))+((r00*x8041)));
evalcond[5]=(((r10*x8041))+((sj0*x8039))+(((-1.0)*sj0*x8043))+(((-1.0)*x8038*x8040))+(((-1.0)*r12*x8044)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8045=((1.0)*gconst149);
CheckValue<IkReal> x8046 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8045))+((gconst148*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8046.valid){
continue;
}
CheckValue<IkReal> x8047=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8045))+(((-1.0)*gconst148*r10)))),-1);
if(!x8047.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8046.value)+(((1.5707963267949)*(x8047.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8048=IKsin(j4);
IkReal x8049=IKcos(j4);
IkReal x8050=(gconst148*r11);
IkReal x8051=(sj1*sj2);
IkReal x8052=((1.0)*x8049);
IkReal x8053=(gconst149*x8049);
IkReal x8054=(gconst148*x8048);
IkReal x8055=((1.0)*cj1*cj2);
IkReal x8056=((1.0)*x8048);
evalcond[0]=((((-1.0)*gconst149*r20*x8056))+(((-1.0)*r22*x8052))+((r21*x8054)));
evalcond[1]=((((-1.0)*r12*x8052))+cj0+(((-1.0)*gconst149*r10*x8056))+((x8048*x8050)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8052))+(((-1.0)*gconst149*r00*x8056))+((r01*x8054)));
evalcond[3]=(((cj2*sj1))+((r20*x8053))+(((-1.0)*gconst148*r21*x8052))+((cj1*sj2))+(((-1.0)*r22*x8056)));
evalcond[4]=(((r00*x8053))+(((-1.0)*gconst148*r01*x8052))+((cj0*x8051))+(((-1.0)*r02*x8056))+(((-1.0)*cj0*x8055)));
evalcond[5]=((((-1.0)*r12*x8056))+(((-1.0)*sj0*x8055))+((r10*x8053))+(((-1.0)*x8050*x8052))+((sj0*x8051)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8057=((1.0)*gconst149);
CheckValue<IkReal> x8058 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst148*r21))+(((-1.0)*cj0*r20*x8057)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8058.valid){
continue;
}
CheckValue<IkReal> x8059=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst148*r00))+(((-1.0)*r01*x8057)))),-1);
if(!x8059.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8058.value)+(((1.5707963267949)*(x8059.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8060=IKsin(j4);
IkReal x8061=IKcos(j4);
IkReal x8062=(gconst148*r11);
IkReal x8063=(sj1*sj2);
IkReal x8064=((1.0)*x8061);
IkReal x8065=(gconst149*x8061);
IkReal x8066=(gconst148*x8060);
IkReal x8067=((1.0)*cj1*cj2);
IkReal x8068=((1.0)*x8060);
evalcond[0]=(((r21*x8066))+(((-1.0)*gconst149*r20*x8068))+(((-1.0)*r22*x8064)));
evalcond[1]=(cj0+((x8060*x8062))+(((-1.0)*r12*x8064))+(((-1.0)*gconst149*r10*x8068)));
evalcond[2]=((((-1.0)*sj0))+((r01*x8066))+(((-1.0)*gconst149*r00*x8068))+(((-1.0)*r02*x8064)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst148*r21*x8064))+((r20*x8065))+(((-1.0)*r22*x8068)));
evalcond[4]=((((-1.0)*cj0*x8067))+((r00*x8065))+((cj0*x8063))+(((-1.0)*gconst148*r01*x8064))+(((-1.0)*r02*x8068)));
evalcond[5]=(((r10*x8065))+(((-1.0)*sj0*x8067))+(((-1.0)*r12*x8068))+(((-1.0)*x8062*x8064))+((sj0*x8063)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8069=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8069;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x8069);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8070=((1.0)*cj5);
IkReal x8071=((((-1.0)*r10*sj5))+(((-1.0)*r11*x8070)));
j4eval[0]=x8071;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x8070))))));
j4eval[2]=IKsign(x8071);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8072=cj5*cj5;
IkReal x8073=r01*r01;
IkReal x8074=(r01*sj5);
IkReal x8075=(cj5*r00);
IkReal x8076=(((x8072*x8073))+(((-1.0)*x8073))+(((2.0)*x8074*x8075))+(((-1.0)*(r02*r02)))+(((-1.0)*x8072*(r00*r00))));
j4eval[0]=x8076;
j4eval[1]=IKsign(x8076);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x8074))+x8075))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8077=cj5*cj5;
IkReal x8078=r01*r01;
IkReal x8079=(r01*sj5);
IkReal x8080=(cj5*r00);
CheckValue<IkReal> x8081 = IKatan2WithCheck(IkReal(((((-1.0)*x8079))+x8080)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8081.valid){
continue;
}
CheckValue<IkReal> x8082=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8078))+(((-1.0)*(r02*r02)))+(((2.0)*x8079*x8080))+((x8077*x8078))+(((-1.0)*x8077*(r00*r00))))),-1);
if(!x8082.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8081.value)+(((1.5707963267949)*(x8082.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8083=IKsin(j4);
IkReal x8084=IKcos(j4);
IkReal x8085=(cj5*r10);
IkReal x8086=(r01*sj5);
IkReal x8087=(cj5*r00);
IkReal x8088=(cj5*r20);
IkReal x8089=((1.0)*x8084);
IkReal x8090=((1.0)*x8083);
IkReal x8091=(sj5*x8083);
evalcond[0]=((((-1.0)*x8088*x8090))+(((-1.0)*r22*x8089))+((r21*x8091)));
evalcond[1]=((((-1.0)*x8085*x8090))+((r11*x8091))+(((-1.0)*r12*x8089)));
evalcond[2]=((((-1.0)*r02*x8090))+(((-1.0)*x8086*x8089))+((x8084*x8087)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8089))+(((-1.0)*x8087*x8090))+((x8083*x8086)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8089))+((cj1*sj2))+((x8084*x8088))+(((-1.0)*r22*x8090)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r11*sj5*x8089))+((x8084*x8085))+(((-1.0)*r12*x8090)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8092=((1.0)*cj5);
CheckValue<IkReal> x8093 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x8092)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8093.valid){
continue;
}
CheckValue<IkReal> x8094=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x8092)))),-1);
if(!x8094.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8093.value)+(((1.5707963267949)*(x8094.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8095=IKsin(j4);
IkReal x8096=IKcos(j4);
IkReal x8097=(cj5*r10);
IkReal x8098=(r01*sj5);
IkReal x8099=(cj5*r00);
IkReal x8100=(cj5*r20);
IkReal x8101=((1.0)*x8096);
IkReal x8102=((1.0)*x8095);
IkReal x8103=(sj5*x8095);
evalcond[0]=((((-1.0)*r22*x8101))+((r21*x8103))+(((-1.0)*x8100*x8102)));
evalcond[1]=(((r11*x8103))+(((-1.0)*x8097*x8102))+(((-1.0)*r12*x8101)));
evalcond[2]=((((-1.0)*x8098*x8101))+(((-1.0)*r02*x8102))+((x8096*x8099)));
evalcond[3]=((-1.0)+(((-1.0)*x8099*x8102))+((x8095*x8098))+(((-1.0)*r02*x8101)));
evalcond[4]=((((-1.0)*r21*sj5*x8101))+((x8096*x8100))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8102)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x8096*x8097))+(((-1.0)*r11*sj5*x8101))+(((-1.0)*r12*x8102)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8104=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8104.valid){
continue;
}
CheckValue<IkReal> x8105 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8105.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8104.value)))+(x8105.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8106=IKsin(j4);
IkReal x8107=IKcos(j4);
IkReal x8108=(cj5*r10);
IkReal x8109=(r01*sj5);
IkReal x8110=(cj5*r00);
IkReal x8111=(cj5*r20);
IkReal x8112=((1.0)*x8107);
IkReal x8113=((1.0)*x8106);
IkReal x8114=(sj5*x8106);
evalcond[0]=((((-1.0)*x8111*x8113))+((r21*x8114))+(((-1.0)*r22*x8112)));
evalcond[1]=((((-1.0)*r12*x8112))+(((-1.0)*x8108*x8113))+((r11*x8114)));
evalcond[2]=((((-1.0)*x8109*x8112))+(((-1.0)*r02*x8113))+((x8107*x8110)));
evalcond[3]=((-1.0)+((x8106*x8109))+(((-1.0)*x8110*x8113))+(((-1.0)*r02*x8112)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8112))+((cj1*sj2))+(((-1.0)*r22*x8113))+((x8107*x8111)));
evalcond[5]=((((-1.0)*r11*sj5*x8112))+(((-1.0)*r12*x8113))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x8107*x8108)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8115=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x8115;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8115);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8116=((1.0)*cj5);
IkReal x8117=((((-1.0)*r21*x8116))+(((-1.0)*r20*sj5)));
j4eval[0]=x8117;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x8116))))));
j4eval[2]=IKsign(x8117);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8118=cj5*cj5;
IkReal x8119=r01*r01;
IkReal x8120=(cj5*r00);
IkReal x8121=(r01*sj5);
IkReal x8122=((((-1.0)*x8118*x8119))+((x8118*(r00*r00)))+(((-2.0)*x8120*x8121))+(r02*r02)+x8119);
j4eval[0]=x8122;
j4eval[1]=((IKabs(r02))+(IKabs((x8120+(((-1.0)*x8121))))));
j4eval[2]=IKsign(x8122);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8123=cj5*cj5;
IkReal x8124=r01*r01;
IkReal x8125=(r01*sj5);
IkReal x8126=(cj5*r00);
CheckValue<IkReal> x8127=IKPowWithIntegerCheck(IKsign(((r02*r02)+x8124+(((-2.0)*x8125*x8126))+((x8123*(r00*r00)))+(((-1.0)*x8123*x8124)))),-1);
if(!x8127.valid){
continue;
}
CheckValue<IkReal> x8128 = IKatan2WithCheck(IkReal((x8126+(((-1.0)*x8125)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8128.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8127.value)))+(x8128.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8129=IKsin(j4);
IkReal x8130=IKcos(j4);
IkReal x8131=(cj5*r10);
IkReal x8132=(r01*sj5);
IkReal x8133=(cj5*r00);
IkReal x8134=(cj5*r20);
IkReal x8135=((1.0)*x8130);
IkReal x8136=((1.0)*x8129);
IkReal x8137=(sj5*x8129);
evalcond[0]=((((-1.0)*x8134*x8136))+(((-1.0)*r22*x8135))+((r21*x8137)));
evalcond[1]=(((r11*x8137))+(((-1.0)*x8131*x8136))+(((-1.0)*r12*x8135)));
evalcond[2]=((((-1.0)*r02*x8136))+(((-1.0)*x8132*x8135))+((x8130*x8133)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8135))+((x8129*x8132))+(((-1.0)*x8133*x8136)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x8136))+(((-1.0)*r21*sj5*x8135))+((cj1*sj2))+((x8130*x8134)));
evalcond[5]=((((-1.0)*sj1*sj2))+((x8130*x8131))+(((-1.0)*r12*x8136))+(((-1.0)*r11*sj5*x8135))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8138=((1.0)*cj5);
CheckValue<IkReal> x8139=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8138))+(((-1.0)*r20*sj5)))),-1);
if(!x8139.valid){
continue;
}
CheckValue<IkReal> x8140 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x8138)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8140.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8139.value)))+(x8140.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8141=IKsin(j4);
IkReal x8142=IKcos(j4);
IkReal x8143=(cj5*r10);
IkReal x8144=(r01*sj5);
IkReal x8145=(cj5*r00);
IkReal x8146=(cj5*r20);
IkReal x8147=((1.0)*x8142);
IkReal x8148=((1.0)*x8141);
IkReal x8149=(sj5*x8141);
evalcond[0]=((((-1.0)*x8146*x8148))+(((-1.0)*r22*x8147))+((r21*x8149)));
evalcond[1]=((((-1.0)*x8143*x8148))+((r11*x8149))+(((-1.0)*r12*x8147)));
evalcond[2]=((((-1.0)*x8144*x8147))+(((-1.0)*r02*x8148))+((x8142*x8145)));
evalcond[3]=((1.0)+((x8141*x8144))+(((-1.0)*r02*x8147))+(((-1.0)*x8145*x8148)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8148))+(((-1.0)*r21*sj5*x8147))+((x8142*x8146)));
evalcond[5]=((((-1.0)*r11*sj5*x8147))+(((-1.0)*sj1*sj2))+(((-1.0)*r12*x8148))+((x8142*x8143))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8150 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8150.valid){
continue;
}
CheckValue<IkReal> x8151=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x8151.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8150.value)+(((1.5707963267949)*(x8151.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8152=IKsin(j4);
IkReal x8153=IKcos(j4);
IkReal x8154=(cj5*r10);
IkReal x8155=(r01*sj5);
IkReal x8156=(cj5*r00);
IkReal x8157=(cj5*r20);
IkReal x8158=((1.0)*x8153);
IkReal x8159=((1.0)*x8152);
IkReal x8160=(sj5*x8152);
evalcond[0]=(((r21*x8160))+(((-1.0)*x8157*x8159))+(((-1.0)*r22*x8158)));
evalcond[1]=(((r11*x8160))+(((-1.0)*r12*x8158))+(((-1.0)*x8154*x8159)));
evalcond[2]=(((x8153*x8156))+(((-1.0)*r02*x8159))+(((-1.0)*x8155*x8158)));
evalcond[3]=((1.0)+(((-1.0)*x8156*x8159))+((x8152*x8155))+(((-1.0)*r02*x8158)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8153*x8157))+(((-1.0)*r21*sj5*x8158))+(((-1.0)*r22*x8159)));
evalcond[5]=((((-1.0)*sj1*sj2))+((x8153*x8154))+(((-1.0)*r11*sj5*x8158))+((cj1*cj2))+(((-1.0)*r12*x8159)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8161=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8161);
rxp1_1=(px*r21);
rxp1_2=(r11*x8161);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8162=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8162);
rxp1_1=(px*r21);
rxp1_2=(r11*x8162);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8163=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8163);
rxp1_1=(px*r21);
rxp1_2=(r11*x8163);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8166=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x8166.valid){
continue;
}
IkReal x8164=x8166.value;
IkReal x8165=(sj0*x8164);
cj4array[0]=((((-1.0)*sj1*sj2*x8165))+((cj1*cj2*x8165)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8167=IKsin(j4);
IkReal x8168=IKcos(j4);
IkReal x8169=(r21*sj5);
IkReal x8170=(cj5*r20);
IkReal x8171=((1.0)*x8167);
IkReal x8172=((1.0)*x8168);
evalcond[0]=((-1.0)*r02*x8167);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x8172)));
evalcond[2]=(((x8167*x8169))+(((-1.0)*x8170*x8171)));
evalcond[3]=(((r11*sj5*x8167))+(((-1.0)*cj5*r10*x8171)));
evalcond[4]=(((cj2*sj1))+((x8168*x8170))+(((-1.0)*x8169*x8172))+((cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8175=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x8175.valid){
continue;
}
IkReal x8173=x8175.value;
IkReal x8174=((1.0)*x8173);
cj4array[0]=((((-1.0)*cj2*sj1*x8174))+(((-1.0)*cj1*sj2*x8174)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8176=IKsin(j4);
IkReal x8177=IKcos(j4);
IkReal x8178=(r11*sj5);
IkReal x8179=((1.0)*sj0);
IkReal x8180=((1.0)*x8177);
IkReal x8181=((1.0)*cj5*x8176);
evalcond[0]=((-1.0)*r02*x8176);
evalcond[1]=((((-1.0)*x8179))+(((-1.0)*r02*x8180)));
evalcond[2]=((((-1.0)*r20*x8181))+((r21*sj5*x8176)));
evalcond[3]=((((-1.0)*r10*x8181))+((x8176*x8178)));
evalcond[4]=(((cj5*r10*x8177))+(((-1.0)*cj1*cj2*x8179))+((sj0*sj1*sj2))+(((-1.0)*x8178*x8180)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8182=IKPowWithIntegerCheck(r02,-1);
if(!x8182.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x8182.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8183=IKsin(j4);
IkReal x8184=IKcos(j4);
IkReal x8185=(cj5*x8184);
IkReal x8186=(sj5*x8183);
IkReal x8187=((1.0)*sj5*x8184);
IkReal x8188=((1.0)*cj5*x8183);
evalcond[0]=((-1.0)*r02*x8183);
evalcond[1]=(((r21*x8186))+(((-1.0)*r20*x8188)));
evalcond[2]=(((r11*x8186))+(((-1.0)*r10*x8188)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*x8187))+((r20*x8185)));
evalcond[4]=(((r10*x8185))+(((-1.0)*cj1*cj2*sj0))+(((-1.0)*r11*x8187))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8189=((1.0)*sj0);
IkReal x8190=((1.0)*cj0);
CheckValue<IkReal> x8191=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x8191.valid){
continue;
}
CheckValue<IkReal> x8192 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x8190))+(((-1.0)*r12*x8189)))),IkReal((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x8190))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x8189)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8192.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8191.value)))+(x8192.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8193=IKsin(j4);
IkReal x8194=IKcos(j4);
IkReal x8195=(cj5*r10);
IkReal x8196=(sj1*sj2);
IkReal x8197=(r01*sj5);
IkReal x8198=(cj5*r00);
IkReal x8199=(cj5*r20);
IkReal x8200=((1.0)*x8194);
IkReal x8201=((1.0)*cj1*cj2);
IkReal x8202=((1.0)*x8193);
IkReal x8203=(sj5*x8193);
evalcond[0]=((((-1.0)*r22*x8200))+((r21*x8203))+(((-1.0)*x8199*x8202)));
evalcond[1]=(((r11*x8203))+cj0+(((-1.0)*x8195*x8202))+(((-1.0)*r12*x8200)));
evalcond[2]=((((-1.0)*x8198*x8202))+(((-1.0)*sj0))+(((-1.0)*r02*x8200))+((x8193*x8197)));
evalcond[3]=(((cj2*sj1))+((x8194*x8199))+((cj1*sj2))+(((-1.0)*r21*sj5*x8200))+(((-1.0)*r22*x8202)));
evalcond[4]=((((-1.0)*cj0*x8201))+((x8194*x8198))+(((-1.0)*r02*x8202))+(((-1.0)*x8197*x8200))+((cj0*x8196)));
evalcond[5]=(((x8194*x8195))+((sj0*x8196))+(((-1.0)*r12*x8202))+(((-1.0)*r11*sj5*x8200))+(((-1.0)*sj0*x8201)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8204=((1.0)*cj5);
CheckValue<IkReal> x8205 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x8204)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8205.valid){
continue;
}
CheckValue<IkReal> x8206=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x8204)))),-1);
if(!x8206.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8205.value)+(((1.5707963267949)*(x8206.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8207=IKsin(j4);
IkReal x8208=IKcos(j4);
IkReal x8209=(cj5*r10);
IkReal x8210=(sj1*sj2);
IkReal x8211=(r01*sj5);
IkReal x8212=(cj5*r00);
IkReal x8213=(cj5*r20);
IkReal x8214=((1.0)*x8208);
IkReal x8215=((1.0)*cj1*cj2);
IkReal x8216=((1.0)*x8207);
IkReal x8217=(sj5*x8207);
evalcond[0]=((((-1.0)*r22*x8214))+(((-1.0)*x8213*x8216))+((r21*x8217)));
evalcond[1]=(((r11*x8217))+cj0+(((-1.0)*x8209*x8216))+(((-1.0)*r12*x8214)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8214))+(((-1.0)*x8212*x8216))+((x8207*x8211)));
evalcond[3]=(((cj2*sj1))+((x8208*x8213))+((cj1*sj2))+(((-1.0)*r21*sj5*x8214))+(((-1.0)*r22*x8216)));
evalcond[4]=((((-1.0)*cj0*x8215))+((x8208*x8212))+((cj0*x8210))+(((-1.0)*r02*x8216))+(((-1.0)*x8211*x8214)));
evalcond[5]=(((x8208*x8209))+(((-1.0)*r12*x8216))+(((-1.0)*sj0*x8215))+(((-1.0)*r11*sj5*x8214))+((sj0*x8210)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8218=((1.0)*cj5);
CheckValue<IkReal> x8219 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x8218)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8219.valid){
continue;
}
CheckValue<IkReal> x8220=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8218))+(((-1.0)*r00*sj5)))),-1);
if(!x8220.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8219.value)+(((1.5707963267949)*(x8220.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8221=IKsin(j4);
IkReal x8222=IKcos(j4);
IkReal x8223=(cj5*r10);
IkReal x8224=(sj1*sj2);
IkReal x8225=(r01*sj5);
IkReal x8226=(cj5*r00);
IkReal x8227=(cj5*r20);
IkReal x8228=((1.0)*x8222);
IkReal x8229=((1.0)*cj1*cj2);
IkReal x8230=((1.0)*x8221);
IkReal x8231=(sj5*x8221);
evalcond[0]=(((r21*x8231))+(((-1.0)*r22*x8228))+(((-1.0)*x8227*x8230)));
evalcond[1]=(cj0+((r11*x8231))+(((-1.0)*r12*x8228))+(((-1.0)*x8223*x8230)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8228))+((x8221*x8225))+(((-1.0)*x8226*x8230)));
evalcond[3]=(((x8222*x8227))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8230))+(((-1.0)*r21*sj5*x8228)));
evalcond[4]=(((x8222*x8226))+((cj0*x8224))+(((-1.0)*r02*x8230))+(((-1.0)*x8225*x8228))+(((-1.0)*cj0*x8229)));
evalcond[5]=(((x8222*x8223))+(((-1.0)*r11*sj5*x8228))+(((-1.0)*r12*x8230))+(((-1.0)*sj0*x8229))+((sj0*x8224)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8232=cj5*cj5;
IkReal x8233=r21*r21;
IkReal x8234=(cj2*sj1);
IkReal x8235=(cj1*sj2);
IkReal x8236=(r21*sj5);
IkReal x8237=((1.0)*cj5*r20);
CheckValue<IkReal> x8238=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8232*x8233))+(r22*r22)+((x8232*(r20*r20)))+x8233+(((-2.0)*cj5*r20*x8236)))),-1);
if(!x8238.valid){
continue;
}
CheckValue<IkReal> x8239 = IKatan2WithCheck(IkReal((((r22*x8235))+((r22*x8234)))),IkReal(((((-1.0)*x8234*x8237))+((x8234*x8236))+((x8235*x8236))+(((-1.0)*x8235*x8237)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8239.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8238.value)))+(x8239.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x8240=IKsin(j4);
IkReal x8241=IKcos(j4);
IkReal x8242=(r21*sj5);
IkReal x8243=(cj5*r20);
IkReal x8244=((1.0)*x8241);
IkReal x8245=((1.0)*x8240);
evalcond[0]=(((x8240*x8242))+(((-1.0)*x8243*x8245))+(((-1.0)*r22*x8244)));
evalcond[1]=(((cj2*sj1))+((x8241*x8243))+((cj1*sj2))+(((-1.0)*x8242*x8244))+(((-1.0)*r22*x8245)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x8246=(cj5*sj4);
IkReal x8247=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x8247))+(((-1.0)*r00*x8246)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x8246))+(((-1.0)*r11*x8247))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x8247))+(((-1.0)*r00*x8246))))+IKsqr((((r10*x8246))+(((-1.0)*r11*x8247))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x8247))+(((-1.0)*r00*x8246))), (((r10*x8246))+(((-1.0)*r11*x8247))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x8248=IKcos(j0);
IkReal x8249=IKsin(j0);
IkReal x8250=(cj4*cj5);
IkReal x8251=((0.213)*sj1);
IkReal x8252=((1.0)*cj1);
IkReal x8253=(r11*sj5);
IkReal x8254=(r00*sj5);
IkReal x8255=((1.0)*cj5);
IkReal x8256=((1.0)*sj4);
IkReal x8257=(r10*sj5);
IkReal x8258=((0.213)*cj1);
IkReal x8259=((1.0)*sj1);
IkReal x8260=((0.244)*cj1);
IkReal x8261=((0.085)*cj5);
IkReal x8262=((1.0)*cj4);
IkReal x8263=(r01*sj5);
IkReal x8264=(sj2*x8248);
IkReal x8265=(sj2*x8249);
IkReal x8266=(cj2*x8248);
IkReal x8267=(cj2*x8249);
evalcond[0]=((((-1.0)*r12*x8262))+((sj4*x8253))+(((-1.0)*r10*sj4*x8255))+x8248);
evalcond[1]=(((sj4*x8263))+(((-1.0)*r02*x8262))+(((-1.0)*r00*sj4*x8255))+(((-1.0)*x8249)));
evalcond[2]=((((-1.0)*x8254))+(((-1.0)*x8252*x8264))+(((-1.0)*r01*x8255))+(((-1.0)*x8259*x8266)));
evalcond[3]=((((-1.0)*x8257))+(((-1.0)*x8252*x8265))+(((-1.0)*r11*x8255))+(((-1.0)*x8259*x8267)));
evalcond[4]=(((r00*x8250))+(((-1.0)*x8252*x8266))+(((-1.0)*x8262*x8263))+((sj1*x8264))+(((-1.0)*r02*x8256)));
evalcond[5]=(((r10*x8250))+(((-1.0)*x8252*x8267))+(((-1.0)*r12*x8256))+(((-1.0)*x8253*x8262))+((sj1*x8265)));
evalcond[6]=((((-0.085)*x8254))+(((-0.131)*x8249))+(((-1.0)*px))+((x8258*x8266))+(((-1.0)*x8251*x8264))+((x8248*x8260))+(((-1.0)*r01*x8261)));
evalcond[7]=((((-0.085)*x8257))+(((-1.0)*py))+((x8258*x8267))+((x8249*x8260))+(((-1.0)*x8251*x8265))+(((0.131)*x8248))+(((-1.0)*r11*x8261)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x8268 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8268.valid){
continue;
}
CheckValue<IkReal> x8269=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))),-1);
if(!x8269.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x8268.value)+(((1.5707963267949)*(x8269.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x8270=IKcos(j0);
IkReal x8271=IKsin(j0);
IkReal x8272=((0.213)*sj1);
IkReal x8273=((1.0)*cj1);
IkReal x8274=(r00*sj5);
IkReal x8275=((1.0)*cj5);
IkReal x8276=(r10*sj5);
IkReal x8277=((0.213)*cj1);
IkReal x8278=((1.0)*sj1);
IkReal x8279=((0.244)*cj1);
IkReal x8280=((0.085)*cj5);
IkReal x8281=(sj2*x8270);
IkReal x8282=(sj2*x8271);
IkReal x8283=(cj2*x8270);
IkReal x8284=(cj2*x8271);
evalcond[0]=((((-1.0)*x8278*x8283))+(((-1.0)*x8274))+(((-1.0)*x8273*x8281))+(((-1.0)*r01*x8275)));
evalcond[1]=((((-1.0)*x8278*x8284))+(((-1.0)*r11*x8275))+(((-1.0)*x8276))+(((-1.0)*x8273*x8282)));
evalcond[2]=((((-0.085)*x8274))+((x8277*x8283))+(((-1.0)*px))+(((-0.131)*x8271))+(((-1.0)*r01*x8280))+((x8270*x8279))+(((-1.0)*x8272*x8281)));
evalcond[3]=((((-1.0)*r11*x8280))+(((-0.085)*x8276))+((x8277*x8284))+(((-1.0)*py))+((x8271*x8279))+(((0.131)*x8270))+(((-1.0)*x8272*x8282)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x8285=((1.0)*cj5);
IkReal x8286=((((-1.0)*r00*sj5))+(((-1.0)*r01*x8285)));
j4eval[0]=x8286;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x8285))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x8286);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x8287=((1.0)*cj5);
IkReal x8288=((((-1.0)*r11*x8287))+(((-1.0)*r10*sj5)));
j4eval[0]=x8288;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x8287))))));
j4eval[2]=IKsign(x8288);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x8289=((1.0)*sj0);
IkReal x8290=((1.0)*cj0);
IkReal x8291=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x8291;
j4eval[1]=((IKabs(((((-1.0)*r12*x8289))+(((-1.0)*r02*x8290)))))+(IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x8289))+(((-1.0)*r01*sj5*x8290))))));
j4eval[2]=IKsign(x8291);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x8292=((-1.0)*r20);
IkReal x8294 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8294)==0){
continue;
}
IkReal x8293=pow(x8294,-0.5);
CheckValue<IkReal> x8295 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8292),IKFAST_ATAN2_MAGTHRESH);
if(!x8295.valid){
continue;
}
IkReal gconst132=((-1.0)*(x8295.value));
IkReal gconst133=(r21*x8293);
IkReal gconst134=(x8292*x8293);
CheckValue<IkReal> x8296 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8296.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8296.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8297=((-1.0)*r20);
IkReal x8298=x8293;
CheckValue<IkReal> x8300 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8297),IKFAST_ATAN2_MAGTHRESH);
if(!x8300.valid){
continue;
}
IkReal x8299=((-1.0)*(x8300.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x8299;
IkReal gconst132=x8299;
IkReal gconst133=(r21*x8298);
IkReal gconst134=(x8297*x8298);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8301=((-1.0)*r20);
IkReal x8302=x8293;
CheckValue<IkReal> x8304 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8301),IKFAST_ATAN2_MAGTHRESH);
if(!x8304.valid){
continue;
}
IkReal x8303=((-1.0)*(x8304.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x8303;
IkReal gconst132=x8303;
IkReal gconst133=(r21*x8302);
IkReal gconst134=(x8301*x8302);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8305=((-1.0)*r20);
IkReal x8306=x8293;
CheckValue<IkReal> x8308 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8305),IKFAST_ATAN2_MAGTHRESH);
if(!x8308.valid){
continue;
}
IkReal x8307=((-1.0)*(x8308.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x8307;
IkReal gconst132=x8307;
IkReal gconst133=(r21*x8306);
IkReal gconst134=(x8305*x8306);
IkReal x8309=r22*r22;
CheckValue<IkReal> x8312=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8309))),-1);
if(!x8312.valid){
continue;
}
IkReal x8310=x8312.value;
IkReal x8311=(x8309+((x8310*(r21*r21*r21*r21)))+((x8310*(r20*r20*r20*r20)))+(((2.0)*x8310*(r20*r20)*(r21*r21))));
j4eval[0]=x8311;
j4eval[1]=IKsign(x8311);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8313=(gconst133*r21);
IkReal x8314=(cj1*sj2);
IkReal x8315=(gconst134*r20);
IkReal x8316=(cj2*sj1);
CheckValue<IkReal> x8317=IKPowWithIntegerCheck(IKsign(((((-2.0)*x8313*x8315))+(x8313*x8313)+(r22*r22)+(x8315*x8315))),-1);
if(!x8317.valid){
continue;
}
CheckValue<IkReal> x8318 = IKatan2WithCheck(IkReal((((r22*x8314))+((r22*x8316)))),IkReal(((((-1.0)*x8315*x8316))+((x8313*x8314))+((x8313*x8316))+(((-1.0)*x8314*x8315)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8318.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8317.value)))+(x8318.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8319=IKsin(j4);
IkReal x8320=IKcos(j4);
IkReal x8321=(sj1*sj2);
IkReal x8322=(gconst133*r11);
IkReal x8323=(gconst133*r21);
IkReal x8324=(gconst133*r01);
IkReal x8325=((1.0)*x8320);
IkReal x8326=(gconst134*x8320);
IkReal x8327=((1.0)*x8319);
IkReal x8328=((1.0)*cj1*cj2);
evalcond[0]=(((x8319*x8323))+(((-1.0)*gconst134*r20*x8327))+(((-1.0)*r22*x8325)));
evalcond[1]=(((x8319*x8322))+cj0+(((-1.0)*gconst134*r10*x8327))+(((-1.0)*r12*x8325)));
evalcond[2]=(((x8319*x8324))+(((-1.0)*sj0))+(((-1.0)*gconst134*r00*x8327))+(((-1.0)*r02*x8325)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x8327))+((cj1*sj2))+(((-1.0)*x8323*x8325))+((r20*x8326)));
evalcond[4]=(((cj0*x8321))+((r00*x8326))+(((-1.0)*r02*x8327))+(((-1.0)*cj0*x8328))+(((-1.0)*x8324*x8325)));
evalcond[5]=(((r10*x8326))+(((-1.0)*x8322*x8325))+((sj0*x8321))+(((-1.0)*sj0*x8328))+(((-1.0)*r12*x8327)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8329=((1.0)*gconst134);
CheckValue<IkReal> x8330=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r10))+(((-1.0)*r11*x8329)))),-1);
if(!x8330.valid){
continue;
}
CheckValue<IkReal> x8331 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8329))+((gconst133*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8331.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8330.value)))+(x8331.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8332=IKsin(j4);
IkReal x8333=IKcos(j4);
IkReal x8334=(sj1*sj2);
IkReal x8335=(gconst133*r11);
IkReal x8336=(gconst133*r21);
IkReal x8337=(gconst133*r01);
IkReal x8338=((1.0)*x8333);
IkReal x8339=(gconst134*x8333);
IkReal x8340=((1.0)*x8332);
IkReal x8341=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x8338))+((x8332*x8336))+(((-1.0)*gconst134*r20*x8340)));
evalcond[1]=((((-1.0)*gconst134*r10*x8340))+cj0+(((-1.0)*r12*x8338))+((x8332*x8335)));
evalcond[2]=((((-1.0)*sj0))+((x8332*x8337))+(((-1.0)*r02*x8338))+(((-1.0)*gconst134*r00*x8340)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8340))+((r20*x8339))+(((-1.0)*x8336*x8338)));
evalcond[4]=((((-1.0)*r02*x8340))+((r00*x8339))+(((-1.0)*cj0*x8341))+((cj0*x8334))+(((-1.0)*x8337*x8338)));
evalcond[5]=(((r10*x8339))+(((-1.0)*x8335*x8338))+(((-1.0)*r12*x8340))+((sj0*x8334))+(((-1.0)*sj0*x8341)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8342=((1.0)*gconst134);
CheckValue<IkReal> x8343=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r00))+(((-1.0)*r01*x8342)))),-1);
if(!x8343.valid){
continue;
}
CheckValue<IkReal> x8344 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst133*r21))+(((-1.0)*cj0*r20*x8342)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8344.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8343.value)))+(x8344.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8345=IKsin(j4);
IkReal x8346=IKcos(j4);
IkReal x8347=(sj1*sj2);
IkReal x8348=(gconst133*r11);
IkReal x8349=(gconst133*r21);
IkReal x8350=(gconst133*r01);
IkReal x8351=((1.0)*x8346);
IkReal x8352=(gconst134*x8346);
IkReal x8353=((1.0)*x8345);
IkReal x8354=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x8351))+((x8345*x8349))+(((-1.0)*gconst134*r20*x8353)));
evalcond[1]=(cj0+((x8345*x8348))+(((-1.0)*r12*x8351))+(((-1.0)*gconst134*r10*x8353)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8351))+(((-1.0)*gconst134*r00*x8353))+((x8345*x8350)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x8353))+((cj1*sj2))+(((-1.0)*x8349*x8351))+((r20*x8352)));
evalcond[4]=((((-1.0)*r02*x8353))+(((-1.0)*cj0*x8354))+((cj0*x8347))+((r00*x8352))+(((-1.0)*x8350*x8351)));
evalcond[5]=(((r10*x8352))+((sj0*x8347))+(((-1.0)*r12*x8353))+(((-1.0)*sj0*x8354))+(((-1.0)*x8348*x8351)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8355=((-1.0)*r21);
IkReal x8357 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8357)==0){
continue;
}
IkReal x8356=pow(x8357,-0.5);
CheckValue<IkReal> x8358 = IKatan2WithCheck(IkReal(x8355),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8358.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x8358.value))));
IkReal gconst136=(x8355*x8356);
IkReal gconst137=((1.0)*r20*x8356);
CheckValue<IkReal> x8359 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8359.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8359.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8360=((-1.0)*r21);
CheckValue<IkReal> x8363 = IKatan2WithCheck(IkReal(x8360),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8363.valid){
continue;
}
IkReal x8361=((1.0)*(x8363.value));
IkReal x8362=x8356;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x8361)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x8361)));
IkReal gconst136=(x8360*x8362);
IkReal gconst137=((1.0)*r20*x8362);
IkReal x8364=r22*r22;
IkReal x8365=((1.0)*x8364);
CheckValue<IkReal> x8369=IKPowWithIntegerCheck(((-1.0)+x8364),-1);
if(!x8369.valid){
continue;
}
IkReal x8366=x8369.value;
if((((1.0)+(((-1.0)*x8365)))) < -0.00001)
continue;
IkReal x8367=IKsqrt(((1.0)+(((-1.0)*x8365))));
IkReal x8368=(cj0*x8366*x8367);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*x8365*x8368))+x8368))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8370=((-1.0)*r21);
CheckValue<IkReal> x8373 = IKatan2WithCheck(IkReal(x8370),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8373.valid){
continue;
}
IkReal x8371=((1.0)*(x8373.value));
IkReal x8372=x8356;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x8371)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x8371)));
IkReal gconst136=(x8370*x8372);
IkReal gconst137=((1.0)*r20*x8372);
IkReal x8374=r22*r22;
IkReal x8375=((1.0)*x8374);
CheckValue<IkReal> x8379=IKPowWithIntegerCheck(((-1.0)+x8374),-1);
if(!x8379.valid){
continue;
}
IkReal x8376=x8379.value;
if((((1.0)+(((-1.0)*x8375)))) < -0.00001)
continue;
IkReal x8377=IKsqrt(((1.0)+(((-1.0)*x8375))));
IkReal x8378=(sj0*x8376*x8377);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x8378+(((-1.0)*x8375*x8378))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8380=((-1.0)*r21);
CheckValue<IkReal> x8383 = IKatan2WithCheck(IkReal(x8380),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8383.valid){
continue;
}
IkReal x8381=((1.0)*(x8383.value));
IkReal x8382=x8356;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x8381)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x8381)));
IkReal gconst136=(x8380*x8382);
IkReal gconst137=((1.0)*r20*x8382);
IkReal x8384=r22*r22;
IkReal x8385=(r12*sj0);
IkReal x8386=(cj0*r02);
CheckValue<IkReal> x8390=IKPowWithIntegerCheck(((-1.0)+x8384),-1);
if(!x8390.valid){
continue;
}
IkReal x8387=x8390.value;
if((((1.0)+(((-1.0)*x8384)))) < -0.00001)
continue;
IkReal x8388=IKsqrt(((1.0)+(((-1.0)*x8384))));
IkReal x8389=(r22*x8387*x8388);
j4eval[0]=0;
j4eval[1]=((IKabs((((x8386*x8389))+((x8385*x8389)))))+(IKabs(((((-1.0)*x8386))+(((-1.0)*x8385))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8391=((1.0)*sj0);
IkReal x8392=((1.0)*cj0);
CheckValue<IkReal> x8393=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r20))+(((-1.0)*gconst137*r21)))),-1);
if(!x8393.valid){
continue;
}
CheckValue<IkReal> x8394 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x8392))+(((-1.0)*r12*x8391)))),IkReal((((gconst137*r10*sj0))+(((-1.0)*gconst136*r11*x8391))+((cj0*gconst137*r00))+(((-1.0)*gconst136*r01*x8392)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8394.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8393.value)))+(x8394.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8395=IKsin(j4);
IkReal x8396=IKcos(j4);
IkReal x8397=(gconst136*r01);
IkReal x8398=(gconst137*r10);
IkReal x8399=(sj1*sj2);
IkReal x8400=(gconst137*r20);
IkReal x8401=(gconst136*r11);
IkReal x8402=(gconst136*r21);
IkReal x8403=(gconst137*r00);
IkReal x8404=((1.0)*x8396);
IkReal x8405=((1.0)*cj1*cj2);
IkReal x8406=((1.0)*x8395);
evalcond[0]=(((x8395*x8402))+(((-1.0)*x8400*x8406))+(((-1.0)*r22*x8404)));
evalcond[1]=(cj0+((x8395*x8401))+(((-1.0)*x8398*x8406))+(((-1.0)*r12*x8404)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8404))+((x8395*x8397))+(((-1.0)*x8403*x8406)));
evalcond[3]=(((cj2*sj1))+((x8396*x8400))+((cj1*sj2))+(((-1.0)*r22*x8406))+(((-1.0)*x8402*x8404)));
evalcond[4]=(((x8396*x8403))+(((-1.0)*cj0*x8405))+(((-1.0)*r02*x8406))+(((-1.0)*x8397*x8404))+((cj0*x8399)));
evalcond[5]=((((-1.0)*sj0*x8405))+((sj0*x8399))+(((-1.0)*r12*x8406))+((x8396*x8398))+(((-1.0)*x8401*x8404)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8407=((1.0)*gconst137);
CheckValue<IkReal> x8408 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8407))+((gconst136*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8408.valid){
continue;
}
CheckValue<IkReal> x8409=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r10))+(((-1.0)*r11*x8407)))),-1);
if(!x8409.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8408.value)+(((1.5707963267949)*(x8409.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8410=IKsin(j4);
IkReal x8411=IKcos(j4);
IkReal x8412=(gconst136*r01);
IkReal x8413=(gconst137*r10);
IkReal x8414=(sj1*sj2);
IkReal x8415=(gconst137*r20);
IkReal x8416=(gconst136*r11);
IkReal x8417=(gconst136*r21);
IkReal x8418=(gconst137*r00);
IkReal x8419=((1.0)*x8411);
IkReal x8420=((1.0)*cj1*cj2);
IkReal x8421=((1.0)*x8410);
evalcond[0]=((((-1.0)*x8415*x8421))+((x8410*x8417))+(((-1.0)*r22*x8419)));
evalcond[1]=((((-1.0)*r12*x8419))+cj0+(((-1.0)*x8413*x8421))+((x8410*x8416)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8419))+(((-1.0)*x8418*x8421))+((x8410*x8412)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x8411*x8415))+(((-1.0)*x8417*x8419))+(((-1.0)*r22*x8421)));
evalcond[4]=(((x8411*x8418))+(((-1.0)*cj0*x8420))+(((-1.0)*r02*x8421))+((cj0*x8414))+(((-1.0)*x8412*x8419)));
evalcond[5]=(((x8411*x8413))+(((-1.0)*x8416*x8419))+(((-1.0)*sj0*x8420))+((sj0*x8414))+(((-1.0)*r12*x8421)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8422=((1.0)*gconst137);
CheckValue<IkReal> x8423 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x8422))+((cj0*gconst136*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8423.valid){
continue;
}
CheckValue<IkReal> x8424=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r00))+(((-1.0)*r01*x8422)))),-1);
if(!x8424.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8423.value)+(((1.5707963267949)*(x8424.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8425=IKsin(j4);
IkReal x8426=IKcos(j4);
IkReal x8427=(gconst136*r01);
IkReal x8428=(gconst137*r10);
IkReal x8429=(sj1*sj2);
IkReal x8430=(gconst137*r20);
IkReal x8431=(gconst136*r11);
IkReal x8432=(gconst136*r21);
IkReal x8433=(gconst137*r00);
IkReal x8434=((1.0)*x8426);
IkReal x8435=((1.0)*cj1*cj2);
IkReal x8436=((1.0)*x8425);
evalcond[0]=(((x8425*x8432))+(((-1.0)*x8430*x8436))+(((-1.0)*r22*x8434)));
evalcond[1]=(cj0+(((-1.0)*r12*x8434))+((x8425*x8431))+(((-1.0)*x8428*x8436)));
evalcond[2]=((((-1.0)*sj0))+((x8425*x8427))+(((-1.0)*r02*x8434))+(((-1.0)*x8433*x8436)));
evalcond[3]=(((x8426*x8430))+((cj2*sj1))+(((-1.0)*x8432*x8434))+((cj1*sj2))+(((-1.0)*r22*x8436)));
evalcond[4]=(((cj0*x8429))+((x8426*x8433))+(((-1.0)*x8427*x8434))+(((-1.0)*r02*x8436))+(((-1.0)*cj0*x8435)));
evalcond[5]=((((-1.0)*sj0*x8435))+(((-1.0)*r12*x8436))+(((-1.0)*x8431*x8434))+((sj0*x8429))+((x8426*x8428)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8437=((-1.0)*r10);
IkReal x8439 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x8439)==0){
continue;
}
IkReal x8438=pow(x8439,-0.5);
CheckValue<IkReal> x8440 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x8437),IKFAST_ATAN2_MAGTHRESH);
if(!x8440.valid){
continue;
}
IkReal gconst138=((-1.0)*(x8440.value));
IkReal gconst139=(r11*x8438);
IkReal gconst140=(x8437*x8438);
CheckValue<IkReal> x8441 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8441.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8441.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x8442=((-1.0)*r10);
IkReal x8443=x8438;
CheckValue<IkReal> x8445 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x8442),IKFAST_ATAN2_MAGTHRESH);
if(!x8445.valid){
continue;
}
IkReal x8444=((-1.0)*(x8445.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst139;
cj5=gconst140;
j5=x8444;
IkReal gconst138=x8444;
IkReal gconst139=(r11*x8443);
IkReal gconst140=(x8442*x8443);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8446=((1.0)*sj0);
IkReal x8447=((1.0)*gconst139);
CheckValue<IkReal> x8448=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst140*r21))+(((-1.0)*r20*x8447)))),-1);
if(!x8448.valid){
continue;
}
CheckValue<IkReal> x8449 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8446))+(((-1.0)*cj0*r02)))),IkReal((((gconst140*r10*sj0))+(((-1.0)*cj0*r01*x8447))+(((-1.0)*gconst139*r11*x8446))+((cj0*gconst140*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8449.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8448.value)))+(x8449.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8450=IKsin(j4);
IkReal x8451=IKcos(j4);
IkReal x8452=(gconst140*r00);
IkReal x8453=(sj1*sj2);
IkReal x8454=(gconst139*r11);
IkReal x8455=(gconst139*r01);
IkReal x8456=(gconst139*r21);
IkReal x8457=((1.0)*x8451);
IkReal x8458=((1.0)*x8450);
IkReal x8459=((1.0)*cj1*cj2);
IkReal x8460=(gconst140*x8451);
evalcond[0]=(((x8450*x8456))+(((-1.0)*r22*x8457))+(((-1.0)*gconst140*r20*x8458)));
evalcond[1]=(cj0+(((-1.0)*gconst140*r10*x8458))+((x8450*x8454))+(((-1.0)*r12*x8457)));
evalcond[2]=((((-1.0)*x8452*x8458))+(((-1.0)*sj0))+((x8450*x8455))+(((-1.0)*r02*x8457)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8458))+(((-1.0)*x8456*x8457))+((r20*x8460)));
evalcond[4]=(((x8451*x8452))+(((-1.0)*cj0*x8459))+(((-1.0)*r02*x8458))+((cj0*x8453))+(((-1.0)*x8455*x8457)));
evalcond[5]=((((-1.0)*x8454*x8457))+(((-1.0)*sj0*x8459))+(((-1.0)*r12*x8458))+((sj0*x8453))+((r10*x8460)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8461=((1.0)*gconst140);
CheckValue<IkReal> x8462=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst139*r00))+(((-1.0)*r01*x8461)))),-1);
if(!x8462.valid){
continue;
}
CheckValue<IkReal> x8463 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x8461))+((cj0*gconst139*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8463.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8462.value)))+(x8463.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8464=IKsin(j4);
IkReal x8465=IKcos(j4);
IkReal x8466=(gconst140*r00);
IkReal x8467=(sj1*sj2);
IkReal x8468=(gconst139*r11);
IkReal x8469=(gconst139*r01);
IkReal x8470=(gconst139*r21);
IkReal x8471=((1.0)*x8465);
IkReal x8472=((1.0)*x8464);
IkReal x8473=((1.0)*cj1*cj2);
IkReal x8474=(gconst140*x8465);
evalcond[0]=(((x8464*x8470))+(((-1.0)*gconst140*r20*x8472))+(((-1.0)*r22*x8471)));
evalcond[1]=(((x8464*x8468))+cj0+(((-1.0)*gconst140*r10*x8472))+(((-1.0)*r12*x8471)));
evalcond[2]=(((x8464*x8469))+(((-1.0)*sj0))+(((-1.0)*r02*x8471))+(((-1.0)*x8466*x8472)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x8470*x8471))+((cj1*sj2))+(((-1.0)*r22*x8472))+((r20*x8474)));
evalcond[4]=(((x8465*x8466))+(((-1.0)*r02*x8472))+((cj0*x8467))+(((-1.0)*x8469*x8471))+(((-1.0)*cj0*x8473)));
evalcond[5]=((((-1.0)*sj0*x8473))+((r10*x8474))+(((-1.0)*x8468*x8471))+(((-1.0)*r12*x8472))+((sj0*x8467)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8475=((-1.0)*r11);
IkReal x8477 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x8477)==0){
continue;
}
IkReal x8476=pow(x8477,-0.5);
CheckValue<IkReal> x8478 = IKatan2WithCheck(IkReal(x8475),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8478.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x8478.value))));
IkReal gconst142=(x8475*x8476);
IkReal gconst143=((1.0)*r10*x8476);
CheckValue<IkReal> x8479 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8479.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8479.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x8480=((-1.0)*r11);
CheckValue<IkReal> x8483 = IKatan2WithCheck(IkReal(x8480),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8483.valid){
continue;
}
IkReal x8481=((1.0)*(x8483.value));
IkReal x8482=x8476;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8481)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8481)));
IkReal gconst142=(x8480*x8482);
IkReal gconst143=((1.0)*r10*x8482);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8484=((-1.0)*r11);
CheckValue<IkReal> x8487 = IKatan2WithCheck(IkReal(x8484),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8487.valid){
continue;
}
IkReal x8485=((1.0)*(x8487.value));
IkReal x8486=x8476;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8485)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8485)));
IkReal gconst142=(x8484*x8486);
IkReal gconst143=((1.0)*r10*x8486);
IkReal x8488=r12*r12;
IkReal x8489=((1.0)*sj0);
IkReal x8490=(cj0*r02);
IkReal x8491=x8476;
j4eval[0]=((IKabs(((((-1.0)*r12*x8489))+(((-1.0)*x8490)))))+(IKabs((((r12*x8490*x8491))+((sj0*x8488*x8491))+(((-1.0)*x8489*x8491))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8492=((-1.0)*r11);
CheckValue<IkReal> x8495 = IKatan2WithCheck(IkReal(x8492),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8495.valid){
continue;
}
IkReal x8493=((1.0)*(x8495.value));
IkReal x8494=x8476;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8493)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8493)));
IkReal gconst142=(x8492*x8494);
IkReal gconst143=((1.0)*r10*x8494);
IkReal x8496=r12*r12;
IkReal x8497=(cj1*r22*sj2);
IkReal x8498=(cj2*r22*sj1);
CheckValue<IkReal> x8502=IKPowWithIntegerCheck(((-1.0)+x8496),-1);
if(!x8502.valid){
continue;
}
IkReal x8499=x8502.value;
if((((1.0)+(((-1.0)*x8496)))) < -0.00001)
continue;
IkReal x8500=IKsqrt(((1.0)+(((-1.0)*x8496))));
IkReal x8501=((1.0)*r12*x8499*x8500);
j4eval[0]=((IKabs(((((-1.0)*x8498*x8501))+(((-1.0)*x8497*x8501)))))+(IKabs((x8497+x8498))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8503=(gconst142*r21);
IkReal x8504=(cj1*sj2);
IkReal x8505=(cj2*sj1);
IkReal x8506=(gconst143*r20);
CheckValue<IkReal> x8507=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x8503*x8503)+(x8506*x8506)+(((-2.0)*x8503*x8506)))),-1);
if(!x8507.valid){
continue;
}
CheckValue<IkReal> x8508 = IKatan2WithCheck(IkReal((((r22*x8505))+((r22*x8504)))),IkReal(((((-1.0)*x8504*x8506))+((x8503*x8505))+((x8503*x8504))+(((-1.0)*x8505*x8506)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8508.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8507.value)))+(x8508.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8509=IKsin(j4);
IkReal x8510=IKcos(j4);
IkReal x8511=(sj1*sj2);
IkReal x8512=(gconst143*r20);
IkReal x8513=((1.0)*x8510);
IkReal x8514=((1.0)*cj1*cj2);
IkReal x8515=((1.0)*x8509);
IkReal x8516=(gconst142*x8509);
IkReal x8517=(gconst143*x8510);
evalcond[0]=((((-1.0)*x8512*x8515))+((r21*x8516))+(((-1.0)*r22*x8513)));
evalcond[1]=((((-1.0)*gconst143*r10*x8515))+cj0+((r11*x8516))+(((-1.0)*r12*x8513)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst143*r00*x8515))+(((-1.0)*r02*x8513))+((r01*x8516)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst142*r21*x8513))+((cj1*sj2))+(((-1.0)*r22*x8515))+((x8510*x8512)));
evalcond[4]=(((cj0*x8511))+(((-1.0)*r02*x8515))+(((-1.0)*cj0*x8514))+(((-1.0)*gconst142*r01*x8513))+((r00*x8517)));
evalcond[5]=(((sj0*x8511))+(((-1.0)*r12*x8515))+(((-1.0)*sj0*x8514))+(((-1.0)*gconst142*r11*x8513))+((r10*x8517)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8518=((1.0)*sj0);
IkReal x8519=((1.0)*gconst142);
CheckValue<IkReal> x8520 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x8518)))),IkReal((((cj0*gconst143*r00))+(((-1.0)*cj0*r01*x8519))+(((-1.0)*gconst142*r11*x8518))+((gconst143*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8520.valid){
continue;
}
CheckValue<IkReal> x8521=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x8519))+(((-1.0)*gconst143*r21)))),-1);
if(!x8521.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8520.value)+(((1.5707963267949)*(x8521.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8522=IKsin(j4);
IkReal x8523=IKcos(j4);
IkReal x8524=(sj1*sj2);
IkReal x8525=(gconst143*r20);
IkReal x8526=((1.0)*x8523);
IkReal x8527=((1.0)*cj1*cj2);
IkReal x8528=((1.0)*x8522);
IkReal x8529=(gconst142*x8522);
IkReal x8530=(gconst143*x8523);
evalcond[0]=(((r21*x8529))+(((-1.0)*x8525*x8528))+(((-1.0)*r22*x8526)));
evalcond[1]=((((-1.0)*gconst143*r10*x8528))+cj0+((r11*x8529))+(((-1.0)*r12*x8526)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8526))+((r01*x8529))+(((-1.0)*gconst143*r00*x8528)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst142*r21*x8526))+((cj1*sj2))+(((-1.0)*r22*x8528))+((x8523*x8525)));
evalcond[4]=(((r00*x8530))+(((-1.0)*r02*x8528))+(((-1.0)*cj0*x8527))+((cj0*x8524))+(((-1.0)*gconst142*r01*x8526)));
evalcond[5]=(((sj0*x8524))+((r10*x8530))+(((-1.0)*gconst142*r11*x8526))+(((-1.0)*sj0*x8527))+(((-1.0)*r12*x8528)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8531=((1.0)*gconst143);
CheckValue<IkReal> x8532=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8531))+(((-1.0)*gconst142*r00)))),-1);
if(!x8532.valid){
continue;
}
CheckValue<IkReal> x8533 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x8531))+((cj0*gconst142*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8533.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8532.value)))+(x8533.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8534=IKsin(j4);
IkReal x8535=IKcos(j4);
IkReal x8536=(sj1*sj2);
IkReal x8537=(gconst143*r20);
IkReal x8538=((1.0)*x8535);
IkReal x8539=((1.0)*cj1*cj2);
IkReal x8540=((1.0)*x8534);
IkReal x8541=(gconst142*x8534);
IkReal x8542=(gconst143*x8535);
evalcond[0]=((((-1.0)*x8537*x8540))+(((-1.0)*r22*x8538))+((r21*x8541)));
evalcond[1]=(cj0+(((-1.0)*r12*x8538))+((r11*x8541))+(((-1.0)*gconst143*r10*x8540)));
evalcond[2]=((((-1.0)*r02*x8538))+(((-1.0)*sj0))+(((-1.0)*gconst143*r00*x8540))+((r01*x8541)));
evalcond[3]=(((cj2*sj1))+((x8535*x8537))+((cj1*sj2))+(((-1.0)*r22*x8540))+(((-1.0)*gconst142*r21*x8538)));
evalcond[4]=((((-1.0)*r02*x8540))+(((-1.0)*cj0*x8539))+((r00*x8542))+(((-1.0)*gconst142*r01*x8538))+((cj0*x8536)));
evalcond[5]=((((-1.0)*sj0*x8539))+(((-1.0)*gconst142*r11*x8538))+((r10*x8542))+(((-1.0)*r12*x8540))+((sj0*x8536)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8543=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8543;
j4eval[1]=IKsign(x8543);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8544=((1.0)*cj5);
IkReal x8545=((((-1.0)*r01*x8544))+(((-1.0)*r00*sj5)));
j4eval[0]=x8545;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x8544))))));
j4eval[2]=IKsign(x8545);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8546=cj5*cj5;
IkReal x8547=r11*r11;
IkReal x8548=(r11*sj5);
IkReal x8549=(cj5*r10);
IkReal x8550=(((x8546*(r10*r10)))+(r12*r12)+x8547+(((-1.0)*x8546*x8547))+(((-2.0)*x8548*x8549)));
j4eval[0]=x8550;
j4eval[1]=IKsign(x8550);
j4eval[2]=((IKabs(r12))+(IKabs((x8549+(((-1.0)*x8548))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8551=cj5*cj5;
IkReal x8552=r11*r11;
IkReal x8553=(cj5*r10);
IkReal x8554=(r11*sj5);
CheckValue<IkReal> x8555 = IKatan2WithCheck(IkReal((x8553+(((-1.0)*x8554)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8555.valid){
continue;
}
CheckValue<IkReal> x8556=IKPowWithIntegerCheck(IKsign(((r12*r12)+x8552+(((-2.0)*x8553*x8554))+((x8551*(r10*r10)))+(((-1.0)*x8551*x8552)))),-1);
if(!x8556.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8555.value)+(((1.5707963267949)*(x8556.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8557=IKsin(j4);
IkReal x8558=IKcos(j4);
IkReal x8559=(cj5*r10);
IkReal x8560=(r01*sj5);
IkReal x8561=(cj5*r00);
IkReal x8562=(cj5*r20);
IkReal x8563=((1.0)*x8558);
IkReal x8564=((1.0)*x8557);
IkReal x8565=(sj5*x8557);
evalcond[0]=((((-1.0)*r22*x8563))+(((-1.0)*x8562*x8564))+((r21*x8565)));
evalcond[1]=(((x8557*x8560))+(((-1.0)*x8561*x8564))+(((-1.0)*r02*x8563)));
evalcond[2]=((((-1.0)*r12*x8564))+(((-1.0)*r11*sj5*x8563))+((x8558*x8559)));
evalcond[3]=((1.0)+((r11*x8565))+(((-1.0)*r12*x8563))+(((-1.0)*x8559*x8564)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8564))+(((-1.0)*r21*sj5*x8563))+((x8558*x8562)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x8560*x8563))+(((-1.0)*r02*x8564))+((x8558*x8561)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8566=((1.0)*cj5);
CheckValue<IkReal> x8567 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x8566)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8567.valid){
continue;
}
CheckValue<IkReal> x8568=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8566))+(((-1.0)*r00*sj5)))),-1);
if(!x8568.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8567.value)+(((1.5707963267949)*(x8568.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8569=IKsin(j4);
IkReal x8570=IKcos(j4);
IkReal x8571=(cj5*r10);
IkReal x8572=(r01*sj5);
IkReal x8573=(cj5*r00);
IkReal x8574=(cj5*r20);
IkReal x8575=((1.0)*x8570);
IkReal x8576=((1.0)*x8569);
IkReal x8577=(sj5*x8569);
evalcond[0]=(((r21*x8577))+(((-1.0)*x8574*x8576))+(((-1.0)*r22*x8575)));
evalcond[1]=((((-1.0)*r02*x8575))+(((-1.0)*x8573*x8576))+((x8569*x8572)));
evalcond[2]=((((-1.0)*r11*sj5*x8575))+((x8570*x8571))+(((-1.0)*r12*x8576)));
evalcond[3]=((1.0)+(((-1.0)*x8571*x8576))+((r11*x8577))+(((-1.0)*r12*x8575)));
evalcond[4]=((((-1.0)*r21*sj5*x8575))+((cj2*sj1))+((cj1*sj2))+((x8570*x8574))+(((-1.0)*r22*x8576)));
evalcond[5]=(((x8570*x8573))+(((-1.0)*x8572*x8575))+(((-1.0)*r02*x8576))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8578=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8578.valid){
continue;
}
CheckValue<IkReal> x8579 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8579.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8578.value)))+(x8579.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8580=IKsin(j4);
IkReal x8581=IKcos(j4);
IkReal x8582=(cj5*r10);
IkReal x8583=(r01*sj5);
IkReal x8584=(cj5*r00);
IkReal x8585=(cj5*r20);
IkReal x8586=((1.0)*x8581);
IkReal x8587=((1.0)*x8580);
IkReal x8588=(sj5*x8580);
evalcond[0]=((((-1.0)*r22*x8586))+(((-1.0)*x8585*x8587))+((r21*x8588)));
evalcond[1]=((((-1.0)*x8584*x8587))+(((-1.0)*r02*x8586))+((x8580*x8583)));
evalcond[2]=(((x8581*x8582))+(((-1.0)*r12*x8587))+(((-1.0)*r11*sj5*x8586)));
evalcond[3]=((1.0)+(((-1.0)*x8582*x8587))+((r11*x8588))+(((-1.0)*r12*x8586)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x8587))+(((-1.0)*r21*sj5*x8586))+((cj1*sj2))+((x8581*x8585)));
evalcond[5]=((((-1.0)*x8583*x8586))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x8587))+((x8581*x8584)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8589=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x8589;
j4eval[1]=IKsign(x8589);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8590=((1.0)*cj5);
IkReal x8591=((((-1.0)*r21*x8590))+(((-1.0)*r20*sj5)));
j4eval[0]=x8591;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x8590))))));
j4eval[2]=IKsign(x8591);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8592=cj5*cj5;
IkReal x8593=r11*r11;
IkReal x8594=(cj5*r10);
IkReal x8595=(r11*sj5);
IkReal x8596=((((2.0)*x8594*x8595))+(((-1.0)*x8593))+(((-1.0)*x8592*(r10*r10)))+(((-1.0)*(r12*r12)))+((x8592*x8593)));
j4eval[0]=x8596;
j4eval[1]=((IKabs(r12))+(IKabs((x8594+(((-1.0)*x8595))))));
j4eval[2]=IKsign(x8596);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8597=cj5*cj5;
IkReal x8598=r11*r11;
IkReal x8599=(cj5*r10);
IkReal x8600=(r11*sj5);
CheckValue<IkReal> x8601=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8597*(r10*r10)))+(((-1.0)*x8598))+(((-1.0)*(r12*r12)))+((x8597*x8598))+(((2.0)*x8599*x8600)))),-1);
if(!x8601.valid){
continue;
}
CheckValue<IkReal> x8602 = IKatan2WithCheck(IkReal((x8599+(((-1.0)*x8600)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8602.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8601.value)))+(x8602.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8603=IKsin(j4);
IkReal x8604=IKcos(j4);
IkReal x8605=(cj5*r10);
IkReal x8606=(r01*sj5);
IkReal x8607=(cj5*r00);
IkReal x8608=(cj5*r20);
IkReal x8609=((1.0)*x8604);
IkReal x8610=((1.0)*x8603);
IkReal x8611=(sj5*x8603);
evalcond[0]=((((-1.0)*x8608*x8610))+(((-1.0)*r22*x8609))+((r21*x8611)));
evalcond[1]=((((-1.0)*x8607*x8610))+(((-1.0)*r02*x8609))+((x8603*x8606)));
evalcond[2]=(((x8604*x8605))+(((-1.0)*r12*x8610))+(((-1.0)*r11*sj5*x8609)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8609))+((r11*x8611))+(((-1.0)*x8605*x8610)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8604*x8608))+(((-1.0)*r22*x8610))+(((-1.0)*r21*sj5*x8609)));
evalcond[5]=((((-1.0)*r02*x8610))+(((-1.0)*sj1*sj2))+((x8604*x8607))+((cj1*cj2))+(((-1.0)*x8606*x8609)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8612=((1.0)*cj5);
CheckValue<IkReal> x8613=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8612))+(((-1.0)*r20*sj5)))),-1);
if(!x8613.valid){
continue;
}
CheckValue<IkReal> x8614 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x8612))+((r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8614.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8613.value)))+(x8614.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8615=IKsin(j4);
IkReal x8616=IKcos(j4);
IkReal x8617=(cj5*r10);
IkReal x8618=(r01*sj5);
IkReal x8619=(cj5*r00);
IkReal x8620=(cj5*r20);
IkReal x8621=((1.0)*x8616);
IkReal x8622=((1.0)*x8615);
IkReal x8623=(sj5*x8615);
evalcond[0]=(((r21*x8623))+(((-1.0)*x8620*x8622))+(((-1.0)*r22*x8621)));
evalcond[1]=(((x8615*x8618))+(((-1.0)*x8619*x8622))+(((-1.0)*r02*x8621)));
evalcond[2]=(((x8616*x8617))+(((-1.0)*r12*x8622))+(((-1.0)*r11*sj5*x8621)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8621))+(((-1.0)*x8617*x8622))+((r11*x8623)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8616*x8620))+(((-1.0)*r21*sj5*x8621))+(((-1.0)*r22*x8622)));
evalcond[5]=(((x8616*x8619))+(((-1.0)*x8618*x8621))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r02*x8622)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8624 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8624.valid){
continue;
}
CheckValue<IkReal> x8625=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x8625.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8624.value)+(((1.5707963267949)*(x8625.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8626=IKsin(j4);
IkReal x8627=IKcos(j4);
IkReal x8628=(cj5*r10);
IkReal x8629=(r01*sj5);
IkReal x8630=(cj5*r00);
IkReal x8631=(cj5*r20);
IkReal x8632=((1.0)*x8627);
IkReal x8633=((1.0)*x8626);
IkReal x8634=(sj5*x8626);
evalcond[0]=(((r21*x8634))+(((-1.0)*r22*x8632))+(((-1.0)*x8631*x8633)));
evalcond[1]=(((x8626*x8629))+(((-1.0)*x8630*x8633))+(((-1.0)*r02*x8632)));
evalcond[2]=(((x8627*x8628))+(((-1.0)*r12*x8633))+(((-1.0)*r11*sj5*x8632)));
evalcond[3]=((-1.0)+(((-1.0)*x8628*x8633))+(((-1.0)*r12*x8632))+((r11*x8634)));
evalcond[4]=(((cj2*sj1))+((x8627*x8631))+((cj1*sj2))+(((-1.0)*r21*sj5*x8632))+(((-1.0)*r22*x8633)));
evalcond[5]=(((x8627*x8630))+(((-1.0)*x8629*x8632))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r02*x8633)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8635=((-1.0)*r00);
IkReal x8637 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8637)==0){
continue;
}
IkReal x8636=pow(x8637,-0.5);
CheckValue<IkReal> x8638 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x8635),IKFAST_ATAN2_MAGTHRESH);
if(!x8638.valid){
continue;
}
IkReal gconst144=((-1.0)*(x8638.value));
IkReal gconst145=(r01*x8636);
IkReal gconst146=(x8635*x8636);
CheckValue<IkReal> x8639 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8639.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8639.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x8640=((-1.0)*r00);
IkReal x8641=x8636;
CheckValue<IkReal> x8643 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x8640),IKFAST_ATAN2_MAGTHRESH);
if(!x8643.valid){
continue;
}
IkReal x8642=((-1.0)*(x8643.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst145;
cj5=gconst146;
j5=x8642;
IkReal gconst144=x8642;
IkReal gconst145=(r01*x8641);
IkReal gconst146=(x8640*x8641);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8644=((1.0)*sj0);
IkReal x8645=((1.0)*gconst145);
CheckValue<IkReal> x8646=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst146*r21))+(((-1.0)*r20*x8645)))),-1);
if(!x8646.valid){
continue;
}
CheckValue<IkReal> x8647 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x8644)))),IkReal((((cj0*gconst146*r00))+(((-1.0)*cj0*r01*x8645))+((gconst146*r10*sj0))+(((-1.0)*gconst145*r11*x8644)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8647.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8646.value)))+(x8647.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8648=IKsin(j4);
IkReal x8649=IKcos(j4);
IkReal x8650=(gconst146*r10);
IkReal x8651=(sj1*sj2);
IkReal x8652=(gconst146*r20);
IkReal x8653=(gconst146*r00);
IkReal x8654=((1.0)*x8649);
IkReal x8655=((1.0)*x8648);
IkReal x8656=(gconst145*x8648);
IkReal x8657=((1.0)*cj1*cj2);
evalcond[0]=(((r21*x8656))+(((-1.0)*x8652*x8655))+(((-1.0)*r22*x8654)));
evalcond[1]=((((-1.0)*r12*x8654))+cj0+((r11*x8656))+(((-1.0)*x8650*x8655)));
evalcond[2]=(((r01*x8656))+(((-1.0)*sj0))+(((-1.0)*x8653*x8655))+(((-1.0)*r02*x8654)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst145*r21*x8654))+((x8649*x8652))+(((-1.0)*r22*x8655)));
evalcond[4]=((((-1.0)*gconst145*r01*x8654))+((x8649*x8653))+((cj0*x8651))+(((-1.0)*cj0*x8657))+(((-1.0)*r02*x8655)));
evalcond[5]=((((-1.0)*gconst145*r11*x8654))+(((-1.0)*r12*x8655))+(((-1.0)*sj0*x8657))+((sj0*x8651))+((x8649*x8650)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8658=((1.0)*gconst146);
CheckValue<IkReal> x8659 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8658))+((gconst145*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8659.valid){
continue;
}
CheckValue<IkReal> x8660=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8658))+(((-1.0)*gconst145*r10)))),-1);
if(!x8660.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8659.value)+(((1.5707963267949)*(x8660.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8661=IKsin(j4);
IkReal x8662=IKcos(j4);
IkReal x8663=(gconst146*r10);
IkReal x8664=(sj1*sj2);
IkReal x8665=(gconst146*r20);
IkReal x8666=(gconst146*r00);
IkReal x8667=((1.0)*x8662);
IkReal x8668=((1.0)*x8661);
IkReal x8669=(gconst145*x8661);
IkReal x8670=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x8667))+(((-1.0)*x8665*x8668))+((r21*x8669)));
evalcond[1]=(cj0+(((-1.0)*r12*x8667))+((r11*x8669))+(((-1.0)*x8663*x8668)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8667))+((r01*x8669))+(((-1.0)*x8666*x8668)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8668))+((x8662*x8665))+(((-1.0)*gconst145*r21*x8667)));
evalcond[4]=((((-1.0)*cj0*x8670))+((cj0*x8664))+(((-1.0)*r02*x8668))+((x8662*x8666))+(((-1.0)*gconst145*r01*x8667)));
evalcond[5]=(((sj0*x8664))+(((-1.0)*gconst145*r11*x8667))+(((-1.0)*r12*x8668))+((x8662*x8663))+(((-1.0)*sj0*x8670)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8671=((-1.0)*r01);
IkReal x8673 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8673)==0){
continue;
}
IkReal x8672=pow(x8673,-0.5);
CheckValue<IkReal> x8674 = IKatan2WithCheck(IkReal(x8671),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8674.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x8674.value))));
IkReal gconst148=(x8671*x8672);
IkReal gconst149=((1.0)*r00*x8672);
CheckValue<IkReal> x8675 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8675.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8675.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x8676=((-1.0)*r01);
CheckValue<IkReal> x8679 = IKatan2WithCheck(IkReal(x8676),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8679.valid){
continue;
}
IkReal x8677=((1.0)*(x8679.value));
IkReal x8678=x8672;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8677)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8677)));
IkReal gconst148=(x8676*x8678);
IkReal gconst149=((1.0)*r00*x8678);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8680=((-1.0)*r01);
CheckValue<IkReal> x8683 = IKatan2WithCheck(IkReal(x8680),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8683.valid){
continue;
}
IkReal x8681=((1.0)*(x8683.value));
IkReal x8682=x8672;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8681)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8681)));
IkReal gconst148=(x8680*x8682);
IkReal gconst149=((1.0)*r00*x8682);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8684=((-1.0)*r01);
CheckValue<IkReal> x8687 = IKatan2WithCheck(IkReal(x8684),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8687.valid){
continue;
}
IkReal x8685=((1.0)*(x8687.value));
IkReal x8686=x8672;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8685)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8685)));
IkReal gconst148=(x8684*x8686);
IkReal gconst149=((1.0)*r00*x8686);
IkReal x8688=r02*r02;
IkReal x8689=(r12*sj0);
IkReal x8690=((1.0)*cj0);
IkReal x8691=x8672;
j4eval[0]=((IKabs((((cj0*x8688*x8691))+(((-1.0)*x8690*x8691))+((r02*x8689*x8691)))))+(IKabs(((((-1.0)*r02*x8690))+(((-1.0)*x8689))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8692=((1.0)*sj0);
IkReal x8693=((1.0)*gconst148);
CheckValue<IkReal> x8694=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst149*r21))+(((-1.0)*r20*x8693)))),-1);
if(!x8694.valid){
continue;
}
CheckValue<IkReal> x8695 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x8692)))),IkReal((((gconst149*r10*sj0))+((cj0*gconst149*r00))+(((-1.0)*gconst148*r11*x8692))+(((-1.0)*cj0*r01*x8693)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8695.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8694.value)))+(x8695.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8696=IKsin(j4);
IkReal x8697=IKcos(j4);
IkReal x8698=(gconst148*r11);
IkReal x8699=(sj1*sj2);
IkReal x8700=((1.0)*x8697);
IkReal x8701=(gconst149*x8697);
IkReal x8702=(gconst148*x8696);
IkReal x8703=((1.0)*cj1*cj2);
IkReal x8704=((1.0)*x8696);
evalcond[0]=(((r21*x8702))+(((-1.0)*gconst149*r20*x8704))+(((-1.0)*r22*x8700)));
evalcond[1]=((((-1.0)*gconst149*r10*x8704))+cj0+((x8696*x8698))+(((-1.0)*r12*x8700)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst149*r00*x8704))+(((-1.0)*r02*x8700))+((r01*x8702)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst148*r21*x8700))+((cj1*sj2))+(((-1.0)*r22*x8704))+((r20*x8701)));
evalcond[4]=((((-1.0)*cj0*x8703))+((cj0*x8699))+(((-1.0)*gconst148*r01*x8700))+(((-1.0)*r02*x8704))+((r00*x8701)));
evalcond[5]=(((r10*x8701))+(((-1.0)*x8698*x8700))+((sj0*x8699))+(((-1.0)*sj0*x8703))+(((-1.0)*r12*x8704)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8705=((1.0)*gconst149);
CheckValue<IkReal> x8706=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst148*r10))+(((-1.0)*r11*x8705)))),-1);
if(!x8706.valid){
continue;
}
CheckValue<IkReal> x8707 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8705))+((gconst148*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8707.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8706.value)))+(x8707.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8708=IKsin(j4);
IkReal x8709=IKcos(j4);
IkReal x8710=(gconst148*r11);
IkReal x8711=(sj1*sj2);
IkReal x8712=((1.0)*x8709);
IkReal x8713=(gconst149*x8709);
IkReal x8714=(gconst148*x8708);
IkReal x8715=((1.0)*cj1*cj2);
IkReal x8716=((1.0)*x8708);
evalcond[0]=((((-1.0)*r22*x8712))+(((-1.0)*gconst149*r20*x8716))+((r21*x8714)));
evalcond[1]=(cj0+(((-1.0)*r12*x8712))+((x8708*x8710))+(((-1.0)*gconst149*r10*x8716)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8712))+(((-1.0)*gconst149*r00*x8716))+((r01*x8714)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst148*r21*x8712))+((cj1*sj2))+(((-1.0)*r22*x8716))+((r20*x8713)));
evalcond[4]=(((cj0*x8711))+(((-1.0)*gconst148*r01*x8712))+(((-1.0)*r02*x8716))+((r00*x8713))+(((-1.0)*cj0*x8715)));
evalcond[5]=((((-1.0)*sj0*x8715))+(((-1.0)*r12*x8716))+((sj0*x8711))+(((-1.0)*x8710*x8712))+((r10*x8713)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8717=((1.0)*gconst149);
CheckValue<IkReal> x8718=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8717))+(((-1.0)*gconst148*r00)))),-1);
if(!x8718.valid){
continue;
}
CheckValue<IkReal> x8719 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst148*r21))+(((-1.0)*cj0*r20*x8717)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8719.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8718.value)))+(x8719.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8720=IKsin(j4);
IkReal x8721=IKcos(j4);
IkReal x8722=(gconst148*r11);
IkReal x8723=(sj1*sj2);
IkReal x8724=((1.0)*x8721);
IkReal x8725=(gconst149*x8721);
IkReal x8726=(gconst148*x8720);
IkReal x8727=((1.0)*cj1*cj2);
IkReal x8728=((1.0)*x8720);
evalcond[0]=(((r21*x8726))+(((-1.0)*gconst149*r20*x8728))+(((-1.0)*r22*x8724)));
evalcond[1]=((((-1.0)*gconst149*r10*x8728))+cj0+((x8720*x8722))+(((-1.0)*r12*x8724)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst149*r00*x8728))+(((-1.0)*r02*x8724))+((r01*x8726)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst148*r21*x8724))+((cj1*sj2))+((r20*x8725))+(((-1.0)*r22*x8728)));
evalcond[4]=((((-1.0)*cj0*x8727))+((cj0*x8723))+(((-1.0)*gconst148*r01*x8724))+(((-1.0)*r02*x8728))+((r00*x8725)));
evalcond[5]=(((r10*x8725))+(((-1.0)*sj0*x8727))+(((-1.0)*x8722*x8724))+((sj0*x8723))+(((-1.0)*r12*x8728)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8729=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8729;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x8729);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8730=((1.0)*cj5);
IkReal x8731=((((-1.0)*r10*sj5))+(((-1.0)*r11*x8730)));
j4eval[0]=x8731;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x8730)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8731);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8732=cj5*cj5;
IkReal x8733=r01*r01;
IkReal x8734=(r01*sj5);
IkReal x8735=(cj5*r00);
IkReal x8736=((((-1.0)*x8732*(r00*r00)))+((x8732*x8733))+(((-1.0)*(r02*r02)))+(((-1.0)*x8733))+(((2.0)*x8734*x8735)));
j4eval[0]=x8736;
j4eval[1]=IKsign(x8736);
j4eval[2]=((IKabs(r02))+(IKabs((x8735+(((-1.0)*x8734))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8737=cj5*cj5;
IkReal x8738=r01*r01;
IkReal x8739=(r01*sj5);
IkReal x8740=(cj5*r00);
CheckValue<IkReal> x8741=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*x8738))+(((2.0)*x8739*x8740))+(((-1.0)*x8737*(r00*r00)))+((x8737*x8738)))),-1);
if(!x8741.valid){
continue;
}
CheckValue<IkReal> x8742 = IKatan2WithCheck(IkReal((x8740+(((-1.0)*x8739)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8742.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8741.value)))+(x8742.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8743=IKsin(j4);
IkReal x8744=IKcos(j4);
IkReal x8745=(cj5*r10);
IkReal x8746=(r01*sj5);
IkReal x8747=(cj5*r00);
IkReal x8748=(cj5*r20);
IkReal x8749=((1.0)*x8744);
IkReal x8750=((1.0)*x8743);
IkReal x8751=(sj5*x8743);
evalcond[0]=((((-1.0)*r22*x8749))+((r21*x8751))+(((-1.0)*x8748*x8750)));
evalcond[1]=((((-1.0)*r12*x8749))+((r11*x8751))+(((-1.0)*x8745*x8750)));
evalcond[2]=(((x8744*x8747))+(((-1.0)*r02*x8750))+(((-1.0)*x8746*x8749)));
evalcond[3]=((-1.0)+((x8743*x8746))+(((-1.0)*r02*x8749))+(((-1.0)*x8747*x8750)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8749))+(((-1.0)*r22*x8750))+((cj1*sj2))+((x8744*x8748)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x8744*x8745))+(((-1.0)*r12*x8750))+(((-1.0)*r11*sj5*x8749)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8752=((1.0)*cj5);
CheckValue<IkReal> x8753=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x8752)))),-1);
if(!x8753.valid){
continue;
}
CheckValue<IkReal> x8754 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x8752)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8754.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8753.value)))+(x8754.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8755=IKsin(j4);
IkReal x8756=IKcos(j4);
IkReal x8757=(cj5*r10);
IkReal x8758=(r01*sj5);
IkReal x8759=(cj5*r00);
IkReal x8760=(cj5*r20);
IkReal x8761=((1.0)*x8756);
IkReal x8762=((1.0)*x8755);
IkReal x8763=(sj5*x8755);
evalcond[0]=((((-1.0)*r22*x8761))+(((-1.0)*x8760*x8762))+((r21*x8763)));
evalcond[1]=((((-1.0)*x8757*x8762))+(((-1.0)*r12*x8761))+((r11*x8763)));
evalcond[2]=((((-1.0)*r02*x8762))+((x8756*x8759))+(((-1.0)*x8758*x8761)));
evalcond[3]=((-1.0)+(((-1.0)*x8759*x8762))+(((-1.0)*r02*x8761))+((x8755*x8758)));
evalcond[4]=(((x8756*x8760))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8762))+(((-1.0)*r21*sj5*x8761)));
evalcond[5]=((((-1.0)*r11*sj5*x8761))+(((-1.0)*cj1*cj2))+((x8756*x8757))+((sj1*sj2))+(((-1.0)*r12*x8762)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8764=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8764.valid){
continue;
}
CheckValue<IkReal> x8765 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8765.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8764.value)))+(x8765.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8766=IKsin(j4);
IkReal x8767=IKcos(j4);
IkReal x8768=(cj5*r10);
IkReal x8769=(r01*sj5);
IkReal x8770=(cj5*r00);
IkReal x8771=(cj5*r20);
IkReal x8772=((1.0)*x8767);
IkReal x8773=((1.0)*x8766);
IkReal x8774=(sj5*x8766);
evalcond[0]=((((-1.0)*r22*x8772))+((r21*x8774))+(((-1.0)*x8771*x8773)));
evalcond[1]=((((-1.0)*x8768*x8773))+(((-1.0)*r12*x8772))+((r11*x8774)));
evalcond[2]=((((-1.0)*r02*x8773))+((x8767*x8770))+(((-1.0)*x8769*x8772)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8772))+((x8766*x8769))+(((-1.0)*x8770*x8773)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8767*x8771))+(((-1.0)*r22*x8773))+(((-1.0)*r21*sj5*x8772)));
evalcond[5]=((((-1.0)*r11*sj5*x8772))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x8767*x8768))+(((-1.0)*r12*x8773)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8775=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x8775;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8775);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8776=((1.0)*cj5);
IkReal x8777=((((-1.0)*r21*x8776))+(((-1.0)*r20*sj5)));
j4eval[0]=x8777;
j4eval[1]=((IKabs(((((-1.0)*r10*x8776))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x8777);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8778=cj5*cj5;
IkReal x8779=r01*r01;
IkReal x8780=(cj5*r00);
IkReal x8781=(r01*sj5);
IkReal x8782=(((x8778*(r00*r00)))+x8779+(((-1.0)*x8778*x8779))+(r02*r02)+(((-2.0)*x8780*x8781)));
j4eval[0]=x8782;
j4eval[1]=((IKabs(r02))+(IKabs((x8780+(((-1.0)*x8781))))));
j4eval[2]=IKsign(x8782);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8783=cj5*cj5;
IkReal x8784=r01*r01;
IkReal x8785=(r01*sj5);
IkReal x8786=(cj5*r00);
CheckValue<IkReal> x8787=IKPowWithIntegerCheck(IKsign((x8784+(((-2.0)*x8785*x8786))+(((-1.0)*x8783*x8784))+(r02*r02)+((x8783*(r00*r00))))),-1);
if(!x8787.valid){
continue;
}
CheckValue<IkReal> x8788 = IKatan2WithCheck(IkReal((x8786+(((-1.0)*x8785)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8788.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8787.value)))+(x8788.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8789=IKsin(j4);
IkReal x8790=IKcos(j4);
IkReal x8791=(cj5*r10);
IkReal x8792=(r01*sj5);
IkReal x8793=(cj5*r00);
IkReal x8794=(cj5*r20);
IkReal x8795=((1.0)*x8790);
IkReal x8796=((1.0)*x8789);
IkReal x8797=(sj5*x8789);
evalcond[0]=(((r21*x8797))+(((-1.0)*x8794*x8796))+(((-1.0)*r22*x8795)));
evalcond[1]=((((-1.0)*r12*x8795))+((r11*x8797))+(((-1.0)*x8791*x8796)));
evalcond[2]=((((-1.0)*x8792*x8795))+(((-1.0)*r02*x8796))+((x8790*x8793)));
evalcond[3]=((1.0)+(((-1.0)*x8793*x8796))+((x8789*x8792))+(((-1.0)*r02*x8795)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8790*x8794))+(((-1.0)*r22*x8796))+(((-1.0)*r21*sj5*x8795)));
evalcond[5]=((((-1.0)*r12*x8796))+(((-1.0)*r11*sj5*x8795))+(((-1.0)*sj1*sj2))+((x8790*x8791))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8798=((1.0)*cj5);
CheckValue<IkReal> x8799 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x8798)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8799.valid){
continue;
}
CheckValue<IkReal> x8800=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8798))+(((-1.0)*r20*sj5)))),-1);
if(!x8800.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8799.value)+(((1.5707963267949)*(x8800.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8801=IKsin(j4);
IkReal x8802=IKcos(j4);
IkReal x8803=(cj5*r10);
IkReal x8804=(r01*sj5);
IkReal x8805=(cj5*r00);
IkReal x8806=(cj5*r20);
IkReal x8807=((1.0)*x8802);
IkReal x8808=((1.0)*x8801);
IkReal x8809=(sj5*x8801);
evalcond[0]=(((r21*x8809))+(((-1.0)*x8806*x8808))+(((-1.0)*r22*x8807)));
evalcond[1]=((((-1.0)*r12*x8807))+(((-1.0)*x8803*x8808))+((r11*x8809)));
evalcond[2]=(((x8802*x8805))+(((-1.0)*r02*x8808))+(((-1.0)*x8804*x8807)));
evalcond[3]=((1.0)+((x8801*x8804))+(((-1.0)*r02*x8807))+(((-1.0)*x8805*x8808)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x8808))+((x8802*x8806))+((cj1*sj2))+(((-1.0)*r21*sj5*x8807)));
evalcond[5]=((((-1.0)*r12*x8808))+((x8802*x8803))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r11*sj5*x8807)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8810 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8810.valid){
continue;
}
CheckValue<IkReal> x8811=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x8811.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8810.value)+(((1.5707963267949)*(x8811.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8812=IKsin(j4);
IkReal x8813=IKcos(j4);
IkReal x8814=(cj5*r10);
IkReal x8815=(r01*sj5);
IkReal x8816=(cj5*r00);
IkReal x8817=(cj5*r20);
IkReal x8818=((1.0)*x8813);
IkReal x8819=((1.0)*x8812);
IkReal x8820=(sj5*x8812);
evalcond[0]=((((-1.0)*r22*x8818))+((r21*x8820))+(((-1.0)*x8817*x8819)));
evalcond[1]=((((-1.0)*r12*x8818))+((r11*x8820))+(((-1.0)*x8814*x8819)));
evalcond[2]=((((-1.0)*r02*x8819))+((x8813*x8816))+(((-1.0)*x8815*x8818)));
evalcond[3]=((1.0)+(((-1.0)*x8816*x8819))+(((-1.0)*r02*x8818))+((x8812*x8815)));
evalcond[4]=((((-1.0)*r22*x8819))+((cj2*sj1))+((x8813*x8817))+((cj1*sj2))+(((-1.0)*r21*sj5*x8818)));
evalcond[5]=((((-1.0)*r12*x8819))+((x8813*x8814))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r11*sj5*x8818)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8821=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8821);
rxp1_1=(px*r21);
rxp1_2=(r11*x8821);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8822=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8822);
rxp1_1=(px*r21);
rxp1_2=(r11*x8822);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8823=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8823);
rxp1_1=(px*r21);
rxp1_2=(r11*x8823);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8826=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x8826.valid){
continue;
}
IkReal x8824=x8826.value;
IkReal x8825=(sj0*x8824);
cj4array[0]=((((-1.0)*sj1*sj2*x8825))+((cj1*cj2*x8825)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8827=IKsin(j4);
IkReal x8828=IKcos(j4);
IkReal x8829=(r21*sj5);
IkReal x8830=(cj5*r20);
IkReal x8831=((1.0)*x8827);
IkReal x8832=((1.0)*x8828);
evalcond[0]=((-1.0)*r02*x8827);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x8832)));
evalcond[2]=((((-1.0)*x8830*x8831))+((x8827*x8829)));
evalcond[3]=(((r11*sj5*x8827))+(((-1.0)*cj5*r10*x8831)));
evalcond[4]=(((cj2*sj1))+((x8828*x8830))+((cj1*sj2))+(((-1.0)*x8829*x8832)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8835=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x8835.valid){
continue;
}
IkReal x8833=x8835.value;
IkReal x8834=((1.0)*x8833);
cj4array[0]=((((-1.0)*cj1*sj2*x8834))+(((-1.0)*cj2*sj1*x8834)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8836=IKsin(j4);
IkReal x8837=IKcos(j4);
IkReal x8838=(r11*sj5);
IkReal x8839=((1.0)*sj0);
IkReal x8840=((1.0)*x8837);
IkReal x8841=((1.0)*cj5*x8836);
evalcond[0]=((-1.0)*r02*x8836);
evalcond[1]=((((-1.0)*r02*x8840))+(((-1.0)*x8839)));
evalcond[2]=((((-1.0)*r20*x8841))+((r21*sj5*x8836)));
evalcond[3]=(((x8836*x8838))+(((-1.0)*r10*x8841)));
evalcond[4]=((((-1.0)*cj1*cj2*x8839))+(((-1.0)*x8838*x8840))+((cj5*r10*x8837))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8842=IKPowWithIntegerCheck(r02,-1);
if(!x8842.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x8842.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8843=IKsin(j4);
IkReal x8844=IKcos(j4);
IkReal x8845=(cj5*x8844);
IkReal x8846=(sj5*x8843);
IkReal x8847=((1.0)*sj5*x8844);
IkReal x8848=((1.0)*cj5*x8843);
evalcond[0]=((-1.0)*r02*x8843);
evalcond[1]=(((r21*x8846))+(((-1.0)*r20*x8848)));
evalcond[2]=((((-1.0)*r10*x8848))+((r11*x8846)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r20*x8845))+(((-1.0)*r21*x8847)));
evalcond[4]=((((-1.0)*cj1*cj2*sj0))+((r10*x8845))+((sj0*sj1*sj2))+(((-1.0)*r11*x8847)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8849=((1.0)*sj0);
IkReal x8850=((1.0)*cj0);
CheckValue<IkReal> x8851=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x8851.valid){
continue;
}
CheckValue<IkReal> x8852 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x8850))+(((-1.0)*r12*x8849)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x8850))+(((-1.0)*r11*sj5*x8849)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8852.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8851.value)))+(x8852.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8853=IKsin(j4);
IkReal x8854=IKcos(j4);
IkReal x8855=(cj5*r10);
IkReal x8856=(sj1*sj2);
IkReal x8857=(r01*sj5);
IkReal x8858=(cj5*r00);
IkReal x8859=(cj5*r20);
IkReal x8860=((1.0)*x8854);
IkReal x8861=((1.0)*cj1*cj2);
IkReal x8862=((1.0)*x8853);
IkReal x8863=(sj5*x8853);
evalcond[0]=(((r21*x8863))+(((-1.0)*r22*x8860))+(((-1.0)*x8859*x8862)));
evalcond[1]=(cj0+(((-1.0)*x8855*x8862))+((r11*x8863))+(((-1.0)*r12*x8860)));
evalcond[2]=((((-1.0)*sj0))+((x8853*x8857))+(((-1.0)*x8858*x8862))+(((-1.0)*r02*x8860)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8862))+(((-1.0)*r21*sj5*x8860))+((x8854*x8859)));
evalcond[4]=((((-1.0)*x8857*x8860))+(((-1.0)*cj0*x8861))+((cj0*x8856))+((x8854*x8858))+(((-1.0)*r02*x8862)));
evalcond[5]=(((sj0*x8856))+(((-1.0)*r11*sj5*x8860))+(((-1.0)*sj0*x8861))+(((-1.0)*r12*x8862))+((x8854*x8855)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8864=((1.0)*cj5);
CheckValue<IkReal> x8865=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x8864)))),-1);
if(!x8865.valid){
continue;
}
CheckValue<IkReal> x8866 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x8864)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8866.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8865.value)))+(x8866.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8867=IKsin(j4);
IkReal x8868=IKcos(j4);
IkReal x8869=(cj5*r10);
IkReal x8870=(sj1*sj2);
IkReal x8871=(r01*sj5);
IkReal x8872=(cj5*r00);
IkReal x8873=(cj5*r20);
IkReal x8874=((1.0)*x8868);
IkReal x8875=((1.0)*cj1*cj2);
IkReal x8876=((1.0)*x8867);
IkReal x8877=(sj5*x8867);
evalcond[0]=((((-1.0)*x8873*x8876))+(((-1.0)*r22*x8874))+((r21*x8877)));
evalcond[1]=(cj0+(((-1.0)*x8869*x8876))+((r11*x8877))+(((-1.0)*r12*x8874)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8874))+(((-1.0)*x8872*x8876))+((x8867*x8871)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8874))+(((-1.0)*r22*x8876))+((cj1*sj2))+((x8868*x8873)));
evalcond[4]=((((-1.0)*x8871*x8874))+(((-1.0)*r02*x8876))+(((-1.0)*cj0*x8875))+((cj0*x8870))+((x8868*x8872)));
evalcond[5]=((((-1.0)*r11*sj5*x8874))+(((-1.0)*r12*x8876))+(((-1.0)*sj0*x8875))+((x8868*x8869))+((sj0*x8870)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8878=((1.0)*cj5);
CheckValue<IkReal> x8879=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8878))+(((-1.0)*r00*sj5)))),-1);
if(!x8879.valid){
continue;
}
CheckValue<IkReal> x8880 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x8878)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8880.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8879.value)))+(x8880.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8881=IKsin(j4);
IkReal x8882=IKcos(j4);
IkReal x8883=(cj5*r10);
IkReal x8884=(sj1*sj2);
IkReal x8885=(r01*sj5);
IkReal x8886=(cj5*r00);
IkReal x8887=(cj5*r20);
IkReal x8888=((1.0)*x8882);
IkReal x8889=((1.0)*cj1*cj2);
IkReal x8890=((1.0)*x8881);
IkReal x8891=(sj5*x8881);
evalcond[0]=((((-1.0)*r22*x8888))+(((-1.0)*x8887*x8890))+((r21*x8891)));
evalcond[1]=(cj0+(((-1.0)*r12*x8888))+(((-1.0)*x8883*x8890))+((r11*x8891)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8888))+((x8881*x8885))+(((-1.0)*x8886*x8890)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x8882*x8887))+(((-1.0)*r21*sj5*x8888))+(((-1.0)*r22*x8890)));
evalcond[4]=((((-1.0)*cj0*x8889))+((x8882*x8886))+(((-1.0)*r02*x8890))+((cj0*x8884))+(((-1.0)*x8885*x8888)));
evalcond[5]=(((x8882*x8883))+((sj0*x8884))+(((-1.0)*r12*x8890))+(((-1.0)*r11*sj5*x8888))+(((-1.0)*sj0*x8889)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x8892=cj1*cj1;
IkReal x8893=cj2*cj2;
IkReal x8894=(cj1*cj2);
IkReal x8895=(sj1*sj2);
IkReal x8896=((244000.0)*cj1);
IkReal x8897=((213000.0)*px);
IkReal x8898=((213000.0)*py);
IkReal x8899=(cj5*r01);
IkReal x8900=((18105.0)*sj5);
IkReal x8901=((20740.0)*cj1);
IkReal x8902=(r10*sj5);
IkReal x8903=(cj5*r11);
IkReal x8904=(r00*sj5);
IkReal x8905=((18105.0)*x8903);
CheckValue<IkReal> x8906 = IKatan2WithCheck(IkReal((((x8894*x8905))+((r10*x8894*x8900))+((py*x8896))+(((-1.0)*r10*x8895*x8900))+((x8901*x8903))+((x8901*x8902))+((x8894*x8898))+(((-1.0)*x8895*x8898))+(((-131000.0)*px))+(((-1.0)*x8895*x8905))+(((-11135.0)*x8899))+(((-11135.0)*x8904)))),IkReal(((((18105.0)*x8894*x8899))+(((11135.0)*x8903))+(((11135.0)*x8902))+(((-1.0)*r00*x8895*x8900))+((x8901*x8904))+((px*x8896))+(((131000.0)*py))+((x8894*x8897))+(((-1.0)*x8895*x8897))+((r00*x8894*x8900))+(((-18105.0)*x8895*x8899))+((x8899*x8901)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8906.valid){
continue;
}
CheckValue<IkReal> x8907=IKPowWithIntegerCheck(IKsign(((62530.0)+(((14167.0)*x8892))+(((-103944.0)*cj1*x8895))+(((-90738.0)*x8894*x8895))+(((-45369.0)*x8893))+(((103944.0)*cj2*x8892))+(((90738.0)*x8892*x8893)))),-1);
if(!x8907.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x8906.value)+(((1.5707963267949)*(x8907.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x8908=IKcos(j0);
IkReal x8909=IKsin(j0);
IkReal x8910=((0.085)*sj5);
IkReal x8911=((0.213)*cj2);
IkReal x8912=((0.085)*cj5);
IkReal x8913=(cj1*x8909);
IkReal x8914=((0.213)*sj1*sj2);
IkReal x8915=(cj1*x8908);
evalcond[0]=((((-1.0)*r01*x8912))+((x8911*x8915))+(((-1.0)*x8908*x8914))+(((-1.0)*px))+(((0.244)*x8915))+(((-0.131)*x8909))+(((-1.0)*r00*x8910)));
evalcond[1]=((((-1.0)*x8909*x8914))+((x8911*x8913))+(((-1.0)*r11*x8912))+(((-1.0)*py))+(((0.244)*x8913))+(((0.131)*x8908))+(((-1.0)*r10*x8910)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
IkReal x8916=((1.0)*cj5);
IkReal x8917=((((-1.0)*r01*x8916))+(((-1.0)*r00*sj5)));
j4eval[0]=x8917;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x8916))))));
j4eval[2]=IKsign(x8917);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8918=((1.0)*cj5);
IkReal x8919=((((-1.0)*r10*sj5))+(((-1.0)*r11*x8918)));
j4eval[0]=x8919;
j4eval[1]=((IKabs(((((-1.0)*r20*sj0*x8918))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x8919);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8920=((1.0)*sj0);
IkReal x8921=((1.0)*cj0);
IkReal x8922=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x8922;
j4eval[1]=((IKabs((((cj0*cj5*r00))+(((-1.0)*r11*sj5*x8920))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x8921)))))+(IKabs(((((-1.0)*r02*x8921))+(((-1.0)*r12*x8920))))));
j4eval[2]=IKsign(x8922);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x8923=((-1.0)*r20);
IkReal x8925 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8925)==0){
continue;
}
IkReal x8924=pow(x8925,-0.5);
CheckValue<IkReal> x8926 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8923),IKFAST_ATAN2_MAGTHRESH);
if(!x8926.valid){
continue;
}
IkReal gconst0=((-1.0)*(x8926.value));
IkReal gconst1=(r21*x8924);
IkReal gconst2=(x8923*x8924);
CheckValue<IkReal> x8927 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8927.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8927.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8928=((-1.0)*r20);
IkReal x8929=x8924;
CheckValue<IkReal> x8931 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8928),IKFAST_ATAN2_MAGTHRESH);
if(!x8931.valid){
continue;
}
IkReal x8930=((-1.0)*(x8931.value));
sj5=gconst1;
cj5=gconst2;
j5=x8930;
IkReal gconst0=x8930;
IkReal gconst1=(r21*x8929);
IkReal gconst2=(x8928*x8929);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8932=((-1.0)*r20);
IkReal x8933=x8924;
CheckValue<IkReal> x8935 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8932),IKFAST_ATAN2_MAGTHRESH);
if(!x8935.valid){
continue;
}
IkReal x8934=((-1.0)*(x8935.value));
sj5=gconst1;
cj5=gconst2;
j5=x8934;
IkReal gconst0=x8934;
IkReal gconst1=(r21*x8933);
IkReal gconst2=(x8932*x8933);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8936=((-1.0)*r20);
IkReal x8937=x8924;
CheckValue<IkReal> x8939 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8936),IKFAST_ATAN2_MAGTHRESH);
if(!x8939.valid){
continue;
}
IkReal x8938=((-1.0)*(x8939.value));
sj5=gconst1;
cj5=gconst2;
j5=x8938;
IkReal gconst0=x8938;
IkReal gconst1=(r21*x8937);
IkReal gconst2=(x8936*x8937);
IkReal x8940=r22*r22;
CheckValue<IkReal> x8944=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8940))),-1);
if(!x8944.valid){
continue;
}
IkReal x8941=x8944.value;
IkReal x8942=(sj3*x8941);
IkReal x8943=(((x8942*(r20*r20*r20*r20)))+((x8942*(r21*r21*r21*r21)))+(((2.0)*x8942*(r20*r20)*(r21*r21)))+((sj3*x8940)));
j4eval[0]=x8943;
j4eval[1]=IKsign(x8943);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8945=((-1.0)*r20);
IkReal x8946=x8924;
CheckValue<IkReal> x8948 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8945),IKFAST_ATAN2_MAGTHRESH);
if(!x8948.valid){
continue;
}
IkReal x8947=((-1.0)*(x8948.value));
sj5=gconst1;
cj5=gconst2;
j5=x8947;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8947;
IkReal gconst1=(r21*x8946);
IkReal gconst2=(x8945*x8946);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8949=((-1.0)*r20);
IkReal x8950=x8924;
CheckValue<IkReal> x8952 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8949),IKFAST_ATAN2_MAGTHRESH);
if(!x8952.valid){
continue;
}
IkReal x8951=((-1.0)*(x8952.value));
sj5=gconst1;
cj5=gconst2;
j5=x8951;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8951;
IkReal gconst1=(r21*x8950);
IkReal gconst2=(x8949*x8950);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8953=((-1.0)*r20);
IkReal x8954=x8924;
CheckValue<IkReal> x8956 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8953),IKFAST_ATAN2_MAGTHRESH);
if(!x8956.valid){
continue;
}
IkReal x8955=((-1.0)*(x8956.value));
sj5=gconst1;
cj5=gconst2;
j5=x8955;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8955;
IkReal gconst1=(r21*x8954);
IkReal gconst2=(x8953*x8954);
IkReal x8957=((1.0)*(r22*r22));
CheckValue<IkReal> x8961=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8957))),-1);
if(!x8961.valid){
continue;
}
IkReal x8958=x8961.value;
IkReal x8959=((1.0)*x8958);
IkReal x8960=((((-2.0)*x8958*(r20*r20)*(r21*r21)))+(((-1.0)*x8959*(r20*r20*r20*r20)))+(((-1.0)*x8959*(r21*r21*r21*r21)))+(((-1.0)*x8957)));
j4eval[0]=x8960;
j4eval[1]=IKsign(x8960);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8962=((-1.0)*r20);
IkReal x8963=x8924;
CheckValue<IkReal> x8965 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8962),IKFAST_ATAN2_MAGTHRESH);
if(!x8965.valid){
continue;
}
IkReal x8964=((-1.0)*(x8965.value));
sj5=gconst1;
cj5=gconst2;
j5=x8964;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8964;
IkReal gconst1=(r21*x8963);
IkReal gconst2=(x8962*x8963);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8966=((-1.0)*r20);
IkReal x8967=x8924;
CheckValue<IkReal> x8969 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8966),IKFAST_ATAN2_MAGTHRESH);
if(!x8969.valid){
continue;
}
IkReal x8968=((-1.0)*(x8969.value));
sj5=gconst1;
cj5=gconst2;
j5=x8968;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8968;
IkReal gconst1=(r21*x8967);
IkReal gconst2=(x8966*x8967);
IkReal x8970=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8974=IKPowWithIntegerCheck(x8970,-1);
if(!x8974.valid){
continue;
}
IkReal x8971=x8974.value;
IkReal x8972=((1.0)*x8971);
IkReal x8973=((((-2.0)*r10*r11*r20*r21*x8971))+(((-1.0)*(r12*r12)))+(((-1.0)*x8972*(r11*r11)*(r21*r21)))+(((-1.0)*x8972*(r10*r10)*(r20*r20))));
j4eval[0]=x8973;
j4eval[1]=r12;
j4eval[2]=x8970;
j4eval[3]=IKsign(x8973);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8975=((-1.0)*r20);
IkReal x8976=x8924;
CheckValue<IkReal> x8978 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8975),IKFAST_ATAN2_MAGTHRESH);
if(!x8978.valid){
continue;
}
IkReal x8977=((-1.0)*(x8978.value));
sj5=gconst1;
cj5=gconst2;
j5=x8977;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8977;
IkReal gconst1=(r21*x8976);
IkReal gconst2=(x8975*x8976);
IkReal x8979=r22*r22;
IkReal x8980=(cj1*r12*sj2);
IkReal x8981=(cj2*r12*sj1);
CheckValue<IkReal> x8985=IKPowWithIntegerCheck(((-1.0)+x8979),-1);
if(!x8985.valid){
continue;
}
IkReal x8982=x8985.value;
if((((1.0)+(((-1.0)*x8979)))) < -0.00001)
continue;
IkReal x8983=IKsqrt(((1.0)+(((-1.0)*x8979))));
IkReal x8984=(r22*x8982*x8983);
j4eval[0]=((IKabs(((((-1.0)*x8980))+(((-1.0)*x8981)))))+(IKabs((((x8981*x8984))+((x8980*x8984))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8986=(cj1*sj2);
IkReal x8987=(cj2*sj1);
IkReal x8988=((1.0)*r12);
IkReal x8989=(gconst1*r11);
IkReal x8990=((1.0)*gconst2*r10);
CheckValue<IkReal> x8991 = IKatan2WithCheck(IkReal(((((-1.0)*x8986*x8990))+(((-1.0)*x8987*x8990))+((x8987*x8989))+((x8986*x8989)))),IkReal(((((-1.0)*x8986*x8988))+(((-1.0)*x8987*x8988)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8991.valid){
continue;
}
CheckValue<IkReal> x8992=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*gconst2*r01)))),-1);
if(!x8992.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8991.value)+(((1.5707963267949)*(x8992.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8993=IKcos(j4);
IkReal x8994=IKsin(j4);
IkReal x8995=((1.0)*x8993);
IkReal x8996=(gconst1*x8993);
IkReal x8997=(gconst1*x8994);
IkReal x8998=((1.0)*gconst2*x8994);
evalcond[0]=(((r11*x8996))+((r12*x8994))+(((-1.0)*gconst2*r10*x8995)));
evalcond[1]=(((r21*x8997))+(((-1.0)*r22*x8995))+(((-1.0)*r20*x8998)));
evalcond[2]=(((r01*x8997))+(((-1.0)*r02*x8995))+(((-1.0)*r00*x8998)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8995))+((r11*x8997))+(((-1.0)*r10*x8998)));
evalcond[4]=(((cj2*sj1))+((r21*x8996))+((cj1*sj2))+(((-1.0)*gconst2*r20*x8995))+((r22*x8994)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x8996))+(((-1.0)*gconst2*r00*x8995))+((r02*x8994)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8999=(gconst2*r10);
IkReal x9000=(gconst1*r11);
CheckValue<IkReal> x9001 = IKatan2WithCheck(IkReal((x9000+(((-1.0)*x8999)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x9001.valid){
continue;
}
CheckValue<IkReal> x9002=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9000*x9000)))+(((-1.0)*(x8999*x8999)))+(((-1.0)*(r12*r12)))+(((2.0)*x8999*x9000)))),-1);
if(!x9002.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9001.value)+(((1.5707963267949)*(x9002.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9003=IKcos(j4);
IkReal x9004=IKsin(j4);
IkReal x9005=((1.0)*x9003);
IkReal x9006=(gconst1*x9003);
IkReal x9007=(gconst1*x9004);
IkReal x9008=((1.0)*gconst2*x9004);
evalcond[0]=((((-1.0)*gconst2*r10*x9005))+((r11*x9006))+((r12*x9004)));
evalcond[1]=((((-1.0)*r22*x9005))+((r21*x9007))+(((-1.0)*r20*x9008)));
evalcond[2]=((((-1.0)*r02*x9005))+(((-1.0)*r00*x9008))+((r01*x9007)));
evalcond[3]=((1.0)+(((-1.0)*r12*x9005))+(((-1.0)*r10*x9008))+((r11*x9007)));
evalcond[4]=(((cj2*sj1))+((r21*x9006))+((r22*x9004))+((cj1*sj2))+(((-1.0)*gconst2*r20*x9005)));
evalcond[5]=(((r02*x9004))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r00*x9005))+((r01*x9006)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9009=((1.0)*gconst2);
CheckValue<IkReal> x9010=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9009)))),-1);
if(!x9010.valid){
continue;
}
CheckValue<IkReal> x9011 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst1*r21))+(((-1.0)*r20*x9009)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9011.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9010.value)))+(x9011.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9012=IKcos(j4);
IkReal x9013=IKsin(j4);
IkReal x9014=((1.0)*x9012);
IkReal x9015=(gconst1*x9012);
IkReal x9016=(gconst1*x9013);
IkReal x9017=((1.0)*gconst2*x9013);
evalcond[0]=(((r12*x9013))+(((-1.0)*gconst2*r10*x9014))+((r11*x9015)));
evalcond[1]=((((-1.0)*r22*x9014))+(((-1.0)*r20*x9017))+((r21*x9016)));
evalcond[2]=((((-1.0)*r00*x9017))+(((-1.0)*r02*x9014))+((r01*x9016)));
evalcond[3]=((1.0)+(((-1.0)*r10*x9017))+(((-1.0)*r12*x9014))+((r11*x9016)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst2*r20*x9014))+((cj1*sj2))+((r22*x9013))+((r21*x9015)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x9013))+((r01*x9015))+(((-1.0)*gconst2*r00*x9014)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9018=((-1.0)*r20);
IkReal x9019=x8924;
CheckValue<IkReal> x9021 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9018),IKFAST_ATAN2_MAGTHRESH);
if(!x9021.valid){
continue;
}
IkReal x9020=((-1.0)*(x9021.value));
sj5=gconst1;
cj5=gconst2;
j5=x9020;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9020;
IkReal gconst1=(r21*x9019);
IkReal gconst2=(x9018*x9019);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9022=((-1.0)*r20);
IkReal x9023=x8924;
CheckValue<IkReal> x9025 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9022),IKFAST_ATAN2_MAGTHRESH);
if(!x9025.valid){
continue;
}
IkReal x9024=((-1.0)*(x9025.value));
sj5=gconst1;
cj5=gconst2;
j5=x9024;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9024;
IkReal gconst1=(r21*x9023);
IkReal gconst2=(x9022*x9023);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9026=((-1.0)*r20);
IkReal x9027=x8924;
CheckValue<IkReal> x9029 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9026),IKFAST_ATAN2_MAGTHRESH);
if(!x9029.valid){
continue;
}
IkReal x9028=((-1.0)*(x9029.value));
sj5=gconst1;
cj5=gconst2;
j5=x9028;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9028;
IkReal gconst1=(r21*x9027);
IkReal gconst2=(x9026*x9027);
IkReal x9030=r22*r22;
IkReal x9031=(cj1*r12*sj2);
IkReal x9032=(cj2*r12*sj1);
CheckValue<IkReal> x9036=IKPowWithIntegerCheck(((-1.0)+x9030),-1);
if(!x9036.valid){
continue;
}
IkReal x9033=x9036.value;
if((((1.0)+(((-1.0)*x9030)))) < -0.00001)
continue;
IkReal x9034=IKsqrt(((1.0)+(((-1.0)*x9030))));
IkReal x9035=(r22*x9033*x9034);
j4eval[0]=((IKabs((((x9031*x9035))+((x9032*x9035)))))+(IKabs(((((-1.0)*x9032))+(((-1.0)*x9031))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9037=(cj1*sj2);
IkReal x9038=(cj2*sj1);
IkReal x9039=((1.0)*r12);
IkReal x9040=(gconst1*r11);
IkReal x9041=((1.0)*gconst2*r10);
CheckValue<IkReal> x9042=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*gconst2*r01)))),-1);
if(!x9042.valid){
continue;
}
CheckValue<IkReal> x9043 = IKatan2WithCheck(IkReal(((((-1.0)*x9038*x9041))+(((-1.0)*x9037*x9041))+((x9038*x9040))+((x9037*x9040)))),IkReal(((((-1.0)*x9038*x9039))+(((-1.0)*x9037*x9039)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9043.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9042.value)))+(x9043.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9044=IKcos(j4);
IkReal x9045=IKsin(j4);
IkReal x9046=((1.0)*x9044);
IkReal x9047=(gconst1*x9044);
IkReal x9048=(gconst1*x9045);
IkReal x9049=((1.0)*gconst2*x9045);
evalcond[0]=(((r12*x9045))+((r11*x9047))+(((-1.0)*gconst2*r10*x9046)));
evalcond[1]=((((-1.0)*r22*x9046))+(((-1.0)*r20*x9049))+((r21*x9048)));
evalcond[2]=(((r01*x9048))+(((-1.0)*r00*x9049))+(((-1.0)*r02*x9046)));
evalcond[3]=((-1.0)+(((-1.0)*r10*x9049))+(((-1.0)*r12*x9046))+((r11*x9048)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x9045))+((r21*x9047))+(((-1.0)*gconst2*r20*x9046)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r01*x9047))+((cj1*cj2))+(((-1.0)*gconst2*r00*x9046))+((r02*x9045)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9050=(gconst1*r11);
IkReal x9051=(gconst2*r10);
CheckValue<IkReal> x9052=IKPowWithIntegerCheck(IKsign(((((-2.0)*x9050*x9051))+(r12*r12)+(x9050*x9050)+(x9051*x9051))),-1);
if(!x9052.valid){
continue;
}
CheckValue<IkReal> x9053 = IKatan2WithCheck(IkReal((x9050+(((-1.0)*x9051)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x9053.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9052.value)))+(x9053.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9054=IKcos(j4);
IkReal x9055=IKsin(j4);
IkReal x9056=((1.0)*x9054);
IkReal x9057=(gconst1*x9054);
IkReal x9058=(gconst1*x9055);
IkReal x9059=((1.0)*gconst2*x9055);
evalcond[0]=((((-1.0)*gconst2*r10*x9056))+((r12*x9055))+((r11*x9057)));
evalcond[1]=((((-1.0)*r22*x9056))+(((-1.0)*r20*x9059))+((r21*x9058)));
evalcond[2]=((((-1.0)*r02*x9056))+(((-1.0)*r00*x9059))+((r01*x9058)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x9056))+(((-1.0)*r10*x9059))+((r11*x9058)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x9055))+(((-1.0)*gconst2*r20*x9056))+((r21*x9057)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r01*x9057))+((cj1*cj2))+(((-1.0)*gconst2*r00*x9056))+((r02*x9055)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9060 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9060.valid){
continue;
}
CheckValue<IkReal> x9061=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9061.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9060.value)+(((1.5707963267949)*(x9061.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9062=IKcos(j4);
IkReal x9063=IKsin(j4);
IkReal x9064=((1.0)*x9062);
IkReal x9065=(gconst1*x9062);
IkReal x9066=(gconst1*x9063);
IkReal x9067=((1.0)*gconst2*x9063);
evalcond[0]=(((r11*x9065))+((r12*x9063))+(((-1.0)*gconst2*r10*x9064)));
evalcond[1]=((((-1.0)*r20*x9067))+((r21*x9066))+(((-1.0)*r22*x9064)));
evalcond[2]=(((r01*x9066))+(((-1.0)*r02*x9064))+(((-1.0)*r00*x9067)));
evalcond[3]=((-1.0)+((r11*x9066))+(((-1.0)*r10*x9067))+(((-1.0)*r12*x9064)));
evalcond[4]=(((cj2*sj1))+((r22*x9063))+((cj1*sj2))+(((-1.0)*gconst2*r20*x9064))+((r21*x9065)));
evalcond[5]=(((r01*x9065))+(((-1.0)*gconst2*r00*x9064))+(((-1.0)*sj1*sj2))+((r02*x9063))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9068=((-1.0)*r20);
IkReal x9069=x8924;
CheckValue<IkReal> x9071 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9068),IKFAST_ATAN2_MAGTHRESH);
if(!x9071.valid){
continue;
}
IkReal x9070=((-1.0)*(x9071.value));
sj5=gconst1;
cj5=gconst2;
j5=x9070;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9070;
IkReal gconst1=(r21*x9069);
IkReal gconst2=(x9068*x9069);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9072=((-1.0)*r20);
IkReal x9073=x8924;
CheckValue<IkReal> x9075 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9072),IKFAST_ATAN2_MAGTHRESH);
if(!x9075.valid){
continue;
}
IkReal x9074=((-1.0)*(x9075.value));
sj5=gconst1;
cj5=gconst2;
j5=x9074;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9074;
IkReal gconst1=(r21*x9073);
IkReal gconst2=(x9072*x9073);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9076=((-1.0)*r20);
IkReal x9077=x8924;
CheckValue<IkReal> x9079 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9076),IKFAST_ATAN2_MAGTHRESH);
if(!x9079.valid){
continue;
}
IkReal x9078=((-1.0)*(x9079.value));
sj5=gconst1;
cj5=gconst2;
j5=x9078;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9078;
IkReal gconst1=(r21*x9077);
IkReal gconst2=(x9076*x9077);
IkReal x9080=r22*r22;
IkReal x9081=((1.0)*r02);
IkReal x9082=(cj1*sj2);
IkReal x9083=(cj2*sj1);
CheckValue<IkReal> x9087=IKPowWithIntegerCheck(((-1.0)+x9080),-1);
if(!x9087.valid){
continue;
}
IkReal x9084=x9087.value;
if((((1.0)+(((-1.0)*x9080)))) < -0.00001)
continue;
IkReal x9085=IKsqrt(((1.0)+(((-1.0)*x9080))));
IkReal x9086=(r02*r22*x9084*x9085);
j4eval[0]=((IKabs((((x9082*x9086))+((x9083*x9086)))))+(IKabs(((((-1.0)*x9081*x9083))+(((-1.0)*x9081*x9082))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9088=(cj1*sj2);
IkReal x9089=(gconst1*r01);
IkReal x9090=((1.0)*r02);
IkReal x9091=(cj2*sj1);
IkReal x9092=((1.0)*gconst2*r00);
CheckValue<IkReal> x9093 = IKatan2WithCheck(IkReal((((x9088*x9089))+(((-1.0)*x9091*x9092))+((x9089*x9091))+(((-1.0)*x9088*x9092)))),IkReal(((((-1.0)*x9088*x9090))+(((-1.0)*x9090*x9091)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9093.valid){
continue;
}
CheckValue<IkReal> x9094=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9094.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9093.value)+(((1.5707963267949)*(x9094.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9095=IKcos(j4);
IkReal x9096=IKsin(j4);
IkReal x9097=((1.0)*x9095);
IkReal x9098=(gconst1*x9095);
IkReal x9099=(gconst1*x9096);
IkReal x9100=((1.0)*gconst2*x9096);
evalcond[0]=((((-1.0)*gconst2*r00*x9097))+((r01*x9098))+((r02*x9096)));
evalcond[1]=((((-1.0)*r20*x9100))+((r21*x9099))+(((-1.0)*r22*x9097)));
evalcond[2]=(((r11*x9099))+(((-1.0)*r10*x9100))+(((-1.0)*r12*x9097)));
evalcond[3]=((-1.0)+((r01*x9099))+(((-1.0)*r00*x9100))+(((-1.0)*r02*x9097)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst2*r20*x9097))+((cj1*sj2))+((r21*x9098))+((r22*x9096)));
evalcond[5]=(((r11*x9098))+((r12*x9096))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r10*x9097)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9101=(gconst1*r01);
IkReal x9102=(gconst2*r00);
CheckValue<IkReal> x9103 = IKatan2WithCheck(IkReal(((((-1.0)*x9102))+x9101)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9103.valid){
continue;
}
CheckValue<IkReal> x9104=IKPowWithIntegerCheck(IKsign(((x9101*x9101)+(x9102*x9102)+(((-2.0)*x9101*x9102))+(r02*r02))),-1);
if(!x9104.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9103.value)+(((1.5707963267949)*(x9104.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9105=IKcos(j4);
IkReal x9106=IKsin(j4);
IkReal x9107=((1.0)*x9105);
IkReal x9108=(gconst1*x9105);
IkReal x9109=(gconst1*x9106);
IkReal x9110=((1.0)*gconst2*x9106);
evalcond[0]=(((r02*x9106))+(((-1.0)*gconst2*r00*x9107))+((r01*x9108)));
evalcond[1]=((((-1.0)*r22*x9107))+((r21*x9109))+(((-1.0)*r20*x9110)));
evalcond[2]=((((-1.0)*r10*x9110))+(((-1.0)*r12*x9107))+((r11*x9109)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x9107))+((r01*x9109))+(((-1.0)*r00*x9110)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x9106))+((r21*x9108))+(((-1.0)*gconst2*r20*x9107)));
evalcond[5]=((((-1.0)*gconst2*r10*x9107))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x9106))+((r11*x9108)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9111=((1.0)*gconst2);
CheckValue<IkReal> x9112 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst1*r21))+(((-1.0)*r20*x9111)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9112.valid){
continue;
}
CheckValue<IkReal> x9113=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9111)))),-1);
if(!x9113.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9112.value)+(((1.5707963267949)*(x9113.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9114=IKcos(j4);
IkReal x9115=IKsin(j4);
IkReal x9116=((1.0)*x9114);
IkReal x9117=(gconst1*x9114);
IkReal x9118=(gconst1*x9115);
IkReal x9119=((1.0)*gconst2*x9115);
evalcond[0]=((((-1.0)*gconst2*r00*x9116))+((r01*x9117))+((r02*x9115)));
evalcond[1]=(((r21*x9118))+(((-1.0)*r22*x9116))+(((-1.0)*r20*x9119)));
evalcond[2]=((((-1.0)*r10*x9119))+((r11*x9118))+(((-1.0)*r12*x9116)));
evalcond[3]=((-1.0)+((r01*x9118))+(((-1.0)*r02*x9116))+(((-1.0)*r00*x9119)));
evalcond[4]=(((r21*x9117))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst2*r20*x9116))+((r22*x9115)));
evalcond[5]=(((r12*x9115))+((r11*x9117))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r10*x9116)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9120=((-1.0)*r20);
IkReal x9121=x8924;
CheckValue<IkReal> x9123 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9120),IKFAST_ATAN2_MAGTHRESH);
if(!x9123.valid){
continue;
}
IkReal x9122=((-1.0)*(x9123.value));
sj5=gconst1;
cj5=gconst2;
j5=x9122;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9122;
IkReal gconst1=(r21*x9121);
IkReal gconst2=(x9120*x9121);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9124=((-1.0)*r20);
IkReal x9125=x8924;
CheckValue<IkReal> x9127 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9124),IKFAST_ATAN2_MAGTHRESH);
if(!x9127.valid){
continue;
}
IkReal x9126=((-1.0)*(x9127.value));
sj5=gconst1;
cj5=gconst2;
j5=x9126;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9126;
IkReal gconst1=(r21*x9125);
IkReal gconst2=(x9124*x9125);
IkReal x9128=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9132=IKPowWithIntegerCheck(x9128,-1);
if(!x9132.valid){
continue;
}
IkReal x9129=x9132.value;
IkReal x9130=((1.0)*x9129);
IkReal x9131=((((-2.0)*r00*r01*r20*r21*x9129))+(((-1.0)*x9130*(r01*r01)*(r21*r21)))+(((-1.0)*x9130*(r00*r00)*(r20*r20)))+(((-1.0)*(r02*r02))));
j4eval[0]=x9131;
j4eval[1]=IKsign(x9131);
j4eval[2]=r02;
j4eval[3]=x9128;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9133=((-1.0)*r20);
IkReal x9134=x8924;
CheckValue<IkReal> x9136 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9133),IKFAST_ATAN2_MAGTHRESH);
if(!x9136.valid){
continue;
}
IkReal x9135=((-1.0)*(x9136.value));
sj5=gconst1;
cj5=gconst2;
j5=x9135;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9135;
IkReal gconst1=(r21*x9134);
IkReal gconst2=(x9133*x9134);
IkReal x9137=r22*r22;
IkReal x9138=((1.0)*r02);
IkReal x9139=(cj1*sj2);
IkReal x9140=(cj2*sj1);
CheckValue<IkReal> x9144=IKPowWithIntegerCheck(((-1.0)+x9137),-1);
if(!x9144.valid){
continue;
}
IkReal x9141=x9144.value;
if((((1.0)+(((-1.0)*x9137)))) < -0.00001)
continue;
IkReal x9142=IKsqrt(((1.0)+(((-1.0)*x9137))));
IkReal x9143=(r02*r22*x9141*x9142);
j4eval[0]=((IKabs(((((-1.0)*x9138*x9140))+(((-1.0)*x9138*x9139)))))+(IKabs((((x9140*x9143))+((x9139*x9143))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9145=(cj1*sj2);
IkReal x9146=(gconst1*r01);
IkReal x9147=((1.0)*r02);
IkReal x9148=(cj2*sj1);
IkReal x9149=((1.0)*gconst2*r00);
CheckValue<IkReal> x9150 = IKatan2WithCheck(IkReal(((((-1.0)*x9148*x9149))+((x9145*x9146))+((x9146*x9148))+(((-1.0)*x9145*x9149)))),IkReal(((((-1.0)*x9147*x9148))+(((-1.0)*x9145*x9147)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9150.valid){
continue;
}
CheckValue<IkReal> x9151=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9151.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9150.value)+(((1.5707963267949)*(x9151.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9152=IKcos(j4);
IkReal x9153=IKsin(j4);
IkReal x9154=((1.0)*x9152);
IkReal x9155=(gconst1*x9152);
IkReal x9156=(gconst1*x9153);
IkReal x9157=((1.0)*gconst2*x9153);
evalcond[0]=(((r02*x9153))+(((-1.0)*gconst2*r00*x9154))+((r01*x9155)));
evalcond[1]=((((-1.0)*r20*x9157))+(((-1.0)*r22*x9154))+((r21*x9156)));
evalcond[2]=(((r11*x9156))+(((-1.0)*r12*x9154))+(((-1.0)*r10*x9157)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9154))+((r01*x9156))+(((-1.0)*r00*x9157)));
evalcond[4]=(((cj2*sj1))+((r22*x9153))+(((-1.0)*gconst2*r20*x9154))+((cj1*sj2))+((r21*x9155)));
evalcond[5]=(((r11*x9155))+(((-1.0)*sj1*sj2))+(((-1.0)*gconst2*r10*x9154))+((cj1*cj2))+((r12*x9153)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9158=(gconst1*r01);
IkReal x9159=(gconst2*r00);
CheckValue<IkReal> x9160=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9158*x9158)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x9159*x9159)))+(((2.0)*x9158*x9159)))),-1);
if(!x9160.valid){
continue;
}
CheckValue<IkReal> x9161 = IKatan2WithCheck(IkReal((x9158+(((-1.0)*x9159)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9161.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9160.value)))+(x9161.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9162=IKcos(j4);
IkReal x9163=IKsin(j4);
IkReal x9164=((1.0)*x9162);
IkReal x9165=(gconst1*x9162);
IkReal x9166=(gconst1*x9163);
IkReal x9167=((1.0)*gconst2*x9163);
evalcond[0]=(((r01*x9165))+((r02*x9163))+(((-1.0)*gconst2*r00*x9164)));
evalcond[1]=((((-1.0)*r22*x9164))+((r21*x9166))+(((-1.0)*r20*x9167)));
evalcond[2]=((((-1.0)*r12*x9164))+(((-1.0)*r10*x9167))+((r11*x9166)));
evalcond[3]=((1.0)+((r01*x9166))+(((-1.0)*r02*x9164))+(((-1.0)*r00*x9167)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x9163))+((r21*x9165))+(((-1.0)*gconst2*r20*x9164)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*gconst2*r10*x9164))+((r11*x9165))+((r12*x9163))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9168 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9168.valid){
continue;
}
CheckValue<IkReal> x9169=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9169.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9168.value)+(((1.5707963267949)*(x9169.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9170=IKcos(j4);
IkReal x9171=IKsin(j4);
IkReal x9172=((1.0)*x9170);
IkReal x9173=(gconst1*x9170);
IkReal x9174=(gconst1*x9171);
IkReal x9175=((1.0)*gconst2*x9171);
evalcond[0]=((((-1.0)*gconst2*r00*x9172))+((r02*x9171))+((r01*x9173)));
evalcond[1]=(((r21*x9174))+(((-1.0)*r22*x9172))+(((-1.0)*r20*x9175)));
evalcond[2]=((((-1.0)*r10*x9175))+(((-1.0)*r12*x9172))+((r11*x9174)));
evalcond[3]=((1.0)+((r01*x9174))+(((-1.0)*r02*x9172))+(((-1.0)*r00*x9175)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst2*r20*x9172))+((cj1*sj2))+((r21*x9173))+((r22*x9171)));
evalcond[5]=((((-1.0)*gconst2*r10*x9172))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r12*x9171))+((r11*x9173)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9176=((-1.0)*r20);
IkReal x9177=((-1.0)*px);
CheckValue<IkReal> x9179 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9176),IKFAST_ATAN2_MAGTHRESH);
if(!x9179.valid){
continue;
}
IkReal x9178=((-1.0)*(x9179.value));
sj5=gconst1;
cj5=gconst2;
j5=x9178;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9177);
rxp1_1=(px*r21);
rxp1_2=(r11*x9177);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9178;
IkReal gconst1=r21;
IkReal gconst2=x9176;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9180=((-1.0)*r20);
IkReal x9181=((-1.0)*px);
CheckValue<IkReal> x9183 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9180),IKFAST_ATAN2_MAGTHRESH);
if(!x9183.valid){
continue;
}
IkReal x9182=((-1.0)*(x9183.value));
sj5=gconst1;
cj5=gconst2;
j5=x9182;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9181);
rxp1_1=(px*r21);
rxp1_2=(r11*x9181);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9182;
IkReal gconst1=r21;
IkReal gconst2=x9180;
j4eval[0]=((1.0)+(r21*r21)+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9184=((-1.0)*r20);
IkReal x9185=((-1.0)*px);
CheckValue<IkReal> x9187 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9184),IKFAST_ATAN2_MAGTHRESH);
if(!x9187.valid){
continue;
}
IkReal x9186=((-1.0)*(x9187.value));
sj5=gconst1;
cj5=gconst2;
j5=x9186;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9185);
rxp1_1=(px*r21);
rxp1_2=(r11*x9185);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9186;
IkReal gconst1=r21;
IkReal gconst2=x9184;
j4eval[0]=(((r11*r21))+((r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9190=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x9190.valid){
continue;
}
IkReal x9188=x9190.value;
IkReal x9189=(sj0*x9188);
cj4array[0]=(((cj1*cj2*x9189))+(((-1.0)*sj1*sj2*x9189)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9191=IKsin(j4);
IkReal x9192=IKcos(j4);
IkReal x9193=((1.0)*gconst2);
IkReal x9194=(gconst1*r21);
evalcond[0]=(r02*x9191);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x9192)));
evalcond[2]=((((-1.0)*r20*x9191*x9193))+((x9191*x9194)));
evalcond[3]=((((-1.0)*r10*x9191*x9193))+((gconst1*r11*x9191)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x9192*x9194))+(((-1.0)*r20*x9192*x9193)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9197=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x9197.valid){
continue;
}
IkReal x9195=x9197.value;
IkReal x9196=((1.0)*x9195);
cj4array[0]=((((-1.0)*cj2*sj1*x9196))+(((-1.0)*cj1*sj2*x9196)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9198=IKsin(j4);
IkReal x9199=IKcos(j4);
IkReal x9200=((1.0)*sj0);
IkReal x9201=(gconst1*x9198);
IkReal x9202=((1.0)*x9199);
IkReal x9203=((1.0)*gconst2*x9198);
evalcond[0]=(r02*x9198);
evalcond[1]=((((-1.0)*r02*x9202))+(((-1.0)*x9200)));
evalcond[2]=(((r21*x9201))+(((-1.0)*r20*x9203)));
evalcond[3]=(((r11*x9201))+(((-1.0)*r10*x9203)));
evalcond[4]=((((-1.0)*gconst2*r10*x9202))+((gconst1*r11*x9199))+((sj0*sj1*sj2))+(((-1.0)*cj1*cj2*x9200)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9204=IKPowWithIntegerCheck(r02,-1);
if(!x9204.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9204.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9205=IKsin(j4);
IkReal x9206=IKcos(j4);
IkReal x9207=(gconst1*r21);
IkReal x9208=(gconst1*r11);
IkReal x9209=((1.0)*gconst2*r10);
IkReal x9210=((1.0)*gconst2*r20);
evalcond[0]=(r02*x9205);
evalcond[1]=(((x9205*x9207))+(((-1.0)*x9205*x9210)));
evalcond[2]=(((x9205*x9208))+(((-1.0)*x9205*x9209)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x9206*x9210))+((cj1*sj2))+((x9206*x9207)));
evalcond[4]=((((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2))+((x9206*x9208))+(((-1.0)*x9206*x9209)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9211=(cj2*sj1);
IkReal x9212=(cj1*sj2);
IkReal x9213=(gconst1*r21);
IkReal x9214=((1.0)*gconst2*r20);
CheckValue<IkReal> x9215 = IKatan2WithCheck(IkReal((((r22*x9212))+((r22*x9211)))),IkReal((((x9212*x9213))+(((-1.0)*x9212*x9214))+(((-1.0)*x9211*x9214))+((x9211*x9213)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9215.valid){
continue;
}
CheckValue<IkReal> x9216=IKPowWithIntegerCheck(IKsign(((((2.0)*gconst2*r20*x9213))+(((-1.0)*gconst2*r20*x9214))+(((-1.0)*(x9213*x9213)))+(((-1.0)*(r22*r22))))),-1);
if(!x9216.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9215.value)+(((1.5707963267949)*(x9216.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9217=IKsin(j4);
IkReal x9218=IKcos(j4);
IkReal x9219=(sj1*sj2);
IkReal x9220=(gconst2*r10);
IkReal x9221=(gconst2*r00);
IkReal x9222=(gconst2*r20);
IkReal x9223=((1.0)*x9218);
IkReal x9224=(gconst1*x9218);
IkReal x9225=((1.0)*cj1*cj2);
IkReal x9226=(gconst1*x9217);
IkReal x9227=((1.0)*x9217);
evalcond[0]=(((r21*x9226))+(((-1.0)*x9222*x9227))+(((-1.0)*r22*x9223)));
evalcond[1]=(cj0+(((-1.0)*x9220*x9227))+((r11*x9226))+(((-1.0)*r12*x9223)));
evalcond[2]=(((r01*x9226))+(((-1.0)*sj0))+(((-1.0)*r02*x9223))+(((-1.0)*x9221*x9227)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x9224))+((r22*x9217))+(((-1.0)*x9222*x9223)));
evalcond[4]=(((r01*x9224))+(((-1.0)*x9221*x9223))+(((-1.0)*cj0*x9225))+((r02*x9217))+((cj0*x9219)));
evalcond[5]=(((r12*x9217))+(((-1.0)*x9220*x9223))+((r11*x9224))+((sj0*x9219))+(((-1.0)*sj0*x9225)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9228=((1.0)*gconst2);
CheckValue<IkReal> x9229=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9228)))),-1);
if(!x9229.valid){
continue;
}
CheckValue<IkReal> x9230 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x9228))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9230.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9229.value)))+(x9230.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9231=IKsin(j4);
IkReal x9232=IKcos(j4);
IkReal x9233=(sj1*sj2);
IkReal x9234=(gconst2*r10);
IkReal x9235=(gconst2*r00);
IkReal x9236=(gconst2*r20);
IkReal x9237=((1.0)*x9232);
IkReal x9238=(gconst1*x9232);
IkReal x9239=((1.0)*cj1*cj2);
IkReal x9240=(gconst1*x9231);
IkReal x9241=((1.0)*x9231);
evalcond[0]=((((-1.0)*x9236*x9241))+((r21*x9240))+(((-1.0)*r22*x9237)));
evalcond[1]=(cj0+(((-1.0)*r12*x9237))+((r11*x9240))+(((-1.0)*x9234*x9241)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x9235*x9241))+((r01*x9240))+(((-1.0)*r02*x9237)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x9236*x9237))+((cj1*sj2))+((r22*x9231))+((r21*x9238)));
evalcond[4]=((((-1.0)*cj0*x9239))+((r02*x9231))+((cj0*x9233))+(((-1.0)*x9235*x9237))+((r01*x9238)));
evalcond[5]=((((-1.0)*sj0*x9239))+((r11*x9238))+((sj0*x9233))+(((-1.0)*x9234*x9237))+((r12*x9231)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9242=((1.0)*gconst2);
CheckValue<IkReal> x9243 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x9242))+((cj0*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9243.valid){
continue;
}
CheckValue<IkReal> x9244=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9242)))),-1);
if(!x9244.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9243.value)+(((1.5707963267949)*(x9244.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9245=IKsin(j4);
IkReal x9246=IKcos(j4);
IkReal x9247=(sj1*sj2);
IkReal x9248=(gconst2*r10);
IkReal x9249=(gconst2*r00);
IkReal x9250=(gconst2*r20);
IkReal x9251=((1.0)*x9246);
IkReal x9252=(gconst1*x9246);
IkReal x9253=((1.0)*cj1*cj2);
IkReal x9254=(gconst1*x9245);
IkReal x9255=((1.0)*x9245);
evalcond[0]=((((-1.0)*r22*x9251))+(((-1.0)*x9250*x9255))+((r21*x9254)));
evalcond[1]=(cj0+(((-1.0)*r12*x9251))+((r11*x9254))+(((-1.0)*x9248*x9255)));
evalcond[2]=((((-1.0)*sj0))+((r01*x9254))+(((-1.0)*x9249*x9255))+(((-1.0)*r02*x9251)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x9250*x9251))+((cj1*sj2))+((r21*x9252))+((r22*x9245)));
evalcond[4]=((((-1.0)*cj0*x9253))+((cj0*x9247))+((r02*x9245))+((r01*x9252))+(((-1.0)*x9249*x9251)));
evalcond[5]=(((r12*x9245))+((sj0*x9247))+((r11*x9252))+(((-1.0)*x9248*x9251))+(((-1.0)*sj0*x9253)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9256=((-1.0)*r20);
IkReal x9257=x8924;
CheckValue<IkReal> x9259 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9256),IKFAST_ATAN2_MAGTHRESH);
if(!x9259.valid){
continue;
}
IkReal x9258=((-1.0)*(x9259.value));
sj5=gconst1;
cj5=gconst2;
j5=x9258;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9258;
IkReal gconst1=(r21*x9257);
IkReal gconst2=(x9256*x9257);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9260=((-1.0)*r20);
IkReal x9261=x8924;
CheckValue<IkReal> x9263 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9260),IKFAST_ATAN2_MAGTHRESH);
if(!x9263.valid){
continue;
}
IkReal x9262=((-1.0)*(x9263.value));
sj5=gconst1;
cj5=gconst2;
j5=x9262;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9262;
IkReal gconst1=(r21*x9261);
IkReal gconst2=(x9260*x9261);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9264=((-1.0)*r20);
IkReal x9265=x8924;
CheckValue<IkReal> x9267 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9264),IKFAST_ATAN2_MAGTHRESH);
if(!x9267.valid){
continue;
}
IkReal x9266=((-1.0)*(x9267.value));
sj5=gconst1;
cj5=gconst2;
j5=x9266;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9266;
IkReal gconst1=(r21*x9265);
IkReal gconst2=(x9264*x9265);
IkReal x9268=r22*r22;
CheckValue<IkReal> x9271=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x9268))),-1);
if(!x9271.valid){
continue;
}
IkReal x9269=x9271.value;
IkReal x9270=((((2.0)*x9269*(r20*r20)*(r21*r21)))+x9268+((x9269*(r20*r20*r20*r20)))+((x9269*(r21*r21*r21*r21))));
j4eval[0]=x9270;
j4eval[1]=IKsign(x9270);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9272=((-1.0)*r20);
IkReal x9273=x8924;
CheckValue<IkReal> x9275 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9272),IKFAST_ATAN2_MAGTHRESH);
if(!x9275.valid){
continue;
}
IkReal x9274=((-1.0)*(x9275.value));
sj5=gconst1;
cj5=gconst2;
j5=x9274;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9274;
IkReal gconst1=(r21*x9273);
IkReal gconst2=(x9272*x9273);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9276=((-1.0)*r20);
IkReal x9277=x8924;
CheckValue<IkReal> x9279 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9276),IKFAST_ATAN2_MAGTHRESH);
if(!x9279.valid){
continue;
}
IkReal x9278=((-1.0)*(x9279.value));
sj5=gconst1;
cj5=gconst2;
j5=x9278;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9278;
IkReal gconst1=(r21*x9277);
IkReal gconst2=(x9276*x9277);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9280=((-1.0)*r20);
IkReal x9281=x8924;
CheckValue<IkReal> x9283 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9280),IKFAST_ATAN2_MAGTHRESH);
if(!x9283.valid){
continue;
}
IkReal x9282=((-1.0)*(x9283.value));
sj5=gconst1;
cj5=gconst2;
j5=x9282;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9282;
IkReal gconst1=(r21*x9281);
IkReal gconst2=(x9280*x9281);
IkReal x9284=r22*r22;
IkReal x9285=(cj1*r12*sj2);
IkReal x9286=(cj2*r12*sj1);
CheckValue<IkReal> x9290=IKPowWithIntegerCheck(((-1.0)+x9284),-1);
if(!x9290.valid){
continue;
}
IkReal x9287=x9290.value;
if((((1.0)+(((-1.0)*x9284)))) < -0.00001)
continue;
IkReal x9288=IKsqrt(((1.0)+(((-1.0)*x9284))));
IkReal x9289=((1.0)*r22*x9287*x9288);
j4eval[0]=((IKabs((x9285+x9286)))+(IKabs(((((-1.0)*x9286*x9289))+(((-1.0)*x9285*x9289))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9291=((1.0)*gconst1);
IkReal x9292=(cj2*sj1);
IkReal x9293=(gconst2*r10);
IkReal x9294=(cj1*sj2);
CheckValue<IkReal> x9295=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r01))+(((-1.0)*r00*x9291)))),-1);
if(!x9295.valid){
continue;
}
CheckValue<IkReal> x9296 = IKatan2WithCheck(IkReal((((x9292*x9293))+((x9293*x9294))+(((-1.0)*r11*x9291*x9292))+(((-1.0)*r11*x9291*x9294)))),IkReal((((r12*x9292))+((r12*x9294)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9296.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9295.value)))+(x9296.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9297=IKsin(j4);
IkReal x9298=IKcos(j4);
IkReal x9299=((1.0)*x9298);
IkReal x9300=(gconst2*x9298);
IkReal x9301=(gconst1*x9297);
IkReal x9302=((1.0)*x9297);
evalcond[0]=(((r21*x9301))+(((-1.0)*r22*x9299))+(((-1.0)*gconst2*r20*x9302)));
evalcond[1]=((((-1.0)*gconst2*r00*x9302))+((r01*x9301))+(((-1.0)*r02*x9299)));
evalcond[2]=((((-1.0)*gconst1*r11*x9299))+((r10*x9300))+(((-1.0)*r12*x9302)));
evalcond[3]=((1.0)+(((-1.0)*gconst2*r10*x9302))+((r11*x9301))+(((-1.0)*r12*x9299)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9299))+((cj1*sj2))+((r20*x9300))+(((-1.0)*r22*x9302)));
evalcond[5]=((((-1.0)*gconst1*r01*x9299))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x9302))+((r00*x9300)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9303=(gconst1*r11);
IkReal x9304=(gconst2*r10);
CheckValue<IkReal> x9305 = IKatan2WithCheck(IkReal((x9304+(((-1.0)*x9303)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9305.valid){
continue;
}
CheckValue<IkReal> x9306=IKPowWithIntegerCheck(IKsign(((((-2.0)*x9303*x9304))+(r12*r12)+(x9303*x9303)+(x9304*x9304))),-1);
if(!x9306.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9305.value)+(((1.5707963267949)*(x9306.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9307=IKsin(j4);
IkReal x9308=IKcos(j4);
IkReal x9309=((1.0)*x9308);
IkReal x9310=(gconst2*x9308);
IkReal x9311=(gconst1*x9307);
IkReal x9312=((1.0)*x9307);
evalcond[0]=(((r21*x9311))+(((-1.0)*r22*x9309))+(((-1.0)*gconst2*r20*x9312)));
evalcond[1]=((((-1.0)*gconst2*r00*x9312))+((r01*x9311))+(((-1.0)*r02*x9309)));
evalcond[2]=((((-1.0)*gconst1*r11*x9309))+((r10*x9310))+(((-1.0)*r12*x9312)));
evalcond[3]=((1.0)+(((-1.0)*gconst2*r10*x9312))+((r11*x9311))+(((-1.0)*r12*x9309)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9309))+((cj1*sj2))+((r20*x9310))+(((-1.0)*r22*x9312)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst1*r01*x9309))+(((-1.0)*r02*x9312))+((r00*x9310)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9313=((1.0)*gconst2);
CheckValue<IkReal> x9314=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9313)))),-1);
if(!x9314.valid){
continue;
}
CheckValue<IkReal> x9315 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9313))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9315.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9314.value)))+(x9315.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9316=IKsin(j4);
IkReal x9317=IKcos(j4);
IkReal x9318=((1.0)*x9317);
IkReal x9319=(gconst2*x9317);
IkReal x9320=(gconst1*x9316);
IkReal x9321=((1.0)*x9316);
evalcond[0]=((((-1.0)*gconst2*r20*x9321))+(((-1.0)*r22*x9318))+((r21*x9320)));
evalcond[1]=(((r01*x9320))+(((-1.0)*r02*x9318))+(((-1.0)*gconst2*r00*x9321)));
evalcond[2]=((((-1.0)*r12*x9321))+(((-1.0)*gconst1*r11*x9318))+((r10*x9319)));
evalcond[3]=((1.0)+(((-1.0)*gconst2*r10*x9321))+((r11*x9320))+(((-1.0)*r12*x9318)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9318))+(((-1.0)*r22*x9321))+((cj1*sj2))+((r20*x9319)));
evalcond[5]=((((-1.0)*r02*x9321))+(((-1.0)*gconst1*r01*x9318))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r00*x9319)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9322=((-1.0)*r20);
IkReal x9323=x8924;
CheckValue<IkReal> x9325 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9322),IKFAST_ATAN2_MAGTHRESH);
if(!x9325.valid){
continue;
}
IkReal x9324=((-1.0)*(x9325.value));
sj5=gconst1;
cj5=gconst2;
j5=x9324;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9324;
IkReal gconst1=(r21*x9323);
IkReal gconst2=(x9322*x9323);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9326=((-1.0)*r20);
IkReal x9327=x8924;
CheckValue<IkReal> x9329 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9326),IKFAST_ATAN2_MAGTHRESH);
if(!x9329.valid){
continue;
}
IkReal x9328=((-1.0)*(x9329.value));
sj5=gconst1;
cj5=gconst2;
j5=x9328;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9328;
IkReal gconst1=(r21*x9327);
IkReal gconst2=(x9326*x9327);
IkReal x9330=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9334=IKPowWithIntegerCheck(x9330,-1);
if(!x9334.valid){
continue;
}
IkReal x9331=x9334.value;
IkReal x9332=((1.0)*x9331);
IkReal x9333=((((-1.0)*x9332*(r11*r11)*(r21*r21)))+(((-1.0)*x9332*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x9331))+(((-1.0)*(r12*r12))));
j4eval[0]=x9333;
j4eval[1]=r12;
j4eval[2]=x9330;
j4eval[3]=IKsign(x9333);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9335=((-1.0)*r20);
IkReal x9336=x8924;
CheckValue<IkReal> x9338 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9335),IKFAST_ATAN2_MAGTHRESH);
if(!x9338.valid){
continue;
}
IkReal x9337=((-1.0)*(x9338.value));
sj5=gconst1;
cj5=gconst2;
j5=x9337;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9337;
IkReal gconst1=(r21*x9336);
IkReal gconst2=(x9335*x9336);
IkReal x9339=r22*r22;
IkReal x9340=(cj1*r12*sj2);
IkReal x9341=(cj2*r12*sj1);
CheckValue<IkReal> x9345=IKPowWithIntegerCheck(((-1.0)+x9339),-1);
if(!x9345.valid){
continue;
}
IkReal x9342=x9345.value;
if((((1.0)+(((-1.0)*x9339)))) < -0.00001)
continue;
IkReal x9343=IKsqrt(((1.0)+(((-1.0)*x9339))));
IkReal x9344=((1.0)*r22*x9342*x9343);
j4eval[0]=((IKabs((x9340+x9341)))+(IKabs(((((-1.0)*x9340*x9344))+(((-1.0)*x9341*x9344))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9346=((1.0)*gconst1);
IkReal x9347=(cj2*sj1);
IkReal x9348=(gconst2*r10);
IkReal x9349=(cj1*sj2);
CheckValue<IkReal> x9350 = IKatan2WithCheck(IkReal((((x9347*x9348))+(((-1.0)*r11*x9346*x9347))+(((-1.0)*r11*x9346*x9349))+((x9348*x9349)))),IkReal((((r12*x9347))+((r12*x9349)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9350.valid){
continue;
}
CheckValue<IkReal> x9351=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r01))+(((-1.0)*r00*x9346)))),-1);
if(!x9351.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9350.value)+(((1.5707963267949)*(x9351.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9352=IKsin(j4);
IkReal x9353=IKcos(j4);
IkReal x9354=((1.0)*x9353);
IkReal x9355=(gconst2*x9353);
IkReal x9356=(gconst1*x9352);
IkReal x9357=((1.0)*x9352);
evalcond[0]=((((-1.0)*r22*x9354))+(((-1.0)*gconst2*r20*x9357))+((r21*x9356)));
evalcond[1]=((((-1.0)*r02*x9354))+((r01*x9356))+(((-1.0)*gconst2*r00*x9357)));
evalcond[2]=((((-1.0)*r12*x9357))+((r10*x9355))+(((-1.0)*gconst1*r11*x9354)));
evalcond[3]=((-1.0)+((r11*x9356))+(((-1.0)*r12*x9354))+(((-1.0)*gconst2*r10*x9357)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x9357))+((cj1*sj2))+((r20*x9355))+(((-1.0)*gconst1*r21*x9354)));
evalcond[5]=((((-1.0)*gconst1*r01*x9354))+(((-1.0)*r02*x9357))+(((-1.0)*sj1*sj2))+((r00*x9355))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9358=(gconst1*r11);
IkReal x9359=(gconst2*r10);
CheckValue<IkReal> x9360 = IKatan2WithCheck(IkReal((x9359+(((-1.0)*x9358)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9360.valid){
continue;
}
CheckValue<IkReal> x9361=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9358*x9358)))+(((2.0)*x9358*x9359))+(((-1.0)*(x9359*x9359)))+(((-1.0)*(r12*r12))))),-1);
if(!x9361.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9360.value)+(((1.5707963267949)*(x9361.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9362=IKsin(j4);
IkReal x9363=IKcos(j4);
IkReal x9364=((1.0)*x9363);
IkReal x9365=(gconst2*x9363);
IkReal x9366=(gconst1*x9362);
IkReal x9367=((1.0)*x9362);
evalcond[0]=(((r21*x9366))+(((-1.0)*r22*x9364))+(((-1.0)*gconst2*r20*x9367)));
evalcond[1]=((((-1.0)*r02*x9364))+((r01*x9366))+(((-1.0)*gconst2*r00*x9367)));
evalcond[2]=((((-1.0)*gconst1*r11*x9364))+(((-1.0)*r12*x9367))+((r10*x9365)));
evalcond[3]=((-1.0)+((r11*x9366))+(((-1.0)*gconst2*r10*x9367))+(((-1.0)*r12*x9364)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9364))+((cj1*sj2))+(((-1.0)*r22*x9367))+((r20*x9365)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r02*x9367))+(((-1.0)*gconst1*r01*x9364))+((cj1*cj2))+((r00*x9365)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9368 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9368.valid){
continue;
}
CheckValue<IkReal> x9369=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9369.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9368.value)+(((1.5707963267949)*(x9369.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9370=IKsin(j4);
IkReal x9371=IKcos(j4);
IkReal x9372=((1.0)*x9371);
IkReal x9373=(gconst2*x9371);
IkReal x9374=(gconst1*x9370);
IkReal x9375=((1.0)*x9370);
evalcond[0]=(((r21*x9374))+(((-1.0)*r22*x9372))+(((-1.0)*gconst2*r20*x9375)));
evalcond[1]=((((-1.0)*r02*x9372))+(((-1.0)*gconst2*r00*x9375))+((r01*x9374)));
evalcond[2]=((((-1.0)*r12*x9375))+((r10*x9373))+(((-1.0)*gconst1*r11*x9372)));
evalcond[3]=((-1.0)+(((-1.0)*gconst2*r10*x9375))+((r11*x9374))+(((-1.0)*r12*x9372)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9372))+((cj1*sj2))+(((-1.0)*r22*x9375))+((r20*x9373)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r02*x9375))+((cj1*cj2))+((r00*x9373))+(((-1.0)*gconst1*r01*x9372)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9376=((-1.0)*r20);
IkReal x9377=x8924;
CheckValue<IkReal> x9379 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9376),IKFAST_ATAN2_MAGTHRESH);
if(!x9379.valid){
continue;
}
IkReal x9378=((-1.0)*(x9379.value));
sj5=gconst1;
cj5=gconst2;
j5=x9378;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9378;
IkReal gconst1=(r21*x9377);
IkReal gconst2=(x9376*x9377);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9380=((-1.0)*r20);
IkReal x9381=x8924;
CheckValue<IkReal> x9383 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9380),IKFAST_ATAN2_MAGTHRESH);
if(!x9383.valid){
continue;
}
IkReal x9382=((-1.0)*(x9383.value));
sj5=gconst1;
cj5=gconst2;
j5=x9382;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9382;
IkReal gconst1=(r21*x9381);
IkReal gconst2=(x9380*x9381);
IkReal x9384=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9388=IKPowWithIntegerCheck(x9384,-1);
if(!x9388.valid){
continue;
}
IkReal x9385=x9388.value;
IkReal x9386=((1.0)*x9385);
IkReal x9387=((((-1.0)*(r02*r02)))+(((-1.0)*x9386*(r01*r01)*(r21*r21)))+(((-1.0)*x9386*(r00*r00)*(r20*r20)))+(((-2.0)*r00*r01*r20*r21*x9385)));
j4eval[0]=x9387;
j4eval[1]=IKsign(x9387);
j4eval[2]=r02;
j4eval[3]=x9384;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9389=((-1.0)*r20);
IkReal x9390=x8924;
CheckValue<IkReal> x9392 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9389),IKFAST_ATAN2_MAGTHRESH);
if(!x9392.valid){
continue;
}
IkReal x9391=((-1.0)*(x9392.value));
sj5=gconst1;
cj5=gconst2;
j5=x9391;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9391;
IkReal gconst1=(r21*x9390);
IkReal gconst2=(x9389*x9390);
IkReal x9393=r22*r22;
IkReal x9394=(cj1*r02*sj2);
IkReal x9395=(cj2*r02*sj1);
CheckValue<IkReal> x9399=IKPowWithIntegerCheck(((-1.0)+x9393),-1);
if(!x9399.valid){
continue;
}
IkReal x9396=x9399.value;
if((((1.0)+(((-1.0)*x9393)))) < -0.00001)
continue;
IkReal x9397=IKsqrt(((1.0)+(((-1.0)*x9393))));
IkReal x9398=((1.0)*r22*x9396*x9397);
j4eval[0]=((IKabs((x9395+x9394)))+(IKabs(((((-1.0)*x9394*x9398))+(((-1.0)*x9395*x9398))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9400=(cj2*sj1);
IkReal x9401=(cj1*sj2);
IkReal x9402=(gconst2*r00);
IkReal x9403=((1.0)*gconst1*r01);
CheckValue<IkReal> x9404 = IKatan2WithCheck(IkReal((((x9401*x9402))+((x9400*x9402))+(((-1.0)*x9401*x9403))+(((-1.0)*x9400*x9403)))),IkReal((((r02*x9401))+((r02*x9400)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9404.valid){
continue;
}
CheckValue<IkReal> x9405=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9405.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9404.value)+(((1.5707963267949)*(x9405.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9406=IKsin(j4);
IkReal x9407=IKcos(j4);
IkReal x9408=(gconst1*r11);
IkReal x9409=(gconst1*r21);
IkReal x9410=(gconst1*r01);
IkReal x9411=((1.0)*x9407);
IkReal x9412=(gconst2*x9407);
IkReal x9413=((1.0)*x9406);
evalcond[0]=((((-1.0)*gconst2*r20*x9413))+((x9406*x9409))+(((-1.0)*r22*x9411)));
evalcond[1]=((((-1.0)*r12*x9411))+((x9406*x9408))+(((-1.0)*gconst2*r10*x9413)));
evalcond[2]=((((-1.0)*r02*x9413))+((r00*x9412))+(((-1.0)*x9410*x9411)));
evalcond[3]=((-1.0)+((x9406*x9410))+(((-1.0)*r02*x9411))+(((-1.0)*gconst2*r00*x9413)));
evalcond[4]=(((r20*x9412))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x9413))+(((-1.0)*x9409*x9411)));
evalcond[5]=((((-1.0)*r12*x9413))+(((-1.0)*x9408*x9411))+((r10*x9412))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9414=(gconst2*r00);
IkReal x9415=(gconst1*r01);
CheckValue<IkReal> x9416=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((2.0)*x9414*x9415))+(((-1.0)*(x9415*x9415)))+(((-1.0)*(x9414*x9414))))),-1);
if(!x9416.valid){
continue;
}
CheckValue<IkReal> x9417 = IKatan2WithCheck(IkReal((x9414+(((-1.0)*x9415)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9417.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9416.value)))+(x9417.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9418=IKsin(j4);
IkReal x9419=IKcos(j4);
IkReal x9420=(gconst1*r11);
IkReal x9421=(gconst1*r21);
IkReal x9422=(gconst1*r01);
IkReal x9423=((1.0)*x9419);
IkReal x9424=(gconst2*x9419);
IkReal x9425=((1.0)*x9418);
evalcond[0]=(((x9418*x9421))+(((-1.0)*gconst2*r20*x9425))+(((-1.0)*r22*x9423)));
evalcond[1]=((((-1.0)*gconst2*r10*x9425))+((x9418*x9420))+(((-1.0)*r12*x9423)));
evalcond[2]=(((r00*x9424))+(((-1.0)*x9422*x9423))+(((-1.0)*r02*x9425)));
evalcond[3]=((-1.0)+((x9418*x9422))+(((-1.0)*r02*x9423))+(((-1.0)*gconst2*r00*x9425)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x9421*x9423))+((r20*x9424))+(((-1.0)*r22*x9425)));
evalcond[5]=((((-1.0)*x9420*x9423))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x9425))+((r10*x9424)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9426=((1.0)*gconst2);
CheckValue<IkReal> x9427=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9426)))),-1);
if(!x9427.valid){
continue;
}
CheckValue<IkReal> x9428 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9426))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9428.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9427.value)))+(x9428.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9429=IKsin(j4);
IkReal x9430=IKcos(j4);
IkReal x9431=(gconst1*r11);
IkReal x9432=(gconst1*r21);
IkReal x9433=(gconst1*r01);
IkReal x9434=((1.0)*x9430);
IkReal x9435=(gconst2*x9430);
IkReal x9436=((1.0)*x9429);
evalcond[0]=(((x9429*x9432))+(((-1.0)*gconst2*r20*x9436))+(((-1.0)*r22*x9434)));
evalcond[1]=(((x9429*x9431))+(((-1.0)*gconst2*r10*x9436))+(((-1.0)*r12*x9434)));
evalcond[2]=((((-1.0)*x9433*x9434))+(((-1.0)*r02*x9436))+((r00*x9435)));
evalcond[3]=((-1.0)+((x9429*x9433))+(((-1.0)*gconst2*r00*x9436))+(((-1.0)*r02*x9434)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r20*x9435))+(((-1.0)*x9432*x9434))+(((-1.0)*r22*x9436)));
evalcond[5]=((((-1.0)*x9431*x9434))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x9436))+((r10*x9435)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9437=((-1.0)*r20);
IkReal x9438=x8924;
CheckValue<IkReal> x9440 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9437),IKFAST_ATAN2_MAGTHRESH);
if(!x9440.valid){
continue;
}
IkReal x9439=((-1.0)*(x9440.value));
sj5=gconst1;
cj5=gconst2;
j5=x9439;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9439;
IkReal gconst1=(r21*x9438);
IkReal gconst2=(x9437*x9438);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9441=((-1.0)*r20);
IkReal x9442=x8924;
CheckValue<IkReal> x9444 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9441),IKFAST_ATAN2_MAGTHRESH);
if(!x9444.valid){
continue;
}
IkReal x9443=((-1.0)*(x9444.value));
sj5=gconst1;
cj5=gconst2;
j5=x9443;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9443;
IkReal gconst1=(r21*x9442);
IkReal gconst2=(x9441*x9442);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9445=((-1.0)*r20);
IkReal x9446=x8924;
CheckValue<IkReal> x9448 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9445),IKFAST_ATAN2_MAGTHRESH);
if(!x9448.valid){
continue;
}
IkReal x9447=((-1.0)*(x9448.value));
sj5=gconst1;
cj5=gconst2;
j5=x9447;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9447;
IkReal gconst1=(r21*x9446);
IkReal gconst2=(x9445*x9446);
IkReal x9449=r22*r22;
IkReal x9450=(cj1*r02*sj2);
IkReal x9451=(cj2*r02*sj1);
CheckValue<IkReal> x9455=IKPowWithIntegerCheck(((-1.0)+x9449),-1);
if(!x9455.valid){
continue;
}
IkReal x9452=x9455.value;
if((((1.0)+(((-1.0)*x9449)))) < -0.00001)
continue;
IkReal x9453=IKsqrt(((1.0)+(((-1.0)*x9449))));
IkReal x9454=((1.0)*r22*x9452*x9453);
j4eval[0]=((IKabs(((((-1.0)*x9450*x9454))+(((-1.0)*x9451*x9454)))))+(IKabs((x9450+x9451))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9456=(cj2*sj1);
IkReal x9457=(cj1*sj2);
IkReal x9458=(gconst2*r00);
IkReal x9459=((1.0)*gconst1*r01);
CheckValue<IkReal> x9460 = IKatan2WithCheck(IkReal((((x9457*x9458))+(((-1.0)*x9456*x9459))+(((-1.0)*x9457*x9459))+((x9456*x9458)))),IkReal((((r02*x9456))+((r02*x9457)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9460.valid){
continue;
}
CheckValue<IkReal> x9461=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9461.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9460.value)+(((1.5707963267949)*(x9461.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9462=IKsin(j4);
IkReal x9463=IKcos(j4);
IkReal x9464=(gconst1*r11);
IkReal x9465=(gconst1*r21);
IkReal x9466=(gconst1*r01);
IkReal x9467=((1.0)*x9463);
IkReal x9468=(gconst2*x9463);
IkReal x9469=((1.0)*x9462);
evalcond[0]=((((-1.0)*gconst2*r20*x9469))+(((-1.0)*r22*x9467))+((x9462*x9465)));
evalcond[1]=((((-1.0)*r12*x9467))+((x9462*x9464))+(((-1.0)*gconst2*r10*x9469)));
evalcond[2]=(((r00*x9468))+(((-1.0)*r02*x9469))+(((-1.0)*x9466*x9467)));
evalcond[3]=((1.0)+(((-1.0)*gconst2*r00*x9469))+((x9462*x9466))+(((-1.0)*r02*x9467)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x9469))+((r20*x9468))+(((-1.0)*x9465*x9467)));
evalcond[5]=(((r10*x9468))+(((-1.0)*sj1*sj2))+(((-1.0)*r12*x9469))+((cj1*cj2))+(((-1.0)*x9464*x9467)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9470=(gconst1*r01);
IkReal x9471=(gconst2*r00);
CheckValue<IkReal> x9472=IKPowWithIntegerCheck(IKsign(((x9471*x9471)+(x9470*x9470)+(((-2.0)*x9470*x9471))+(r02*r02))),-1);
if(!x9472.valid){
continue;
}
CheckValue<IkReal> x9473 = IKatan2WithCheck(IkReal(((((-1.0)*x9470))+x9471)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9473.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9472.value)))+(x9473.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9474=IKsin(j4);
IkReal x9475=IKcos(j4);
IkReal x9476=(gconst1*r11);
IkReal x9477=(gconst1*r21);
IkReal x9478=(gconst1*r01);
IkReal x9479=((1.0)*x9475);
IkReal x9480=(gconst2*x9475);
IkReal x9481=((1.0)*x9474);
evalcond[0]=(((x9474*x9477))+(((-1.0)*r22*x9479))+(((-1.0)*gconst2*r20*x9481)));
evalcond[1]=(((x9474*x9476))+(((-1.0)*r12*x9479))+(((-1.0)*gconst2*r10*x9481)));
evalcond[2]=((((-1.0)*x9478*x9479))+((r00*x9480))+(((-1.0)*r02*x9481)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9479))+((x9474*x9478))+(((-1.0)*gconst2*r00*x9481)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x9477*x9479))+((cj1*sj2))+((r20*x9480))+(((-1.0)*r22*x9481)));
evalcond[5]=((((-1.0)*x9476*x9479))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r10*x9480))+(((-1.0)*r12*x9481)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9482 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9482.valid){
continue;
}
CheckValue<IkReal> x9483=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9483.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9482.value)+(((1.5707963267949)*(x9483.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9484=IKsin(j4);
IkReal x9485=IKcos(j4);
IkReal x9486=(gconst1*r11);
IkReal x9487=(gconst1*r21);
IkReal x9488=(gconst1*r01);
IkReal x9489=((1.0)*x9485);
IkReal x9490=(gconst2*x9485);
IkReal x9491=((1.0)*x9484);
evalcond[0]=((((-1.0)*gconst2*r20*x9491))+(((-1.0)*r22*x9489))+((x9484*x9487)));
evalcond[1]=((((-1.0)*gconst2*r10*x9491))+((x9484*x9486))+(((-1.0)*r12*x9489)));
evalcond[2]=((((-1.0)*r02*x9491))+((r00*x9490))+(((-1.0)*x9488*x9489)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9489))+(((-1.0)*gconst2*r00*x9491))+((x9484*x9488)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x9491))+(((-1.0)*x9487*x9489))+((cj1*sj2))+((r20*x9490)));
evalcond[5]=(((r10*x9490))+(((-1.0)*sj1*sj2))+(((-1.0)*x9486*x9489))+(((-1.0)*r12*x9491))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9492=((-1.0)*r20);
IkReal x9493=((-1.0)*px);
CheckValue<IkReal> x9495 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9492),IKFAST_ATAN2_MAGTHRESH);
if(!x9495.valid){
continue;
}
IkReal x9494=((-1.0)*(x9495.value));
sj5=gconst1;
cj5=gconst2;
j5=x9494;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9493);
rxp1_1=(px*r21);
rxp1_2=(r11*x9493);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9494;
IkReal gconst1=r21;
IkReal gconst2=x9492;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9496=((-1.0)*r20);
IkReal x9497=((-1.0)*px);
CheckValue<IkReal> x9499 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9496),IKFAST_ATAN2_MAGTHRESH);
if(!x9499.valid){
continue;
}
IkReal x9498=((-1.0)*(x9499.value));
sj5=gconst1;
cj5=gconst2;
j5=x9498;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9497);
rxp1_1=(px*r21);
rxp1_2=(r11*x9497);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9498;
IkReal gconst1=r21;
IkReal gconst2=x9496;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r10*r10));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9500=((-1.0)*r20);
IkReal x9501=((-1.0)*px);
CheckValue<IkReal> x9503 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9500),IKFAST_ATAN2_MAGTHRESH);
if(!x9503.valid){
continue;
}
IkReal x9502=((-1.0)*(x9503.value));
sj5=gconst1;
cj5=gconst2;
j5=x9502;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9501);
rxp1_1=(px*r21);
rxp1_2=(r11*x9501);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9502;
IkReal gconst1=r21;
IkReal gconst2=x9500;
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9506=IKPowWithIntegerCheck(((((-1.0)*gconst1*r11))+((gconst2*r10))),-1);
if(!x9506.valid){
continue;
}
IkReal x9504=x9506.value;
IkReal x9505=(sj0*x9504);
cj4array[0]=((((-1.0)*sj1*sj2*x9505))+((cj1*cj2*x9505)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9507=IKsin(j4);
IkReal x9508=IKcos(j4);
IkReal x9509=(gconst1*x9507);
IkReal x9510=((1.0)*x9508);
IkReal x9511=((1.0)*gconst2*x9507);
evalcond[0]=((-1.0)*r02*x9507);
evalcond[1]=((((-1.0)*r02*x9510))+(((-1.0)*sj0)));
evalcond[2]=((((-1.0)*r20*x9511))+((r21*x9509)));
evalcond[3]=(((r11*x9509))+(((-1.0)*r10*x9511)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst1*r21*x9510))+((gconst2*r20*x9508)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9514=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x9514.valid){
continue;
}
IkReal x9512=x9514.value;
IkReal x9513=((1.0)*x9512);
cj4array[0]=((((-1.0)*cj2*sj1*x9513))+(((-1.0)*cj1*sj2*x9513)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9515=IKsin(j4);
IkReal x9516=IKcos(j4);
IkReal x9517=(gconst2*r10);
IkReal x9518=((1.0)*sj0);
IkReal x9519=(gconst1*r11);
IkReal x9520=((1.0)*x9515);
IkReal x9521=((1.0)*x9516);
evalcond[0]=((-1.0)*r02*x9515);
evalcond[1]=((((-1.0)*r02*x9521))+(((-1.0)*x9518)));
evalcond[2]=(((gconst1*r21*x9515))+(((-1.0)*gconst2*r20*x9520)));
evalcond[3]=(((x9515*x9519))+(((-1.0)*x9517*x9520)));
evalcond[4]=((((-1.0)*cj1*cj2*x9518))+((x9516*x9517))+(((-1.0)*x9519*x9521))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9522=IKPowWithIntegerCheck(r02,-1);
if(!x9522.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9522.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9523=IKsin(j4);
IkReal x9524=IKcos(j4);
IkReal x9525=(gconst2*r10);
IkReal x9526=(gconst1*r11);
IkReal x9527=(gconst1*r21);
IkReal x9528=(gconst2*r20);
IkReal x9529=((1.0)*x9523);
IkReal x9530=((1.0)*x9524);
evalcond[0]=((-1.0)*r02*x9523);
evalcond[1]=(((x9523*x9527))+(((-1.0)*x9528*x9529)));
evalcond[2]=((((-1.0)*x9525*x9529))+((x9523*x9526)));
evalcond[3]=(((x9524*x9528))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x9527*x9530)));
evalcond[4]=(((x9524*x9525))+(((-1.0)*cj1*cj2*sj0))+(((-1.0)*x9526*x9530))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9531=(cj2*sj1);
IkReal x9532=(cj1*sj2);
IkReal x9533=(gconst1*r21);
IkReal x9534=((1.0)*gconst2*r20);
CheckValue<IkReal> x9535=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x9533*x9533)+(((gconst2*gconst2)*(r20*r20)))+(((-2.0)*gconst2*r20*x9533)))),-1);
if(!x9535.valid){
continue;
}
CheckValue<IkReal> x9536 = IKatan2WithCheck(IkReal((((r22*x9532))+((r22*x9531)))),IkReal(((((-1.0)*x9532*x9534))+(((-1.0)*x9531*x9534))+((x9532*x9533))+((x9531*x9533)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9536.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9535.value)))+(x9536.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9537=IKsin(j4);
IkReal x9538=IKcos(j4);
IkReal x9539=(gconst1*r11);
IkReal x9540=(sj1*sj2);
IkReal x9541=(gconst1*r21);
IkReal x9542=(gconst1*r01);
IkReal x9543=((1.0)*x9538);
IkReal x9544=(gconst2*x9538);
IkReal x9545=((1.0)*cj1*cj2);
IkReal x9546=((1.0)*x9537);
evalcond[0]=(((x9537*x9541))+(((-1.0)*r22*x9543))+(((-1.0)*gconst2*r20*x9546)));
evalcond[1]=((((-1.0)*r12*x9543))+((x9537*x9539))+cj0+(((-1.0)*gconst2*r10*x9546)));
evalcond[2]=(((x9537*x9542))+(((-1.0)*sj0))+(((-1.0)*r02*x9543))+(((-1.0)*gconst2*r00*x9546)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x9541*x9543))+((cj1*sj2))+(((-1.0)*r22*x9546))+((r20*x9544)));
evalcond[4]=((((-1.0)*cj0*x9545))+(((-1.0)*x9542*x9543))+(((-1.0)*r02*x9546))+((cj0*x9540))+((r00*x9544)));
evalcond[5]=((((-1.0)*r12*x9546))+(((-1.0)*sj0*x9545))+(((-1.0)*x9539*x9543))+((r10*x9544))+((sj0*x9540)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9547=((1.0)*gconst2);
CheckValue<IkReal> x9548 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x9547))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9548.valid){
continue;
}
CheckValue<IkReal> x9549=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9547)))),-1);
if(!x9549.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9548.value)+(((1.5707963267949)*(x9549.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9550=IKsin(j4);
IkReal x9551=IKcos(j4);
IkReal x9552=(gconst1*r11);
IkReal x9553=(sj1*sj2);
IkReal x9554=(gconst1*r21);
IkReal x9555=(gconst1*r01);
IkReal x9556=((1.0)*x9551);
IkReal x9557=(gconst2*x9551);
IkReal x9558=((1.0)*cj1*cj2);
IkReal x9559=((1.0)*x9550);
evalcond[0]=((((-1.0)*r22*x9556))+((x9550*x9554))+(((-1.0)*gconst2*r20*x9559)));
evalcond[1]=(cj0+(((-1.0)*gconst2*r10*x9559))+((x9550*x9552))+(((-1.0)*r12*x9556)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x9556))+(((-1.0)*gconst2*r00*x9559))+((x9550*x9555)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x9554*x9556))+(((-1.0)*r22*x9559))+((cj1*sj2))+((r20*x9557)));
evalcond[4]=((((-1.0)*x9555*x9556))+(((-1.0)*cj0*x9558))+(((-1.0)*r02*x9559))+((r00*x9557))+((cj0*x9553)));
evalcond[5]=(((sj0*x9553))+(((-1.0)*sj0*x9558))+((r10*x9557))+(((-1.0)*r12*x9559))+(((-1.0)*x9552*x9556)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9560=((1.0)*gconst2);
CheckValue<IkReal> x9561=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9560)))),-1);
if(!x9561.valid){
continue;
}
CheckValue<IkReal> x9562 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*r20*x9560)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9562.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9561.value)))+(x9562.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9563=IKsin(j4);
IkReal x9564=IKcos(j4);
IkReal x9565=(gconst1*r11);
IkReal x9566=(sj1*sj2);
IkReal x9567=(gconst1*r21);
IkReal x9568=(gconst1*r01);
IkReal x9569=((1.0)*x9564);
IkReal x9570=(gconst2*x9564);
IkReal x9571=((1.0)*cj1*cj2);
IkReal x9572=((1.0)*x9563);
evalcond[0]=((((-1.0)*gconst2*r20*x9572))+((x9563*x9567))+(((-1.0)*r22*x9569)));
evalcond[1]=(cj0+((x9563*x9565))+(((-1.0)*gconst2*r10*x9572))+(((-1.0)*r12*x9569)));
evalcond[2]=((((-1.0)*sj0))+((x9563*x9568))+(((-1.0)*gconst2*r00*x9572))+(((-1.0)*r02*x9569)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x9567*x9569))+(((-1.0)*r22*x9572))+((r20*x9570)));
evalcond[4]=((((-1.0)*cj0*x9571))+((cj0*x9566))+(((-1.0)*r02*x9572))+((r00*x9570))+(((-1.0)*x9568*x9569)));
evalcond[5]=((((-1.0)*sj0*x9571))+((sj0*x9566))+(((-1.0)*r12*x9572))+(((-1.0)*x9565*x9569))+((r10*x9570)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9573=((-1.0)*r20);
IkReal x9574=x8924;
CheckValue<IkReal> x9576 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9573),IKFAST_ATAN2_MAGTHRESH);
if(!x9576.valid){
continue;
}
IkReal x9575=((-1.0)*(x9576.value));
sj5=gconst1;
cj5=gconst2;
j5=x9575;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9575;
IkReal gconst1=(r21*x9574);
IkReal gconst2=(x9573*x9574);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9577=((-1.0)*r20);
IkReal x9578=x8924;
CheckValue<IkReal> x9580 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9577),IKFAST_ATAN2_MAGTHRESH);
if(!x9580.valid){
continue;
}
IkReal x9579=((-1.0)*(x9580.value));
sj5=gconst1;
cj5=gconst2;
j5=x9579;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9579;
IkReal gconst1=(r21*x9578);
IkReal gconst2=(x9577*x9578);
CheckValue<IkReal> x9588=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9588.valid){
continue;
}
IkReal x9581=x9588.value;
IkReal x9582=(sj3*x9581);
IkReal x9583=(r11*x9582);
IkReal x9584=(r00*x9582);
IkReal x9585=(r01*x9582);
IkReal x9586=(r10*x9582);
IkReal x9587=(r20*r21*x9582);
j4eval[0]=IKsign((((r00*r20*r21*x9583))+((r02*r12*sj3))+((r01*x9583*(r21*r21)))+((r10*x9584*(r20*r20)))+((r10*r20*r21*x9585))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9589=gconst2*gconst2;
IkReal x9590=gconst1*gconst1;
IkReal x9591=((1.0)*cj3);
IkReal x9592=((1.0)*sj3);
IkReal x9593=(r11*sj3);
IkReal x9594=(r10*sj3);
IkReal x9595=(gconst1*gconst2*r00);
IkReal x9596=(gconst1*gconst2*r01);
IkReal x9597=(r00*x9589);
IkReal x9598=(r01*x9590);
CheckValue<IkReal> x9599 = IKatan2WithCheck(IkReal((((gconst2*r02*x9593))+((gconst1*r02*x9594)))),IkReal((((x9594*x9598))+((x9593*x9596))+(((-1.0)*r10*x9592*x9595))+(((-1.0)*r11*x9592*x9597)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9599.valid){
continue;
}
CheckValue<IkReal> x9600=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x9591*x9598))+((cj3*r11*x9595))+((cj3*r10*x9596))+(((-1.0)*r10*x9591*x9597))+(((-1.0)*r02*r12*x9591)))),-1);
if(!x9600.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9599.value)+(((1.5707963267949)*(x9600.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9601=IKsin(j4);
IkReal x9602=IKcos(j4);
IkReal x9603=(sj1*sj2);
IkReal x9604=(gconst1*sj3);
IkReal x9605=(cj3*gconst1);
IkReal x9606=(cj3*gconst2);
IkReal x9607=((1.0)*cj2);
IkReal x9608=(cj1*sj2);
IkReal x9609=(gconst2*sj3);
IkReal x9610=(cj1*x9607);
IkReal x9611=((1.0)*x9602);
IkReal x9612=((1.0)*x9601);
IkReal x9613=(gconst1*x9601);
IkReal x9614=(cj3*x9601);
IkReal x9615=(x9602*x9609);
evalcond[0]=((((-1.0)*r22*x9611))+(((-1.0)*gconst2*r20*x9612))+((r21*x9613)));
evalcond[1]=(((r01*x9613))+(((-1.0)*r02*x9611))+(((-1.0)*gconst2*r00*x9612)));
evalcond[2]=((1.0)+(((-1.0)*gconst2*r10*x9612))+(((-1.0)*r12*x9611))+((r11*x9613)));
evalcond[3]=((((-1.0)*r10*x9606*x9611))+((r11*x9602*x9605))+((r10*x9604))+((r11*x9609))+((r12*x9614)));
evalcond[4]=((((-1.0)*r11*x9604*x9611))+((r10*x9615))+((r10*x9605))+((r11*x9606))+(((-1.0)*r12*sj3*x9612)));
evalcond[5]=(((r21*x9602*x9605))+((cj2*sj1))+((r21*x9609))+(((-1.0)*r20*x9606*x9611))+((r22*x9614))+((r20*x9604))+x9608);
evalcond[6]=(((r01*x9602*x9605))+((r00*x9604))+((r01*x9609))+((r02*x9614))+(((-1.0)*r00*x9606*x9611))+x9603+(((-1.0)*x9610)));
evalcond[7]=(((r20*x9615))+((r21*x9606))+(((-1.0)*r21*x9604*x9611))+((r20*x9605))+(((-1.0)*r22*sj3*x9612))+x9603+(((-1.0)*x9610)));
evalcond[8]=((((-1.0)*sj1*x9607))+((r00*x9615))+((r00*x9605))+((r01*x9606))+(((-1.0)*x9608))+(((-1.0)*r02*sj3*x9612))+(((-1.0)*r01*x9604*x9611)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9616=gconst2*gconst2;
IkReal x9617=gconst1*gconst1;
IkReal x9618=(gconst2*r11);
IkReal x9619=(cj3*r02);
IkReal x9620=(gconst1*r01);
IkReal x9621=(cj3*r10);
IkReal x9622=(r10*sj3);
IkReal x9623=((1.0)*gconst1*r00);
IkReal x9624=(r01*x9617);
IkReal x9625=(r00*x9616);
CheckValue<IkReal> x9626 = IKatan2WithCheck(IkReal((((gconst1*r10*x9619))+((x9618*x9619)))),IkReal(((((-1.0)*gconst2*x9621*x9623))+((cj3*x9618*x9620))+((x9621*x9624))+(((-1.0)*cj3*r11*x9625)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9626.valid){
continue;
}
CheckValue<IkReal> x9627=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+((x9622*x9625))+(((-1.0)*sj3*x9618*x9623))+((r11*sj3*x9624))+(((-1.0)*gconst2*x9620*x9622)))),-1);
if(!x9627.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9626.value)+(((1.5707963267949)*(x9627.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9628=IKsin(j4);
IkReal x9629=IKcos(j4);
IkReal x9630=(sj1*sj2);
IkReal x9631=(gconst1*sj3);
IkReal x9632=(cj3*gconst1);
IkReal x9633=(cj3*gconst2);
IkReal x9634=((1.0)*cj2);
IkReal x9635=(cj1*sj2);
IkReal x9636=(gconst2*sj3);
IkReal x9637=(cj1*x9634);
IkReal x9638=((1.0)*x9629);
IkReal x9639=((1.0)*x9628);
IkReal x9640=(gconst1*x9628);
IkReal x9641=(cj3*x9628);
IkReal x9642=(x9629*x9636);
evalcond[0]=((((-1.0)*r22*x9638))+(((-1.0)*gconst2*r20*x9639))+((r21*x9640)));
evalcond[1]=((((-1.0)*gconst2*r00*x9639))+(((-1.0)*r02*x9638))+((r01*x9640)));
evalcond[2]=((1.0)+(((-1.0)*gconst2*r10*x9639))+((r11*x9640))+(((-1.0)*r12*x9638)));
evalcond[3]=(((r10*x9631))+((r11*x9629*x9632))+((r11*x9636))+(((-1.0)*r10*x9633*x9638))+((r12*x9641)));
evalcond[4]=(((r10*x9632))+(((-1.0)*r12*sj3*x9639))+(((-1.0)*r11*x9631*x9638))+((r10*x9642))+((r11*x9633)));
evalcond[5]=(((r22*x9641))+((cj2*sj1))+((r20*x9631))+((r21*x9636))+((r21*x9629*x9632))+x9635+(((-1.0)*r20*x9633*x9638)));
evalcond[6]=(((r00*x9631))+((r01*x9636))+((r02*x9641))+(((-1.0)*r00*x9633*x9638))+((r01*x9629*x9632))+x9630+(((-1.0)*x9637)));
evalcond[7]=(((r20*x9632))+(((-1.0)*r21*x9631*x9638))+((r21*x9633))+(((-1.0)*r22*sj3*x9639))+x9630+((r20*x9642))+(((-1.0)*x9637)));
evalcond[8]=(((r00*x9632))+((r01*x9633))+(((-1.0)*x9635))+(((-1.0)*r02*sj3*x9639))+((r00*x9642))+(((-1.0)*r01*x9631*x9638))+(((-1.0)*sj1*x9634)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9643=((1.0)*gconst2);
CheckValue<IkReal> x9644 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9643))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9644.valid){
continue;
}
CheckValue<IkReal> x9645=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9643)))),-1);
if(!x9645.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9644.value)+(((1.5707963267949)*(x9645.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9646=IKsin(j4);
IkReal x9647=IKcos(j4);
IkReal x9648=(sj1*sj2);
IkReal x9649=(gconst1*sj3);
IkReal x9650=(cj3*gconst1);
IkReal x9651=(cj3*gconst2);
IkReal x9652=((1.0)*cj2);
IkReal x9653=(cj1*sj2);
IkReal x9654=(gconst2*sj3);
IkReal x9655=(cj1*x9652);
IkReal x9656=((1.0)*x9647);
IkReal x9657=((1.0)*x9646);
IkReal x9658=(gconst1*x9646);
IkReal x9659=(cj3*x9646);
IkReal x9660=(x9647*x9654);
evalcond[0]=((((-1.0)*gconst2*r20*x9657))+((r21*x9658))+(((-1.0)*r22*x9656)));
evalcond[1]=(((r01*x9658))+(((-1.0)*gconst2*r00*x9657))+(((-1.0)*r02*x9656)));
evalcond[2]=((1.0)+((r11*x9658))+(((-1.0)*r12*x9656))+(((-1.0)*gconst2*r10*x9657)));
evalcond[3]=(((r11*x9647*x9650))+((r11*x9654))+((r12*x9659))+(((-1.0)*r10*x9651*x9656))+((r10*x9649)));
evalcond[4]=((((-1.0)*r11*x9649*x9656))+((r11*x9651))+((r10*x9660))+((r10*x9650))+(((-1.0)*r12*sj3*x9657)));
evalcond[5]=(((cj2*sj1))+((r21*x9654))+x9653+((r20*x9649))+((r22*x9659))+((r21*x9647*x9650))+(((-1.0)*r20*x9651*x9656)));
evalcond[6]=(((r01*x9647*x9650))+((r01*x9654))+((r00*x9649))+x9648+((r02*x9659))+(((-1.0)*r00*x9651*x9656))+(((-1.0)*x9655)));
evalcond[7]=(((r21*x9651))+((r20*x9650))+((r20*x9660))+x9648+(((-1.0)*r21*x9649*x9656))+(((-1.0)*r22*sj3*x9657))+(((-1.0)*x9655)));
evalcond[8]=((((-1.0)*r01*x9649*x9656))+(((-1.0)*r02*sj3*x9657))+((r00*x9660))+((r01*x9651))+((r00*x9650))+(((-1.0)*x9653))+(((-1.0)*sj1*x9652)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9661=((-1.0)*r20);
IkReal x9662=x8924;
CheckValue<IkReal> x9664 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9661),IKFAST_ATAN2_MAGTHRESH);
if(!x9664.valid){
continue;
}
IkReal x9663=((-1.0)*(x9664.value));
sj5=gconst1;
cj5=gconst2;
j5=x9663;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9663;
IkReal gconst1=(r21*x9662);
IkReal gconst2=(x9661*x9662);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9665=((-1.0)*r20);
IkReal x9666=x8924;
CheckValue<IkReal> x9668 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9665),IKFAST_ATAN2_MAGTHRESH);
if(!x9668.valid){
continue;
}
IkReal x9667=((-1.0)*(x9668.value));
sj5=gconst1;
cj5=gconst2;
j5=x9667;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9667;
IkReal gconst1=(r21*x9666);
IkReal gconst2=(x9665*x9666);
CheckValue<IkReal> x9676=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9676.valid){
continue;
}
IkReal x9669=x9676.value;
IkReal x9670=(sj3*x9669);
IkReal x9671=(r11*x9670);
IkReal x9672=(r00*x9670);
IkReal x9673=(r01*x9670);
IkReal x9674=(r10*x9670);
IkReal x9675=(r20*r21*x9670);
j4eval[0]=IKsign((((r02*r12*sj3))+((r01*x9671*(r21*r21)))+((r10*r20*r21*x9673))+((r00*r20*r21*x9671))+((r10*x9672*(r20*r20)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9677=gconst2*gconst2;
IkReal x9678=gconst1*gconst1;
IkReal x9679=((1.0)*cj3);
IkReal x9680=((1.0)*sj3);
IkReal x9681=(r11*sj3);
IkReal x9682=(r10*sj3);
IkReal x9683=(gconst1*gconst2*r00);
IkReal x9684=(gconst1*gconst2*r01);
IkReal x9685=(r00*x9677);
IkReal x9686=(r01*x9678);
CheckValue<IkReal> x9687=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r12*x9679))+(((-1.0)*r10*x9679*x9685))+((cj3*r11*x9683))+((cj3*r10*x9684))+(((-1.0)*r11*x9679*x9686)))),-1);
if(!x9687.valid){
continue;
}
CheckValue<IkReal> x9688 = IKatan2WithCheck(IkReal((((gconst1*r02*x9682))+((gconst2*r02*x9681)))),IkReal((((x9682*x9686))+(((-1.0)*r10*x9680*x9683))+(((-1.0)*r11*x9680*x9685))+((x9681*x9684)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9688.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9687.value)))+(x9688.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9689=IKsin(j4);
IkReal x9690=IKcos(j4);
IkReal x9691=(cj2*sj1);
IkReal x9692=(cj1*sj2);
IkReal x9693=(gconst1*sj3);
IkReal x9694=(cj3*gconst1);
IkReal x9695=(sj1*sj2);
IkReal x9696=(cj3*gconst2);
IkReal x9697=(cj1*cj2);
IkReal x9698=(gconst2*sj3);
IkReal x9699=((1.0)*x9690);
IkReal x9700=((1.0)*x9689);
IkReal x9701=(gconst1*x9689);
IkReal x9702=(cj3*x9689);
IkReal x9703=(x9692+x9691);
IkReal x9704=(x9690*x9698);
evalcond[0]=(((r21*x9701))+(((-1.0)*r22*x9699))+(((-1.0)*gconst2*r20*x9700)));
evalcond[1]=((((-1.0)*r02*x9699))+((r01*x9701))+(((-1.0)*gconst2*r00*x9700)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r10*x9700))+(((-1.0)*r12*x9699))+((r11*x9701)));
evalcond[3]=(((r12*x9702))+(((-1.0)*r10*x9696*x9699))+((r11*x9698))+((r11*x9690*x9694))+((r10*x9693)));
evalcond[4]=(((r10*x9704))+(((-1.0)*r12*sj3*x9700))+((r11*x9696))+(((-1.0)*r11*x9693*x9699))+((r10*x9694)));
evalcond[5]=(((r21*x9690*x9694))+x9703+((r21*x9698))+(((-1.0)*r20*x9696*x9699))+((r20*x9693))+((r22*x9702)));
evalcond[6]=((((-1.0)*x9695))+((r02*x9702))+((r01*x9690*x9694))+x9697+((r00*x9693))+((r01*x9698))+(((-1.0)*r00*x9696*x9699)));
evalcond[7]=((((-1.0)*r01*x9693*x9699))+((r00*x9704))+x9703+(((-1.0)*r02*sj3*x9700))+((r00*x9694))+((r01*x9696)));
evalcond[8]=((((-1.0)*x9697))+((r20*x9704))+(((-1.0)*r21*x9693*x9699))+((r21*x9696))+(((-1.0)*r22*sj3*x9700))+x9695+((r20*x9694)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9705=gconst2*gconst2;
IkReal x9706=gconst1*gconst1;
IkReal x9707=(gconst2*r11);
IkReal x9708=(cj3*r02);
IkReal x9709=(gconst1*r01);
IkReal x9710=(cj3*r10);
IkReal x9711=(r10*sj3);
IkReal x9712=((1.0)*gconst1*r00);
IkReal x9713=(r01*x9706);
IkReal x9714=(r00*x9705);
CheckValue<IkReal> x9715=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+((x9711*x9714))+(((-1.0)*gconst2*x9709*x9711))+((r11*sj3*x9713))+(((-1.0)*sj3*x9707*x9712)))),-1);
if(!x9715.valid){
continue;
}
CheckValue<IkReal> x9716 = IKatan2WithCheck(IkReal((((gconst1*r10*x9708))+((x9707*x9708)))),IkReal((((cj3*x9707*x9709))+(((-1.0)*gconst2*x9710*x9712))+((x9710*x9713))+(((-1.0)*cj3*r11*x9714)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9716.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9715.value)))+(x9716.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9717=IKsin(j4);
IkReal x9718=IKcos(j4);
IkReal x9719=(cj2*sj1);
IkReal x9720=(cj1*sj2);
IkReal x9721=(gconst1*sj3);
IkReal x9722=(cj3*gconst1);
IkReal x9723=(sj1*sj2);
IkReal x9724=(cj3*gconst2);
IkReal x9725=(cj1*cj2);
IkReal x9726=(gconst2*sj3);
IkReal x9727=((1.0)*x9718);
IkReal x9728=((1.0)*x9717);
IkReal x9729=(gconst1*x9717);
IkReal x9730=(cj3*x9717);
IkReal x9731=(x9719+x9720);
IkReal x9732=(x9718*x9726);
evalcond[0]=((((-1.0)*gconst2*r20*x9728))+(((-1.0)*r22*x9727))+((r21*x9729)));
evalcond[1]=(((r01*x9729))+(((-1.0)*r02*x9727))+(((-1.0)*gconst2*r00*x9728)));
evalcond[2]=((-1.0)+((r11*x9729))+(((-1.0)*r12*x9727))+(((-1.0)*gconst2*r10*x9728)));
evalcond[3]=(((r11*x9726))+((r12*x9730))+((r11*x9718*x9722))+(((-1.0)*r10*x9724*x9727))+((r10*x9721)));
evalcond[4]=(((r11*x9724))+(((-1.0)*r12*sj3*x9728))+(((-1.0)*r11*x9721*x9727))+((r10*x9722))+((r10*x9732)));
evalcond[5]=(x9731+((r20*x9721))+((r21*x9718*x9722))+(((-1.0)*r20*x9724*x9727))+((r21*x9726))+((r22*x9730)));
evalcond[6]=(((r01*x9726))+((r02*x9730))+((r01*x9718*x9722))+x9725+(((-1.0)*r00*x9724*x9727))+(((-1.0)*x9723))+((r00*x9721)));
evalcond[7]=(((r01*x9724))+(((-1.0)*r02*sj3*x9728))+x9731+(((-1.0)*r01*x9721*x9727))+((r00*x9722))+((r00*x9732)));
evalcond[8]=(((r20*x9732))+x9723+((r20*x9722))+(((-1.0)*r22*sj3*x9728))+(((-1.0)*r21*x9721*x9727))+((r21*x9724))+(((-1.0)*x9725)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9733 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9733.valid){
continue;
}
CheckValue<IkReal> x9734=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9734.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9733.value)+(((1.5707963267949)*(x9734.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9735=IKsin(j4);
IkReal x9736=IKcos(j4);
IkReal x9737=(cj2*sj1);
IkReal x9738=(cj1*sj2);
IkReal x9739=(gconst1*sj3);
IkReal x9740=(cj3*gconst1);
IkReal x9741=(sj1*sj2);
IkReal x9742=(cj3*gconst2);
IkReal x9743=(cj1*cj2);
IkReal x9744=(gconst2*sj3);
IkReal x9745=((1.0)*x9736);
IkReal x9746=((1.0)*x9735);
IkReal x9747=(gconst1*x9735);
IkReal x9748=(cj3*x9735);
IkReal x9749=(x9737+x9738);
IkReal x9750=(x9736*x9744);
evalcond[0]=(((r21*x9747))+(((-1.0)*gconst2*r20*x9746))+(((-1.0)*r22*x9745)));
evalcond[1]=((((-1.0)*gconst2*r00*x9746))+(((-1.0)*r02*x9745))+((r01*x9747)));
evalcond[2]=((-1.0)+((r11*x9747))+(((-1.0)*gconst2*r10*x9746))+(((-1.0)*r12*x9745)));
evalcond[3]=(((r11*x9744))+((r11*x9736*x9740))+(((-1.0)*r10*x9742*x9745))+((r12*x9748))+((r10*x9739)));
evalcond[4]=(((r10*x9750))+((r11*x9742))+((r10*x9740))+(((-1.0)*r12*sj3*x9746))+(((-1.0)*r11*x9739*x9745)));
evalcond[5]=(((r21*x9744))+((r22*x9748))+((r21*x9736*x9740))+(((-1.0)*r20*x9742*x9745))+((r20*x9739))+x9749);
evalcond[6]=(((r01*x9736*x9740))+((r02*x9748))+(((-1.0)*r00*x9742*x9745))+(((-1.0)*x9741))+x9743+((r01*x9744))+((r00*x9739)));
evalcond[7]=(((r00*x9750))+(((-1.0)*r02*sj3*x9746))+x9749+((r01*x9742))+(((-1.0)*r01*x9739*x9745))+((r00*x9740)));
evalcond[8]=((((-1.0)*r21*x9739*x9745))+((r21*x9742))+(((-1.0)*x9743))+x9741+((r20*x9740))+(((-1.0)*r22*sj3*x9746))+((r20*x9750)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9751=((-1.0)*r20);
IkReal x9752=x8924;
CheckValue<IkReal> x9754 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9751),IKFAST_ATAN2_MAGTHRESH);
if(!x9754.valid){
continue;
}
IkReal x9753=((-1.0)*(x9754.value));
sj5=gconst1;
cj5=gconst2;
j5=x9753;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9753;
IkReal gconst1=(r21*x9752);
IkReal gconst2=(x9751*x9752);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9755=((-1.0)*r20);
IkReal x9756=x8924;
CheckValue<IkReal> x9758 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9755),IKFAST_ATAN2_MAGTHRESH);
if(!x9758.valid){
continue;
}
IkReal x9757=((-1.0)*(x9758.value));
sj5=gconst1;
cj5=gconst2;
j5=x9757;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9757;
IkReal gconst1=(r21*x9756);
IkReal gconst2=(x9755*x9756);
CheckValue<IkReal> x9766=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9766.valid){
continue;
}
IkReal x9759=x9766.value;
IkReal x9760=(sj3*x9759);
IkReal x9761=(r11*x9760);
IkReal x9762=(r00*x9760);
IkReal x9763=(r01*x9760);
IkReal x9764=(r10*x9760);
IkReal x9765=(r20*r21*x9760);
j4eval[0]=IKsign((((r02*r12*sj3))+((r00*r20*r21*x9761))+((r10*x9762*(r20*r20)))+((r10*r20*r21*x9763))+((r01*x9761*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9767=gconst1*gconst1;
IkReal x9768=gconst2*gconst2;
IkReal x9769=((1.0)*cj3);
IkReal x9770=(gconst2*r10);
IkReal x9771=(r01*sj3);
IkReal x9772=(gconst1*r00*sj3);
IkReal x9773=(gconst1*gconst2*r11);
IkReal x9774=(r10*x9768);
IkReal x9775=(r11*x9767);
CheckValue<IkReal> x9776=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x9769*x9775))+(((-1.0)*r02*r12*x9769))+(((-1.0)*r00*x9769*x9774))+((cj3*gconst1*r01*x9770))+((cj3*r00*x9773)))),-1);
if(!x9776.valid){
continue;
}
CheckValue<IkReal> x9777 = IKatan2WithCheck(IkReal((((r12*x9772))+((gconst2*r12*x9771)))),IkReal((((r00*sj3*x9775))+(((-1.0)*x9771*x9774))+(((-1.0)*x9770*x9772))+((x9771*x9773)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9777.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9776.value)))+(x9777.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9778=IKsin(j4);
IkReal x9779=IKcos(j4);
IkReal x9780=(sj1*sj2);
IkReal x9781=(gconst1*sj3);
IkReal x9782=(cj3*gconst1);
IkReal x9783=(cj3*gconst2);
IkReal x9784=((1.0)*cj2);
IkReal x9785=(cj1*sj2);
IkReal x9786=(gconst2*sj3);
IkReal x9787=(cj1*x9784);
IkReal x9788=((1.0)*x9779);
IkReal x9789=((1.0)*x9778);
IkReal x9790=(gconst1*x9778);
IkReal x9791=(cj3*x9778);
IkReal x9792=(x9779*x9786);
evalcond[0]=((((-1.0)*gconst2*r20*x9789))+(((-1.0)*r22*x9788))+((r21*x9790)));
evalcond[1]=((((-1.0)*r12*x9788))+((r11*x9790))+(((-1.0)*gconst2*r10*x9789)));
evalcond[2]=((-1.0)+((r01*x9790))+(((-1.0)*gconst2*r00*x9789))+(((-1.0)*r02*x9788)));
evalcond[3]=(((r00*x9781))+(((-1.0)*r00*x9783*x9788))+((r02*x9791))+((r01*x9786))+((r01*x9779*x9782)));
evalcond[4]=(((r00*x9782))+(((-1.0)*r02*sj3*x9789))+((r01*x9783))+(((-1.0)*r01*x9781*x9788))+((r00*x9792)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*r20*x9783*x9788))+((r21*x9786))+x9785+((r20*x9781))+((r22*x9791))+((r21*x9779*x9782)));
evalcond[6]=(((r12*x9791))+x9780+((r11*x9779*x9782))+((r10*x9781))+(((-1.0)*r10*x9783*x9788))+((r11*x9786))+(((-1.0)*x9787)));
evalcond[7]=(((r21*x9783))+((r20*x9792))+(((-1.0)*r22*sj3*x9789))+x9780+((r20*x9782))+(((-1.0)*x9787))+(((-1.0)*r21*x9781*x9788)));
evalcond[8]=(((r10*x9792))+(((-1.0)*sj1*x9784))+(((-1.0)*r12*sj3*x9789))+((r10*x9782))+((r11*x9783))+(((-1.0)*x9785))+(((-1.0)*r11*x9781*x9788)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9793=gconst2*gconst2;
IkReal x9794=gconst1*gconst1;
IkReal x9795=(gconst1*r00);
IkReal x9796=(r11*sj3);
IkReal x9797=((1.0)*gconst2);
IkReal x9798=(cj3*r12);
IkReal x9799=(cj3*r11);
IkReal x9800=(gconst2*r01);
IkReal x9801=(cj3*r10);
IkReal x9802=(r10*sj3);
CheckValue<IkReal> x9803 = IKatan2WithCheck(IkReal((((x9798*x9800))+((x9795*x9798)))),IkReal(((((-1.0)*x9795*x9797*x9801))+((r00*x9794*x9799))+((gconst1*x9799*x9800))+(((-1.0)*r01*x9793*x9801)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9803.valid){
continue;
}
CheckValue<IkReal> x9804=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r01*x9797*x9802))+((r02*r12*sj3))+(((-1.0)*x9795*x9796*x9797))+((r00*x9793*x9802))+((r01*x9794*x9796)))),-1);
if(!x9804.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9803.value)+(((1.5707963267949)*(x9804.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9805=IKsin(j4);
IkReal x9806=IKcos(j4);
IkReal x9807=(sj1*sj2);
IkReal x9808=(gconst1*sj3);
IkReal x9809=(cj3*gconst1);
IkReal x9810=(cj3*gconst2);
IkReal x9811=((1.0)*cj2);
IkReal x9812=(cj1*sj2);
IkReal x9813=(gconst2*sj3);
IkReal x9814=(cj1*x9811);
IkReal x9815=((1.0)*x9806);
IkReal x9816=((1.0)*x9805);
IkReal x9817=(gconst1*x9805);
IkReal x9818=(cj3*x9805);
IkReal x9819=(x9806*x9813);
evalcond[0]=(((r21*x9817))+(((-1.0)*r22*x9815))+(((-1.0)*gconst2*r20*x9816)));
evalcond[1]=((((-1.0)*gconst2*r10*x9816))+((r11*x9817))+(((-1.0)*r12*x9815)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r00*x9816))+(((-1.0)*r02*x9815))+((r01*x9817)));
evalcond[3]=(((r00*x9808))+(((-1.0)*r00*x9810*x9815))+((r01*x9806*x9809))+((r02*x9818))+((r01*x9813)));
evalcond[4]=(((r00*x9809))+(((-1.0)*r02*sj3*x9816))+(((-1.0)*r01*x9808*x9815))+((r00*x9819))+((r01*x9810)));
evalcond[5]=(((cj2*sj1))+((r21*x9813))+((r21*x9806*x9809))+((r22*x9818))+((r20*x9808))+x9812+(((-1.0)*r20*x9810*x9815)));
evalcond[6]=(((r10*x9808))+(((-1.0)*x9814))+((r12*x9818))+((r11*x9813))+((r11*x9806*x9809))+x9807+(((-1.0)*r10*x9810*x9815)));
evalcond[7]=(((r21*x9810))+(((-1.0)*x9814))+(((-1.0)*r22*sj3*x9816))+(((-1.0)*r21*x9808*x9815))+((r20*x9809))+x9807+((r20*x9819)));
evalcond[8]=(((r10*x9809))+(((-1.0)*x9812))+((r11*x9810))+(((-1.0)*r12*sj3*x9816))+(((-1.0)*sj1*x9811))+(((-1.0)*r11*x9808*x9815))+((r10*x9819)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9820=((1.0)*gconst2);
CheckValue<IkReal> x9821=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9820)))),-1);
if(!x9821.valid){
continue;
}
CheckValue<IkReal> x9822 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst1*r21))+(((-1.0)*r20*x9820)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9822.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9821.value)))+(x9822.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9823=IKsin(j4);
IkReal x9824=IKcos(j4);
IkReal x9825=(sj1*sj2);
IkReal x9826=(gconst1*sj3);
IkReal x9827=(cj3*gconst1);
IkReal x9828=(cj3*gconst2);
IkReal x9829=((1.0)*cj2);
IkReal x9830=(cj1*sj2);
IkReal x9831=(gconst2*sj3);
IkReal x9832=(cj1*x9829);
IkReal x9833=((1.0)*x9824);
IkReal x9834=((1.0)*x9823);
IkReal x9835=(gconst1*x9823);
IkReal x9836=(cj3*x9823);
IkReal x9837=(x9824*x9831);
evalcond[0]=(((r21*x9835))+(((-1.0)*r22*x9833))+(((-1.0)*gconst2*r20*x9834)));
evalcond[1]=(((r11*x9835))+(((-1.0)*gconst2*r10*x9834))+(((-1.0)*r12*x9833)));
evalcond[2]=((-1.0)+((r01*x9835))+(((-1.0)*r02*x9833))+(((-1.0)*gconst2*r00*x9834)));
evalcond[3]=(((r01*x9831))+((r01*x9824*x9827))+(((-1.0)*r00*x9828*x9833))+((r00*x9826))+((r02*x9836)));
evalcond[4]=((((-1.0)*r02*sj3*x9834))+((r00*x9837))+(((-1.0)*r01*x9826*x9833))+((r00*x9827))+((r01*x9828)));
evalcond[5]=(((r20*x9826))+((cj2*sj1))+((r21*x9831))+((r22*x9836))+(((-1.0)*r20*x9828*x9833))+((r21*x9824*x9827))+x9830);
evalcond[6]=((((-1.0)*x9832))+((r11*x9824*x9827))+((r11*x9831))+((r12*x9836))+x9825+(((-1.0)*r10*x9828*x9833))+((r10*x9826)));
evalcond[7]=((((-1.0)*x9832))+((r20*x9827))+(((-1.0)*r22*sj3*x9834))+((r21*x9828))+(((-1.0)*r21*x9826*x9833))+((r20*x9837))+x9825);
evalcond[8]=(((r10*x9837))+((r11*x9828))+(((-1.0)*x9830))+(((-1.0)*r11*x9826*x9833))+(((-1.0)*r12*sj3*x9834))+((r10*x9827))+(((-1.0)*sj1*x9829)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9838=((-1.0)*r20);
IkReal x9839=x8924;
CheckValue<IkReal> x9841 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9838),IKFAST_ATAN2_MAGTHRESH);
if(!x9841.valid){
continue;
}
IkReal x9840=((-1.0)*(x9841.value));
sj5=gconst1;
cj5=gconst2;
j5=x9840;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9840;
IkReal gconst1=(r21*x9839);
IkReal gconst2=(x9838*x9839);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9842=((-1.0)*r20);
IkReal x9843=x8924;
CheckValue<IkReal> x9845 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9842),IKFAST_ATAN2_MAGTHRESH);
if(!x9845.valid){
continue;
}
IkReal x9844=((-1.0)*(x9845.value));
sj5=gconst1;
cj5=gconst2;
j5=x9844;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9844;
IkReal gconst1=(r21*x9843);
IkReal gconst2=(x9842*x9843);
CheckValue<IkReal> x9853=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9853.valid){
continue;
}
IkReal x9846=x9853.value;
IkReal x9847=(sj3*x9846);
IkReal x9848=(r11*x9847);
IkReal x9849=(r00*x9847);
IkReal x9850=(r01*x9847);
IkReal x9851=(r10*x9847);
IkReal x9852=(r20*r21*x9847);
j4eval[0]=IKsign((((r00*r20*r21*x9848))+((r02*r12*sj3))+((r01*x9848*(r21*r21)))+((r10*r20*r21*x9850))+((r10*x9849*(r20*r20)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9854=gconst1*gconst1;
IkReal x9855=gconst2*gconst2;
IkReal x9856=((1.0)*cj3);
IkReal x9857=(gconst2*r10);
IkReal x9858=(r01*sj3);
IkReal x9859=(gconst1*r00*sj3);
IkReal x9860=(gconst1*gconst2*r11);
IkReal x9861=(r10*x9855);
IkReal x9862=(r11*x9854);
CheckValue<IkReal> x9863=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x9856*x9861))+(((-1.0)*r02*r12*x9856))+((cj3*r00*x9860))+(((-1.0)*r01*x9856*x9862))+((cj3*gconst1*r01*x9857)))),-1);
if(!x9863.valid){
continue;
}
CheckValue<IkReal> x9864 = IKatan2WithCheck(IkReal((((gconst2*r12*x9858))+((r12*x9859)))),IkReal(((((-1.0)*x9857*x9859))+((r00*sj3*x9862))+(((-1.0)*x9858*x9861))+((x9858*x9860)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9864.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9863.value)))+(x9864.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9865=IKsin(j4);
IkReal x9866=IKcos(j4);
IkReal x9867=(cj2*sj1);
IkReal x9868=(cj1*sj2);
IkReal x9869=(gconst1*sj3);
IkReal x9870=(cj3*gconst1);
IkReal x9871=(sj1*sj2);
IkReal x9872=(cj3*gconst2);
IkReal x9873=(cj1*cj2);
IkReal x9874=(gconst2*sj3);
IkReal x9875=((1.0)*x9866);
IkReal x9876=((1.0)*x9865);
IkReal x9877=(gconst1*x9865);
IkReal x9878=(cj3*x9865);
IkReal x9879=(x9868+x9867);
IkReal x9880=(x9866*x9874);
evalcond[0]=((((-1.0)*gconst2*r20*x9876))+((r21*x9877))+(((-1.0)*r22*x9875)));
evalcond[1]=((((-1.0)*gconst2*r10*x9876))+((r11*x9877))+(((-1.0)*r12*x9875)));
evalcond[2]=((1.0)+(((-1.0)*r02*x9875))+(((-1.0)*gconst2*r00*x9876))+((r01*x9877)));
evalcond[3]=(((r02*x9878))+((r01*x9866*x9870))+((r00*x9869))+(((-1.0)*r00*x9872*x9875))+((r01*x9874)));
evalcond[4]=((((-1.0)*r02*sj3*x9876))+((r00*x9880))+((r00*x9870))+((r01*x9872))+(((-1.0)*r01*x9869*x9875)));
evalcond[5]=(((r21*x9866*x9870))+((r21*x9874))+((r22*x9878))+((r20*x9869))+x9879+(((-1.0)*r20*x9872*x9875)));
evalcond[6]=(((r12*x9878))+(((-1.0)*x9871))+(((-1.0)*r10*x9872*x9875))+((r11*x9866*x9870))+((r10*x9869))+((r11*x9874))+x9873);
evalcond[7]=((((-1.0)*r11*x9869*x9875))+(((-1.0)*r12*sj3*x9876))+((r10*x9870))+((r10*x9880))+((r11*x9872))+x9879);
evalcond[8]=(((r20*x9880))+(((-1.0)*x9873))+((r21*x9872))+((r20*x9870))+(((-1.0)*r22*sj3*x9876))+x9871+(((-1.0)*r21*x9869*x9875)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9881=gconst2*gconst2;
IkReal x9882=gconst1*gconst1;
IkReal x9883=(gconst1*r00);
IkReal x9884=(r11*sj3);
IkReal x9885=((1.0)*gconst2);
IkReal x9886=(cj3*r12);
IkReal x9887=(cj3*r11);
IkReal x9888=(gconst2*r01);
IkReal x9889=(cj3*r10);
IkReal x9890=(r10*sj3);
CheckValue<IkReal> x9891=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*x9883*x9884*x9885))+((r01*x9882*x9884))+(((-1.0)*gconst1*r01*x9885*x9890))+((r00*x9881*x9890)))),-1);
if(!x9891.valid){
continue;
}
CheckValue<IkReal> x9892 = IKatan2WithCheck(IkReal((((x9886*x9888))+((x9883*x9886)))),IkReal(((((-1.0)*x9883*x9885*x9889))+((gconst1*x9887*x9888))+((r00*x9882*x9887))+(((-1.0)*r01*x9881*x9889)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9892.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9891.value)))+(x9892.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9893=IKsin(j4);
IkReal x9894=IKcos(j4);
IkReal x9895=(cj2*sj1);
IkReal x9896=(cj1*sj2);
IkReal x9897=(gconst1*sj3);
IkReal x9898=(cj3*gconst1);
IkReal x9899=(sj1*sj2);
IkReal x9900=(cj3*gconst2);
IkReal x9901=(cj1*cj2);
IkReal x9902=(gconst2*sj3);
IkReal x9903=((1.0)*x9894);
IkReal x9904=((1.0)*x9893);
IkReal x9905=(gconst1*x9893);
IkReal x9906=(cj3*x9893);
IkReal x9907=(x9895+x9896);
IkReal x9908=(x9894*x9902);
evalcond[0]=((((-1.0)*gconst2*r20*x9904))+(((-1.0)*r22*x9903))+((r21*x9905)));
evalcond[1]=((((-1.0)*r12*x9903))+((r11*x9905))+(((-1.0)*gconst2*r10*x9904)));
evalcond[2]=((1.0)+((r01*x9905))+(((-1.0)*r02*x9903))+(((-1.0)*gconst2*r00*x9904)));
evalcond[3]=(((r02*x9906))+((r00*x9897))+((r01*x9894*x9898))+((r01*x9902))+(((-1.0)*r00*x9900*x9903)));
evalcond[4]=(((r00*x9898))+((r00*x9908))+((r01*x9900))+(((-1.0)*r02*sj3*x9904))+(((-1.0)*r01*x9897*x9903)));
evalcond[5]=(((r22*x9906))+((r21*x9902))+((r20*x9897))+x9907+((r21*x9894*x9898))+(((-1.0)*r20*x9900*x9903)));
evalcond[6]=((((-1.0)*r10*x9900*x9903))+((r12*x9906))+((r11*x9902))+((r11*x9894*x9898))+(((-1.0)*x9899))+x9901+((r10*x9897)));
evalcond[7]=(((r11*x9900))+x9907+((r10*x9898))+((r10*x9908))+(((-1.0)*r12*sj3*x9904))+(((-1.0)*r11*x9897*x9903)));
evalcond[8]=((((-1.0)*r22*sj3*x9904))+((r20*x9908))+(((-1.0)*x9901))+(((-1.0)*r21*x9897*x9903))+((r21*x9900))+((r20*x9898))+x9899);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9909 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9909.valid){
continue;
}
CheckValue<IkReal> x9910=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9910.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9909.value)+(((1.5707963267949)*(x9910.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9911=IKsin(j4);
IkReal x9912=IKcos(j4);
IkReal x9913=(cj2*sj1);
IkReal x9914=(cj1*sj2);
IkReal x9915=(gconst1*sj3);
IkReal x9916=(cj3*gconst1);
IkReal x9917=(sj1*sj2);
IkReal x9918=(cj3*gconst2);
IkReal x9919=(cj1*cj2);
IkReal x9920=(gconst2*sj3);
IkReal x9921=((1.0)*x9912);
IkReal x9922=((1.0)*x9911);
IkReal x9923=(gconst1*x9911);
IkReal x9924=(cj3*x9911);
IkReal x9925=(x9913+x9914);
IkReal x9926=(x9912*x9920);
evalcond[0]=((((-1.0)*gconst2*r20*x9922))+(((-1.0)*r22*x9921))+((r21*x9923)));
evalcond[1]=((((-1.0)*gconst2*r10*x9922))+(((-1.0)*r12*x9921))+((r11*x9923)));
evalcond[2]=((1.0)+(((-1.0)*r02*x9921))+(((-1.0)*gconst2*r00*x9922))+((r01*x9923)));
evalcond[3]=(((r02*x9924))+((r00*x9915))+(((-1.0)*r00*x9918*x9921))+((r01*x9912*x9916))+((r01*x9920)));
evalcond[4]=(((r01*x9918))+((r00*x9916))+(((-1.0)*r01*x9915*x9921))+(((-1.0)*r02*sj3*x9922))+((r00*x9926)));
evalcond[5]=(((r21*x9912*x9916))+((r20*x9915))+(((-1.0)*r20*x9918*x9921))+((r21*x9920))+x9925+((r22*x9924)));
evalcond[6]=((((-1.0)*x9917))+((r11*x9920))+((r12*x9924))+((r11*x9912*x9916))+(((-1.0)*r10*x9918*x9921))+x9919+((r10*x9915)));
evalcond[7]=(((r10*x9926))+((r11*x9918))+(((-1.0)*r12*sj3*x9922))+x9925+(((-1.0)*r11*x9915*x9921))+((r10*x9916)));
evalcond[8]=(((r20*x9916))+(((-1.0)*r21*x9915*x9921))+(((-1.0)*x9919))+((r20*x9926))+((r21*x9918))+x9917+(((-1.0)*r22*sj3*x9922)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x9927=((-1.0)*r20);
IkReal x9928=((-1.0)*px);
CheckValue<IkReal> x9930 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9927),IKFAST_ATAN2_MAGTHRESH);
if(!x9930.valid){
continue;
}
IkReal x9929=((-1.0)*(x9930.value));
sj5=gconst1;
cj5=gconst2;
j5=x9929;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9928);
rxp1_1=(px*r21);
rxp1_2=(r11*x9928);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9929;
IkReal gconst1=r21;
IkReal gconst2=x9927;
j4eval[0]=(((r11*r21))+((r10*r20)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9931=((-1.0)*r20);
IkReal x9932=((-1.0)*px);
CheckValue<IkReal> x9934 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9931),IKFAST_ATAN2_MAGTHRESH);
if(!x9934.valid){
continue;
}
IkReal x9933=((-1.0)*(x9934.value));
sj5=gconst1;
cj5=gconst2;
j5=x9933;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9932);
rxp1_1=(px*r21);
rxp1_2=(r11*x9932);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9933;
IkReal gconst1=r21;
IkReal gconst2=x9931;
j4eval[0]=(((r11*r21))+((r10*r20)));
j4eval[1]=(((cj3*(r21*r21)))+cj3+(((-1.0)*cj3*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9935=((-1.0)*r20);
IkReal x9936=((-1.0)*px);
CheckValue<IkReal> x9938 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9935),IKFAST_ATAN2_MAGTHRESH);
if(!x9938.valid){
continue;
}
IkReal x9937=((-1.0)*(x9938.value));
sj5=gconst1;
cj5=gconst2;
j5=x9937;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9936);
rxp1_1=(px*r21);
rxp1_2=(r11*x9936);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9937;
IkReal gconst1=r21;
IkReal gconst2=x9935;
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9939=((-1.0)*r20);
IkReal x9940=((-1.0)*px);
CheckValue<IkReal> x9942 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9939),IKFAST_ATAN2_MAGTHRESH);
if(!x9942.valid){
continue;
}
IkReal x9941=((-1.0)*(x9942.value));
sj5=gconst1;
cj5=gconst2;
j5=x9941;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9940);
rxp1_1=(px*r21);
rxp1_2=(r11*x9940);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9941;
IkReal gconst1=r21;
IkReal gconst2=x9939;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9943=((-1.0)*r20);
IkReal x9944=((-1.0)*px);
CheckValue<IkReal> x9946 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9943),IKFAST_ATAN2_MAGTHRESH);
if(!x9946.valid){
continue;
}
IkReal x9945=((-1.0)*(x9946.value));
sj5=gconst1;
cj5=gconst2;
j5=x9945;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9944);
rxp1_1=(px*r21);
rxp1_2=(r11*x9944);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9945;
IkReal gconst1=r21;
IkReal gconst2=x9943;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r10*r10));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9947=((-1.0)*r20);
IkReal x9948=((-1.0)*px);
CheckValue<IkReal> x9950 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9947),IKFAST_ATAN2_MAGTHRESH);
if(!x9950.valid){
continue;
}
IkReal x9949=((-1.0)*(x9950.value));
sj5=gconst1;
cj5=gconst2;
j5=x9949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9948);
rxp1_1=(px*r21);
rxp1_2=(r11*x9948);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9949;
IkReal gconst1=r21;
IkReal gconst2=x9947;
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9953=IKPowWithIntegerCheck(((((-1.0)*gconst1*r11))+((gconst2*r10))),-1);
if(!x9953.valid){
continue;
}
IkReal x9951=x9953.value;
IkReal x9952=(sj0*x9951);
cj4array[0]=(((cj1*sj2*x9952))+((cj2*sj1*x9952)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9954=IKsin(j4);
IkReal x9955=IKcos(j4);
IkReal x9956=(gconst1*x9954);
IkReal x9957=((1.0)*x9955);
IkReal x9958=((1.0)*gconst2*x9954);
evalcond[0]=((-1.0)*r02*x9954);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x9957)));
evalcond[2]=((((-1.0)*r20*x9958))+((r21*x9956)));
evalcond[3]=(((r11*x9956))+(((-1.0)*r10*x9958)));
evalcond[4]=((((-1.0)*gconst1*r21*x9957))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((gconst2*r20*x9955)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9960=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x9960.valid){
continue;
}
IkReal x9959=x9960.value;
cj4array[0]=((((-1.0)*sj1*sj2*x9959))+((cj1*cj2*x9959)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9961=IKsin(j4);
IkReal x9962=IKcos(j4);
IkReal x9963=(gconst2*r10);
IkReal x9964=((1.0)*sj0);
IkReal x9965=((1.0)*x9961);
IkReal x9966=(gconst1*x9961);
IkReal x9967=((1.0)*x9962);
evalcond[0]=((-1.0)*r02*x9961);
evalcond[1]=((((-1.0)*x9964))+(((-1.0)*r02*x9967)));
evalcond[2]=(((r21*x9966))+(((-1.0)*gconst2*r20*x9965)));
evalcond[3]=((((-1.0)*x9963*x9965))+((r11*x9966)));
evalcond[4]=(((x9962*x9963))+(((-1.0)*cj2*sj1*x9964))+(((-1.0)*cj1*sj2*x9964))+(((-1.0)*gconst1*r11*x9967)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9968=IKPowWithIntegerCheck(r02,-1);
if(!x9968.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9968.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9969=IKsin(j4);
IkReal x9970=IKcos(j4);
IkReal x9971=(gconst2*r10);
IkReal x9972=((1.0)*sj0);
IkReal x9973=(gconst1*r11);
IkReal x9974=(gconst1*r21);
IkReal x9975=(gconst2*r20);
IkReal x9976=((1.0)*x9969);
IkReal x9977=((1.0)*x9970);
evalcond[0]=((-1.0)*r02*x9969);
evalcond[1]=((((-1.0)*x9975*x9976))+((x9969*x9974)));
evalcond[2]=(((x9969*x9973))+(((-1.0)*x9971*x9976)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x9974*x9977))+((x9970*x9975)));
evalcond[4]=((((-1.0)*cj2*sj1*x9972))+(((-1.0)*cj1*sj2*x9972))+(((-1.0)*x9973*x9977))+((x9970*x9971)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9978=((-1.0)*r20);
IkReal x9979=((-1.0)*px);
CheckValue<IkReal> x9981 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9978),IKFAST_ATAN2_MAGTHRESH);
if(!x9981.valid){
continue;
}
IkReal x9980=((-1.0)*(x9981.value));
sj5=gconst1;
cj5=gconst2;
j5=x9980;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9979);
rxp1_1=(px*r21);
rxp1_2=(r11*x9979);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9980;
IkReal gconst1=r21;
IkReal gconst2=x9978;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9982=((-1.0)*r20);
IkReal x9983=((-1.0)*px);
CheckValue<IkReal> x9985 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9982),IKFAST_ATAN2_MAGTHRESH);
if(!x9985.valid){
continue;
}
IkReal x9984=((-1.0)*(x9985.value));
sj5=gconst1;
cj5=gconst2;
j5=x9984;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9983);
rxp1_1=(px*r21);
rxp1_2=(r11*x9983);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9984;
IkReal gconst1=r21;
IkReal gconst2=x9982;
j4eval[0]=((1.0)+(r21*r21)+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9986=((-1.0)*r20);
IkReal x9987=((-1.0)*px);
CheckValue<IkReal> x9989 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9986),IKFAST_ATAN2_MAGTHRESH);
if(!x9989.valid){
continue;
}
IkReal x9988=((-1.0)*(x9989.value));
sj5=gconst1;
cj5=gconst2;
j5=x9988;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9987);
rxp1_1=(px*r21);
rxp1_2=(r11*x9987);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9988;
IkReal gconst1=r21;
IkReal gconst2=x9986;
j4eval[0]=(((r11*r21))+((r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9992=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x9992.valid){
continue;
}
IkReal x9990=x9992.value;
IkReal x9991=(sj0*x9990);
cj4array[0]=(((cj1*sj2*x9991))+((cj2*sj1*x9991)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9993=IKsin(j4);
IkReal x9994=IKcos(j4);
IkReal x9995=((1.0)*gconst2);
IkReal x9996=(gconst1*r21);
evalcond[0]=(r02*x9993);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x9994)));
evalcond[2]=((((-1.0)*r20*x9993*x9995))+((x9993*x9996)));
evalcond[3]=(((gconst1*r11*x9993))+(((-1.0)*r10*x9993*x9995)));
evalcond[4]=((((-1.0)*r20*x9994*x9995))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x9994*x9996)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9998=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x9998.valid){
continue;
}
IkReal x9997=x9998.value;
cj4array[0]=(((cj1*cj2*x9997))+(((-1.0)*sj1*sj2*x9997)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9999=IKsin(j4);
IkReal x10000=IKcos(j4);
IkReal x10001=((1.0)*sj0);
IkReal x10002=(gconst1*x9999);
IkReal x10003=((1.0)*x10000);
IkReal x10004=((1.0)*gconst2*x9999);
evalcond[0]=(r02*x9999);
evalcond[1]=((((-1.0)*r02*x10003))+(((-1.0)*x10001)));
evalcond[2]=((((-1.0)*r20*x10004))+((r21*x10002)));
evalcond[3]=(((r11*x10002))+(((-1.0)*r10*x10004)));
evalcond[4]=((((-1.0)*cj2*sj1*x10001))+(((-1.0)*cj1*sj2*x10001))+((gconst1*r11*x10000))+(((-1.0)*gconst2*r10*x10003)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10005=IKPowWithIntegerCheck(r02,-1);
if(!x10005.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x10005.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10006=IKsin(j4);
IkReal x10007=IKcos(j4);
IkReal x10008=(gconst1*r21);
IkReal x10009=((1.0)*sj0);
IkReal x10010=(gconst1*r11);
IkReal x10011=((1.0)*gconst2*r10);
IkReal x10012=((1.0)*gconst2*r20);
evalcond[0]=(r02*x10006);
evalcond[1]=(((x10006*x10008))+(((-1.0)*x10006*x10012)));
evalcond[2]=(((x10006*x10010))+(((-1.0)*x10006*x10011)));
evalcond[3]=(((x10007*x10008))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10007*x10012)));
evalcond[4]=((((-1.0)*cj2*sj1*x10009))+((x10007*x10010))+(((-1.0)*x10007*x10011))+(((-1.0)*cj1*sj2*x10009)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10014=IKPowWithIntegerCheck(r02,-1);
if(!x10014.valid){
continue;
}
IkReal x10013=x10014.value;
CheckValue<IkReal> x10015=IKPowWithIntegerCheck(cj3,-1);
if(!x10015.valid){
continue;
}
if( IKabs((x10013*(x10015.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x10013)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x10013*(x10015.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x10013))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x10013*(x10015.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x10013));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10016=IKsin(j4);
IkReal x10017=IKcos(j4);
IkReal x10018=(gconst2*r10);
IkReal x10019=(gconst1*r11);
IkReal x10020=(sj1*sj2);
IkReal x10021=(gconst2*r20);
IkReal x10022=(cj2*sj1);
IkReal x10023=((1.0)*sj0);
IkReal x10024=(gconst1*r20);
IkReal x10025=(gconst2*r11);
IkReal x10026=(gconst1*r21);
IkReal x10027=((1.0)*cj0);
IkReal x10028=(gconst1*r10);
IkReal x10029=(cj1*sj2);
IkReal x10030=(gconst2*r21);
IkReal x10031=(sj3*x10017);
IkReal x10032=((1.0)*cj1*cj2);
IkReal x10033=(cj3*x10017);
IkReal x10034=(r02*x10016);
IkReal x10035=((1.0)*x10016);
evalcond[0]=((((-1.0)*x10023))+(((-1.0)*r02*x10017)));
evalcond[1]=(((x10016*x10026))+(((-1.0)*x10021*x10035)));
evalcond[2]=(cj0+(((-1.0)*x10018*x10035))+((x10016*x10019)));
evalcond[3]=(((cj0*x10020))+((cj3*x10034))+(((-1.0)*cj1*cj2*x10027)));
evalcond[4]=((((-1.0)*sj3*x10034))+(((-1.0)*x10022*x10027))+(((-1.0)*x10027*x10029)));
evalcond[5]=((((-1.0)*x10021*x10033))+((sj3*x10030))+((sj3*x10024))+((x10026*x10033))+x10029+x10022);
evalcond[6]=((((-1.0)*x10026*x10031))+((x10021*x10031))+x10020+((cj3*x10030))+(((-1.0)*x10032))+((cj3*x10024)));
evalcond[7]=(((sj0*x10020))+((sj3*x10025))+((sj3*x10028))+((x10019*x10033))+(((-1.0)*x10018*x10033))+(((-1.0)*cj1*cj2*x10023)));
evalcond[8]=(((x10018*x10031))+(((-1.0)*x10019*x10031))+(((-1.0)*x10023*x10029))+(((-1.0)*x10022*x10023))+((cj3*x10028))+((cj3*x10025)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10036=((1.0)*sj3);
IkReal x10037=((1.0)*gconst2);
CheckValue<IkReal> x10038=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*r10*x10037))),-1);
if(!x10038.valid){
continue;
}
CheckValue<IkReal> x10039=IKPowWithIntegerCheck((((cj3*gconst1*r21))+(((-1.0)*cj3*r20*x10037))),-1);
if(!x10039.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x10038.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10039.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst1*r20*x10036))+(((-1.0)*gconst2*r21*x10036)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x10038.value)))+IKsqr(((x10039.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst1*r20*x10036))+(((-1.0)*gconst2*r21*x10036))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x10038.value)), ((x10039.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst1*r20*x10036))+(((-1.0)*gconst2*r21*x10036))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10040=IKsin(j4);
IkReal x10041=IKcos(j4);
IkReal x10042=(gconst2*r10);
IkReal x10043=(gconst1*r11);
IkReal x10044=(sj1*sj2);
IkReal x10045=(gconst2*r20);
IkReal x10046=(cj2*sj1);
IkReal x10047=((1.0)*sj0);
IkReal x10048=(gconst1*r20);
IkReal x10049=(gconst2*r11);
IkReal x10050=(gconst1*r21);
IkReal x10051=((1.0)*cj0);
IkReal x10052=(gconst1*r10);
IkReal x10053=(cj1*sj2);
IkReal x10054=(gconst2*r21);
IkReal x10055=(sj3*x10041);
IkReal x10056=((1.0)*cj1*cj2);
IkReal x10057=(cj3*x10041);
IkReal x10058=(r02*x10040);
IkReal x10059=((1.0)*x10040);
evalcond[0]=((((-1.0)*r02*x10041))+(((-1.0)*x10047)));
evalcond[1]=(((x10040*x10050))+(((-1.0)*x10045*x10059)));
evalcond[2]=((((-1.0)*x10042*x10059))+cj0+((x10040*x10043)));
evalcond[3]=((((-1.0)*cj1*cj2*x10051))+((cj0*x10044))+((cj3*x10058)));
evalcond[4]=((((-1.0)*sj3*x10058))+(((-1.0)*x10051*x10053))+(((-1.0)*x10046*x10051)));
evalcond[5]=(((sj3*x10054))+(((-1.0)*x10045*x10057))+((sj3*x10048))+x10053+x10046+((x10050*x10057)));
evalcond[6]=((((-1.0)*x10050*x10055))+(((-1.0)*x10056))+x10044+((cj3*x10048))+((x10045*x10055))+((cj3*x10054)));
evalcond[7]=(((sj3*x10052))+((sj0*x10044))+((x10043*x10057))+((sj3*x10049))+(((-1.0)*cj1*cj2*x10047))+(((-1.0)*x10042*x10057)));
evalcond[8]=((((-1.0)*x10043*x10055))+(((-1.0)*x10047*x10053))+((cj3*x10049))+(((-1.0)*x10046*x10047))+((x10042*x10055))+((cj3*x10052)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10060=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x10060.valid){
continue;
}
CheckValue<IkReal> x10061=IKPowWithIntegerCheck(r02,-1);
if(!x10061.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x10060.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x10061.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x10060.value)))+IKsqr(((-1.0)*sj0*(x10061.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x10060.value)), ((-1.0)*sj0*(x10061.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10062=IKsin(j4);
IkReal x10063=IKcos(j4);
IkReal x10064=(gconst2*r10);
IkReal x10065=(gconst1*r11);
IkReal x10066=(sj1*sj2);
IkReal x10067=(gconst2*r20);
IkReal x10068=(cj2*sj1);
IkReal x10069=((1.0)*sj0);
IkReal x10070=(gconst1*r20);
IkReal x10071=(gconst2*r11);
IkReal x10072=(gconst1*r21);
IkReal x10073=((1.0)*cj0);
IkReal x10074=(gconst1*r10);
IkReal x10075=(cj1*sj2);
IkReal x10076=(gconst2*r21);
IkReal x10077=(sj3*x10063);
IkReal x10078=((1.0)*cj1*cj2);
IkReal x10079=(cj3*x10063);
IkReal x10080=(r02*x10062);
IkReal x10081=((1.0)*x10062);
evalcond[0]=((((-1.0)*x10069))+(((-1.0)*r02*x10063)));
evalcond[1]=((((-1.0)*x10067*x10081))+((x10062*x10072)));
evalcond[2]=(cj0+((x10062*x10065))+(((-1.0)*x10064*x10081)));
evalcond[3]=(((cj3*x10080))+(((-1.0)*cj1*cj2*x10073))+((cj0*x10066)));
evalcond[4]=((((-1.0)*x10068*x10073))+(((-1.0)*sj3*x10080))+(((-1.0)*x10073*x10075)));
evalcond[5]=(((sj3*x10070))+((sj3*x10076))+((x10072*x10079))+x10075+x10068+(((-1.0)*x10067*x10079)));
evalcond[6]=((((-1.0)*x10072*x10077))+((x10067*x10077))+(((-1.0)*x10078))+x10066+((cj3*x10070))+((cj3*x10076)));
evalcond[7]=(((sj3*x10074))+((sj3*x10071))+(((-1.0)*x10064*x10079))+((x10065*x10079))+(((-1.0)*cj1*cj2*x10069))+((sj0*x10066)));
evalcond[8]=(((x10064*x10077))+(((-1.0)*x10068*x10069))+((cj3*x10071))+((cj3*x10074))+(((-1.0)*x10069*x10075))+(((-1.0)*x10065*x10077)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10082=gconst1*gconst1;
IkReal x10083=r21*r21;
IkReal x10084=gconst2*gconst2;
IkReal x10085=r20*r20;
IkReal x10086=(gconst2*r20);
IkReal x10087=(cj1*cj2);
IkReal x10088=(sj1*sj2);
IkReal x10089=(gconst1*r21);
IkReal x10090=(cj3*gconst2);
IkReal x10091=(cj3*r20);
CheckValue<IkReal> x10092 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x10087))+((r21*r22*x10090))+((r22*x10088))+((gconst1*r22*x10091)))),IkReal((((gconst1*x10083*x10090))+((x10088*x10089))+(((-1.0)*x10086*x10088))+((r21*x10082*x10091))+(((-1.0)*x10087*x10089))+(((-1.0)*r21*x10084*x10091))+(((-1.0)*gconst1*x10085*x10090))+((x10086*x10087)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10092.valid){
continue;
}
CheckValue<IkReal> x10093=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+((sj3*x10082*x10083))+((sj3*x10084*x10085))+(((-2.0)*sj3*x10086*x10089)))),-1);
if(!x10093.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10092.value)+(((1.5707963267949)*(x10093.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10094=IKsin(j4);
IkReal x10095=IKcos(j4);
IkReal x10096=(cj3*gconst1);
IkReal x10097=(gconst1*r01);
IkReal x10098=(gconst1*r11);
IkReal x10099=(sj1*sj2);
IkReal x10100=(cj3*gconst2);
IkReal x10101=(gconst1*sj3);
IkReal x10102=(gconst2*sj3);
IkReal x10103=((1.0)*sj0);
IkReal x10104=(cj1*sj2);
IkReal x10105=((1.0)*x10095);
IkReal x10106=((1.0)*x10094);
IkReal x10107=((1.0)*cj1*cj2);
IkReal x10108=(cj3*x10094);
IkReal x10109=((1.0)*cj2*sj1);
IkReal x10110=(x10095*x10102);
evalcond[0]=((((-1.0)*gconst2*r20*x10106))+(((-1.0)*r22*x10105))+((gconst1*r21*x10094)));
evalcond[1]=((((-1.0)*r12*x10105))+cj0+((x10094*x10098))+(((-1.0)*gconst2*r10*x10106)));
evalcond[2]=(((x10094*x10097))+(((-1.0)*r02*x10105))+(((-1.0)*gconst2*r00*x10106))+(((-1.0)*x10103)));
evalcond[3]=(((r21*x10102))+((cj2*sj1))+((r20*x10101))+x10104+((r21*x10095*x10096))+(((-1.0)*r20*x10100*x10105))+((r22*x10108)));
evalcond[4]=(((r21*x10100))+((r20*x10110))+x10099+(((-1.0)*r21*x10101*x10105))+(((-1.0)*r22*sj3*x10106))+((r20*x10096))+(((-1.0)*x10107)));
evalcond[5]=(((r01*x10102))+((r00*x10101))+(((-1.0)*cj0*x10107))+((cj0*x10099))+((r02*x10108))+(((-1.0)*r00*x10100*x10105))+((r01*x10095*x10096)));
evalcond[6]=(((r11*x10095*x10096))+(((-1.0)*r10*x10100*x10105))+(((-1.0)*cj1*cj2*x10103))+((sj0*x10099))+((r11*x10102))+((r10*x10101))+((r12*x10108)));
evalcond[7]=(((r01*x10100))+((r00*x10110))+(((-1.0)*sj3*x10097*x10105))+(((-1.0)*cj0*x10109))+(((-1.0)*cj0*x10104))+(((-1.0)*r02*sj3*x10106))+((r00*x10096)));
evalcond[8]=((((-1.0)*sj3*x10098*x10105))+(((-1.0)*r12*sj3*x10106))+(((-1.0)*x10103*x10104))+(((-1.0)*cj2*sj1*x10103))+((r11*x10100))+((r10*x10096))+((r10*x10110)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10111=((1.0)*gconst2);
CheckValue<IkReal> x10112=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x10111)))),-1);
if(!x10112.valid){
continue;
}
CheckValue<IkReal> x10113 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x10111))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10113.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10112.value)))+(x10113.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10114=IKsin(j4);
IkReal x10115=IKcos(j4);
IkReal x10116=(cj3*gconst1);
IkReal x10117=(gconst1*r01);
IkReal x10118=(gconst1*r11);
IkReal x10119=(sj1*sj2);
IkReal x10120=(cj3*gconst2);
IkReal x10121=(gconst1*sj3);
IkReal x10122=(gconst2*sj3);
IkReal x10123=((1.0)*sj0);
IkReal x10124=(cj1*sj2);
IkReal x10125=((1.0)*x10115);
IkReal x10126=((1.0)*x10114);
IkReal x10127=((1.0)*cj1*cj2);
IkReal x10128=(cj3*x10114);
IkReal x10129=((1.0)*cj2*sj1);
IkReal x10130=(x10115*x10122);
evalcond[0]=(((gconst1*r21*x10114))+(((-1.0)*gconst2*r20*x10126))+(((-1.0)*r22*x10125)));
evalcond[1]=(cj0+((x10114*x10118))+(((-1.0)*gconst2*r10*x10126))+(((-1.0)*r12*x10125)));
evalcond[2]=((((-1.0)*gconst2*r00*x10126))+(((-1.0)*r02*x10125))+((x10114*x10117))+(((-1.0)*x10123)));
evalcond[3]=(((cj2*sj1))+((r20*x10121))+((r21*x10122))+(((-1.0)*r20*x10120*x10125))+x10124+((r22*x10128))+((r21*x10115*x10116)));
evalcond[4]=(((r20*x10130))+((r20*x10116))+((r21*x10120))+(((-1.0)*r22*sj3*x10126))+x10119+(((-1.0)*r21*x10121*x10125))+(((-1.0)*x10127)));
evalcond[5]=(((cj0*x10119))+((r02*x10128))+((r00*x10121))+((r01*x10122))+(((-1.0)*cj0*x10127))+((r01*x10115*x10116))+(((-1.0)*r00*x10120*x10125)));
evalcond[6]=((((-1.0)*r10*x10120*x10125))+((r10*x10121))+((r11*x10115*x10116))+((sj0*x10119))+((r12*x10128))+(((-1.0)*cj1*cj2*x10123))+((r11*x10122)));
evalcond[7]=(((r00*x10116))+(((-1.0)*sj3*x10117*x10125))+(((-1.0)*cj0*x10124))+((r00*x10130))+((r01*x10120))+(((-1.0)*cj0*x10129))+(((-1.0)*r02*sj3*x10126)));
evalcond[8]=((((-1.0)*x10123*x10124))+(((-1.0)*sj3*x10118*x10125))+((r10*x10130))+(((-1.0)*cj2*sj1*x10123))+(((-1.0)*r12*sj3*x10126))+((r10*x10116))+((r11*x10120)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10131=((1.0)*gconst2);
CheckValue<IkReal> x10132 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x10131))+((cj0*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10132.valid){
continue;
}
CheckValue<IkReal> x10133=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x10131)))),-1);
if(!x10133.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10132.value)+(((1.5707963267949)*(x10133.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10134=IKsin(j4);
IkReal x10135=IKcos(j4);
IkReal x10136=(cj3*gconst1);
IkReal x10137=(gconst1*r01);
IkReal x10138=(gconst1*r11);
IkReal x10139=(sj1*sj2);
IkReal x10140=(cj3*gconst2);
IkReal x10141=(gconst1*sj3);
IkReal x10142=(gconst2*sj3);
IkReal x10143=((1.0)*sj0);
IkReal x10144=(cj1*sj2);
IkReal x10145=((1.0)*x10135);
IkReal x10146=((1.0)*x10134);
IkReal x10147=((1.0)*cj1*cj2);
IkReal x10148=(cj3*x10134);
IkReal x10149=((1.0)*cj2*sj1);
IkReal x10150=(x10135*x10142);
evalcond[0]=(((gconst1*r21*x10134))+(((-1.0)*gconst2*r20*x10146))+(((-1.0)*r22*x10145)));
evalcond[1]=(cj0+(((-1.0)*r12*x10145))+((x10134*x10138))+(((-1.0)*gconst2*r10*x10146)));
evalcond[2]=((((-1.0)*r02*x10145))+(((-1.0)*x10143))+((x10134*x10137))+(((-1.0)*gconst2*r00*x10146)));
evalcond[3]=(((cj2*sj1))+((r21*x10142))+x10144+((r22*x10148))+((r21*x10135*x10136))+(((-1.0)*r20*x10140*x10145))+((r20*x10141)));
evalcond[4]=(((r20*x10136))+((r21*x10140))+(((-1.0)*r21*x10141*x10145))+x10139+(((-1.0)*r22*sj3*x10146))+(((-1.0)*x10147))+((r20*x10150)));
evalcond[5]=(((r02*x10148))+((cj0*x10139))+((r00*x10141))+(((-1.0)*r00*x10140*x10145))+((r01*x10142))+(((-1.0)*cj0*x10147))+((r01*x10135*x10136)));
evalcond[6]=(((r12*x10148))+(((-1.0)*cj1*cj2*x10143))+((r10*x10141))+(((-1.0)*r10*x10140*x10145))+((sj0*x10139))+((r11*x10142))+((r11*x10135*x10136)));
evalcond[7]=((((-1.0)*r02*sj3*x10146))+(((-1.0)*sj3*x10137*x10145))+(((-1.0)*cj0*x10144))+((r00*x10136))+((r00*x10150))+((r01*x10140))+(((-1.0)*cj0*x10149)));
evalcond[8]=(((r10*x10136))+(((-1.0)*x10143*x10144))+((r10*x10150))+(((-1.0)*cj2*sj1*x10143))+(((-1.0)*r12*sj3*x10146))+((r11*x10140))+(((-1.0)*sj3*x10138*x10145)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10151=((-1.0)*r21);
IkReal x10153 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x10153)==0){
continue;
}
IkReal x10152=pow(x10153,-0.5);
CheckValue<IkReal> x10154 = IKatan2WithCheck(IkReal(x10151),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10154.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x10154.value))));
IkReal gconst4=(x10151*x10152);
IkReal gconst5=((1.0)*r20*x10152);
CheckValue<IkReal> x10155 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10155.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x10155.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10156=((-1.0)*r21);
CheckValue<IkReal> x10159 = IKatan2WithCheck(IkReal(x10156),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10159.valid){
continue;
}
IkReal x10157=((1.0)*(x10159.value));
IkReal x10158=x10152;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10157)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10157)));
IkReal gconst4=(x10156*x10158);
IkReal gconst5=((1.0)*r20*x10158);
IkReal x10160=r22*r22;
IkReal x10161=((1.0)*x10160);
CheckValue<IkReal> x10165=IKPowWithIntegerCheck(((-1.0)+x10160),-1);
if(!x10165.valid){
continue;
}
IkReal x10162=x10165.value;
if((((1.0)+(((-1.0)*x10161)))) < -0.00001)
continue;
IkReal x10163=IKsqrt(((1.0)+(((-1.0)*x10161))));
IkReal x10164=(cj0*x10162*x10163);
j4eval[0]=((IKabs(((((-1.0)*x10161*x10164))+x10164)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10166=((-1.0)*r21);
CheckValue<IkReal> x10169 = IKatan2WithCheck(IkReal(x10166),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10169.valid){
continue;
}
IkReal x10167=((1.0)*(x10169.value));
IkReal x10168=x10152;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10167)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10167)));
IkReal gconst4=(x10166*x10168);
IkReal gconst5=((1.0)*r20*x10168);
IkReal x10170=r22*r22;
IkReal x10171=((1.0)*x10170);
CheckValue<IkReal> x10175=IKPowWithIntegerCheck(((-1.0)+x10170),-1);
if(!x10175.valid){
continue;
}
IkReal x10172=x10175.value;
if((((1.0)+(((-1.0)*x10171)))) < -0.00001)
continue;
IkReal x10173=IKsqrt(((1.0)+(((-1.0)*x10171))));
IkReal x10174=(sj0*x10172*x10173);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x10174+(((-1.0)*x10171*x10174))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10176=((-1.0)*r21);
CheckValue<IkReal> x10179 = IKatan2WithCheck(IkReal(x10176),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10179.valid){
continue;
}
IkReal x10177=((1.0)*(x10179.value));
IkReal x10178=x10152;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10177)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10177)));
IkReal gconst4=(x10176*x10178);
IkReal gconst5=((1.0)*r20*x10178);
IkReal x10180=r22*r22;
IkReal x10181=(r12*sj0);
IkReal x10182=(cj0*r02);
CheckValue<IkReal> x10186=IKPowWithIntegerCheck(((-1.0)+x10180),-1);
if(!x10186.valid){
continue;
}
IkReal x10183=x10186.value;
if((((1.0)+(((-1.0)*x10180)))) < -0.00001)
continue;
IkReal x10184=IKsqrt(((1.0)+(((-1.0)*x10180))));
IkReal x10185=(r22*x10183*x10184);
j4eval[0]=0;
j4eval[1]=((IKabs((((x10181*x10185))+((x10182*x10185)))))+(IKabs(((((-1.0)*x10181))+(((-1.0)*x10182))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10187=((-1.0)*r21);
CheckValue<IkReal> x10190 = IKatan2WithCheck(IkReal(x10187),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10190.valid){
continue;
}
IkReal x10188=((1.0)*(x10190.value));
IkReal x10189=x10152;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10188)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10188)));
IkReal gconst4=(x10187*x10189);
IkReal gconst5=((1.0)*r20*x10189);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10191=((-1.0)*r21);
CheckValue<IkReal> x10194 = IKatan2WithCheck(IkReal(x10191),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10194.valid){
continue;
}
IkReal x10192=((1.0)*(x10194.value));
IkReal x10193=x10152;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10192)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10192)));
IkReal gconst4=(x10191*x10193);
IkReal gconst5=((1.0)*r20*x10193);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10195=((-1.0)*r21);
CheckValue<IkReal> x10198 = IKatan2WithCheck(IkReal(x10195),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10198.valid){
continue;
}
IkReal x10196=((1.0)*(x10198.value));
IkReal x10197=x10152;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10196)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10196)));
IkReal gconst4=(x10195*x10197);
IkReal gconst5=((1.0)*r20*x10197);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10199=((-1.0)*r21);
CheckValue<IkReal> x10202 = IKatan2WithCheck(IkReal(x10199),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10202.valid){
continue;
}
IkReal x10200=((1.0)*(x10202.value));
IkReal x10201=x10152;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10200)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10200)));
IkReal gconst4=(x10199*x10201);
IkReal gconst5=((1.0)*r20*x10201);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10203=((-1.0)*r21);
CheckValue<IkReal> x10206 = IKatan2WithCheck(IkReal(x10203),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10206.valid){
continue;
}
IkReal x10204=((1.0)*(x10206.value));
IkReal x10205=x10152;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10204)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10204)));
IkReal gconst4=(x10203*x10205);
IkReal gconst5=((1.0)*r20*x10205);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10207=((-1.0)*r21);
CheckValue<IkReal> x10210 = IKatan2WithCheck(IkReal(x10207),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10210.valid){
continue;
}
IkReal x10208=((1.0)*(x10210.value));
IkReal x10209=x10152;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10208)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10208)));
IkReal gconst4=(x10207*x10209);
IkReal gconst5=((1.0)*r20*x10209);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10211=(gconst5*r10);
IkReal x10212=(gconst4*r11);
CheckValue<IkReal> x10213 = IKatan2WithCheck(IkReal((x10211+(((-1.0)*x10212)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10213.valid){
continue;
}
CheckValue<IkReal> x10214=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x10211*x10212))+(x10211*x10211)+(x10212*x10212))),-1);
if(!x10214.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10213.value)+(((1.5707963267949)*(x10214.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10215=IKsin(j4);
IkReal x10216=IKcos(j4);
IkReal x10217=(gconst4*r11);
IkReal x10218=((1.0)*cj1);
IkReal x10219=(gconst5*r10);
IkReal x10220=(gconst4*r01);
IkReal x10221=(gconst5*r00);
IkReal x10222=(gconst4*r21);
IkReal x10223=(gconst5*r20);
IkReal x10224=((1.0)*x10216);
IkReal x10225=((1.0)*x10215);
evalcond[0]=((((-1.0)*r22*x10224))+((x10215*x10222))+(((-1.0)*x10223*x10225)));
evalcond[1]=((((-1.0)*r02*x10224))+(((-1.0)*x10221*x10225))+((x10215*x10220)));
evalcond[2]=(((x10216*x10219))+(((-1.0)*x10217*x10224))+(((-1.0)*r12*x10225)));
evalcond[3]=((1.0)+((x10215*x10217))+(((-1.0)*x10219*x10225))+(((-1.0)*r12*x10224)));
evalcond[4]=((((-1.0)*x10222*x10224))+((sj1*sj2))+(((-1.0)*cj2*x10218))+(((-1.0)*r22*x10225))+((x10216*x10223)));
evalcond[5]=((((-1.0)*x10220*x10224))+(((-1.0)*r02*x10225))+(((-1.0)*sj2*x10218))+(((-1.0)*cj2*sj1))+((x10216*x10221)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10226=((1.0)*gconst5);
CheckValue<IkReal> x10227=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10226)))),-1);
if(!x10227.valid){
continue;
}
CheckValue<IkReal> x10228 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10226))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10228.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10227.value)))+(x10228.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10229=IKsin(j4);
IkReal x10230=IKcos(j4);
IkReal x10231=(gconst4*r11);
IkReal x10232=((1.0)*cj1);
IkReal x10233=(gconst5*r10);
IkReal x10234=(gconst4*r01);
IkReal x10235=(gconst5*r00);
IkReal x10236=(gconst4*r21);
IkReal x10237=(gconst5*r20);
IkReal x10238=((1.0)*x10230);
IkReal x10239=((1.0)*x10229);
evalcond[0]=((((-1.0)*x10237*x10239))+((x10229*x10236))+(((-1.0)*r22*x10238)));
evalcond[1]=((((-1.0)*x10235*x10239))+((x10229*x10234))+(((-1.0)*r02*x10238)));
evalcond[2]=(((x10230*x10233))+(((-1.0)*r12*x10239))+(((-1.0)*x10231*x10238)));
evalcond[3]=((1.0)+(((-1.0)*x10233*x10239))+((x10229*x10231))+(((-1.0)*r12*x10238)));
evalcond[4]=(((x10230*x10237))+((sj1*sj2))+(((-1.0)*cj2*x10232))+(((-1.0)*x10236*x10238))+(((-1.0)*r22*x10239)));
evalcond[5]=((((-1.0)*x10234*x10238))+((x10230*x10235))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10232))+(((-1.0)*r02*x10239)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10240 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10240.valid){
continue;
}
CheckValue<IkReal> x10241=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10241.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10240.value)+(((1.5707963267949)*(x10241.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10242=IKsin(j4);
IkReal x10243=IKcos(j4);
IkReal x10244=(gconst4*r11);
IkReal x10245=((1.0)*cj1);
IkReal x10246=(gconst5*r10);
IkReal x10247=(gconst4*r01);
IkReal x10248=(gconst5*r00);
IkReal x10249=(gconst4*r21);
IkReal x10250=(gconst5*r20);
IkReal x10251=((1.0)*x10243);
IkReal x10252=((1.0)*x10242);
evalcond[0]=(((x10242*x10249))+(((-1.0)*r22*x10251))+(((-1.0)*x10250*x10252)));
evalcond[1]=((((-1.0)*r02*x10251))+((x10242*x10247))+(((-1.0)*x10248*x10252)));
evalcond[2]=(((x10243*x10246))+(((-1.0)*r12*x10252))+(((-1.0)*x10244*x10251)));
evalcond[3]=((1.0)+((x10242*x10244))+(((-1.0)*x10246*x10252))+(((-1.0)*r12*x10251)));
evalcond[4]=(((x10243*x10250))+(((-1.0)*cj2*x10245))+((sj1*sj2))+(((-1.0)*r22*x10252))+(((-1.0)*x10249*x10251)));
evalcond[5]=(((x10243*x10248))+(((-1.0)*r02*x10252))+(((-1.0)*x10247*x10251))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10245)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10253=((-1.0)*r21);
CheckValue<IkReal> x10256 = IKatan2WithCheck(IkReal(x10253),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10256.valid){
continue;
}
IkReal x10254=((1.0)*(x10256.value));
IkReal x10255=x10152;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10254)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10254)));
IkReal gconst4=(x10253*x10255);
IkReal gconst5=((1.0)*r20*x10255);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10257=((-1.0)*r21);
CheckValue<IkReal> x10260 = IKatan2WithCheck(IkReal(x10257),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10260.valid){
continue;
}
IkReal x10258=((1.0)*(x10260.value));
IkReal x10259=x10152;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10258)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10258)));
IkReal gconst4=(x10257*x10259);
IkReal gconst5=((1.0)*r20*x10259);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10261=((-1.0)*r21);
CheckValue<IkReal> x10264 = IKatan2WithCheck(IkReal(x10261),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10264.valid){
continue;
}
IkReal x10262=((1.0)*(x10264.value));
IkReal x10263=x10152;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10262)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10262)));
IkReal gconst4=(x10261*x10263);
IkReal gconst5=((1.0)*r20*x10263);
IkReal x10265=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10269=IKPowWithIntegerCheck(x10265,-1);
if(!x10269.valid){
continue;
}
IkReal x10266=x10269.value;
IkReal x10267=((1.0)*x10266);
IkReal x10268=((((-1.0)*x10267*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-1.0)*x10267*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x10266)));
j4eval[0]=x10268;
j4eval[1]=r12;
j4eval[2]=x10265;
j4eval[3]=IKsign(x10268);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10270=(gconst5*r10);
IkReal x10271=(gconst4*r11);
CheckValue<IkReal> x10272 = IKatan2WithCheck(IkReal((x10271+(((-1.0)*x10270)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10272.valid){
continue;
}
CheckValue<IkReal> x10273=IKPowWithIntegerCheck(IKsign(((((2.0)*x10270*x10271))+(((-1.0)*(x10271*x10271)))+(((-1.0)*(r12*r12)))+(((-1.0)*(x10270*x10270))))),-1);
if(!x10273.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10272.value)+(((1.5707963267949)*(x10273.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10274=IKcos(j4);
IkReal x10275=IKsin(j4);
IkReal x10276=(gconst4*r11);
IkReal x10277=(gconst5*r10);
IkReal x10278=((1.0)*cj1);
IkReal x10279=(gconst5*r00);
IkReal x10280=(gconst5*r20);
IkReal x10281=((1.0)*x10274);
IkReal x10282=(gconst4*x10274);
IkReal x10283=((1.0)*x10275);
IkReal x10284=(gconst4*x10275);
evalcond[0]=(((r12*x10275))+(((-1.0)*x10277*x10281))+((x10274*x10276)));
evalcond[1]=((((-1.0)*r22*x10281))+((r21*x10284))+(((-1.0)*x10280*x10283)));
evalcond[2]=(((r01*x10284))+(((-1.0)*x10279*x10283))+(((-1.0)*r02*x10281)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10281))+((x10275*x10276))+(((-1.0)*x10277*x10283)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj2*x10278))+((r21*x10282))+((r22*x10275))+(((-1.0)*x10280*x10281)));
evalcond[5]=(((r01*x10282))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10278))+(((-1.0)*x10279*x10281))+((r02*x10275)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10285=((1.0)*gconst5);
CheckValue<IkReal> x10286 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10285)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10286.valid){
continue;
}
CheckValue<IkReal> x10287=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10285)))),-1);
if(!x10287.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10286.value)+(((1.5707963267949)*(x10287.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10288=IKcos(j4);
IkReal x10289=IKsin(j4);
IkReal x10290=(gconst4*r11);
IkReal x10291=(gconst5*r10);
IkReal x10292=((1.0)*cj1);
IkReal x10293=(gconst5*r00);
IkReal x10294=(gconst5*r20);
IkReal x10295=((1.0)*x10288);
IkReal x10296=(gconst4*x10288);
IkReal x10297=((1.0)*x10289);
IkReal x10298=(gconst4*x10289);
evalcond[0]=(((x10288*x10290))+((r12*x10289))+(((-1.0)*x10291*x10295)));
evalcond[1]=((((-1.0)*x10294*x10297))+((r21*x10298))+(((-1.0)*r22*x10295)));
evalcond[2]=((((-1.0)*x10293*x10297))+(((-1.0)*r02*x10295))+((r01*x10298)));
evalcond[3]=((1.0)+((x10289*x10290))+(((-1.0)*x10291*x10297))+(((-1.0)*r12*x10295)));
evalcond[4]=((((-1.0)*x10294*x10295))+((sj1*sj2))+((r22*x10289))+((r21*x10296))+(((-1.0)*cj2*x10292)));
evalcond[5]=((((-1.0)*sj2*x10292))+(((-1.0)*cj2*sj1))+(((-1.0)*x10293*x10295))+((r02*x10289))+((r01*x10296)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10299 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10299.valid){
continue;
}
CheckValue<IkReal> x10300=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10300.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10299.value)+(((1.5707963267949)*(x10300.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10301=IKcos(j4);
IkReal x10302=IKsin(j4);
IkReal x10303=(gconst4*r11);
IkReal x10304=(gconst5*r10);
IkReal x10305=((1.0)*cj1);
IkReal x10306=(gconst5*r00);
IkReal x10307=(gconst5*r20);
IkReal x10308=((1.0)*x10301);
IkReal x10309=(gconst4*x10301);
IkReal x10310=((1.0)*x10302);
IkReal x10311=(gconst4*x10302);
evalcond[0]=((((-1.0)*x10304*x10308))+((r12*x10302))+((x10301*x10303)));
evalcond[1]=((((-1.0)*x10307*x10310))+(((-1.0)*r22*x10308))+((r21*x10311)));
evalcond[2]=(((r01*x10311))+(((-1.0)*r02*x10308))+(((-1.0)*x10306*x10310)));
evalcond[3]=((1.0)+(((-1.0)*x10304*x10310))+(((-1.0)*r12*x10308))+((x10302*x10303)));
evalcond[4]=((((-1.0)*cj2*x10305))+((sj1*sj2))+(((-1.0)*x10307*x10308))+((r21*x10309))+((r22*x10302)));
evalcond[5]=(((r02*x10302))+(((-1.0)*sj2*x10305))+(((-1.0)*cj2*sj1))+((r01*x10309))+(((-1.0)*x10306*x10308)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10312=((-1.0)*r21);
CheckValue<IkReal> x10315 = IKatan2WithCheck(IkReal(x10312),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10315.valid){
continue;
}
IkReal x10313=((1.0)*(x10315.value));
IkReal x10314=x10152;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10313)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10313)));
IkReal gconst4=(x10312*x10314);
IkReal gconst5=((1.0)*r20*x10314);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10316=((-1.0)*r21);
CheckValue<IkReal> x10319 = IKatan2WithCheck(IkReal(x10316),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10319.valid){
continue;
}
IkReal x10317=((1.0)*(x10319.value));
IkReal x10318=x10152;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10317)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10317)));
IkReal gconst4=(x10316*x10318);
IkReal gconst5=((1.0)*r20*x10318);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10320=((-1.0)*r21);
CheckValue<IkReal> x10323 = IKatan2WithCheck(IkReal(x10320),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10323.valid){
continue;
}
IkReal x10321=((1.0)*(x10323.value));
IkReal x10322=x10152;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10321)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10321)));
IkReal gconst4=(x10320*x10322);
IkReal gconst5=((1.0)*r20*x10322);
IkReal x10324=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10328=IKPowWithIntegerCheck(x10324,-1);
if(!x10328.valid){
continue;
}
IkReal x10325=x10328.value;
IkReal x10326=((1.0)*x10325);
IkReal x10327=((((-1.0)*x10326*(r10*r10)*(r20*r20)))+(((-1.0)*x10326*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x10325)));
j4eval[0]=x10327;
j4eval[1]=r12;
j4eval[2]=x10324;
j4eval[3]=IKsign(x10327);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10329=(gconst5*r10);
IkReal x10330=(gconst4*r11);
CheckValue<IkReal> x10331 = IKatan2WithCheck(IkReal(((((-1.0)*x10329))+x10330)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10331.valid){
continue;
}
CheckValue<IkReal> x10332=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10330*x10330)))+(((2.0)*x10329*x10330))+(((-1.0)*(r12*r12)))+(((-1.0)*(x10329*x10329))))),-1);
if(!x10332.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10331.value)+(((1.5707963267949)*(x10332.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10333=IKcos(j4);
IkReal x10334=IKsin(j4);
IkReal x10335=(gconst4*r11);
IkReal x10336=(gconst5*r10);
IkReal x10337=(gconst5*r00);
IkReal x10338=(gconst5*r20);
IkReal x10339=((1.0)*x10333);
IkReal x10340=(gconst4*x10333);
IkReal x10341=((1.0)*x10334);
IkReal x10342=(gconst4*x10334);
evalcond[0]=((((-1.0)*x10336*x10339))+((r12*x10334))+((x10333*x10335)));
evalcond[1]=((((-1.0)*x10338*x10341))+(((-1.0)*r22*x10339))+((r21*x10342)));
evalcond[2]=((((-1.0)*x10337*x10341))+((r01*x10342))+(((-1.0)*r02*x10339)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10339))+(((-1.0)*x10336*x10341))+((x10334*x10335)));
evalcond[4]=(((cj2*sj1))+((r22*x10334))+((cj1*sj2))+(((-1.0)*x10338*x10339))+((r21*x10340)));
evalcond[5]=(((r02*x10334))+((r01*x10340))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10337*x10339)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10343=((1.0)*gconst5);
CheckValue<IkReal> x10344=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10343)))),-1);
if(!x10344.valid){
continue;
}
CheckValue<IkReal> x10345 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10343)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10345.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10344.value)))+(x10345.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10346=IKcos(j4);
IkReal x10347=IKsin(j4);
IkReal x10348=(gconst4*r11);
IkReal x10349=(gconst5*r10);
IkReal x10350=(gconst5*r00);
IkReal x10351=(gconst5*r20);
IkReal x10352=((1.0)*x10346);
IkReal x10353=(gconst4*x10346);
IkReal x10354=((1.0)*x10347);
IkReal x10355=(gconst4*x10347);
evalcond[0]=(((r12*x10347))+((x10346*x10348))+(((-1.0)*x10349*x10352)));
evalcond[1]=(((r21*x10355))+(((-1.0)*r22*x10352))+(((-1.0)*x10351*x10354)));
evalcond[2]=(((r01*x10355))+(((-1.0)*x10350*x10354))+(((-1.0)*r02*x10352)));
evalcond[3]=((1.0)+((x10347*x10348))+(((-1.0)*r12*x10352))+(((-1.0)*x10349*x10354)));
evalcond[4]=(((r21*x10353))+((cj2*sj1))+((cj1*sj2))+((r22*x10347))+(((-1.0)*x10351*x10352)));
evalcond[5]=(((r01*x10353))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10350*x10352))+((r02*x10347)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10356 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10356.valid){
continue;
}
CheckValue<IkReal> x10357=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10357.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10356.value)+(((1.5707963267949)*(x10357.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10358=IKcos(j4);
IkReal x10359=IKsin(j4);
IkReal x10360=(gconst4*r11);
IkReal x10361=(gconst5*r10);
IkReal x10362=(gconst5*r00);
IkReal x10363=(gconst5*r20);
IkReal x10364=((1.0)*x10358);
IkReal x10365=(gconst4*x10358);
IkReal x10366=((1.0)*x10359);
IkReal x10367=(gconst4*x10359);
evalcond[0]=((((-1.0)*x10361*x10364))+((x10358*x10360))+((r12*x10359)));
evalcond[1]=(((r21*x10367))+(((-1.0)*x10363*x10366))+(((-1.0)*r22*x10364)));
evalcond[2]=(((r01*x10367))+(((-1.0)*r02*x10364))+(((-1.0)*x10362*x10366)));
evalcond[3]=((1.0)+(((-1.0)*x10361*x10366))+(((-1.0)*r12*x10364))+((x10359*x10360)));
evalcond[4]=(((cj2*sj1))+((r21*x10365))+((cj1*sj2))+(((-1.0)*x10363*x10364))+((r22*x10359)));
evalcond[5]=(((r01*x10365))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10362*x10364))+((r02*x10359)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10368=((-1.0)*r21);
CheckValue<IkReal> x10371 = IKatan2WithCheck(IkReal(x10368),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10371.valid){
continue;
}
IkReal x10369=((1.0)*(x10371.value));
IkReal x10370=x10152;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10369)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10369)));
IkReal gconst4=(x10368*x10370);
IkReal gconst5=((1.0)*r20*x10370);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10372=((-1.0)*r21);
CheckValue<IkReal> x10375 = IKatan2WithCheck(IkReal(x10372),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10375.valid){
continue;
}
IkReal x10373=((1.0)*(x10375.value));
IkReal x10374=x10152;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10373)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10373)));
IkReal gconst4=(x10372*x10374);
IkReal gconst5=((1.0)*r20*x10374);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10376=((-1.0)*r21);
CheckValue<IkReal> x10379 = IKatan2WithCheck(IkReal(x10376),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10379.valid){
continue;
}
IkReal x10377=((1.0)*(x10379.value));
IkReal x10378=x10152;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10377)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10377)));
IkReal gconst4=(x10376*x10378);
IkReal gconst5=((1.0)*r20*x10378);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10380=(gconst5*r10);
IkReal x10381=(gconst4*r11);
CheckValue<IkReal> x10382=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x10381*x10381)+(((-2.0)*x10380*x10381))+(x10380*x10380))),-1);
if(!x10382.valid){
continue;
}
CheckValue<IkReal> x10383 = IKatan2WithCheck(IkReal(((((-1.0)*x10381))+x10380)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10383.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10382.value)))+(x10383.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10384=IKsin(j4);
IkReal x10385=IKcos(j4);
IkReal x10386=(gconst4*r11);
IkReal x10387=(gconst5*r10);
IkReal x10388=(gconst4*r01);
IkReal x10389=(gconst5*r00);
IkReal x10390=(gconst4*r21);
IkReal x10391=(gconst5*r20);
IkReal x10392=((1.0)*x10385);
IkReal x10393=((1.0)*x10384);
evalcond[0]=(((x10384*x10390))+(((-1.0)*x10391*x10393))+(((-1.0)*r22*x10392)));
evalcond[1]=(((x10384*x10388))+(((-1.0)*x10389*x10393))+(((-1.0)*r02*x10392)));
evalcond[2]=(((x10385*x10387))+(((-1.0)*x10386*x10392))+(((-1.0)*r12*x10393)));
evalcond[3]=((1.0)+((x10384*x10386))+(((-1.0)*x10387*x10393))+(((-1.0)*r12*x10392)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x10393))+(((-1.0)*x10390*x10392))+((x10385*x10391)));
evalcond[5]=(((x10385*x10389))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x10393))+(((-1.0)*x10388*x10392)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10394=((1.0)*gconst5);
CheckValue<IkReal> x10395=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10394)))),-1);
if(!x10395.valid){
continue;
}
CheckValue<IkReal> x10396 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10394))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10396.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10395.value)))+(x10396.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10397=IKsin(j4);
IkReal x10398=IKcos(j4);
IkReal x10399=(gconst4*r11);
IkReal x10400=(gconst5*r10);
IkReal x10401=(gconst4*r01);
IkReal x10402=(gconst5*r00);
IkReal x10403=(gconst4*r21);
IkReal x10404=(gconst5*r20);
IkReal x10405=((1.0)*x10398);
IkReal x10406=((1.0)*x10397);
evalcond[0]=((((-1.0)*r22*x10405))+((x10397*x10403))+(((-1.0)*x10404*x10406)));
evalcond[1]=((((-1.0)*x10402*x10406))+((x10397*x10401))+(((-1.0)*r02*x10405)));
evalcond[2]=(((x10398*x10400))+(((-1.0)*r12*x10406))+(((-1.0)*x10399*x10405)));
evalcond[3]=((1.0)+((x10397*x10399))+(((-1.0)*r12*x10405))+(((-1.0)*x10400*x10406)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x10398*x10404))+(((-1.0)*r22*x10406))+(((-1.0)*x10403*x10405)));
evalcond[5]=(((x10398*x10402))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10401*x10405))+(((-1.0)*r02*x10406)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10407 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10407.valid){
continue;
}
CheckValue<IkReal> x10408=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10408.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10407.value)+(((1.5707963267949)*(x10408.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10409=IKsin(j4);
IkReal x10410=IKcos(j4);
IkReal x10411=(gconst4*r11);
IkReal x10412=(gconst5*r10);
IkReal x10413=(gconst4*r01);
IkReal x10414=(gconst5*r00);
IkReal x10415=(gconst4*r21);
IkReal x10416=(gconst5*r20);
IkReal x10417=((1.0)*x10410);
IkReal x10418=((1.0)*x10409);
evalcond[0]=((((-1.0)*x10416*x10418))+(((-1.0)*r22*x10417))+((x10409*x10415)));
evalcond[1]=((((-1.0)*r02*x10417))+(((-1.0)*x10414*x10418))+((x10409*x10413)));
evalcond[2]=(((x10410*x10412))+(((-1.0)*r12*x10418))+(((-1.0)*x10411*x10417)));
evalcond[3]=((1.0)+(((-1.0)*x10412*x10418))+(((-1.0)*r12*x10417))+((x10409*x10411)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x10410*x10416))+(((-1.0)*r22*x10418))+(((-1.0)*x10415*x10417)));
evalcond[5]=((((-1.0)*r02*x10418))+(((-1.0)*x10413*x10417))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x10410*x10414)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r02);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((1.0)+r12);
op[1]=((((-2.0)*gconst5*r10))+(((2.0)*gconst4*r11)));
op[2]=((1.0)+(((-1.0)*r12)));
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10419=gconst4*gconst4;
IkReal x10420=gconst5*gconst5;
IkReal x10421=(r10*r21);
IkReal x10422=((1.0)*cj3);
IkReal x10423=(r11*r21);
IkReal x10424=(r11*r20);
IkReal x10425=(r22*sj3);
IkReal x10426=(gconst4*r10);
IkReal x10427=((1.0)*sj3);
IkReal x10428=(cj3*gconst4*gconst5);
CheckValue<IkReal> x10429=IKPowWithIntegerCheck(IKsign((((x10421*x10428))+(((-1.0)*r10*r20*x10420*x10422))+(((-1.0)*r12*r22*x10422))+(((-1.0)*x10419*x10422*x10423))+((x10424*x10428)))),-1);
if(!x10429.valid){
continue;
}
CheckValue<IkReal> x10430 = IKatan2WithCheck(IkReal((((x10425*x10426))+((gconst5*r11*x10425)))),IkReal(((((-1.0)*gconst5*r20*x10426*x10427))+((gconst4*gconst5*sj3*x10423))+(((-1.0)*x10420*x10424*x10427))+((sj3*x10419*x10421)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10430.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10429.value)))+(x10430.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10431=IKsin(j4);
IkReal x10432=IKcos(j4);
IkReal x10433=(sj1*sj2);
IkReal x10434=(gconst5*sj3);
IkReal x10435=(cj3*gconst5);
IkReal x10436=(gconst4*r11);
IkReal x10437=((1.0)*cj1);
IkReal x10438=(gconst4*r01);
IkReal x10439=(cj2*sj1);
IkReal x10440=(gconst4*r21);
IkReal x10441=(gconst4*sj3);
IkReal x10442=(cj3*gconst4);
IkReal x10443=(cj2*x10437);
IkReal x10444=((1.0)*x10432);
IkReal x10445=((1.0)*x10431);
IkReal x10446=(cj3*x10431);
IkReal x10447=(cj3*x10432);
evalcond[0]=((((-1.0)*gconst5*r20*x10445))+((x10431*x10440))+(((-1.0)*r22*x10444)));
evalcond[1]=((((-1.0)*r02*x10444))+(((-1.0)*gconst5*r00*x10445))+((x10431*x10438)));
evalcond[2]=((1.0)+(((-1.0)*r12*x10444))+((x10431*x10436))+(((-1.0)*gconst5*r10*x10445)));
evalcond[3]=(((x10436*x10447))+(((-1.0)*r10*x10435*x10444))+((r12*x10446))+((r11*x10434))+((r10*x10441)));
evalcond[4]=((((-1.0)*sj3*x10436*x10444))+(((-1.0)*r12*sj3*x10445))+((r11*x10435))+((r10*x10442))+((r10*x10432*x10434)));
evalcond[5]=(((r22*x10446))+((cj1*sj2))+((r20*x10441))+x10439+((x10440*x10447))+(((-1.0)*r20*x10435*x10444))+((r21*x10434)));
evalcond[6]=(((r01*x10434))+((x10438*x10447))+(((-1.0)*x10443))+((r02*x10446))+(((-1.0)*r00*x10435*x10444))+((r00*x10441))+x10433);
evalcond[7]=((((-1.0)*r22*sj3*x10445))+(((-1.0)*x10443))+((r20*x10442))+x10433+((r20*x10432*x10434))+(((-1.0)*sj3*x10440*x10444))+((r21*x10435)));
evalcond[8]=(((r01*x10435))+(((-1.0)*sj3*x10438*x10444))+(((-1.0)*r02*sj3*x10445))+(((-1.0)*sj2*x10437))+((r00*x10432*x10434))+((r00*x10442))+(((-1.0)*x10439)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10448=((1.0)*gconst5);
CheckValue<IkReal> x10449=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10448)))),-1);
if(!x10449.valid){
continue;
}
CheckValue<IkReal> x10450 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10448))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10450.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10449.value)))+(x10450.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10451=IKsin(j4);
IkReal x10452=IKcos(j4);
IkReal x10453=(sj1*sj2);
IkReal x10454=(gconst5*sj3);
IkReal x10455=(cj3*gconst5);
IkReal x10456=(gconst4*r11);
IkReal x10457=((1.0)*cj1);
IkReal x10458=(gconst4*r01);
IkReal x10459=(cj2*sj1);
IkReal x10460=(gconst4*r21);
IkReal x10461=(gconst4*sj3);
IkReal x10462=(cj3*gconst4);
IkReal x10463=(cj2*x10457);
IkReal x10464=((1.0)*x10452);
IkReal x10465=((1.0)*x10451);
IkReal x10466=(cj3*x10451);
IkReal x10467=(cj3*x10452);
evalcond[0]=((((-1.0)*gconst5*r20*x10465))+(((-1.0)*r22*x10464))+((x10451*x10460)));
evalcond[1]=((((-1.0)*r02*x10464))+(((-1.0)*gconst5*r00*x10465))+((x10451*x10458)));
evalcond[2]=((1.0)+(((-1.0)*gconst5*r10*x10465))+((x10451*x10456))+(((-1.0)*r12*x10464)));
evalcond[3]=((((-1.0)*r10*x10455*x10464))+((r12*x10466))+((r11*x10454))+((x10456*x10467))+((r10*x10461)));
evalcond[4]=(((r11*x10455))+(((-1.0)*sj3*x10456*x10464))+((r10*x10452*x10454))+(((-1.0)*r12*sj3*x10465))+((r10*x10462)));
evalcond[5]=(((r20*x10461))+((cj1*sj2))+((x10460*x10467))+(((-1.0)*r20*x10455*x10464))+((r22*x10466))+x10459+((r21*x10454)));
evalcond[6]=((((-1.0)*r00*x10455*x10464))+((r00*x10461))+((r01*x10454))+x10453+((r02*x10466))+((x10458*x10467))+(((-1.0)*x10463)));
evalcond[7]=(((r20*x10462))+(((-1.0)*sj3*x10460*x10464))+((r20*x10452*x10454))+(((-1.0)*r22*sj3*x10465))+x10453+((r21*x10455))+(((-1.0)*x10463)));
evalcond[8]=((((-1.0)*x10459))+((r00*x10462))+((r00*x10452*x10454))+((r01*x10455))+(((-1.0)*r02*sj3*x10465))+(((-1.0)*sj2*x10457))+(((-1.0)*sj3*x10458*x10464)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10468 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10468.valid){
continue;
}
CheckValue<IkReal> x10469=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10469.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10468.value)+(((1.5707963267949)*(x10469.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10470=IKsin(j4);
IkReal x10471=IKcos(j4);
IkReal x10472=(sj1*sj2);
IkReal x10473=(gconst5*sj3);
IkReal x10474=(cj3*gconst5);
IkReal x10475=(gconst4*r11);
IkReal x10476=((1.0)*cj1);
IkReal x10477=(gconst4*r01);
IkReal x10478=(cj2*sj1);
IkReal x10479=(gconst4*r21);
IkReal x10480=(gconst4*sj3);
IkReal x10481=(cj3*gconst4);
IkReal x10482=(cj2*x10476);
IkReal x10483=((1.0)*x10471);
IkReal x10484=((1.0)*x10470);
IkReal x10485=(cj3*x10470);
IkReal x10486=(cj3*x10471);
evalcond[0]=((((-1.0)*r22*x10483))+((x10470*x10479))+(((-1.0)*gconst5*r20*x10484)));
evalcond[1]=(((x10470*x10477))+(((-1.0)*r02*x10483))+(((-1.0)*gconst5*r00*x10484)));
evalcond[2]=((1.0)+(((-1.0)*gconst5*r10*x10484))+(((-1.0)*r12*x10483))+((x10470*x10475)));
evalcond[3]=((((-1.0)*r10*x10474*x10483))+((r10*x10480))+((x10475*x10486))+((r12*x10485))+((r11*x10473)));
evalcond[4]=(((r10*x10481))+((r11*x10474))+(((-1.0)*r12*sj3*x10484))+(((-1.0)*sj3*x10475*x10483))+((r10*x10471*x10473)));
evalcond[5]=(((x10479*x10486))+((cj1*sj2))+(((-1.0)*r20*x10474*x10483))+((r22*x10485))+((r21*x10473))+x10478+((r20*x10480)));
evalcond[6]=(((x10477*x10486))+((r00*x10480))+((r01*x10473))+(((-1.0)*x10482))+((r02*x10485))+x10472+(((-1.0)*r00*x10474*x10483)));
evalcond[7]=(((r20*x10471*x10473))+(((-1.0)*r22*sj3*x10484))+(((-1.0)*x10482))+((r21*x10474))+x10472+((r20*x10481))+(((-1.0)*sj3*x10479*x10483)));
evalcond[8]=((((-1.0)*x10478))+((r00*x10481))+((r00*x10471*x10473))+((r01*x10474))+(((-1.0)*sj2*x10476))+(((-1.0)*sj3*x10477*x10483))+(((-1.0)*r02*sj3*x10484)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10487=((-1.0)*r21);
CheckValue<IkReal> x10490 = IKatan2WithCheck(IkReal(x10487),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10490.valid){
continue;
}
IkReal x10488=((1.0)*(x10490.value));
IkReal x10489=x10152;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10488)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10488)));
IkReal gconst4=(x10487*x10489);
IkReal gconst5=((1.0)*r20*x10489);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10491=((-1.0)*r21);
CheckValue<IkReal> x10494 = IKatan2WithCheck(IkReal(x10491),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10494.valid){
continue;
}
IkReal x10492=((1.0)*(x10494.value));
IkReal x10493=x10152;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10492)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10492)));
IkReal gconst4=(x10491*x10493);
IkReal gconst5=((1.0)*r20*x10493);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10495=((-1.0)*r21);
CheckValue<IkReal> x10498 = IKatan2WithCheck(IkReal(x10495),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10498.valid){
continue;
}
IkReal x10496=((1.0)*(x10498.value));
IkReal x10497=x10152;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10496)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10496)));
IkReal gconst4=(x10495*x10497);
IkReal gconst5=((1.0)*r20*x10497);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10499=((-1.0)*r21);
CheckValue<IkReal> x10502 = IKatan2WithCheck(IkReal(x10499),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10502.valid){
continue;
}
IkReal x10500=((1.0)*(x10502.value));
IkReal x10501=x10152;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10500)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10500)));
IkReal gconst4=(x10499*x10501);
IkReal gconst5=((1.0)*r20*x10501);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10503=((-1.0)*r21);
CheckValue<IkReal> x10506 = IKatan2WithCheck(IkReal(x10503),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10506.valid){
continue;
}
IkReal x10504=((1.0)*(x10506.value));
IkReal x10505=x10152;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10504)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10504)));
IkReal gconst4=(x10503*x10505);
IkReal gconst5=((1.0)*r20*x10505);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10507=((-1.0)*r21);
CheckValue<IkReal> x10510 = IKatan2WithCheck(IkReal(x10507),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10510.valid){
continue;
}
IkReal x10508=((1.0)*(x10510.value));
IkReal x10509=x10152;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10508)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10508)));
IkReal gconst4=(x10507*x10509);
IkReal gconst5=((1.0)*r20*x10509);
IkReal x10511=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10515=IKPowWithIntegerCheck(x10511,-1);
if(!x10515.valid){
continue;
}
IkReal x10512=x10515.value;
IkReal x10513=((1.0)*x10512);
IkReal x10514=((((-2.0)*r10*r11*r20*r21*x10512))+(((-1.0)*x10513*(r10*r10)*(r20*r20)))+(((-1.0)*x10513*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12))));
j4eval[0]=x10514;
j4eval[1]=r12;
j4eval[2]=x10511;
j4eval[3]=IKsign(x10514);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10516=(gconst5*r10);
IkReal x10517=(gconst4*r11);
CheckValue<IkReal> x10518=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10517*x10517)))+(((2.0)*x10516*x10517))+(((-1.0)*(r12*r12)))+(((-1.0)*(x10516*x10516))))),-1);
if(!x10518.valid){
continue;
}
CheckValue<IkReal> x10519 = IKatan2WithCheck(IkReal(((((-1.0)*x10517))+x10516)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10519.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10518.value)))+(x10519.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10520=IKsin(j4);
IkReal x10521=IKcos(j4);
IkReal x10522=(gconst4*r11);
IkReal x10523=(gconst5*r10);
IkReal x10524=(gconst4*r01);
IkReal x10525=(gconst5*r00);
IkReal x10526=(gconst4*r21);
IkReal x10527=(gconst5*r20);
IkReal x10528=((1.0)*x10521);
IkReal x10529=((1.0)*x10520);
evalcond[0]=((((-1.0)*x10527*x10529))+(((-1.0)*r22*x10528))+((x10520*x10526)));
evalcond[1]=(((x10520*x10524))+(((-1.0)*r02*x10528))+(((-1.0)*x10525*x10529)));
evalcond[2]=(((x10521*x10523))+(((-1.0)*r12*x10529))+(((-1.0)*x10522*x10528)));
evalcond[3]=((-1.0)+(((-1.0)*x10523*x10529))+(((-1.0)*r12*x10528))+((x10520*x10522)));
evalcond[4]=(((cj2*sj1))+((x10521*x10525))+((cj1*sj2))+(((-1.0)*r02*x10529))+(((-1.0)*x10524*x10528)));
evalcond[5]=((((-1.0)*x10526*x10528))+((x10521*x10527))+(((-1.0)*r22*x10529))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10530=((1.0)*gconst5);
CheckValue<IkReal> x10531 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10530)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10531.valid){
continue;
}
CheckValue<IkReal> x10532=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10530))+(((-1.0)*gconst4*r20)))),-1);
if(!x10532.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10531.value)+(((1.5707963267949)*(x10532.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10533=IKsin(j4);
IkReal x10534=IKcos(j4);
IkReal x10535=(gconst4*r11);
IkReal x10536=(gconst5*r10);
IkReal x10537=(gconst4*r01);
IkReal x10538=(gconst5*r00);
IkReal x10539=(gconst4*r21);
IkReal x10540=(gconst5*r20);
IkReal x10541=((1.0)*x10534);
IkReal x10542=((1.0)*x10533);
evalcond[0]=(((x10533*x10539))+(((-1.0)*r22*x10541))+(((-1.0)*x10540*x10542)));
evalcond[1]=(((x10533*x10537))+(((-1.0)*x10538*x10542))+(((-1.0)*r02*x10541)));
evalcond[2]=((((-1.0)*x10535*x10541))+(((-1.0)*r12*x10542))+((x10534*x10536)));
evalcond[3]=((-1.0)+((x10533*x10535))+(((-1.0)*r12*x10541))+(((-1.0)*x10536*x10542)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x10542))+((x10534*x10538))+(((-1.0)*x10537*x10541)));
evalcond[5]=(((x10534*x10540))+(((-1.0)*x10539*x10541))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x10542)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10543=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10543.valid){
continue;
}
CheckValue<IkReal> x10544 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10544.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10543.value)))+(x10544.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10545=IKsin(j4);
IkReal x10546=IKcos(j4);
IkReal x10547=(gconst4*r11);
IkReal x10548=(gconst5*r10);
IkReal x10549=(gconst4*r01);
IkReal x10550=(gconst5*r00);
IkReal x10551=(gconst4*r21);
IkReal x10552=(gconst5*r20);
IkReal x10553=((1.0)*x10546);
IkReal x10554=((1.0)*x10545);
evalcond[0]=(((x10545*x10551))+(((-1.0)*x10552*x10554))+(((-1.0)*r22*x10553)));
evalcond[1]=((((-1.0)*x10550*x10554))+(((-1.0)*r02*x10553))+((x10545*x10549)));
evalcond[2]=((((-1.0)*r12*x10554))+(((-1.0)*x10547*x10553))+((x10546*x10548)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10553))+(((-1.0)*x10548*x10554))+((x10545*x10547)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x10546*x10550))+(((-1.0)*r02*x10554))+(((-1.0)*x10549*x10553)));
evalcond[5]=((((-1.0)*x10551*x10553))+((x10546*x10552))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x10554)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10555=((-1.0)*r21);
CheckValue<IkReal> x10558 = IKatan2WithCheck(IkReal(x10555),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10558.valid){
continue;
}
IkReal x10556=((1.0)*(x10558.value));
IkReal x10557=x10152;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10556)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10556)));
IkReal gconst4=(x10555*x10557);
IkReal gconst5=((1.0)*r20*x10557);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10559=((-1.0)*r21);
CheckValue<IkReal> x10562 = IKatan2WithCheck(IkReal(x10559),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10562.valid){
continue;
}
IkReal x10560=((1.0)*(x10562.value));
IkReal x10561=x10152;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10560)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10560)));
IkReal gconst4=(x10559*x10561);
IkReal gconst5=((1.0)*r20*x10561);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10563=((-1.0)*r21);
CheckValue<IkReal> x10566 = IKatan2WithCheck(IkReal(x10563),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10566.valid){
continue;
}
IkReal x10564=((1.0)*(x10566.value));
IkReal x10565=x10152;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10564)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10564)));
IkReal gconst4=(x10563*x10565);
IkReal gconst5=((1.0)*r20*x10565);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10567=(gconst5*r10);
IkReal x10568=(gconst4*r11);
CheckValue<IkReal> x10569=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x10567*x10568))+(x10567*x10567)+(x10568*x10568))),-1);
if(!x10569.valid){
continue;
}
CheckValue<IkReal> x10570 = IKatan2WithCheck(IkReal(((((-1.0)*x10567))+x10568)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10570.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10569.value)))+(x10570.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10571=IKcos(j4);
IkReal x10572=IKsin(j4);
IkReal x10573=(gconst4*r11);
IkReal x10574=(gconst5*r10);
IkReal x10575=(gconst5*r00);
IkReal x10576=(gconst5*r20);
IkReal x10577=((1.0)*x10571);
IkReal x10578=(gconst4*x10571);
IkReal x10579=((1.0)*x10572);
IkReal x10580=(gconst4*x10572);
evalcond[0]=(((x10571*x10573))+(((-1.0)*x10574*x10577))+((r12*x10572)));
evalcond[1]=((((-1.0)*r22*x10577))+(((-1.0)*x10576*x10579))+((r21*x10580)));
evalcond[2]=((((-1.0)*x10575*x10579))+(((-1.0)*r02*x10577))+((r01*x10580)));
evalcond[3]=((-1.0)+((x10572*x10573))+(((-1.0)*r12*x10577))+(((-1.0)*x10574*x10579)));
evalcond[4]=(((cj2*sj1))+((r01*x10578))+((cj1*sj2))+(((-1.0)*x10575*x10577))+((r02*x10572)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10576*x10577))+((r21*x10578))+((r22*x10572)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10581=((1.0)*gconst5);
CheckValue<IkReal> x10582 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x10581))+((gconst4*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10582.valid){
continue;
}
CheckValue<IkReal> x10583=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10581))+(((-1.0)*gconst4*r20)))),-1);
if(!x10583.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10582.value)+(((1.5707963267949)*(x10583.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10584=IKcos(j4);
IkReal x10585=IKsin(j4);
IkReal x10586=(gconst4*r11);
IkReal x10587=(gconst5*r10);
IkReal x10588=(gconst5*r00);
IkReal x10589=(gconst5*r20);
IkReal x10590=((1.0)*x10584);
IkReal x10591=(gconst4*x10584);
IkReal x10592=((1.0)*x10585);
IkReal x10593=(gconst4*x10585);
evalcond[0]=(((r12*x10585))+(((-1.0)*x10587*x10590))+((x10584*x10586)));
evalcond[1]=(((r21*x10593))+(((-1.0)*r22*x10590))+(((-1.0)*x10589*x10592)));
evalcond[2]=((((-1.0)*r02*x10590))+((r01*x10593))+(((-1.0)*x10588*x10592)));
evalcond[3]=((-1.0)+(((-1.0)*x10587*x10592))+(((-1.0)*r12*x10590))+((x10585*x10586)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r01*x10591))+(((-1.0)*x10588*x10590))+((r02*x10585)));
evalcond[5]=(((r21*x10591))+(((-1.0)*x10589*x10590))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x10585)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10594=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10594.valid){
continue;
}
CheckValue<IkReal> x10595 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10595.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10594.value)))+(x10595.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10596=IKcos(j4);
IkReal x10597=IKsin(j4);
IkReal x10598=(gconst4*r11);
IkReal x10599=(gconst5*r10);
IkReal x10600=(gconst5*r00);
IkReal x10601=(gconst5*r20);
IkReal x10602=((1.0)*x10596);
IkReal x10603=(gconst4*x10596);
IkReal x10604=((1.0)*x10597);
IkReal x10605=(gconst4*x10597);
evalcond[0]=(((x10596*x10598))+((r12*x10597))+(((-1.0)*x10599*x10602)));
evalcond[1]=(((r21*x10605))+(((-1.0)*r22*x10602))+(((-1.0)*x10601*x10604)));
evalcond[2]=(((r01*x10605))+(((-1.0)*x10600*x10604))+(((-1.0)*r02*x10602)));
evalcond[3]=((-1.0)+((x10597*x10598))+(((-1.0)*r12*x10602))+(((-1.0)*x10599*x10604)));
evalcond[4]=(((r01*x10603))+(((-1.0)*x10600*x10602))+((cj2*sj1))+((cj1*sj2))+((r02*x10597)));
evalcond[5]=(((r21*x10603))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x10597))+(((-1.0)*x10601*x10602)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10606=((-1.0)*r21);
CheckValue<IkReal> x10609 = IKatan2WithCheck(IkReal(x10606),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10609.valid){
continue;
}
IkReal x10607=((1.0)*(x10609.value));
IkReal x10608=x10152;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10607)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10607)));
IkReal gconst4=(x10606*x10608);
IkReal gconst5=((1.0)*r20*x10608);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10610=((-1.0)*r21);
CheckValue<IkReal> x10613 = IKatan2WithCheck(IkReal(x10610),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10613.valid){
continue;
}
IkReal x10611=((1.0)*(x10613.value));
IkReal x10612=x10152;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10611)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10611)));
IkReal gconst4=(x10610*x10612);
IkReal gconst5=((1.0)*r20*x10612);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10614=((-1.0)*r21);
CheckValue<IkReal> x10617 = IKatan2WithCheck(IkReal(x10614),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10617.valid){
continue;
}
IkReal x10615=((1.0)*(x10617.value));
IkReal x10616=x10152;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10615)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10615)));
IkReal gconst4=(x10614*x10616);
IkReal gconst5=((1.0)*r20*x10616);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10618=(gconst5*r10);
IkReal x10619=(gconst4*r11);
CheckValue<IkReal> x10620=IKPowWithIntegerCheck(IKsign(((x10618*x10618)+(r12*r12)+(x10619*x10619)+(((-2.0)*x10618*x10619)))),-1);
if(!x10620.valid){
continue;
}
CheckValue<IkReal> x10621 = IKatan2WithCheck(IkReal(((((-1.0)*x10618))+x10619)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10621.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10620.value)))+(x10621.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10622=IKcos(j4);
IkReal x10623=IKsin(j4);
IkReal x10624=(gconst5*r10);
IkReal x10625=(gconst5*r00);
IkReal x10626=(gconst5*r20);
IkReal x10627=((1.0)*x10622);
IkReal x10628=(gconst4*x10623);
IkReal x10629=(gconst4*x10622);
IkReal x10630=((1.0)*x10623);
evalcond[0]=((((-1.0)*x10624*x10627))+((r11*x10629))+((r12*x10623)));
evalcond[1]=(((r21*x10628))+(((-1.0)*x10626*x10630))+(((-1.0)*r22*x10627)));
evalcond[2]=((((-1.0)*r02*x10627))+(((-1.0)*x10625*x10630))+((r01*x10628)));
evalcond[3]=((-1.0)+(((-1.0)*x10624*x10630))+(((-1.0)*r12*x10627))+((r11*x10628)));
evalcond[4]=(((r21*x10629))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10626*x10627))+((r22*x10623)));
evalcond[5]=((((-1.0)*x10625*x10627))+(((-1.0)*sj1*sj2))+((r01*x10629))+((r02*x10623))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10631=((1.0)*gconst5);
CheckValue<IkReal> x10632=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10631))+(((-1.0)*gconst4*r20)))),-1);
if(!x10632.valid){
continue;
}
CheckValue<IkReal> x10633 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x10631))+((gconst4*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10633.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10632.value)))+(x10633.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10634=IKcos(j4);
IkReal x10635=IKsin(j4);
IkReal x10636=(gconst5*r10);
IkReal x10637=(gconst5*r00);
IkReal x10638=(gconst5*r20);
IkReal x10639=((1.0)*x10634);
IkReal x10640=(gconst4*x10635);
IkReal x10641=(gconst4*x10634);
IkReal x10642=((1.0)*x10635);
evalcond[0]=((((-1.0)*x10636*x10639))+((r11*x10641))+((r12*x10635)));
evalcond[1]=(((r21*x10640))+(((-1.0)*x10638*x10642))+(((-1.0)*r22*x10639)));
evalcond[2]=((((-1.0)*r02*x10639))+((r01*x10640))+(((-1.0)*x10637*x10642)));
evalcond[3]=((-1.0)+(((-1.0)*x10636*x10642))+(((-1.0)*r12*x10639))+((r11*x10640)));
evalcond[4]=(((r21*x10641))+((cj2*sj1))+(((-1.0)*x10638*x10639))+((cj1*sj2))+((r22*x10635)));
evalcond[5]=(((r01*x10641))+(((-1.0)*sj1*sj2))+(((-1.0)*x10637*x10639))+((r02*x10635))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10643=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10643.valid){
continue;
}
CheckValue<IkReal> x10644 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10644.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10643.value)))+(x10644.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10645=IKcos(j4);
IkReal x10646=IKsin(j4);
IkReal x10647=(gconst5*r10);
IkReal x10648=(gconst5*r00);
IkReal x10649=(gconst5*r20);
IkReal x10650=((1.0)*x10645);
IkReal x10651=(gconst4*x10646);
IkReal x10652=(gconst4*x10645);
IkReal x10653=((1.0)*x10646);
evalcond[0]=((((-1.0)*x10647*x10650))+((r11*x10652))+((r12*x10646)));
evalcond[1]=((((-1.0)*r22*x10650))+(((-1.0)*x10649*x10653))+((r21*x10651)));
evalcond[2]=((((-1.0)*r02*x10650))+(((-1.0)*x10648*x10653))+((r01*x10651)));
evalcond[3]=((-1.0)+(((-1.0)*x10647*x10653))+(((-1.0)*r12*x10650))+((r11*x10651)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10649*x10650))+((r22*x10646))+((r21*x10652)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r02*x10646))+((cj1*cj2))+(((-1.0)*x10648*x10650))+((r01*x10652)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10654=((-1.0)*r21);
CheckValue<IkReal> x10657 = IKatan2WithCheck(IkReal(x10654),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10657.valid){
continue;
}
IkReal x10655=((1.0)*(x10657.value));
IkReal x10656=x10152;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10655)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10655)));
IkReal gconst4=(x10654*x10656);
IkReal gconst5=((1.0)*r20*x10656);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10658=((-1.0)*r21);
CheckValue<IkReal> x10661 = IKatan2WithCheck(IkReal(x10658),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10661.valid){
continue;
}
IkReal x10659=((1.0)*(x10661.value));
IkReal x10660=x10152;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10659)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10659)));
IkReal gconst4=(x10658*x10660);
IkReal gconst5=((1.0)*r20*x10660);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10662=((-1.0)*r21);
CheckValue<IkReal> x10665 = IKatan2WithCheck(IkReal(x10662),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10665.valid){
continue;
}
IkReal x10663=((1.0)*(x10665.value));
IkReal x10664=x10152;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10663)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10663)));
IkReal gconst4=(x10662*x10664);
IkReal gconst5=((1.0)*r20*x10664);
IkReal x10666=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10670=IKPowWithIntegerCheck(x10666,-1);
if(!x10670.valid){
continue;
}
IkReal x10667=x10670.value;
IkReal x10668=((1.0)*x10667);
IkReal x10669=((((-1.0)*x10668*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-1.0)*x10668*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x10667)));
j4eval[0]=x10669;
j4eval[1]=r12;
j4eval[2]=x10666;
j4eval[3]=IKsign(x10669);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10671=(gconst5*r10);
IkReal x10672=(gconst4*r11);
CheckValue<IkReal> x10673 = IKatan2WithCheck(IkReal(((((-1.0)*x10672))+x10671)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10673.valid){
continue;
}
CheckValue<IkReal> x10674=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10671*x10671)))+(((2.0)*x10671*x10672))+(((-1.0)*(x10672*x10672)))+(((-1.0)*(r12*r12))))),-1);
if(!x10674.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10673.value)+(((1.5707963267949)*(x10674.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10675=IKsin(j4);
IkReal x10676=IKcos(j4);
IkReal x10677=(gconst4*r11);
IkReal x10678=(gconst5*r10);
IkReal x10679=(gconst5*r00);
IkReal x10680=(gconst5*r20);
IkReal x10681=((1.0)*x10676);
IkReal x10682=(gconst4*x10675);
IkReal x10683=((1.0)*x10675);
evalcond[0]=((((-1.0)*r22*x10681))+((r21*x10682))+(((-1.0)*x10680*x10683)));
evalcond[1]=((((-1.0)*r02*x10681))+(((-1.0)*x10679*x10683))+((r01*x10682)));
evalcond[2]=((((-1.0)*r12*x10683))+(((-1.0)*x10677*x10681))+((x10676*x10678)));
evalcond[3]=((-1.0)+(((-1.0)*x10678*x10683))+(((-1.0)*r12*x10681))+((x10675*x10677)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x10683))+((cj1*sj2))+((x10676*x10680))+(((-1.0)*gconst4*r21*x10681)));
evalcond[5]=((((-1.0)*gconst4*r01*x10681))+(((-1.0)*r02*x10683))+(((-1.0)*sj1*sj2))+((x10676*x10679))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10684=((1.0)*gconst5);
CheckValue<IkReal> x10685=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10684))+(((-1.0)*gconst4*r20)))),-1);
if(!x10685.valid){
continue;
}
CheckValue<IkReal> x10686 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10684)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10686.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10685.value)))+(x10686.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10687=IKsin(j4);
IkReal x10688=IKcos(j4);
IkReal x10689=(gconst4*r11);
IkReal x10690=(gconst5*r10);
IkReal x10691=(gconst5*r00);
IkReal x10692=(gconst5*r20);
IkReal x10693=((1.0)*x10688);
IkReal x10694=(gconst4*x10687);
IkReal x10695=((1.0)*x10687);
evalcond[0]=(((r21*x10694))+(((-1.0)*x10692*x10695))+(((-1.0)*r22*x10693)));
evalcond[1]=((((-1.0)*x10691*x10695))+(((-1.0)*r02*x10693))+((r01*x10694)));
evalcond[2]=((((-1.0)*r12*x10695))+(((-1.0)*x10689*x10693))+((x10688*x10690)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10693))+(((-1.0)*x10690*x10695))+((x10687*x10689)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst4*r21*x10693))+((cj1*sj2))+(((-1.0)*r22*x10695))+((x10688*x10692)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r02*x10695))+(((-1.0)*gconst4*r01*x10693))+((cj1*cj2))+((x10688*x10691)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10696=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10696.valid){
continue;
}
CheckValue<IkReal> x10697 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10697.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10696.value)))+(x10697.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10698=IKsin(j4);
IkReal x10699=IKcos(j4);
IkReal x10700=(gconst4*r11);
IkReal x10701=(gconst5*r10);
IkReal x10702=(gconst5*r00);
IkReal x10703=(gconst5*r20);
IkReal x10704=((1.0)*x10699);
IkReal x10705=(gconst4*x10698);
IkReal x10706=((1.0)*x10698);
evalcond[0]=((((-1.0)*r22*x10704))+((r21*x10705))+(((-1.0)*x10703*x10706)));
evalcond[1]=(((r01*x10705))+(((-1.0)*x10702*x10706))+(((-1.0)*r02*x10704)));
evalcond[2]=((((-1.0)*r12*x10706))+((x10699*x10701))+(((-1.0)*x10700*x10704)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10704))+((x10698*x10700))+(((-1.0)*x10701*x10706)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst4*r21*x10704))+((cj1*sj2))+(((-1.0)*r22*x10706))+((x10699*x10703)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*gconst4*r01*x10704))+((x10699*x10702))+(((-1.0)*r02*x10706))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x10707=((-1.0)*r21);
IkReal x10708=((-1.0)*px);
CheckValue<IkReal> x10710 = IKatan2WithCheck(IkReal(x10707),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10710.valid){
continue;
}
IkReal x10709=((1.0)*(x10710.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10709)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10708);
rxp1_1=(px*r21);
rxp1_2=(r11*x10708);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10709)));
IkReal gconst4=x10707;
IkReal gconst5=((1.0)*r20);
IkReal x10711=((1.0)*cj3);
IkReal x10712=(r10*r20);
IkReal x10713=(r11*r21);
j4eval[0]=((((-1.0)*x10713))+(((-1.0)*x10712)));
j4eval[1]=((((-1.0)*x10711*x10713))+(((-1.0)*x10711*x10712)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10714=((-1.0)*r21);
IkReal x10715=((-1.0)*px);
CheckValue<IkReal> x10717 = IKatan2WithCheck(IkReal(x10714),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10717.valid){
continue;
}
IkReal x10716=((1.0)*(x10717.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10716)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10715);
rxp1_1=(px*r21);
rxp1_2=(r11*x10715);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10716)));
IkReal gconst4=x10714;
IkReal gconst5=((1.0)*r20);
IkReal x10718=((1.0)*r11*r21);
IkReal x10719=((1.0)*r10*r20);
j4eval[0]=((((-1.0)*x10719))+(((-1.0)*x10718)));
j4eval[1]=(((sj3*x10719))+((sj3*x10718)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10720=((-1.0)*r21);
IkReal x10721=((-1.0)*px);
CheckValue<IkReal> x10723 = IKatan2WithCheck(IkReal(x10720),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10723.valid){
continue;
}
IkReal x10722=((1.0)*(x10723.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10722)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10721);
rxp1_1=(px*r21);
rxp1_2=(r11*x10721);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10722)));
IkReal gconst4=x10720;
IkReal gconst5=((1.0)*r20);
IkReal x10724=((1.0)*cj3);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=((((-1.0)*r11*r21*x10724))+(((-1.0)*r10*r20*x10724)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10725=((1.0)*r10);
CheckValue<IkReal> x10726=IKPowWithIntegerCheck(cj3,-1);
if(!x10726.valid){
continue;
}
CheckValue<IkReal> x10727=IKPowWithIntegerCheck(r02,-1);
if(!x10727.valid){
continue;
}
CheckValue<IkReal> x10728=IKPowWithIntegerCheck((((cj3*gconst4*r11))+(((-1.0)*cj3*gconst5*x10725))),-1);
if(!x10728.valid){
continue;
}
if( IKabs(((x10726.value)*(x10727.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10728.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x10725)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10726.value)*(x10727.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x10728.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x10725))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10726.value)*(x10727.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x10728.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x10725))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10729=IKsin(j4);
IkReal x10730=IKcos(j4);
IkReal x10731=(cj2*sj1);
IkReal x10732=(cj1*sj2);
IkReal x10733=(gconst5*sj3);
IkReal x10734=(gconst4*r11);
IkReal x10735=(sj1*sj2);
IkReal x10736=((1.0)*gconst5);
IkReal x10737=(cj1*cj2);
IkReal x10738=(gconst4*r21);
IkReal x10739=(cj3*gconst4);
IkReal x10740=(gconst4*sj3);
IkReal x10741=(cj3*gconst5);
IkReal x10742=(r20*x10730);
IkReal x10743=(r10*x10730);
IkReal x10744=(cj3*x10730);
IkReal x10745=(r02*x10729);
IkReal x10746=(x10731+x10732);
IkReal x10747=((1.0)*sj3*x10730);
evalcond[0]=((-1.0)*r02*x10730);
evalcond[1]=(((x10729*x10738))+(((-1.0)*r20*x10729*x10736)));
evalcond[2]=(((cj3*x10745))+(((-1.0)*x10735))+x10737);
evalcond[3]=((((-1.0)*sj3*x10745))+x10746);
evalcond[4]=((-1.0)+(((-1.0)*r10*x10729*x10736))+((x10729*x10734)));
evalcond[5]=((((-1.0)*cj3*x10736*x10743))+((r10*x10740))+((x10734*x10744))+((r11*x10733)));
evalcond[6]=(((r10*x10739))+((x10733*x10743))+(((-1.0)*x10734*x10747))+((r11*x10741)));
evalcond[7]=((((-1.0)*cj3*x10736*x10742))+((r21*x10733))+((r20*x10740))+x10746+((x10738*x10744)));
evalcond[8]=((((-1.0)*x10738*x10747))+((x10733*x10742))+((r20*x10739))+(((-1.0)*x10737))+x10735+((r21*x10741)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10748=((1.0)*gconst5);
IkReal x10749=(gconst4*r11);
CheckValue<IkReal> x10750=IKPowWithIntegerCheck(((((-1.0)*r10*x10748))+x10749),-1);
if(!x10750.valid){
continue;
}
CheckValue<IkReal> x10751=IKPowWithIntegerCheck(((((-1.0)*sj3*x10749))+((gconst5*r10*sj3))),-1);
if(!x10751.valid){
continue;
}
if( IKabs(x10750.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10751.value)*(((((-1.0)*cj3*gconst4*r10))+(((-1.0)*cj3*r11*x10748)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x10750.value)+IKsqr(((x10751.value)*(((((-1.0)*cj3*gconst4*r10))+(((-1.0)*cj3*r11*x10748))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x10750.value, ((x10751.value)*(((((-1.0)*cj3*gconst4*r10))+(((-1.0)*cj3*r11*x10748))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10752=IKsin(j4);
IkReal x10753=IKcos(j4);
IkReal x10754=(cj2*sj1);
IkReal x10755=(cj1*sj2);
IkReal x10756=(gconst5*sj3);
IkReal x10757=(gconst4*r11);
IkReal x10758=(sj1*sj2);
IkReal x10759=((1.0)*gconst5);
IkReal x10760=(cj1*cj2);
IkReal x10761=(gconst4*r21);
IkReal x10762=(cj3*gconst4);
IkReal x10763=(gconst4*sj3);
IkReal x10764=(cj3*gconst5);
IkReal x10765=(r20*x10753);
IkReal x10766=(r10*x10753);
IkReal x10767=(cj3*x10753);
IkReal x10768=(r02*x10752);
IkReal x10769=(x10754+x10755);
IkReal x10770=((1.0)*sj3*x10753);
evalcond[0]=((-1.0)*r02*x10753);
evalcond[1]=((((-1.0)*r20*x10752*x10759))+((x10752*x10761)));
evalcond[2]=(((cj3*x10768))+x10760+(((-1.0)*x10758)));
evalcond[3]=((((-1.0)*sj3*x10768))+x10769);
evalcond[4]=((-1.0)+(((-1.0)*r10*x10752*x10759))+((x10752*x10757)));
evalcond[5]=((((-1.0)*cj3*x10759*x10766))+((x10757*x10767))+((r11*x10756))+((r10*x10763)));
evalcond[6]=((((-1.0)*x10757*x10770))+((r11*x10764))+((x10756*x10766))+((r10*x10762)));
evalcond[7]=((((-1.0)*cj3*x10759*x10765))+((r20*x10763))+((x10761*x10767))+x10769+((r21*x10756)));
evalcond[8]=((((-1.0)*x10760))+((r20*x10762))+((r21*x10764))+((x10756*x10765))+(((-1.0)*x10761*x10770))+x10758);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10771=((1.0)*sj3);
IkReal x10772=(gconst4*r11);
IkReal x10773=((1.0)*gconst5*r10);
CheckValue<IkReal> x10774=IKPowWithIntegerCheck(((((-1.0)*x10773))+x10772),-1);
if(!x10774.valid){
continue;
}
CheckValue<IkReal> x10775=IKPowWithIntegerCheck((((cj3*x10772))+(((-1.0)*cj3*x10773))),-1);
if(!x10775.valid){
continue;
}
if( IKabs(x10774.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10775.value)*(((((-1.0)*gconst4*r10*x10771))+(((-1.0)*gconst5*r11*x10771)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x10774.value)+IKsqr(((x10775.value)*(((((-1.0)*gconst4*r10*x10771))+(((-1.0)*gconst5*r11*x10771))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x10774.value, ((x10775.value)*(((((-1.0)*gconst4*r10*x10771))+(((-1.0)*gconst5*r11*x10771))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10776=IKsin(j4);
IkReal x10777=IKcos(j4);
IkReal x10778=(cj2*sj1);
IkReal x10779=(cj1*sj2);
IkReal x10780=(gconst5*sj3);
IkReal x10781=(gconst4*r11);
IkReal x10782=(sj1*sj2);
IkReal x10783=((1.0)*gconst5);
IkReal x10784=(cj1*cj2);
IkReal x10785=(gconst4*r21);
IkReal x10786=(cj3*gconst4);
IkReal x10787=(gconst4*sj3);
IkReal x10788=(cj3*gconst5);
IkReal x10789=(r20*x10777);
IkReal x10790=(r10*x10777);
IkReal x10791=(cj3*x10777);
IkReal x10792=(r02*x10776);
IkReal x10793=(x10778+x10779);
IkReal x10794=((1.0)*sj3*x10777);
evalcond[0]=((-1.0)*r02*x10777);
evalcond[1]=(((x10776*x10785))+(((-1.0)*r20*x10776*x10783)));
evalcond[2]=((((-1.0)*x10782))+((cj3*x10792))+x10784);
evalcond[3]=((((-1.0)*sj3*x10792))+x10793);
evalcond[4]=((-1.0)+(((-1.0)*r10*x10776*x10783))+((x10776*x10781)));
evalcond[5]=(((r11*x10780))+(((-1.0)*cj3*x10783*x10790))+((x10781*x10791))+((r10*x10787)));
evalcond[6]=(((r11*x10788))+(((-1.0)*x10781*x10794))+((x10780*x10790))+((r10*x10786)));
evalcond[7]=(((r21*x10780))+((r20*x10787))+((x10785*x10791))+x10793+(((-1.0)*cj3*x10783*x10789)));
evalcond[8]=(((r21*x10788))+((r20*x10786))+(((-1.0)*x10785*x10794))+(((-1.0)*x10784))+((x10780*x10789))+x10782);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10795=gconst4*gconst4;
IkReal x10796=gconst5*gconst5;
IkReal x10797=(r10*r21);
IkReal x10798=((1.0)*cj3);
IkReal x10799=(r11*r21);
IkReal x10800=(r11*r20);
IkReal x10801=(r22*sj3);
IkReal x10802=(gconst4*r10);
IkReal x10803=((1.0)*sj3);
IkReal x10804=(cj3*gconst4*gconst5);
CheckValue<IkReal> x10805=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*r20*x10796*x10798))+(((-1.0)*r12*r22*x10798))+(((-1.0)*x10795*x10798*x10799))+((x10800*x10804))+((x10797*x10804)))),-1);
if(!x10805.valid){
continue;
}
CheckValue<IkReal> x10806 = IKatan2WithCheck(IkReal((((gconst5*r11*x10801))+((x10801*x10802)))),IkReal(((((-1.0)*gconst5*r20*x10802*x10803))+((sj3*x10795*x10797))+(((-1.0)*x10796*x10800*x10803))+((gconst4*gconst5*sj3*x10799)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10806.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10805.value)))+(x10806.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10807=IKsin(j4);
IkReal x10808=IKcos(j4);
IkReal x10809=(cj2*sj1);
IkReal x10810=(cj1*sj2);
IkReal x10811=(gconst5*sj3);
IkReal x10812=(gconst4*r11);
IkReal x10813=(sj1*sj2);
IkReal x10814=(gconst5*r10);
IkReal x10815=(cj1*cj2);
IkReal x10816=(gconst4*r01);
IkReal x10817=(gconst4*r21);
IkReal x10818=(gconst5*r00);
IkReal x10819=(gconst4*sj3);
IkReal x10820=(cj3*gconst5);
IkReal x10821=(cj3*gconst4);
IkReal x10822=((1.0)*x10808);
IkReal x10823=((1.0)*x10807);
IkReal x10824=(cj3*x10807);
IkReal x10825=(cj3*x10808);
IkReal x10826=(x10809+x10810);
evalcond[0]=(((x10807*x10817))+(((-1.0)*gconst5*r20*x10823))+(((-1.0)*r22*x10822)));
evalcond[1]=((((-1.0)*r02*x10822))+((x10807*x10816))+(((-1.0)*x10818*x10823)));
evalcond[2]=((-1.0)+(((-1.0)*x10814*x10823))+((x10807*x10812))+(((-1.0)*r12*x10822)));
evalcond[3]=(((r12*x10824))+(((-1.0)*cj3*x10814*x10822))+((x10812*x10825))+((r10*x10819))+((r11*x10811)));
evalcond[4]=(((r10*x10808*x10811))+((r10*x10821))+(((-1.0)*r12*sj3*x10823))+(((-1.0)*sj3*x10812*x10822))+((r11*x10820)));
evalcond[5]=(((x10817*x10825))+((r20*x10819))+(((-1.0)*r20*x10820*x10822))+((r22*x10824))+((r21*x10811))+x10826);
evalcond[6]=(((x10816*x10825))+(((-1.0)*x10813))+((r02*x10824))+((r01*x10811))+((r00*x10819))+(((-1.0)*cj3*x10818*x10822))+x10815);
evalcond[7]=((((-1.0)*sj3*x10816*x10822))+(((-1.0)*r02*sj3*x10823))+((r00*x10808*x10811))+((r00*x10821))+((r01*x10820))+x10826);
evalcond[8]=(((r21*x10820))+(((-1.0)*sj3*x10817*x10822))+(((-1.0)*x10815))+((r20*x10808*x10811))+(((-1.0)*r22*sj3*x10823))+((r20*x10821))+x10813);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10827=((1.0)*gconst5);
CheckValue<IkReal> x10828=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10827))+(((-1.0)*gconst4*r20)))),-1);
if(!x10828.valid){
continue;
}
CheckValue<IkReal> x10829 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10827)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10829.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10828.value)))+(x10829.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10830=IKsin(j4);
IkReal x10831=IKcos(j4);
IkReal x10832=(cj2*sj1);
IkReal x10833=(cj1*sj2);
IkReal x10834=(gconst5*sj3);
IkReal x10835=(gconst4*r11);
IkReal x10836=(sj1*sj2);
IkReal x10837=(gconst5*r10);
IkReal x10838=(cj1*cj2);
IkReal x10839=(gconst4*r01);
IkReal x10840=(gconst4*r21);
IkReal x10841=(gconst5*r00);
IkReal x10842=(gconst4*sj3);
IkReal x10843=(cj3*gconst5);
IkReal x10844=(cj3*gconst4);
IkReal x10845=((1.0)*x10831);
IkReal x10846=((1.0)*x10830);
IkReal x10847=(cj3*x10830);
IkReal x10848=(cj3*x10831);
IkReal x10849=(x10833+x10832);
evalcond[0]=((((-1.0)*r22*x10845))+((x10830*x10840))+(((-1.0)*gconst5*r20*x10846)));
evalcond[1]=((((-1.0)*r02*x10845))+(((-1.0)*x10841*x10846))+((x10830*x10839)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x10845))+(((-1.0)*x10837*x10846))+((x10830*x10835)));
evalcond[3]=((((-1.0)*cj3*x10837*x10845))+((r12*x10847))+((r10*x10842))+((x10835*x10848))+((r11*x10834)));
evalcond[4]=((((-1.0)*sj3*x10835*x10845))+((r10*x10831*x10834))+((r11*x10843))+(((-1.0)*r12*sj3*x10846))+((r10*x10844)));
evalcond[5]=(((x10840*x10848))+((r22*x10847))+(((-1.0)*r20*x10843*x10845))+((r20*x10842))+((r21*x10834))+x10849);
evalcond[6]=((((-1.0)*x10836))+((r00*x10842))+((r02*x10847))+(((-1.0)*cj3*x10841*x10845))+((x10839*x10848))+((r01*x10834))+x10838);
evalcond[7]=(((r01*x10843))+((r00*x10844))+(((-1.0)*sj3*x10839*x10845))+(((-1.0)*r02*sj3*x10846))+((r00*x10831*x10834))+x10849);
evalcond[8]=((((-1.0)*x10838))+(((-1.0)*r22*sj3*x10846))+((r21*x10843))+((r20*x10844))+(((-1.0)*sj3*x10840*x10845))+((r20*x10831*x10834))+x10836);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10850=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10850.valid){
continue;
}
CheckValue<IkReal> x10851 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10851.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10850.value)))+(x10851.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10852=IKsin(j4);
IkReal x10853=IKcos(j4);
IkReal x10854=(cj2*sj1);
IkReal x10855=(cj1*sj2);
IkReal x10856=(gconst5*sj3);
IkReal x10857=(gconst4*r11);
IkReal x10858=(sj1*sj2);
IkReal x10859=(gconst5*r10);
IkReal x10860=(cj1*cj2);
IkReal x10861=(gconst4*r01);
IkReal x10862=(gconst4*r21);
IkReal x10863=(gconst5*r00);
IkReal x10864=(gconst4*sj3);
IkReal x10865=(cj3*gconst5);
IkReal x10866=(cj3*gconst4);
IkReal x10867=((1.0)*x10853);
IkReal x10868=((1.0)*x10852);
IkReal x10869=(cj3*x10852);
IkReal x10870=(cj3*x10853);
IkReal x10871=(x10855+x10854);
evalcond[0]=((((-1.0)*r22*x10867))+(((-1.0)*gconst5*r20*x10868))+((x10852*x10862)));
evalcond[1]=((((-1.0)*x10863*x10868))+(((-1.0)*r02*x10867))+((x10852*x10861)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x10867))+(((-1.0)*x10859*x10868))+((x10852*x10857)));
evalcond[3]=(((r11*x10856))+(((-1.0)*cj3*x10859*x10867))+((r12*x10869))+((r10*x10864))+((x10857*x10870)));
evalcond[4]=(((r11*x10865))+(((-1.0)*sj3*x10857*x10867))+((r10*x10866))+(((-1.0)*r12*sj3*x10868))+((r10*x10853*x10856)));
evalcond[5]=(((r21*x10856))+(((-1.0)*r20*x10865*x10867))+((r20*x10864))+((r22*x10869))+((x10862*x10870))+x10871);
evalcond[6]=(((r01*x10856))+((r00*x10864))+(((-1.0)*x10858))+((x10861*x10870))+(((-1.0)*cj3*x10863*x10867))+((r02*x10869))+x10860);
evalcond[7]=(((r00*x10853*x10856))+(((-1.0)*sj3*x10861*x10867))+((r00*x10866))+((r01*x10865))+(((-1.0)*r02*sj3*x10868))+x10871);
evalcond[8]=(((r20*x10853*x10856))+(((-1.0)*r22*sj3*x10868))+(((-1.0)*sj3*x10862*x10867))+((r21*x10865))+((r20*x10866))+(((-1.0)*x10860))+x10858);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10872=((-1.0)*r21);
CheckValue<IkReal> x10875 = IKatan2WithCheck(IkReal(x10872),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10875.valid){
continue;
}
IkReal x10873=((1.0)*(x10875.value));
IkReal x10874=x10152;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10873)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10873)));
IkReal gconst4=(x10872*x10874);
IkReal gconst5=((1.0)*r20*x10874);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10876=((-1.0)*r21);
CheckValue<IkReal> x10879 = IKatan2WithCheck(IkReal(x10876),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10879.valid){
continue;
}
IkReal x10877=((1.0)*(x10879.value));
IkReal x10878=x10152;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10877)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10877)));
IkReal gconst4=(x10876*x10878);
IkReal gconst5=((1.0)*r20*x10878);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10880=((-1.0)*r21);
CheckValue<IkReal> x10883 = IKatan2WithCheck(IkReal(x10880),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10883.valid){
continue;
}
IkReal x10881=((1.0)*(x10883.value));
IkReal x10882=x10152;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10881)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10881)));
IkReal gconst4=(x10880*x10882);
IkReal gconst5=((1.0)*r20*x10882);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10884=((-1.0)*r21);
CheckValue<IkReal> x10887 = IKatan2WithCheck(IkReal(x10884),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10887.valid){
continue;
}
IkReal x10885=((1.0)*(x10887.value));
IkReal x10886=x10152;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10885)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10885)));
IkReal gconst4=(x10884*x10886);
IkReal gconst5=((1.0)*r20*x10886);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10888=((-1.0)*r21);
CheckValue<IkReal> x10891 = IKatan2WithCheck(IkReal(x10888),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10891.valid){
continue;
}
IkReal x10889=((1.0)*(x10891.value));
IkReal x10890=x10152;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10889)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10889)));
IkReal gconst4=(x10888*x10890);
IkReal gconst5=((1.0)*r20*x10890);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10892=((-1.0)*r21);
CheckValue<IkReal> x10895 = IKatan2WithCheck(IkReal(x10892),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10895.valid){
continue;
}
IkReal x10893=((1.0)*(x10895.value));
IkReal x10894=x10152;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10893)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10893)));
IkReal gconst4=(x10892*x10894);
IkReal gconst5=((1.0)*r20*x10894);
IkReal x10896=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10900=IKPowWithIntegerCheck(x10896,-1);
if(!x10900.valid){
continue;
}
IkReal x10897=x10900.value;
IkReal x10898=((1.0)*x10897);
IkReal x10899=((((-1.0)*(r02*r02)))+(((-1.0)*x10898*(r00*r00)*(r20*r20)))+(((-1.0)*x10898*(r01*r01)*(r21*r21)))+(((-2.0)*r00*r01*r20*r21*x10897)));
j4eval[0]=x10899;
j4eval[1]=r02;
j4eval[2]=x10896;
j4eval[3]=IKsign(x10899);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10901=(gconst5*r00);
IkReal x10902=(gconst4*r01);
CheckValue<IkReal> x10903=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x10901*x10901)))+(((-1.0)*(x10902*x10902)))+(((2.0)*x10901*x10902)))),-1);
if(!x10903.valid){
continue;
}
CheckValue<IkReal> x10904 = IKatan2WithCheck(IkReal(((((-1.0)*x10902))+x10901)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x10904.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10903.value)))+(x10904.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10905=IKsin(j4);
IkReal x10906=IKcos(j4);
IkReal x10907=(gconst4*r11);
IkReal x10908=((1.0)*cj1);
IkReal x10909=(gconst5*r10);
IkReal x10910=(gconst4*r01);
IkReal x10911=(gconst5*r00);
IkReal x10912=(gconst4*r21);
IkReal x10913=(gconst5*r20);
IkReal x10914=((1.0)*x10906);
IkReal x10915=((1.0)*x10905);
evalcond[0]=((((-1.0)*r22*x10914))+((x10905*x10912))+(((-1.0)*x10913*x10915)));
evalcond[1]=((((-1.0)*r12*x10914))+((x10905*x10907))+(((-1.0)*x10909*x10915)));
evalcond[2]=((((-1.0)*r02*x10915))+(((-1.0)*x10910*x10914))+((x10906*x10911)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10914))+(((-1.0)*x10911*x10915))+((x10905*x10910)));
evalcond[4]=((((-1.0)*r22*x10915))+((sj1*sj2))+(((-1.0)*x10912*x10914))+((x10906*x10913))+(((-1.0)*cj2*x10908)));
evalcond[5]=((((-1.0)*r12*x10915))+(((-1.0)*cj2*sj1))+((x10906*x10909))+(((-1.0)*sj2*x10908))+(((-1.0)*x10907*x10914)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10916=((1.0)*gconst5);
CheckValue<IkReal> x10917=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10916))+(((-1.0)*gconst4*r10)))),-1);
if(!x10917.valid){
continue;
}
CheckValue<IkReal> x10918 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10916))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10918.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10917.value)))+(x10918.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10919=IKsin(j4);
IkReal x10920=IKcos(j4);
IkReal x10921=(gconst4*r11);
IkReal x10922=((1.0)*cj1);
IkReal x10923=(gconst5*r10);
IkReal x10924=(gconst4*r01);
IkReal x10925=(gconst5*r00);
IkReal x10926=(gconst4*r21);
IkReal x10927=(gconst5*r20);
IkReal x10928=((1.0)*x10920);
IkReal x10929=((1.0)*x10919);
evalcond[0]=((((-1.0)*r22*x10928))+(((-1.0)*x10927*x10929))+((x10919*x10926)));
evalcond[1]=((((-1.0)*r12*x10928))+((x10919*x10921))+(((-1.0)*x10923*x10929)));
evalcond[2]=((((-1.0)*r02*x10929))+(((-1.0)*x10924*x10928))+((x10920*x10925)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10928))+(((-1.0)*x10925*x10929))+((x10919*x10924)));
evalcond[4]=((((-1.0)*r22*x10929))+((sj1*sj2))+(((-1.0)*cj2*x10922))+((x10920*x10927))+(((-1.0)*x10926*x10928)));
evalcond[5]=((((-1.0)*sj2*x10922))+(((-1.0)*r12*x10929))+(((-1.0)*cj2*sj1))+(((-1.0)*x10921*x10928))+((x10920*x10923)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10930 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10930.valid){
continue;
}
CheckValue<IkReal> x10931=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10931.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10930.value)+(((1.5707963267949)*(x10931.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10932=IKsin(j4);
IkReal x10933=IKcos(j4);
IkReal x10934=(gconst4*r11);
IkReal x10935=((1.0)*cj1);
IkReal x10936=(gconst5*r10);
IkReal x10937=(gconst4*r01);
IkReal x10938=(gconst5*r00);
IkReal x10939=(gconst4*r21);
IkReal x10940=(gconst5*r20);
IkReal x10941=((1.0)*x10933);
IkReal x10942=((1.0)*x10932);
evalcond[0]=(((x10932*x10939))+(((-1.0)*r22*x10941))+(((-1.0)*x10940*x10942)));
evalcond[1]=((((-1.0)*x10936*x10942))+((x10932*x10934))+(((-1.0)*r12*x10941)));
evalcond[2]=(((x10933*x10938))+(((-1.0)*r02*x10942))+(((-1.0)*x10937*x10941)));
evalcond[3]=((-1.0)+((x10932*x10937))+(((-1.0)*x10938*x10942))+(((-1.0)*r02*x10941)));
evalcond[4]=((((-1.0)*x10939*x10941))+((sj1*sj2))+(((-1.0)*r22*x10942))+((x10933*x10940))+(((-1.0)*cj2*x10935)));
evalcond[5]=(((x10933*x10936))+(((-1.0)*x10934*x10941))+(((-1.0)*cj2*sj1))+(((-1.0)*r12*x10942))+(((-1.0)*sj2*x10935)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10943=((-1.0)*r21);
CheckValue<IkReal> x10946 = IKatan2WithCheck(IkReal(x10943),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10946.valid){
continue;
}
IkReal x10944=((1.0)*(x10946.value));
IkReal x10945=x10152;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10944)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10944)));
IkReal gconst4=(x10943*x10945);
IkReal gconst5=((1.0)*r20*x10945);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10947=((-1.0)*r21);
CheckValue<IkReal> x10950 = IKatan2WithCheck(IkReal(x10947),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10950.valid){
continue;
}
IkReal x10948=((1.0)*(x10950.value));
IkReal x10949=x10152;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10948)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10948)));
IkReal gconst4=(x10947*x10949);
IkReal gconst5=((1.0)*r20*x10949);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10951=((-1.0)*r21);
CheckValue<IkReal> x10954 = IKatan2WithCheck(IkReal(x10951),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10954.valid){
continue;
}
IkReal x10952=((1.0)*(x10954.value));
IkReal x10953=x10152;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10952)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10952)));
IkReal gconst4=(x10951*x10953);
IkReal gconst5=((1.0)*r20*x10953);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10955=(gconst4*r01);
IkReal x10956=(gconst5*r00);
CheckValue<IkReal> x10957=IKPowWithIntegerCheck(IKsign(((x10955*x10955)+(((-2.0)*x10955*x10956))+(x10956*x10956)+(r02*r02))),-1);
if(!x10957.valid){
continue;
}
CheckValue<IkReal> x10958 = IKatan2WithCheck(IkReal(((((-1.0)*x10956))+x10955)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10958.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10957.value)))+(x10958.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10959=IKcos(j4);
IkReal x10960=IKsin(j4);
IkReal x10961=(gconst4*r11);
IkReal x10962=(gconst5*r10);
IkReal x10963=((1.0)*cj1);
IkReal x10964=(gconst5*r00);
IkReal x10965=(gconst5*r20);
IkReal x10966=((1.0)*x10959);
IkReal x10967=(gconst4*x10959);
IkReal x10968=((1.0)*x10960);
IkReal x10969=(gconst4*x10960);
evalcond[0]=(((r02*x10960))+((r01*x10967))+(((-1.0)*x10964*x10966)));
evalcond[1]=((((-1.0)*r22*x10966))+((r21*x10969))+(((-1.0)*x10965*x10968)));
evalcond[2]=(((x10960*x10961))+(((-1.0)*x10962*x10968))+(((-1.0)*r12*x10966)));
evalcond[3]=((-1.0)+((r01*x10969))+(((-1.0)*r02*x10966))+(((-1.0)*x10964*x10968)));
evalcond[4]=(((r22*x10960))+((sj1*sj2))+((r21*x10967))+(((-1.0)*x10965*x10966))+(((-1.0)*cj2*x10963)));
evalcond[5]=(((x10959*x10961))+(((-1.0)*cj2*sj1))+(((-1.0)*x10962*x10966))+(((-1.0)*sj2*x10963))+((r12*x10960)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10970=((1.0)*gconst5);
CheckValue<IkReal> x10971=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10970))+(((-1.0)*gconst4*r10)))),-1);
if(!x10971.valid){
continue;
}
CheckValue<IkReal> x10972 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10970))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10972.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10971.value)))+(x10972.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10973=IKcos(j4);
IkReal x10974=IKsin(j4);
IkReal x10975=(gconst4*r11);
IkReal x10976=(gconst5*r10);
IkReal x10977=((1.0)*cj1);
IkReal x10978=(gconst5*r00);
IkReal x10979=(gconst5*r20);
IkReal x10980=((1.0)*x10973);
IkReal x10981=(gconst4*x10973);
IkReal x10982=((1.0)*x10974);
IkReal x10983=(gconst4*x10974);
evalcond[0]=(((r02*x10974))+((r01*x10981))+(((-1.0)*x10978*x10980)));
evalcond[1]=(((r21*x10983))+(((-1.0)*r22*x10980))+(((-1.0)*x10979*x10982)));
evalcond[2]=((((-1.0)*r12*x10980))+((x10974*x10975))+(((-1.0)*x10976*x10982)));
evalcond[3]=((-1.0)+((r01*x10983))+(((-1.0)*r02*x10980))+(((-1.0)*x10978*x10982)));
evalcond[4]=((((-1.0)*cj2*x10977))+((r21*x10981))+((r22*x10974))+((sj1*sj2))+(((-1.0)*x10979*x10980)));
evalcond[5]=((((-1.0)*cj2*sj1))+((x10973*x10975))+(((-1.0)*sj2*x10977))+((r12*x10974))+(((-1.0)*x10976*x10980)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10984 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10984.valid){
continue;
}
CheckValue<IkReal> x10985=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10985.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10984.value)+(((1.5707963267949)*(x10985.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10986=IKcos(j4);
IkReal x10987=IKsin(j4);
IkReal x10988=(gconst4*r11);
IkReal x10989=(gconst5*r10);
IkReal x10990=((1.0)*cj1);
IkReal x10991=(gconst5*r00);
IkReal x10992=(gconst5*r20);
IkReal x10993=((1.0)*x10986);
IkReal x10994=(gconst4*x10986);
IkReal x10995=((1.0)*x10987);
IkReal x10996=(gconst4*x10987);
evalcond[0]=(((r01*x10994))+(((-1.0)*x10991*x10993))+((r02*x10987)));
evalcond[1]=((((-1.0)*x10992*x10995))+((r21*x10996))+(((-1.0)*r22*x10993)));
evalcond[2]=(((x10987*x10988))+(((-1.0)*x10989*x10995))+(((-1.0)*r12*x10993)));
evalcond[3]=((-1.0)+((r01*x10996))+(((-1.0)*x10991*x10995))+(((-1.0)*r02*x10993)));
evalcond[4]=(((r22*x10987))+(((-1.0)*x10992*x10993))+((r21*x10994))+(((-1.0)*cj2*x10990))+((sj1*sj2)));
evalcond[5]=(((r12*x10987))+(((-1.0)*x10989*x10993))+(((-1.0)*sj2*x10990))+((x10986*x10988))+(((-1.0)*cj2*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10997=((-1.0)*r21);
CheckValue<IkReal> x11000 = IKatan2WithCheck(IkReal(x10997),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11000.valid){
continue;
}
IkReal x10998=((1.0)*(x11000.value));
IkReal x10999=x10152;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10998)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10998)));
IkReal gconst4=(x10997*x10999);
IkReal gconst5=((1.0)*r20*x10999);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11001=((-1.0)*r21);
CheckValue<IkReal> x11004 = IKatan2WithCheck(IkReal(x11001),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11004.valid){
continue;
}
IkReal x11002=((1.0)*(x11004.value));
IkReal x11003=x10152;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11002)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11002)));
IkReal gconst4=(x11001*x11003);
IkReal gconst5=((1.0)*r20*x11003);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11005=((-1.0)*r21);
CheckValue<IkReal> x11008 = IKatan2WithCheck(IkReal(x11005),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11008.valid){
continue;
}
IkReal x11006=((1.0)*(x11008.value));
IkReal x11007=x10152;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11006)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11006)));
IkReal gconst4=(x11005*x11007);
IkReal gconst5=((1.0)*r20*x11007);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11009=(gconst4*r01);
IkReal x11010=(gconst5*r00);
CheckValue<IkReal> x11011=IKPowWithIntegerCheck(IKsign(((x11010*x11010)+(((-2.0)*x11009*x11010))+(r02*r02)+(x11009*x11009))),-1);
if(!x11011.valid){
continue;
}
CheckValue<IkReal> x11012 = IKatan2WithCheck(IkReal((x11009+(((-1.0)*x11010)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11012.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11011.value)))+(x11012.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11013=IKcos(j4);
IkReal x11014=IKsin(j4);
IkReal x11015=(gconst4*r11);
IkReal x11016=(gconst5*r10);
IkReal x11017=(gconst5*r00);
IkReal x11018=(gconst5*r20);
IkReal x11019=((1.0)*x11013);
IkReal x11020=(gconst4*x11013);
IkReal x11021=((1.0)*x11014);
IkReal x11022=(gconst4*x11014);
evalcond[0]=(((r01*x11020))+(((-1.0)*x11017*x11019))+((r02*x11014)));
evalcond[1]=((((-1.0)*r22*x11019))+((r21*x11022))+(((-1.0)*x11018*x11021)));
evalcond[2]=((((-1.0)*r12*x11019))+(((-1.0)*x11016*x11021))+((x11014*x11015)));
evalcond[3]=((-1.0)+((r01*x11022))+(((-1.0)*r02*x11019))+(((-1.0)*x11017*x11021)));
evalcond[4]=(((cj2*sj1))+((r21*x11020))+(((-1.0)*x11018*x11019))+((cj1*sj2))+((r22*x11014)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x11013*x11015))+((r12*x11014))+(((-1.0)*x11016*x11019)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11023=((1.0)*gconst5);
CheckValue<IkReal> x11024 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x11023))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11024.valid){
continue;
}
CheckValue<IkReal> x11025=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11023))+(((-1.0)*gconst4*r10)))),-1);
if(!x11025.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11024.value)+(((1.5707963267949)*(x11025.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11026=IKcos(j4);
IkReal x11027=IKsin(j4);
IkReal x11028=(gconst4*r11);
IkReal x11029=(gconst5*r10);
IkReal x11030=(gconst5*r00);
IkReal x11031=(gconst5*r20);
IkReal x11032=((1.0)*x11026);
IkReal x11033=(gconst4*x11026);
IkReal x11034=((1.0)*x11027);
IkReal x11035=(gconst4*x11027);
evalcond[0]=(((r01*x11033))+(((-1.0)*x11030*x11032))+((r02*x11027)));
evalcond[1]=(((r21*x11035))+(((-1.0)*x11031*x11034))+(((-1.0)*r22*x11032)));
evalcond[2]=((((-1.0)*x11029*x11034))+((x11027*x11028))+(((-1.0)*r12*x11032)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11032))+((r01*x11035))+(((-1.0)*x11030*x11034)));
evalcond[4]=(((cj2*sj1))+((r21*x11033))+((cj1*sj2))+(((-1.0)*x11031*x11032))+((r22*x11027)));
evalcond[5]=(((x11026*x11028))+(((-1.0)*x11029*x11032))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x11027)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11036 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11036.valid){
continue;
}
CheckValue<IkReal> x11037=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11037.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11036.value)+(((1.5707963267949)*(x11037.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11038=IKcos(j4);
IkReal x11039=IKsin(j4);
IkReal x11040=(gconst4*r11);
IkReal x11041=(gconst5*r10);
IkReal x11042=(gconst5*r00);
IkReal x11043=(gconst5*r20);
IkReal x11044=((1.0)*x11038);
IkReal x11045=(gconst4*x11038);
IkReal x11046=((1.0)*x11039);
IkReal x11047=(gconst4*x11039);
evalcond[0]=(((r01*x11045))+(((-1.0)*x11042*x11044))+((r02*x11039)));
evalcond[1]=((((-1.0)*r22*x11044))+(((-1.0)*x11043*x11046))+((r21*x11047)));
evalcond[2]=((((-1.0)*x11041*x11046))+(((-1.0)*r12*x11044))+((x11039*x11040)));
evalcond[3]=((-1.0)+((r01*x11047))+(((-1.0)*x11042*x11046))+(((-1.0)*r02*x11044)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x11043*x11044))+((r22*x11039))+((r21*x11045)));
evalcond[5]=((((-1.0)*x11041*x11044))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x11039))+((x11038*x11040)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x11048=((-1.0)*r21);
CheckValue<IkReal> x11051 = IKatan2WithCheck(IkReal(x11048),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11051.valid){
continue;
}
IkReal x11049=((1.0)*(x11051.value));
IkReal x11050=x10152;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11049)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11049)));
IkReal gconst4=(x11048*x11050);
IkReal gconst5=((1.0)*r20*x11050);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11052=((-1.0)*r21);
CheckValue<IkReal> x11055 = IKatan2WithCheck(IkReal(x11052),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11055.valid){
continue;
}
IkReal x11053=((1.0)*(x11055.value));
IkReal x11054=x10152;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11053)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11053)));
IkReal gconst4=(x11052*x11054);
IkReal gconst5=((1.0)*r20*x11054);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11056=((-1.0)*r21);
CheckValue<IkReal> x11059 = IKatan2WithCheck(IkReal(x11056),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11059.valid){
continue;
}
IkReal x11057=((1.0)*(x11059.value));
IkReal x11058=x10152;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11057)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11057)));
IkReal gconst4=(x11056*x11058);
IkReal gconst5=((1.0)*r20*x11058);
IkReal x11060=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11064=IKPowWithIntegerCheck(x11060,-1);
if(!x11064.valid){
continue;
}
IkReal x11061=x11064.value;
IkReal x11062=((1.0)*x11061);
IkReal x11063=((((-1.0)*x11062*(r00*r00)*(r20*r20)))+(((-2.0)*r00*r01*r20*r21*x11061))+(((-1.0)*(r02*r02)))+(((-1.0)*x11062*(r01*r01)*(r21*r21))));
j4eval[0]=x11063;
j4eval[1]=r02;
j4eval[2]=x11060;
j4eval[3]=IKsign(x11063);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11065=(gconst5*r00);
IkReal x11066=(gconst4*r01);
CheckValue<IkReal> x11067 = IKatan2WithCheck(IkReal((x11065+(((-1.0)*x11066)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11067.valid){
continue;
}
CheckValue<IkReal> x11068=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x11065*x11065)))+(((-1.0)*(x11066*x11066)))+(((2.0)*x11065*x11066)))),-1);
if(!x11068.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11067.value)+(((1.5707963267949)*(x11068.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11069=IKsin(j4);
IkReal x11070=IKcos(j4);
IkReal x11071=(gconst4*r11);
IkReal x11072=(gconst5*r10);
IkReal x11073=(gconst4*r01);
IkReal x11074=(gconst5*r00);
IkReal x11075=(gconst4*r21);
IkReal x11076=(gconst5*r20);
IkReal x11077=((1.0)*x11070);
IkReal x11078=((1.0)*x11069);
evalcond[0]=(((x11069*x11075))+(((-1.0)*x11076*x11078))+(((-1.0)*r22*x11077)));
evalcond[1]=((((-1.0)*x11072*x11078))+((x11069*x11071))+(((-1.0)*r12*x11077)));
evalcond[2]=((((-1.0)*x11073*x11077))+(((-1.0)*r02*x11078))+((x11070*x11074)));
evalcond[3]=((-1.0)+((x11069*x11073))+(((-1.0)*r02*x11077))+(((-1.0)*x11074*x11078)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x11075*x11077))+(((-1.0)*r22*x11078))+((x11070*x11076)));
evalcond[5]=((((-1.0)*x11071*x11077))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x11070*x11072))+(((-1.0)*r12*x11078)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11079=((1.0)*gconst5);
CheckValue<IkReal> x11080 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x11079))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11080.valid){
continue;
}
CheckValue<IkReal> x11081=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11079))+(((-1.0)*gconst4*r10)))),-1);
if(!x11081.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11080.value)+(((1.5707963267949)*(x11081.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11082=IKsin(j4);
IkReal x11083=IKcos(j4);
IkReal x11084=(gconst4*r11);
IkReal x11085=(gconst5*r10);
IkReal x11086=(gconst4*r01);
IkReal x11087=(gconst5*r00);
IkReal x11088=(gconst4*r21);
IkReal x11089=(gconst5*r20);
IkReal x11090=((1.0)*x11083);
IkReal x11091=((1.0)*x11082);
evalcond[0]=(((x11082*x11088))+(((-1.0)*r22*x11090))+(((-1.0)*x11089*x11091)));
evalcond[1]=((((-1.0)*r12*x11090))+((x11082*x11084))+(((-1.0)*x11085*x11091)));
evalcond[2]=((((-1.0)*x11086*x11090))+(((-1.0)*r02*x11091))+((x11083*x11087)));
evalcond[3]=((-1.0)+((x11082*x11086))+(((-1.0)*r02*x11090))+(((-1.0)*x11087*x11091)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x11091))+((cj1*sj2))+((x11083*x11089))+(((-1.0)*x11088*x11090)));
evalcond[5]=((((-1.0)*r12*x11091))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11084*x11090))+((x11083*x11085)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11092 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11092.valid){
continue;
}
CheckValue<IkReal> x11093=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11093.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11092.value)+(((1.5707963267949)*(x11093.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11094=IKsin(j4);
IkReal x11095=IKcos(j4);
IkReal x11096=(gconst4*r11);
IkReal x11097=(gconst5*r10);
IkReal x11098=(gconst4*r01);
IkReal x11099=(gconst5*r00);
IkReal x11100=(gconst4*r21);
IkReal x11101=(gconst5*r20);
IkReal x11102=((1.0)*x11095);
IkReal x11103=((1.0)*x11094);
evalcond[0]=((((-1.0)*x11101*x11103))+((x11094*x11100))+(((-1.0)*r22*x11102)));
evalcond[1]=((((-1.0)*x11097*x11103))+(((-1.0)*r12*x11102))+((x11094*x11096)));
evalcond[2]=((((-1.0)*x11098*x11102))+(((-1.0)*r02*x11103))+((x11095*x11099)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11102))+((x11094*x11098))+(((-1.0)*x11099*x11103)));
evalcond[4]=(((cj2*sj1))+((x11095*x11101))+((cj1*sj2))+(((-1.0)*x11100*x11102))+(((-1.0)*r22*x11103)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11096*x11102))+(((-1.0)*r12*x11103))+((x11095*x11097)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r12);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11104=gconst4*gconst4;
IkReal x11105=gconst5*gconst5;
IkReal x11106=(r01*r20);
IkReal x11107=(gconst4*sj3);
IkReal x11108=(r01*r21);
IkReal x11109=((1.0)*cj3);
IkReal x11110=(r00*r21);
IkReal x11111=(r00*r20);
IkReal x11112=(cj3*gconst4*gconst5);
IkReal x11113=((1.0)*x11105);
CheckValue<IkReal> x11114 = IKatan2WithCheck(IkReal((((r00*r22*x11107))+((gconst5*r01*r22*sj3)))),IkReal(((((-1.0)*sj3*x11106*x11113))+((sj3*x11104*x11110))+((gconst5*x11107*x11108))+(((-1.0)*gconst5*x11107*x11111)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11114.valid){
continue;
}
CheckValue<IkReal> x11115=IKPowWithIntegerCheck(IKsign((((x11106*x11112))+(((-1.0)*x11104*x11108*x11109))+(((-1.0)*r02*r22*x11109))+((x11110*x11112))+(((-1.0)*x11105*x11109*x11111)))),-1);
if(!x11115.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11114.value)+(((1.5707963267949)*(x11115.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11116=IKsin(j4);
IkReal x11117=IKcos(j4);
IkReal x11118=(sj1*sj2);
IkReal x11119=(gconst5*sj3);
IkReal x11120=(gconst4*r11);
IkReal x11121=(gconst5*r10);
IkReal x11122=((1.0)*cj1);
IkReal x11123=(gconst4*r01);
IkReal x11124=(cj2*sj1);
IkReal x11125=(gconst5*r00);
IkReal x11126=(gconst4*sj3);
IkReal x11127=(cj3*gconst5);
IkReal x11128=(cj3*gconst4);
IkReal x11129=(gconst4*r21);
IkReal x11130=(cj2*x11122);
IkReal x11131=((1.0)*x11117);
IkReal x11132=((1.0)*x11116);
IkReal x11133=(cj3*x11116);
IkReal x11134=(cj3*x11117);
evalcond[0]=((((-1.0)*r22*x11131))+((x11116*x11129))+(((-1.0)*gconst5*r20*x11132)));
evalcond[1]=((((-1.0)*x11121*x11132))+((x11116*x11120))+(((-1.0)*r12*x11131)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x11131))+((x11116*x11123))+(((-1.0)*x11125*x11132)));
evalcond[3]=(((r02*x11133))+((x11123*x11134))+(((-1.0)*cj3*x11125*x11131))+((r00*x11126))+((r01*x11119)));
evalcond[4]=((((-1.0)*r02*sj3*x11132))+(((-1.0)*sj3*x11123*x11131))+((r00*x11117*x11119))+((r00*x11128))+((r01*x11127)));
evalcond[5]=(((r22*x11133))+(((-1.0)*r20*x11127*x11131))+((cj1*sj2))+x11124+((r21*x11119))+((r21*x11117*x11128))+((r20*x11126)));
evalcond[6]=((((-1.0)*cj3*x11121*x11131))+((x11120*x11134))+((r10*x11126))+x11118+(((-1.0)*x11130))+((r11*x11119))+((r12*x11133)));
evalcond[7]=(((r21*x11127))+(((-1.0)*r21*x11126*x11131))+x11118+(((-1.0)*r22*sj3*x11132))+(((-1.0)*x11130))+((r20*x11117*x11119))+((r20*x11128)));
evalcond[8]=((((-1.0)*sj3*x11120*x11131))+(((-1.0)*x11124))+((r10*x11117*x11119))+(((-1.0)*r12*sj3*x11132))+((r10*x11128))+((r11*x11127))+(((-1.0)*sj2*x11122)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11135=((1.0)*gconst5);
CheckValue<IkReal> x11136=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11135))+(((-1.0)*gconst4*r10)))),-1);
if(!x11136.valid){
continue;
}
CheckValue<IkReal> x11137 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x11135))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11137.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11136.value)))+(x11137.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11138=IKsin(j4);
IkReal x11139=IKcos(j4);
IkReal x11140=(sj1*sj2);
IkReal x11141=(gconst5*sj3);
IkReal x11142=(gconst4*r11);
IkReal x11143=(gconst5*r10);
IkReal x11144=((1.0)*cj1);
IkReal x11145=(gconst4*r01);
IkReal x11146=(cj2*sj1);
IkReal x11147=(gconst5*r00);
IkReal x11148=(gconst4*sj3);
IkReal x11149=(cj3*gconst5);
IkReal x11150=(cj3*gconst4);
IkReal x11151=(gconst4*r21);
IkReal x11152=(cj2*x11144);
IkReal x11153=((1.0)*x11139);
IkReal x11154=((1.0)*x11138);
IkReal x11155=(cj3*x11138);
IkReal x11156=(cj3*x11139);
evalcond[0]=((((-1.0)*gconst5*r20*x11154))+(((-1.0)*r22*x11153))+((x11138*x11151)));
evalcond[1]=(((x11138*x11142))+(((-1.0)*r12*x11153))+(((-1.0)*x11143*x11154)));
evalcond[2]=((-1.0)+((x11138*x11145))+(((-1.0)*r02*x11153))+(((-1.0)*x11147*x11154)));
evalcond[3]=(((r01*x11141))+((r00*x11148))+(((-1.0)*cj3*x11147*x11153))+((r02*x11155))+((x11145*x11156)));
evalcond[4]=(((r01*x11149))+((r00*x11150))+(((-1.0)*sj3*x11145*x11153))+((r00*x11139*x11141))+(((-1.0)*r02*sj3*x11154)));
evalcond[5]=(((r22*x11155))+((r21*x11141))+((cj1*sj2))+(((-1.0)*r20*x11149*x11153))+x11146+((r20*x11148))+((r21*x11139*x11150)));
evalcond[6]=((((-1.0)*cj3*x11143*x11153))+((r11*x11141))+x11140+((r12*x11155))+((x11142*x11156))+((r10*x11148))+(((-1.0)*x11152)));
evalcond[7]=(((r20*x11139*x11141))+((r21*x11149))+x11140+(((-1.0)*r21*x11148*x11153))+((r20*x11150))+(((-1.0)*r22*sj3*x11154))+(((-1.0)*x11152)));
evalcond[8]=((((-1.0)*sj3*x11142*x11153))+(((-1.0)*r12*sj3*x11154))+(((-1.0)*x11146))+((r11*x11149))+((r10*x11139*x11141))+((r10*x11150))+(((-1.0)*sj2*x11144)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11157 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11157.valid){
continue;
}
CheckValue<IkReal> x11158=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11158.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11157.value)+(((1.5707963267949)*(x11158.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11159=IKsin(j4);
IkReal x11160=IKcos(j4);
IkReal x11161=(sj1*sj2);
IkReal x11162=(gconst5*sj3);
IkReal x11163=(gconst4*r11);
IkReal x11164=(gconst5*r10);
IkReal x11165=((1.0)*cj1);
IkReal x11166=(gconst4*r01);
IkReal x11167=(cj2*sj1);
IkReal x11168=(gconst5*r00);
IkReal x11169=(gconst4*sj3);
IkReal x11170=(cj3*gconst5);
IkReal x11171=(cj3*gconst4);
IkReal x11172=(gconst4*r21);
IkReal x11173=(cj2*x11165);
IkReal x11174=((1.0)*x11160);
IkReal x11175=((1.0)*x11159);
IkReal x11176=(cj3*x11159);
IkReal x11177=(cj3*x11160);
evalcond[0]=((((-1.0)*r22*x11174))+((x11159*x11172))+(((-1.0)*gconst5*r20*x11175)));
evalcond[1]=((((-1.0)*r12*x11174))+((x11159*x11163))+(((-1.0)*x11164*x11175)));
evalcond[2]=((-1.0)+((x11159*x11166))+(((-1.0)*x11168*x11175))+(((-1.0)*r02*x11174)));
evalcond[3]=(((r01*x11162))+((r00*x11169))+((x11166*x11177))+((r02*x11176))+(((-1.0)*cj3*x11168*x11174)));
evalcond[4]=(((r00*x11171))+((r01*x11170))+(((-1.0)*r02*sj3*x11175))+(((-1.0)*sj3*x11166*x11174))+((r00*x11160*x11162)));
evalcond[5]=(((r20*x11169))+((r21*x11160*x11171))+((cj1*sj2))+x11167+((r22*x11176))+(((-1.0)*r20*x11170*x11174))+((r21*x11162)));
evalcond[6]=((((-1.0)*cj3*x11164*x11174))+((r12*x11176))+((r11*x11162))+(((-1.0)*x11173))+((x11163*x11177))+x11161+((r10*x11169)));
evalcond[7]=((((-1.0)*r22*sj3*x11175))+((r20*x11171))+(((-1.0)*x11173))+x11161+(((-1.0)*r21*x11169*x11174))+((r20*x11160*x11162))+((r21*x11170)));
evalcond[8]=(((r11*x11170))+(((-1.0)*sj2*x11165))+((r10*x11160*x11162))+(((-1.0)*x11167))+(((-1.0)*r12*sj3*x11175))+((r10*x11171))+(((-1.0)*sj3*x11163*x11174)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11178=((-1.0)*r21);
CheckValue<IkReal> x11181 = IKatan2WithCheck(IkReal(x11178),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11181.valid){
continue;
}
IkReal x11179=((1.0)*(x11181.value));
IkReal x11180=x10152;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11179)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11179)));
IkReal gconst4=(x11178*x11180);
IkReal gconst5=((1.0)*r20*x11180);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11182=((-1.0)*r21);
CheckValue<IkReal> x11185 = IKatan2WithCheck(IkReal(x11182),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11185.valid){
continue;
}
IkReal x11183=((1.0)*(x11185.value));
IkReal x11184=x10152;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11183)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11183)));
IkReal gconst4=(x11182*x11184);
IkReal gconst5=((1.0)*r20*x11184);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x11186=((-1.0)*r21);
CheckValue<IkReal> x11189 = IKatan2WithCheck(IkReal(x11186),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11189.valid){
continue;
}
IkReal x11187=((1.0)*(x11189.value));
IkReal x11188=x10152;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11187)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11187)));
IkReal gconst4=(x11186*x11188);
IkReal gconst5=((1.0)*r20*x11188);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11190=((-1.0)*r21);
CheckValue<IkReal> x11193 = IKatan2WithCheck(IkReal(x11190),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11193.valid){
continue;
}
IkReal x11191=((1.0)*(x11193.value));
IkReal x11192=x10152;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11191)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11191)));
IkReal gconst4=(x11190*x11192);
IkReal gconst5=((1.0)*r20*x11192);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11194=((-1.0)*r21);
CheckValue<IkReal> x11197 = IKatan2WithCheck(IkReal(x11194),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11197.valid){
continue;
}
IkReal x11195=((1.0)*(x11197.value));
IkReal x11196=x10152;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11195)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11195)));
IkReal gconst4=(x11194*x11196);
IkReal gconst5=((1.0)*r20*x11196);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11198=((-1.0)*r21);
CheckValue<IkReal> x11201 = IKatan2WithCheck(IkReal(x11198),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11201.valid){
continue;
}
IkReal x11199=((1.0)*(x11201.value));
IkReal x11200=x10152;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11199)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11199)));
IkReal gconst4=(x11198*x11200);
IkReal gconst5=((1.0)*r20*x11200);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11202=(gconst5*r00);
IkReal x11203=(gconst4*r01);
CheckValue<IkReal> x11204=IKPowWithIntegerCheck(IKsign(((x11203*x11203)+(((-2.0)*x11202*x11203))+(x11202*x11202)+(r02*r02))),-1);
if(!x11204.valid){
continue;
}
CheckValue<IkReal> x11205 = IKatan2WithCheck(IkReal((x11202+(((-1.0)*x11203)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11205.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11204.value)))+(x11205.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11206=IKsin(j4);
IkReal x11207=IKcos(j4);
IkReal x11208=(gconst4*r11);
IkReal x11209=(gconst5*r10);
IkReal x11210=(gconst4*r01);
IkReal x11211=(gconst5*r00);
IkReal x11212=(gconst4*r21);
IkReal x11213=(gconst5*r20);
IkReal x11214=((1.0)*x11207);
IkReal x11215=((1.0)*x11206);
evalcond[0]=(((x11206*x11212))+(((-1.0)*x11213*x11215))+(((-1.0)*r22*x11214)));
evalcond[1]=((((-1.0)*x11209*x11215))+((x11206*x11208))+(((-1.0)*r12*x11214)));
evalcond[2]=(((x11207*x11211))+(((-1.0)*r02*x11215))+(((-1.0)*x11210*x11214)));
evalcond[3]=((1.0)+((x11206*x11210))+(((-1.0)*r02*x11214))+(((-1.0)*x11211*x11215)));
evalcond[4]=(((x11207*x11209))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r12*x11215))+(((-1.0)*x11208*x11214)));
evalcond[5]=(((x11207*x11213))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11212*x11214))+(((-1.0)*r22*x11215)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11216=((1.0)*gconst5);
CheckValue<IkReal> x11217=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11216))+(((-1.0)*gconst4*r20)))),-1);
if(!x11217.valid){
continue;
}
CheckValue<IkReal> x11218 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x11216)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11218.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11217.value)))+(x11218.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11219=IKsin(j4);
IkReal x11220=IKcos(j4);
IkReal x11221=(gconst4*r11);
IkReal x11222=(gconst5*r10);
IkReal x11223=(gconst4*r01);
IkReal x11224=(gconst5*r00);
IkReal x11225=(gconst4*r21);
IkReal x11226=(gconst5*r20);
IkReal x11227=((1.0)*x11220);
IkReal x11228=((1.0)*x11219);
evalcond[0]=(((x11219*x11225))+(((-1.0)*x11226*x11228))+(((-1.0)*r22*x11227)));
evalcond[1]=((((-1.0)*x11222*x11228))+((x11219*x11221))+(((-1.0)*r12*x11227)));
evalcond[2]=(((x11220*x11224))+(((-1.0)*x11223*x11227))+(((-1.0)*r02*x11228)));
evalcond[3]=((1.0)+(((-1.0)*x11224*x11228))+((x11219*x11223))+(((-1.0)*r02*x11227)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x11220*x11222))+(((-1.0)*x11221*x11227))+(((-1.0)*r12*x11228)));
evalcond[5]=((((-1.0)*x11225*x11227))+((x11220*x11226))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x11228)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11229=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11229.valid){
continue;
}
CheckValue<IkReal> x11230 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11230.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11229.value)))+(x11230.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11231=IKsin(j4);
IkReal x11232=IKcos(j4);
IkReal x11233=(gconst4*r11);
IkReal x11234=(gconst5*r10);
IkReal x11235=(gconst4*r01);
IkReal x11236=(gconst5*r00);
IkReal x11237=(gconst4*r21);
IkReal x11238=(gconst5*r20);
IkReal x11239=((1.0)*x11232);
IkReal x11240=((1.0)*x11231);
evalcond[0]=(((x11231*x11237))+(((-1.0)*x11238*x11240))+(((-1.0)*r22*x11239)));
evalcond[1]=(((x11231*x11233))+(((-1.0)*x11234*x11240))+(((-1.0)*r12*x11239)));
evalcond[2]=((((-1.0)*r02*x11240))+((x11232*x11236))+(((-1.0)*x11235*x11239)));
evalcond[3]=((1.0)+(((-1.0)*x11236*x11240))+(((-1.0)*r02*x11239))+((x11231*x11235)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x11233*x11239))+((x11232*x11234))+(((-1.0)*r12*x11240)));
evalcond[5]=((((-1.0)*x11237*x11239))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x11232*x11238))+(((-1.0)*r22*x11240)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11241=((-1.0)*r21);
CheckValue<IkReal> x11244 = IKatan2WithCheck(IkReal(x11241),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11244.valid){
continue;
}
IkReal x11242=((1.0)*(x11244.value));
IkReal x11243=x10152;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11242)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11242)));
IkReal gconst4=(x11241*x11243);
IkReal gconst5=((1.0)*r20*x11243);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11245=((-1.0)*r21);
CheckValue<IkReal> x11248 = IKatan2WithCheck(IkReal(x11245),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11248.valid){
continue;
}
IkReal x11246=((1.0)*(x11248.value));
IkReal x11247=x10152;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11246)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11246)));
IkReal gconst4=(x11245*x11247);
IkReal gconst5=((1.0)*r20*x11247);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11249=((-1.0)*r21);
CheckValue<IkReal> x11252 = IKatan2WithCheck(IkReal(x11249),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11252.valid){
continue;
}
IkReal x11250=((1.0)*(x11252.value));
IkReal x11251=x10152;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11250)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11250)));
IkReal gconst4=(x11249*x11251);
IkReal gconst5=((1.0)*r20*x11251);
IkReal x11253=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11257=IKPowWithIntegerCheck(x11253,-1);
if(!x11257.valid){
continue;
}
IkReal x11254=x11257.value;
IkReal x11255=((1.0)*x11254);
IkReal x11256=((((-2.0)*r00*r01*r20*r21*x11254))+(((-1.0)*x11255*(r00*r00)*(r20*r20)))+(((-1.0)*(r02*r02)))+(((-1.0)*x11255*(r01*r01)*(r21*r21))));
j4eval[0]=x11256;
j4eval[1]=IKsign(x11256);
j4eval[2]=r02;
j4eval[3]=x11253;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11258=(gconst4*r01);
IkReal x11259=(gconst5*r00);
CheckValue<IkReal> x11260=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x11258*x11258)))+(((-1.0)*(x11259*x11259)))+(((-1.0)*(r02*r02)))+(((2.0)*x11258*x11259)))),-1);
if(!x11260.valid){
continue;
}
CheckValue<IkReal> x11261 = IKatan2WithCheck(IkReal(((((-1.0)*x11259))+x11258)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11261.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11260.value)))+(x11261.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11262=IKcos(j4);
IkReal x11263=IKsin(j4);
IkReal x11264=(gconst4*r11);
IkReal x11265=(gconst5*r10);
IkReal x11266=(gconst5*r00);
IkReal x11267=(gconst5*r20);
IkReal x11268=((1.0)*x11262);
IkReal x11269=(gconst4*x11262);
IkReal x11270=((1.0)*x11263);
IkReal x11271=(gconst4*x11263);
evalcond[0]=(((r02*x11263))+((r01*x11269))+(((-1.0)*x11266*x11268)));
evalcond[1]=(((r21*x11271))+(((-1.0)*r22*x11268))+(((-1.0)*x11267*x11270)));
evalcond[2]=((((-1.0)*x11265*x11270))+(((-1.0)*r12*x11268))+((x11263*x11264)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11268))+((r01*x11271))+(((-1.0)*x11266*x11270)));
evalcond[4]=(((cj2*sj1))+((x11262*x11264))+((cj1*sj2))+(((-1.0)*x11265*x11268))+((r12*x11263)));
evalcond[5]=(((r21*x11269))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x11263))+(((-1.0)*x11267*x11268)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11272=((1.0)*gconst5);
CheckValue<IkReal> x11273 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x11272)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11273.valid){
continue;
}
CheckValue<IkReal> x11274=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11272))+(((-1.0)*gconst4*r20)))),-1);
if(!x11274.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11273.value)+(((1.5707963267949)*(x11274.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11275=IKcos(j4);
IkReal x11276=IKsin(j4);
IkReal x11277=(gconst4*r11);
IkReal x11278=(gconst5*r10);
IkReal x11279=(gconst5*r00);
IkReal x11280=(gconst5*r20);
IkReal x11281=((1.0)*x11275);
IkReal x11282=(gconst4*x11275);
IkReal x11283=((1.0)*x11276);
IkReal x11284=(gconst4*x11276);
evalcond[0]=((((-1.0)*x11279*x11281))+((r02*x11276))+((r01*x11282)));
evalcond[1]=((((-1.0)*r22*x11281))+((r21*x11284))+(((-1.0)*x11280*x11283)));
evalcond[2]=((((-1.0)*r12*x11281))+(((-1.0)*x11278*x11283))+((x11276*x11277)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11281))+(((-1.0)*x11279*x11283))+((r01*x11284)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x11278*x11281))+((r12*x11276))+((cj1*sj2))+((x11275*x11277)));
evalcond[5]=(((r22*x11276))+((r21*x11282))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11280*x11281)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11285=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11285.valid){
continue;
}
CheckValue<IkReal> x11286 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11286.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11285.value)))+(x11286.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11287=IKcos(j4);
IkReal x11288=IKsin(j4);
IkReal x11289=(gconst4*r11);
IkReal x11290=(gconst5*r10);
IkReal x11291=(gconst5*r00);
IkReal x11292=(gconst5*r20);
IkReal x11293=((1.0)*x11287);
IkReal x11294=(gconst4*x11287);
IkReal x11295=((1.0)*x11288);
IkReal x11296=(gconst4*x11288);
evalcond[0]=(((r01*x11294))+(((-1.0)*x11291*x11293))+((r02*x11288)));
evalcond[1]=((((-1.0)*r22*x11293))+((r21*x11296))+(((-1.0)*x11292*x11295)));
evalcond[2]=((((-1.0)*x11290*x11295))+((x11288*x11289))+(((-1.0)*r12*x11293)));
evalcond[3]=((1.0)+((r01*x11296))+(((-1.0)*x11291*x11295))+(((-1.0)*r02*x11293)));
evalcond[4]=(((cj2*sj1))+((x11287*x11289))+((cj1*sj2))+(((-1.0)*x11290*x11293))+((r12*x11288)));
evalcond[5]=(((r22*x11288))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x11294))+(((-1.0)*x11292*x11293)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11297=((-1.0)*r21);
CheckValue<IkReal> x11300 = IKatan2WithCheck(IkReal(x11297),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11300.valid){
continue;
}
IkReal x11298=((1.0)*(x11300.value));
IkReal x11299=x10152;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11298)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11298)));
IkReal gconst4=(x11297*x11299);
IkReal gconst5=((1.0)*r20*x11299);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11301=((-1.0)*r21);
CheckValue<IkReal> x11304 = IKatan2WithCheck(IkReal(x11301),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11304.valid){
continue;
}
IkReal x11302=((1.0)*(x11304.value));
IkReal x11303=x10152;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11302)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11302)));
IkReal gconst4=(x11301*x11303);
IkReal gconst5=((1.0)*r20*x11303);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11305=((-1.0)*r21);
CheckValue<IkReal> x11308 = IKatan2WithCheck(IkReal(x11305),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11308.valid){
continue;
}
IkReal x11306=((1.0)*(x11308.value));
IkReal x11307=x10152;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11306)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11306)));
IkReal gconst4=(x11305*x11307);
IkReal gconst5=((1.0)*r20*x11307);
IkReal x11309=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11313=IKPowWithIntegerCheck(x11309,-1);
if(!x11313.valid){
continue;
}
IkReal x11310=x11313.value;
IkReal x11311=((1.0)*x11310);
IkReal x11312=((((-2.0)*r00*r01*r20*r21*x11310))+(((-1.0)*(r02*r02)))+(((-1.0)*x11311*(r00*r00)*(r20*r20)))+(((-1.0)*x11311*(r01*r01)*(r21*r21))));
j4eval[0]=x11312;
j4eval[1]=IKsign(x11312);
j4eval[2]=r02;
j4eval[3]=x11309;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11314=(gconst4*r01);
IkReal x11315=(gconst5*r00);
CheckValue<IkReal> x11316 = IKatan2WithCheck(IkReal((x11314+(((-1.0)*x11315)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11316.valid){
continue;
}
CheckValue<IkReal> x11317=IKPowWithIntegerCheck(IKsign(((((2.0)*x11314*x11315))+(((-1.0)*(r02*r02)))+(((-1.0)*(x11315*x11315)))+(((-1.0)*(x11314*x11314))))),-1);
if(!x11317.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11316.value)+(((1.5707963267949)*(x11317.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11318=IKcos(j4);
IkReal x11319=IKsin(j4);
IkReal x11320=(gconst5*r10);
IkReal x11321=(gconst5*r00);
IkReal x11322=(gconst5*r20);
IkReal x11323=((1.0)*x11318);
IkReal x11324=(gconst4*x11319);
IkReal x11325=(gconst4*x11318);
IkReal x11326=((1.0)*x11319);
evalcond[0]=(((r02*x11319))+(((-1.0)*x11321*x11323))+((r01*x11325)));
evalcond[1]=((((-1.0)*r22*x11323))+(((-1.0)*x11322*x11326))+((r21*x11324)));
evalcond[2]=((((-1.0)*r12*x11323))+(((-1.0)*x11320*x11326))+((r11*x11324)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11323))+(((-1.0)*x11321*x11326))+((r01*x11324)));
evalcond[4]=(((cj2*sj1))+((r22*x11319))+(((-1.0)*x11322*x11323))+((cj1*sj2))+((r21*x11325)));
evalcond[5]=((((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*x11320*x11323))+((r12*x11319))+((r11*x11325)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11327=((1.0)*gconst5);
CheckValue<IkReal> x11328=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11327))+(((-1.0)*gconst4*r20)))),-1);
if(!x11328.valid){
continue;
}
CheckValue<IkReal> x11329 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x11327)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11329.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11328.value)))+(x11329.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11330=IKcos(j4);
IkReal x11331=IKsin(j4);
IkReal x11332=(gconst5*r10);
IkReal x11333=(gconst5*r00);
IkReal x11334=(gconst5*r20);
IkReal x11335=((1.0)*x11330);
IkReal x11336=(gconst4*x11331);
IkReal x11337=(gconst4*x11330);
IkReal x11338=((1.0)*x11331);
evalcond[0]=((((-1.0)*x11333*x11335))+((r01*x11337))+((r02*x11331)));
evalcond[1]=((((-1.0)*r22*x11335))+(((-1.0)*x11334*x11338))+((r21*x11336)));
evalcond[2]=((((-1.0)*r12*x11335))+((r11*x11336))+(((-1.0)*x11332*x11338)));
evalcond[3]=((1.0)+(((-1.0)*x11333*x11338))+((r01*x11336))+(((-1.0)*r02*x11335)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x11334*x11335))+((r22*x11331))+((r21*x11337)));
evalcond[5]=(((r11*x11337))+((r12*x11331))+(((-1.0)*sj1*sj2))+(((-1.0)*x11332*x11335))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11339=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11339.valid){
continue;
}
CheckValue<IkReal> x11340 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11340.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11339.value)))+(x11340.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11341=IKcos(j4);
IkReal x11342=IKsin(j4);
IkReal x11343=(gconst5*r10);
IkReal x11344=(gconst5*r00);
IkReal x11345=(gconst5*r20);
IkReal x11346=((1.0)*x11341);
IkReal x11347=(gconst4*x11342);
IkReal x11348=(gconst4*x11341);
IkReal x11349=((1.0)*x11342);
evalcond[0]=((((-1.0)*x11344*x11346))+((r01*x11348))+((r02*x11342)));
evalcond[1]=((((-1.0)*r22*x11346))+(((-1.0)*x11345*x11349))+((r21*x11347)));
evalcond[2]=((((-1.0)*x11343*x11349))+((r11*x11347))+(((-1.0)*r12*x11346)));
evalcond[3]=((1.0)+(((-1.0)*x11344*x11349))+((r01*x11347))+(((-1.0)*r02*x11346)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x11345*x11346))+((r22*x11342))+((r21*x11348)));
evalcond[5]=((((-1.0)*x11343*x11346))+((r11*x11348))+(((-1.0)*sj1*sj2))+((r12*x11342))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11350=((-1.0)*r21);
CheckValue<IkReal> x11353 = IKatan2WithCheck(IkReal(x11350),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11353.valid){
continue;
}
IkReal x11351=((1.0)*(x11353.value));
IkReal x11352=x10152;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11351)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11351)));
IkReal gconst4=(x11350*x11352);
IkReal gconst5=((1.0)*r20*x11352);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11354=((-1.0)*r21);
CheckValue<IkReal> x11357 = IKatan2WithCheck(IkReal(x11354),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11357.valid){
continue;
}
IkReal x11355=((1.0)*(x11357.value));
IkReal x11356=x10152;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11355)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11355)));
IkReal gconst4=(x11354*x11356);
IkReal gconst5=((1.0)*r20*x11356);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11358=((-1.0)*r21);
CheckValue<IkReal> x11361 = IKatan2WithCheck(IkReal(x11358),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11361.valid){
continue;
}
IkReal x11359=((1.0)*(x11361.value));
IkReal x11360=x10152;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11359)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11359)));
IkReal gconst4=(x11358*x11360);
IkReal gconst5=((1.0)*r20*x11360);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11362=(gconst5*r00);
IkReal x11363=(gconst4*r01);
CheckValue<IkReal> x11364 = IKatan2WithCheck(IkReal(((((-1.0)*x11363))+x11362)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11364.valid){
continue;
}
CheckValue<IkReal> x11365=IKPowWithIntegerCheck(IKsign(((x11363*x11363)+(x11362*x11362)+(r02*r02)+(((-2.0)*x11362*x11363)))),-1);
if(!x11365.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11364.value)+(((1.5707963267949)*(x11365.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11366=IKsin(j4);
IkReal x11367=IKcos(j4);
IkReal x11368=(gconst4*r11);
IkReal x11369=(gconst5*r10);
IkReal x11370=(gconst5*r00);
IkReal x11371=(gconst5*r20);
IkReal x11372=((1.0)*x11367);
IkReal x11373=(gconst4*x11366);
IkReal x11374=((1.0)*x11366);
evalcond[0]=(((r21*x11373))+(((-1.0)*r22*x11372))+(((-1.0)*x11371*x11374)));
evalcond[1]=((((-1.0)*x11369*x11374))+((x11366*x11368))+(((-1.0)*r12*x11372)));
evalcond[2]=((((-1.0)*gconst4*r01*x11372))+(((-1.0)*r02*x11374))+((x11367*x11370)));
evalcond[3]=((1.0)+((r01*x11373))+(((-1.0)*r02*x11372))+(((-1.0)*x11370*x11374)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x11374))+((cj1*sj2))+((x11367*x11371))+(((-1.0)*gconst4*r21*x11372)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x11368*x11372))+((x11367*x11369))+(((-1.0)*r12*x11374))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11375=((1.0)*gconst5);
CheckValue<IkReal> x11376=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11375))+(((-1.0)*gconst4*r20)))),-1);
if(!x11376.valid){
continue;
}
CheckValue<IkReal> x11377 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x11375))+((gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11377.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11376.value)))+(x11377.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11378=IKsin(j4);
IkReal x11379=IKcos(j4);
IkReal x11380=(gconst4*r11);
IkReal x11381=(gconst5*r10);
IkReal x11382=(gconst5*r00);
IkReal x11383=(gconst5*r20);
IkReal x11384=((1.0)*x11379);
IkReal x11385=(gconst4*x11378);
IkReal x11386=((1.0)*x11378);
evalcond[0]=((((-1.0)*x11383*x11386))+(((-1.0)*r22*x11384))+((r21*x11385)));
evalcond[1]=((((-1.0)*x11381*x11386))+((x11378*x11380))+(((-1.0)*r12*x11384)));
evalcond[2]=(((x11379*x11382))+(((-1.0)*r02*x11386))+(((-1.0)*gconst4*r01*x11384)));
evalcond[3]=((1.0)+(((-1.0)*x11382*x11386))+((r01*x11385))+(((-1.0)*r02*x11384)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst4*r21*x11384))+((cj1*sj2))+((x11379*x11383))+(((-1.0)*r22*x11386)));
evalcond[5]=((((-1.0)*x11380*x11384))+((x11379*x11381))+(((-1.0)*sj1*sj2))+(((-1.0)*r12*x11386))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11387=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11387.valid){
continue;
}
CheckValue<IkReal> x11388 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11388.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11387.value)))+(x11388.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11389=IKsin(j4);
IkReal x11390=IKcos(j4);
IkReal x11391=(gconst4*r11);
IkReal x11392=(gconst5*r10);
IkReal x11393=(gconst5*r00);
IkReal x11394=(gconst5*r20);
IkReal x11395=((1.0)*x11390);
IkReal x11396=(gconst4*x11389);
IkReal x11397=((1.0)*x11389);
evalcond[0]=((((-1.0)*r22*x11395))+((r21*x11396))+(((-1.0)*x11394*x11397)));
evalcond[1]=((((-1.0)*x11392*x11397))+((x11389*x11391))+(((-1.0)*r12*x11395)));
evalcond[2]=((((-1.0)*gconst4*r01*x11395))+(((-1.0)*r02*x11397))+((x11390*x11393)));
evalcond[3]=((1.0)+(((-1.0)*x11393*x11397))+((r01*x11396))+(((-1.0)*r02*x11395)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst4*r21*x11395))+(((-1.0)*r22*x11397))+((x11390*x11394)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x11391*x11395))+((cj1*cj2))+((x11390*x11392))+(((-1.0)*r12*x11397)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11398=((-1.0)*r21);
IkReal x11399=((-1.0)*r20);
CheckValue<IkReal> x11401 = IKatan2WithCheck(IkReal(x11398),IkReal(x11399),IKFAST_ATAN2_MAGTHRESH);
if(!x11401.valid){
continue;
}
IkReal x11400=((1.0)*(x11401.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11400)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11399);
rxp0_2=(py*r00);
rxp1_0=(py*x11398);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11400)));
IkReal gconst4=x11398;
IkReal gconst5=((1.0)*r20);
IkReal x11402=((1.0)*r01*r21);
IkReal x11403=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*x11402))+(((-1.0)*x11403)));
j4eval[1]=((((-1.0)*cj3*x11403))+(((-1.0)*cj3*x11402)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11404=((-1.0)*r21);
IkReal x11405=((-1.0)*r20);
CheckValue<IkReal> x11407 = IKatan2WithCheck(IkReal(x11404),IkReal(x11405),IKFAST_ATAN2_MAGTHRESH);
if(!x11407.valid){
continue;
}
IkReal x11406=((1.0)*(x11407.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11406)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11405);
rxp0_2=(py*r00);
rxp1_0=(py*x11404);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11406)));
IkReal gconst4=x11404;
IkReal gconst5=((1.0)*r20);
IkReal x11408=((1.0)*r01*r21);
IkReal x11409=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*x11408))+(((-1.0)*x11409)));
j4eval[1]=(((sj3*x11408))+((sj3*x11409)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x11410=((-1.0)*r21);
IkReal x11411=((-1.0)*r20);
CheckValue<IkReal> x11413 = IKatan2WithCheck(IkReal(x11410),IkReal(x11411),IKFAST_ATAN2_MAGTHRESH);
if(!x11413.valid){
continue;
}
IkReal x11412=((1.0)*(x11413.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11412)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11411);
rxp0_2=(py*r00);
rxp1_0=(py*x11410);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11412)));
IkReal gconst4=x11410;
IkReal gconst5=((1.0)*r20);
IkReal x11414=((1.0)*cj3);
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=((((-1.0)*r01*r21*x11414))+(((-1.0)*r00*r20*x11414)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11415=((1.0)*gconst5);
CheckValue<IkReal> x11416=IKPowWithIntegerCheck(cj3,-1);
if(!x11416.valid){
continue;
}
CheckValue<IkReal> x11417=IKPowWithIntegerCheck(r12,-1);
if(!x11417.valid){
continue;
}
CheckValue<IkReal> x11418=IKPowWithIntegerCheck(((((-1.0)*cj3*r00*x11415))+((cj3*gconst4*r01))),-1);
if(!x11418.valid){
continue;
}
if( IKabs(((x11416.value)*(x11417.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11418.value)*(((((-1.0)*r01*sj3*x11415))+(((-1.0)*gconst4*r00*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11416.value)*(x11417.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x11418.value)*(((((-1.0)*r01*sj3*x11415))+(((-1.0)*gconst4*r00*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11416.value)*(x11417.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x11418.value)*(((((-1.0)*r01*sj3*x11415))+(((-1.0)*gconst4*r00*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11419=IKsin(j4);
IkReal x11420=IKcos(j4);
IkReal x11421=(cj2*sj1);
IkReal x11422=(cj1*sj2);
IkReal x11423=(sj1*sj2);
IkReal x11424=(gconst5*sj3);
IkReal x11425=(gconst5*r00);
IkReal x11426=(cj3*gconst5);
IkReal x11427=(gconst4*sj3);
IkReal x11428=(cj3*gconst4);
IkReal x11429=(cj1*cj2);
IkReal x11430=((1.0)*x11419);
IkReal x11431=(gconst4*x11419);
IkReal x11432=((1.0)*x11420);
IkReal x11433=(x11422+x11421);
IkReal x11434=(x11420*x11424);
IkReal x11435=(x11420*x11428);
evalcond[0]=((-1.0)*r12*x11420);
evalcond[1]=(((r21*x11431))+(((-1.0)*gconst5*r20*x11430)));
evalcond[2]=(((cj3*r12*x11419))+x11429+(((-1.0)*x11423)));
evalcond[3]=(x11433+(((-1.0)*r12*sj3*x11430)));
evalcond[4]=((1.0)+(((-1.0)*x11425*x11430))+((r01*x11431)));
evalcond[5]=(((r01*x11435))+((r01*x11424))+((r00*x11427))+(((-1.0)*cj3*x11425*x11432)));
evalcond[6]=(((r01*x11426))+((r00*x11428))+((r00*x11434))+(((-1.0)*r01*x11427*x11432)));
evalcond[7]=(((r20*x11427))+x11433+((r21*x11424))+((r21*x11435))+(((-1.0)*r20*x11426*x11432)));
evalcond[8]=(((r20*x11434))+((r20*x11428))+x11423+((r21*x11426))+(((-1.0)*x11429))+(((-1.0)*r21*x11427*x11432)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11436=((1.0)*gconst4);
IkReal x11437=(gconst5*r00);
CheckValue<IkReal> x11438=IKPowWithIntegerCheck((((gconst4*r01))+(((-1.0)*x11437))),-1);
if(!x11438.valid){
continue;
}
CheckValue<IkReal> x11439=IKPowWithIntegerCheck(((((-1.0)*r01*sj3*x11436))+((sj3*x11437))),-1);
if(!x11439.valid){
continue;
}
if( IKabs(((-1.0)*(x11438.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11439.value)*(((((-1.0)*cj3*gconst5*r01))+(((-1.0)*cj3*r00*x11436)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x11438.value)))+IKsqr(((x11439.value)*(((((-1.0)*cj3*gconst5*r01))+(((-1.0)*cj3*r00*x11436))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x11438.value)), ((x11439.value)*(((((-1.0)*cj3*gconst5*r01))+(((-1.0)*cj3*r00*x11436))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11440=IKsin(j4);
IkReal x11441=IKcos(j4);
IkReal x11442=(cj2*sj1);
IkReal x11443=(cj1*sj2);
IkReal x11444=(sj1*sj2);
IkReal x11445=(gconst5*sj3);
IkReal x11446=(gconst5*r00);
IkReal x11447=(cj3*gconst5);
IkReal x11448=(gconst4*sj3);
IkReal x11449=(cj3*gconst4);
IkReal x11450=(cj1*cj2);
IkReal x11451=((1.0)*x11440);
IkReal x11452=(gconst4*x11440);
IkReal x11453=((1.0)*x11441);
IkReal x11454=(x11443+x11442);
IkReal x11455=(x11441*x11445);
IkReal x11456=(x11441*x11449);
evalcond[0]=((-1.0)*r12*x11441);
evalcond[1]=(((r21*x11452))+(((-1.0)*gconst5*r20*x11451)));
evalcond[2]=((((-1.0)*x11444))+((cj3*r12*x11440))+x11450);
evalcond[3]=(x11454+(((-1.0)*r12*sj3*x11451)));
evalcond[4]=((1.0)+((r01*x11452))+(((-1.0)*x11446*x11451)));
evalcond[5]=(((r00*x11448))+((r01*x11456))+(((-1.0)*cj3*x11446*x11453))+((r01*x11445)));
evalcond[6]=(((r00*x11449))+((r00*x11455))+(((-1.0)*r01*x11448*x11453))+((r01*x11447)));
evalcond[7]=(x11454+((r21*x11456))+(((-1.0)*r20*x11447*x11453))+((r20*x11448))+((r21*x11445)));
evalcond[8]=(x11444+((r20*x11455))+(((-1.0)*r21*x11448*x11453))+(((-1.0)*x11450))+((r20*x11449))+((r21*x11447)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11457=((1.0)*gconst5);
IkReal x11458=(gconst4*r01);
CheckValue<IkReal> x11459=IKPowWithIntegerCheck(((((-1.0)*r00*x11457))+x11458),-1);
if(!x11459.valid){
continue;
}
CheckValue<IkReal> x11460=IKPowWithIntegerCheck((((cj3*x11458))+(((-1.0)*cj3*r00*x11457))),-1);
if(!x11460.valid){
continue;
}
if( IKabs(((-1.0)*(x11459.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11460.value)*(((((-1.0)*r01*sj3*x11457))+(((-1.0)*gconst4*r00*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x11459.value)))+IKsqr(((x11460.value)*(((((-1.0)*r01*sj3*x11457))+(((-1.0)*gconst4*r00*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x11459.value)), ((x11460.value)*(((((-1.0)*r01*sj3*x11457))+(((-1.0)*gconst4*r00*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11461=IKsin(j4);
IkReal x11462=IKcos(j4);
IkReal x11463=(cj2*sj1);
IkReal x11464=(cj1*sj2);
IkReal x11465=(sj1*sj2);
IkReal x11466=(gconst5*sj3);
IkReal x11467=(gconst5*r00);
IkReal x11468=(cj3*gconst5);
IkReal x11469=(gconst4*sj3);
IkReal x11470=(cj3*gconst4);
IkReal x11471=(cj1*cj2);
IkReal x11472=((1.0)*x11461);
IkReal x11473=(gconst4*x11461);
IkReal x11474=((1.0)*x11462);
IkReal x11475=(x11464+x11463);
IkReal x11476=(x11462*x11466);
IkReal x11477=(x11462*x11470);
evalcond[0]=((-1.0)*r12*x11462);
evalcond[1]=((((-1.0)*gconst5*r20*x11472))+((r21*x11473)));
evalcond[2]=(x11471+((cj3*r12*x11461))+(((-1.0)*x11465)));
evalcond[3]=(x11475+(((-1.0)*r12*sj3*x11472)));
evalcond[4]=((1.0)+(((-1.0)*x11467*x11472))+((r01*x11473)));
evalcond[5]=(((r01*x11466))+(((-1.0)*cj3*x11467*x11474))+((r00*x11469))+((r01*x11477)));
evalcond[6]=(((r00*x11476))+((r00*x11470))+((r01*x11468))+(((-1.0)*r01*x11469*x11474)));
evalcond[7]=(x11475+(((-1.0)*r20*x11468*x11474))+((r20*x11469))+((r21*x11477))+((r21*x11466)));
evalcond[8]=((((-1.0)*x11471))+x11465+(((-1.0)*r21*x11469*x11474))+((r20*x11476))+((r20*x11470))+((r21*x11468)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11478=gconst4*gconst4;
IkReal x11479=gconst5*gconst5;
IkReal x11480=(r01*r20);
IkReal x11481=(gconst4*sj3);
IkReal x11482=(r01*r21);
IkReal x11483=((1.0)*cj3);
IkReal x11484=(r00*r21);
IkReal x11485=(r00*r20);
IkReal x11486=(cj3*gconst4*gconst5);
IkReal x11487=((1.0)*x11479);
CheckValue<IkReal> x11488 = IKatan2WithCheck(IkReal((((r00*r22*x11481))+((gconst5*r01*r22*sj3)))),IkReal(((((-1.0)*gconst5*x11481*x11485))+((sj3*x11478*x11484))+((gconst5*x11481*x11482))+(((-1.0)*sj3*x11480*x11487)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11488.valid){
continue;
}
CheckValue<IkReal> x11489=IKPowWithIntegerCheck(IKsign(((((-1.0)*x11479*x11483*x11485))+((x11484*x11486))+((x11480*x11486))+(((-1.0)*r02*r22*x11483))+(((-1.0)*x11478*x11482*x11483)))),-1);
if(!x11489.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11488.value)+(((1.5707963267949)*(x11489.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11490=IKsin(j4);
IkReal x11491=IKcos(j4);
IkReal x11492=(cj2*sj1);
IkReal x11493=(cj1*sj2);
IkReal x11494=(gconst5*sj3);
IkReal x11495=(gconst4*r11);
IkReal x11496=(sj1*sj2);
IkReal x11497=(gconst5*r10);
IkReal x11498=(cj1*cj2);
IkReal x11499=(gconst4*r01);
IkReal x11500=(gconst5*r00);
IkReal x11501=(gconst4*sj3);
IkReal x11502=(cj3*gconst5);
IkReal x11503=(cj3*gconst4);
IkReal x11504=(gconst4*r21);
IkReal x11505=((1.0)*x11491);
IkReal x11506=((1.0)*x11490);
IkReal x11507=(cj3*x11490);
IkReal x11508=(cj3*x11491);
IkReal x11509=(x11492+x11493);
evalcond[0]=(((x11490*x11504))+(((-1.0)*gconst5*r20*x11506))+(((-1.0)*r22*x11505)));
evalcond[1]=((((-1.0)*r12*x11505))+((x11490*x11495))+(((-1.0)*x11497*x11506)));
evalcond[2]=((1.0)+(((-1.0)*r02*x11505))+(((-1.0)*x11500*x11506))+((x11490*x11499)));
evalcond[3]=((((-1.0)*cj3*x11500*x11505))+((r00*x11501))+((x11499*x11508))+((r01*x11494))+((r02*x11507)));
evalcond[4]=((((-1.0)*sj3*x11499*x11505))+(((-1.0)*r02*sj3*x11506))+((r00*x11491*x11494))+((r00*x11503))+((r01*x11502)));
evalcond[5]=(((r21*x11491*x11503))+x11509+((r21*x11494))+((r20*x11501))+(((-1.0)*r20*x11502*x11505))+((r22*x11507)));
evalcond[6]=(x11498+((r12*x11507))+((r11*x11494))+((r10*x11501))+(((-1.0)*cj3*x11497*x11505))+((x11495*x11508))+(((-1.0)*x11496)));
evalcond[7]=(((r10*x11491*x11494))+(((-1.0)*r12*sj3*x11506))+x11509+((r11*x11502))+((r10*x11503))+(((-1.0)*sj3*x11495*x11505)));
evalcond[8]=((((-1.0)*r21*x11501*x11505))+x11496+((r21*x11502))+((r20*x11503))+(((-1.0)*r22*sj3*x11506))+((r20*x11491*x11494))+(((-1.0)*x11498)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11510=((1.0)*gconst5);
CheckValue<IkReal> x11511=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11510))+(((-1.0)*gconst4*r20)))),-1);
if(!x11511.valid){
continue;
}
CheckValue<IkReal> x11512 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x11510)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11512.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11511.value)))+(x11512.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11513=IKsin(j4);
IkReal x11514=IKcos(j4);
IkReal x11515=(cj2*sj1);
IkReal x11516=(cj1*sj2);
IkReal x11517=(gconst5*sj3);
IkReal x11518=(gconst4*r11);
IkReal x11519=(sj1*sj2);
IkReal x11520=(gconst5*r10);
IkReal x11521=(cj1*cj2);
IkReal x11522=(gconst4*r01);
IkReal x11523=(gconst5*r00);
IkReal x11524=(gconst4*sj3);
IkReal x11525=(cj3*gconst5);
IkReal x11526=(cj3*gconst4);
IkReal x11527=(gconst4*r21);
IkReal x11528=((1.0)*x11514);
IkReal x11529=((1.0)*x11513);
IkReal x11530=(cj3*x11513);
IkReal x11531=(cj3*x11514);
IkReal x11532=(x11516+x11515);
evalcond[0]=((((-1.0)*gconst5*r20*x11529))+((x11513*x11527))+(((-1.0)*r22*x11528)));
evalcond[1]=((((-1.0)*x11520*x11529))+((x11513*x11518))+(((-1.0)*r12*x11528)));
evalcond[2]=((1.0)+(((-1.0)*r02*x11528))+((x11513*x11522))+(((-1.0)*x11523*x11529)));
evalcond[3]=(((r01*x11517))+(((-1.0)*cj3*x11523*x11528))+((r00*x11524))+((r02*x11530))+((x11522*x11531)));
evalcond[4]=(((r00*x11514*x11517))+(((-1.0)*r02*sj3*x11529))+((r01*x11525))+((r00*x11526))+(((-1.0)*sj3*x11522*x11528)));
evalcond[5]=(((r22*x11530))+x11532+((r20*x11524))+((r21*x11517))+(((-1.0)*r20*x11525*x11528))+((r21*x11514*x11526)));
evalcond[6]=((((-1.0)*x11519))+x11521+((x11518*x11531))+((r12*x11530))+(((-1.0)*cj3*x11520*x11528))+((r10*x11524))+((r11*x11517)));
evalcond[7]=(((r10*x11514*x11517))+x11532+(((-1.0)*r12*sj3*x11529))+((r11*x11525))+(((-1.0)*sj3*x11518*x11528))+((r10*x11526)));
evalcond[8]=((((-1.0)*r21*x11524*x11528))+x11519+((r21*x11525))+((r20*x11526))+(((-1.0)*r22*sj3*x11529))+(((-1.0)*x11521))+((r20*x11514*x11517)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11533=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11533.valid){
continue;
}
CheckValue<IkReal> x11534 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11534.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11533.value)))+(x11534.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11535=IKsin(j4);
IkReal x11536=IKcos(j4);
IkReal x11537=(cj2*sj1);
IkReal x11538=(cj1*sj2);
IkReal x11539=(gconst5*sj3);
IkReal x11540=(gconst4*r11);
IkReal x11541=(sj1*sj2);
IkReal x11542=(gconst5*r10);
IkReal x11543=(cj1*cj2);
IkReal x11544=(gconst4*r01);
IkReal x11545=(gconst5*r00);
IkReal x11546=(gconst4*sj3);
IkReal x11547=(cj3*gconst5);
IkReal x11548=(cj3*gconst4);
IkReal x11549=(gconst4*r21);
IkReal x11550=((1.0)*x11536);
IkReal x11551=((1.0)*x11535);
IkReal x11552=(cj3*x11535);
IkReal x11553=(cj3*x11536);
IkReal x11554=(x11538+x11537);
evalcond[0]=((((-1.0)*gconst5*r20*x11551))+((x11535*x11549))+(((-1.0)*r22*x11550)));
evalcond[1]=(((x11535*x11540))+(((-1.0)*x11542*x11551))+(((-1.0)*r12*x11550)));
evalcond[2]=((1.0)+(((-1.0)*r02*x11550))+((x11535*x11544))+(((-1.0)*x11545*x11551)));
evalcond[3]=(((x11544*x11553))+((r00*x11546))+((r02*x11552))+((r01*x11539))+(((-1.0)*cj3*x11545*x11550)));
evalcond[4]=(((r00*x11548))+((r01*x11547))+((r00*x11536*x11539))+(((-1.0)*r02*sj3*x11551))+(((-1.0)*sj3*x11544*x11550)));
evalcond[5]=(x11554+(((-1.0)*r20*x11547*x11550))+((r22*x11552))+((r21*x11539))+((r20*x11546))+((r21*x11536*x11548)));
evalcond[6]=(((r12*x11552))+((r10*x11546))+x11543+(((-1.0)*cj3*x11542*x11550))+((x11540*x11553))+(((-1.0)*x11541))+((r11*x11539)));
evalcond[7]=((((-1.0)*r12*sj3*x11551))+((r10*x11548))+x11554+((r11*x11547))+(((-1.0)*sj3*x11540*x11550))+((r10*x11536*x11539)));
evalcond[8]=((((-1.0)*r22*sj3*x11551))+x11541+(((-1.0)*r21*x11546*x11550))+(((-1.0)*x11543))+((r20*x11548))+((r21*x11547))+((r20*x11536*x11539)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11555=((-1.0)*r21);
IkReal x11556=((-1.0)*px);
CheckValue<IkReal> x11558 = IKatan2WithCheck(IkReal(x11555),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11558.valid){
continue;
}
IkReal x11557=((1.0)*(x11558.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11557)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11556);
rxp1_1=(px*r21);
rxp1_2=(r11*x11556);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11557)));
IkReal gconst4=x11555;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11559=((-1.0)*r21);
IkReal x11560=((-1.0)*px);
CheckValue<IkReal> x11562 = IKatan2WithCheck(IkReal(x11559),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11562.valid){
continue;
}
IkReal x11561=((1.0)*(x11562.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11561)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11560);
rxp1_1=(px*r21);
rxp1_2=(r11*x11560);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11561)));
IkReal gconst4=x11559;
IkReal gconst5=((1.0)*r20);
IkReal x11563=((1.0)*cj3);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
j4eval[1]=((((-1.0)*x11563))+((x11563*(r10*r10)))+(((-1.0)*x11563*(r21*r21))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11564=((-1.0)*r21);
IkReal x11565=((-1.0)*px);
CheckValue<IkReal> x11567 = IKatan2WithCheck(IkReal(x11564),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11567.valid){
continue;
}
IkReal x11566=((1.0)*(x11567.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11566)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11565);
rxp1_1=(px*r21);
rxp1_2=(r11*x11565);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11566)));
IkReal gconst4=x11564;
IkReal gconst5=((1.0)*r20);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11568=((-1.0)*r21);
IkReal x11569=((-1.0)*px);
CheckValue<IkReal> x11571 = IKatan2WithCheck(IkReal(x11568),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11571.valid){
continue;
}
IkReal x11570=((1.0)*(x11571.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11570)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11569);
rxp1_1=(px*r21);
rxp1_2=(r11*x11569);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11570)));
IkReal gconst4=x11568;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11572=((-1.0)*r21);
IkReal x11573=((-1.0)*px);
CheckValue<IkReal> x11575 = IKatan2WithCheck(IkReal(x11572),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11575.valid){
continue;
}
IkReal x11574=((1.0)*(x11575.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11574)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11573);
rxp1_1=(px*r21);
rxp1_2=(r11*x11573);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11574)));
IkReal gconst4=x11572;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((1.0)+(((1.0)*(r21*r21)))+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11576=((-1.0)*r21);
IkReal x11577=((-1.0)*px);
CheckValue<IkReal> x11579 = IKatan2WithCheck(IkReal(x11576),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11579.valid){
continue;
}
IkReal x11578=((1.0)*(x11579.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11578)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11577);
rxp1_1=(px*r21);
rxp1_2=(r11*x11577);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11578)));
IkReal gconst4=x11576;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((1.0)*r10*r20))+(((1.0)*r11*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11582=IKPowWithIntegerCheck((((gconst5*r10))+(((-1.0)*gconst4*r11))),-1);
if(!x11582.valid){
continue;
}
IkReal x11580=x11582.value;
IkReal x11581=(sj0*x11580);
cj4array[0]=(((cj2*sj1*x11581))+((cj1*sj2*x11581)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11583=IKsin(j4);
IkReal x11584=IKcos(j4);
IkReal x11585=(gconst5*r20);
IkReal x11586=(gconst4*x11583);
IkReal x11587=((1.0)*x11584);
IkReal x11588=((1.0)*x11583);
evalcond[0]=((-1.0)*r02*x11583);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x11587)));
evalcond[2]=((((-1.0)*x11585*x11588))+((r21*x11586)));
evalcond[3]=((((-1.0)*gconst5*r10*x11588))+((r11*x11586)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x11584*x11585))+(((-1.0)*gconst4*r21*x11587)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11590=IKPowWithIntegerCheck((((gconst5*r20))+(((-1.0)*gconst4*r21))),-1);
if(!x11590.valid){
continue;
}
IkReal x11589=x11590.value;
cj4array[0]=(((cj1*cj2*x11589))+(((-1.0)*sj1*sj2*x11589)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11591=IKsin(j4);
IkReal x11592=IKcos(j4);
IkReal x11593=(gconst5*r10);
IkReal x11594=((1.0)*sj0);
IkReal x11595=(gconst4*x11591);
IkReal x11596=((1.0)*x11592);
IkReal x11597=((1.0)*x11591);
evalcond[0]=((-1.0)*r02*x11591);
evalcond[1]=((((-1.0)*x11594))+(((-1.0)*r02*x11596)));
evalcond[2]=((((-1.0)*gconst5*r20*x11597))+((r21*x11595)));
evalcond[3]=((((-1.0)*x11593*x11597))+((r11*x11595)));
evalcond[4]=(((x11592*x11593))+(((-1.0)*cj2*sj1*x11594))+(((-1.0)*gconst4*r11*x11596))+(((-1.0)*cj1*sj2*x11594)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11598=IKPowWithIntegerCheck(r02,-1);
if(!x11598.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x11598.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11599=IKsin(j4);
IkReal x11600=IKcos(j4);
IkReal x11601=((1.0)*sj0);
IkReal x11602=(gconst5*x11600);
IkReal x11603=(gconst4*x11599);
IkReal x11604=((1.0)*gconst4*x11600);
IkReal x11605=((1.0)*gconst5*x11599);
evalcond[0]=((-1.0)*r02*x11599);
evalcond[1]=((((-1.0)*r20*x11605))+((r21*x11603)));
evalcond[2]=((((-1.0)*r10*x11605))+((r11*x11603)));
evalcond[3]=((((-1.0)*r21*x11604))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x11602)));
evalcond[4]=((((-1.0)*r11*x11604))+(((-1.0)*cj1*sj2*x11601))+(((-1.0)*cj2*sj1*x11601))+((r10*x11602)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11606=((-1.0)*r21);
IkReal x11607=((-1.0)*px);
CheckValue<IkReal> x11609 = IKatan2WithCheck(IkReal(x11606),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11609.valid){
continue;
}
IkReal x11608=((1.0)*(x11609.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11608)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11607);
rxp1_1=(px*r21);
rxp1_2=(r11*x11607);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11608)));
IkReal gconst4=x11606;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11610=((-1.0)*r21);
IkReal x11611=((-1.0)*px);
CheckValue<IkReal> x11613 = IKatan2WithCheck(IkReal(x11610),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11613.valid){
continue;
}
IkReal x11612=((1.0)*(x11613.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11612)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11611);
rxp1_1=(px*r21);
rxp1_2=(r11*x11611);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11612)));
IkReal gconst4=x11610;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(((1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11614=((-1.0)*r21);
IkReal x11615=((-1.0)*px);
CheckValue<IkReal> x11617 = IKatan2WithCheck(IkReal(x11614),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11617.valid){
continue;
}
IkReal x11616=((1.0)*(x11617.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11616)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11615);
rxp1_1=(px*r21);
rxp1_2=(r11*x11615);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11616)));
IkReal gconst4=x11614;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11620=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*gconst5*r10))),-1);
if(!x11620.valid){
continue;
}
IkReal x11618=x11620.value;
IkReal x11619=(sj0*x11618);
cj4array[0]=(((cj1*sj2*x11619))+((cj2*sj1*x11619)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11621=IKsin(j4);
IkReal x11622=IKcos(j4);
IkReal x11623=(gconst5*r20);
IkReal x11624=(gconst4*x11621);
IkReal x11625=((1.0)*x11622);
IkReal x11626=((1.0)*x11621);
evalcond[0]=(r02*x11621);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x11625)));
evalcond[2]=(((r21*x11624))+(((-1.0)*x11623*x11626)));
evalcond[3]=(((r11*x11624))+(((-1.0)*gconst5*r10*x11626)));
evalcond[4]=(((gconst4*r21*x11622))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11623*x11625)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11628=IKPowWithIntegerCheck((((gconst4*r21))+(((-1.0)*gconst5*r20))),-1);
if(!x11628.valid){
continue;
}
IkReal x11627=x11628.value;
cj4array[0]=(((cj1*cj2*x11627))+(((-1.0)*sj1*sj2*x11627)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11629=IKsin(j4);
IkReal x11630=IKcos(j4);
IkReal x11631=(gconst4*r11);
IkReal x11632=((1.0)*sj0);
IkReal x11633=(gconst5*r10);
IkReal x11634=((1.0)*x11630);
IkReal x11635=((1.0)*x11629);
evalcond[0]=(r02*x11629);
evalcond[1]=((((-1.0)*x11632))+(((-1.0)*r02*x11634)));
evalcond[2]=(((gconst4*r21*x11629))+(((-1.0)*gconst5*r20*x11635)));
evalcond[3]=(((x11629*x11631))+(((-1.0)*x11633*x11635)));
evalcond[4]=((((-1.0)*x11633*x11634))+((x11630*x11631))+(((-1.0)*cj1*sj2*x11632))+(((-1.0)*cj2*sj1*x11632)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11636=IKPowWithIntegerCheck(r02,-1);
if(!x11636.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x11636.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11637=IKsin(j4);
IkReal x11638=IKcos(j4);
IkReal x11639=(gconst4*r11);
IkReal x11640=((1.0)*cj1);
IkReal x11641=(gconst4*r21);
IkReal x11642=((1.0)*gconst5*x11638);
IkReal x11643=((1.0)*gconst5*x11637);
evalcond[0]=(r02*x11637);
evalcond[1]=(((x11637*x11641))+(((-1.0)*r20*x11643)));
evalcond[2]=(((x11637*x11639))+(((-1.0)*r10*x11643)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*r20*x11642))+((x11638*x11641))+(((-1.0)*cj2*x11640)));
evalcond[4]=((((-1.0)*cj2*sj0*sj1))+(((-1.0)*r10*x11642))+(((-1.0)*sj0*sj2*x11640))+((x11638*x11639)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11645=IKPowWithIntegerCheck(r02,-1);
if(!x11645.valid){
continue;
}
IkReal x11644=x11645.value;
CheckValue<IkReal> x11646=IKPowWithIntegerCheck(cj3,-1);
if(!x11646.valid){
continue;
}
if( IKabs((x11644*(x11646.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x11644)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x11644*(x11646.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x11644))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x11644*(x11646.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x11644));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11647=IKsin(j4);
IkReal x11648=IKcos(j4);
IkReal x11649=(gconst5*sj3);
IkReal x11650=(gconst4*r11);
IkReal x11651=(sj1*sj2);
IkReal x11652=((1.0)*gconst5);
IkReal x11653=(cj2*sj1);
IkReal x11654=((1.0)*sj0);
IkReal x11655=((1.0)*cj0);
IkReal x11656=(gconst4*r21);
IkReal x11657=(cj1*sj2);
IkReal x11658=(cj3*gconst4);
IkReal x11659=(gconst4*sj3);
IkReal x11660=(cj3*gconst5);
IkReal x11661=(r20*x11648);
IkReal x11662=((1.0)*cj1*cj2);
IkReal x11663=(r10*x11648);
IkReal x11664=(cj3*x11648);
IkReal x11665=(r02*x11647);
IkReal x11666=((1.0)*sj3*x11648);
evalcond[0]=((((-1.0)*x11654))+(((-1.0)*r02*x11648)));
evalcond[1]=((((-1.0)*r20*x11647*x11652))+((x11647*x11656)));
evalcond[2]=(cj0+((x11647*x11650))+(((-1.0)*r10*x11647*x11652)));
evalcond[3]=((((-1.0)*cj1*cj2*x11655))+((cj0*x11651))+((cj3*x11665)));
evalcond[4]=((((-1.0)*x11655*x11657))+(((-1.0)*sj3*x11665))+(((-1.0)*x11653*x11655)));
evalcond[5]=(x11653+x11657+(((-1.0)*cj3*x11652*x11661))+((r21*x11649))+((r20*x11659))+((x11656*x11664)));
evalcond[6]=(((r21*x11660))+x11651+((x11649*x11661))+((r20*x11658))+(((-1.0)*x11662))+(((-1.0)*x11656*x11666)));
evalcond[7]=(((x11650*x11664))+(((-1.0)*cj1*cj2*x11654))+((r11*x11649))+((r10*x11659))+(((-1.0)*cj3*x11652*x11663))+((sj0*x11651)));
evalcond[8]=(((x11649*x11663))+((r10*x11658))+(((-1.0)*x11654*x11657))+((r11*x11660))+(((-1.0)*x11650*x11666))+(((-1.0)*x11653*x11654)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11667=((1.0)*gconst5);
CheckValue<IkReal> x11668=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*r10*x11667))),-1);
if(!x11668.valid){
continue;
}
CheckValue<IkReal> x11669=IKPowWithIntegerCheck((((cj3*gconst4*r21))+(((-1.0)*cj3*r20*x11667))),-1);
if(!x11669.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x11668.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11669.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r20*sj3))+(((-1.0)*r21*sj3*x11667)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x11668.value)))+IKsqr(((x11669.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r20*sj3))+(((-1.0)*r21*sj3*x11667))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x11668.value)), ((x11669.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r20*sj3))+(((-1.0)*r21*sj3*x11667))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11670=IKsin(j4);
IkReal x11671=IKcos(j4);
IkReal x11672=(gconst5*sj3);
IkReal x11673=(gconst4*r11);
IkReal x11674=(sj1*sj2);
IkReal x11675=((1.0)*gconst5);
IkReal x11676=(cj2*sj1);
IkReal x11677=((1.0)*sj0);
IkReal x11678=((1.0)*cj0);
IkReal x11679=(gconst4*r21);
IkReal x11680=(cj1*sj2);
IkReal x11681=(cj3*gconst4);
IkReal x11682=(gconst4*sj3);
IkReal x11683=(cj3*gconst5);
IkReal x11684=(r20*x11671);
IkReal x11685=((1.0)*cj1*cj2);
IkReal x11686=(r10*x11671);
IkReal x11687=(cj3*x11671);
IkReal x11688=(r02*x11670);
IkReal x11689=((1.0)*sj3*x11671);
evalcond[0]=((((-1.0)*r02*x11671))+(((-1.0)*x11677)));
evalcond[1]=(((x11670*x11679))+(((-1.0)*r20*x11670*x11675)));
evalcond[2]=(cj0+((x11670*x11673))+(((-1.0)*r10*x11670*x11675)));
evalcond[3]=(((cj0*x11674))+((cj3*x11688))+(((-1.0)*cj1*cj2*x11678)));
evalcond[4]=((((-1.0)*x11676*x11678))+(((-1.0)*x11678*x11680))+(((-1.0)*sj3*x11688)));
evalcond[5]=(x11680+x11676+(((-1.0)*cj3*x11675*x11684))+((x11679*x11687))+((r21*x11672))+((r20*x11682)));
evalcond[6]=(x11674+(((-1.0)*x11685))+((r21*x11683))+(((-1.0)*x11679*x11689))+((x11672*x11684))+((r20*x11681)));
evalcond[7]=(((r10*x11682))+((r11*x11672))+(((-1.0)*cj3*x11675*x11686))+((sj0*x11674))+(((-1.0)*cj1*cj2*x11677))+((x11673*x11687)));
evalcond[8]=((((-1.0)*x11676*x11677))+((r11*x11683))+((r10*x11681))+((x11672*x11686))+(((-1.0)*x11673*x11689))+(((-1.0)*x11677*x11680)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11690=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*gconst5*r10))),-1);
if(!x11690.valid){
continue;
}
CheckValue<IkReal> x11691=IKPowWithIntegerCheck(r02,-1);
if(!x11691.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x11690.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x11691.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x11690.value)))+IKsqr(((-1.0)*sj0*(x11691.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x11690.value)), ((-1.0)*sj0*(x11691.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11692=IKsin(j4);
IkReal x11693=IKcos(j4);
IkReal x11694=(gconst5*sj3);
IkReal x11695=(gconst4*r11);
IkReal x11696=(sj1*sj2);
IkReal x11697=((1.0)*gconst5);
IkReal x11698=(cj2*sj1);
IkReal x11699=((1.0)*sj0);
IkReal x11700=((1.0)*cj0);
IkReal x11701=(gconst4*r21);
IkReal x11702=(cj1*sj2);
IkReal x11703=(cj3*gconst4);
IkReal x11704=(gconst4*sj3);
IkReal x11705=(cj3*gconst5);
IkReal x11706=(r20*x11693);
IkReal x11707=((1.0)*cj1*cj2);
IkReal x11708=(r10*x11693);
IkReal x11709=(cj3*x11693);
IkReal x11710=(r02*x11692);
IkReal x11711=((1.0)*sj3*x11693);
evalcond[0]=((((-1.0)*x11699))+(((-1.0)*r02*x11693)));
evalcond[1]=(((x11692*x11701))+(((-1.0)*r20*x11692*x11697)));
evalcond[2]=(cj0+((x11692*x11695))+(((-1.0)*r10*x11692*x11697)));
evalcond[3]=(((cj0*x11696))+((cj3*x11710))+(((-1.0)*cj1*cj2*x11700)));
evalcond[4]=((((-1.0)*x11698*x11700))+(((-1.0)*x11700*x11702))+(((-1.0)*sj3*x11710)));
evalcond[5]=(x11702+x11698+(((-1.0)*cj3*x11697*x11706))+((x11701*x11709))+((r20*x11704))+((r21*x11694)));
evalcond[6]=(x11696+((r21*x11705))+(((-1.0)*x11707))+(((-1.0)*x11701*x11711))+((r20*x11703))+((x11694*x11706)));
evalcond[7]=((((-1.0)*cj3*x11697*x11708))+((r11*x11694))+((sj0*x11696))+((r10*x11704))+(((-1.0)*cj1*cj2*x11699))+((x11695*x11709)));
evalcond[8]=((((-1.0)*x11695*x11711))+((r10*x11703))+((r11*x11705))+(((-1.0)*x11699*x11702))+(((-1.0)*x11698*x11699))+((x11694*x11708)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11712=((1.0)*sj0);
IkReal x11713=((1.0)*gconst4);
CheckValue<IkReal> x11714=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11713))+(((-1.0)*gconst5*r21)))),-1);
if(!x11714.valid){
continue;
}
CheckValue<IkReal> x11715 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x11712))+(((-1.0)*cj0*r02)))),IkReal((((cj0*gconst5*r00))+(((-1.0)*cj0*r01*x11713))+(((-1.0)*gconst4*r11*x11712))+((gconst5*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11715.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11714.value)))+(x11715.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11716=IKsin(j4);
IkReal x11717=IKcos(j4);
IkReal x11718=(gconst5*sj3);
IkReal x11719=(cj3*gconst5);
IkReal x11720=(gconst4*r11);
IkReal x11721=(sj1*sj2);
IkReal x11722=(cj2*sj1);
IkReal x11723=((1.0)*sj0);
IkReal x11724=(gconst4*r01);
IkReal x11725=(gconst4*r21);
IkReal x11726=((1.0)*cj0);
IkReal x11727=(cj1*sj2);
IkReal x11728=(gconst4*sj3);
IkReal x11729=(cj3*gconst4);
IkReal x11730=((1.0)*x11717);
IkReal x11731=((1.0)*cj1*cj2);
IkReal x11732=(cj3*x11716);
IkReal x11733=(cj3*x11717);
IkReal x11734=((1.0)*gconst5*x11716);
IkReal x11735=((1.0)*sj3*x11716);
evalcond[0]=(((x11716*x11725))+(((-1.0)*r20*x11734))+(((-1.0)*r22*x11730)));
evalcond[1]=(((x11716*x11720))+cj0+(((-1.0)*r10*x11734))+(((-1.0)*r12*x11730)));
evalcond[2]=(((x11716*x11724))+(((-1.0)*x11723))+(((-1.0)*r00*x11734))+(((-1.0)*r02*x11730)));
evalcond[3]=(x11727+x11722+((r20*x11728))+(((-1.0)*r20*x11719*x11730))+((x11725*x11733))+((r21*x11718))+((r22*x11732)));
evalcond[4]=(x11721+(((-1.0)*sj3*x11725*x11730))+(((-1.0)*x11731))+((r20*x11729))+(((-1.0)*r22*x11735))+((r20*x11717*x11718))+((r21*x11719)));
evalcond[5]=(((r01*x11718))+((r00*x11728))+((cj0*x11721))+((r02*x11732))+(((-1.0)*cj1*cj2*x11726))+((x11724*x11733))+(((-1.0)*r00*x11719*x11730)));
evalcond[6]=(((sj0*x11721))+(((-1.0)*r10*x11719*x11730))+((x11720*x11733))+((r10*x11728))+(((-1.0)*cj1*cj2*x11723))+((r12*x11732))+((r11*x11718)));
evalcond[7]=(((r01*x11719))+((r00*x11729))+(((-1.0)*sj3*x11724*x11730))+((r00*x11717*x11718))+(((-1.0)*x11722*x11726))+(((-1.0)*r02*x11735))+(((-1.0)*x11726*x11727)));
evalcond[8]=(((r10*x11717*x11718))+(((-1.0)*x11723*x11727))+(((-1.0)*r12*x11735))+((r10*x11729))+(((-1.0)*x11722*x11723))+((r11*x11719))+(((-1.0)*sj3*x11720*x11730)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11736=((1.0)*gconst5);
CheckValue<IkReal> x11737 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x11736))+((gconst4*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11737.valid){
continue;
}
CheckValue<IkReal> x11738=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11736))+(((-1.0)*gconst4*r10)))),-1);
if(!x11738.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11737.value)+(((1.5707963267949)*(x11738.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11739=IKsin(j4);
IkReal x11740=IKcos(j4);
IkReal x11741=(gconst5*sj3);
IkReal x11742=(cj3*gconst5);
IkReal x11743=(gconst4*r11);
IkReal x11744=(sj1*sj2);
IkReal x11745=(cj2*sj1);
IkReal x11746=((1.0)*sj0);
IkReal x11747=(gconst4*r01);
IkReal x11748=(gconst4*r21);
IkReal x11749=((1.0)*cj0);
IkReal x11750=(cj1*sj2);
IkReal x11751=(gconst4*sj3);
IkReal x11752=(cj3*gconst4);
IkReal x11753=((1.0)*x11740);
IkReal x11754=((1.0)*cj1*cj2);
IkReal x11755=(cj3*x11739);
IkReal x11756=(cj3*x11740);
IkReal x11757=((1.0)*gconst5*x11739);
IkReal x11758=((1.0)*sj3*x11739);
evalcond[0]=((((-1.0)*r22*x11753))+((x11739*x11748))+(((-1.0)*r20*x11757)));
evalcond[1]=((((-1.0)*r12*x11753))+cj0+(((-1.0)*r10*x11757))+((x11739*x11743)));
evalcond[2]=((((-1.0)*x11746))+(((-1.0)*r02*x11753))+((x11739*x11747))+(((-1.0)*r00*x11757)));
evalcond[3]=(x11750+x11745+((x11748*x11756))+((r22*x11755))+((r21*x11741))+(((-1.0)*r20*x11742*x11753))+((r20*x11751)));
evalcond[4]=(x11744+((r20*x11740*x11741))+(((-1.0)*r22*x11758))+(((-1.0)*x11754))+((r21*x11742))+(((-1.0)*sj3*x11748*x11753))+((r20*x11752)));
evalcond[5]=(((r01*x11741))+((cj0*x11744))+((r02*x11755))+((x11747*x11756))+(((-1.0)*cj1*cj2*x11749))+((r00*x11751))+(((-1.0)*r00*x11742*x11753)));
evalcond[6]=(((x11743*x11756))+((sj0*x11744))+((r10*x11751))+((r12*x11755))+(((-1.0)*cj1*cj2*x11746))+(((-1.0)*r10*x11742*x11753))+((r11*x11741)));
evalcond[7]=(((r00*x11740*x11741))+((r01*x11742))+(((-1.0)*x11749*x11750))+(((-1.0)*r02*x11758))+((r00*x11752))+(((-1.0)*x11745*x11749))+(((-1.0)*sj3*x11747*x11753)));
evalcond[8]=((((-1.0)*r12*x11758))+((r10*x11752))+((r10*x11740*x11741))+(((-1.0)*sj3*x11743*x11753))+(((-1.0)*x11746*x11750))+(((-1.0)*x11745*x11746))+((r11*x11742)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11759=((1.0)*gconst5);
CheckValue<IkReal> x11760=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x11759)))),-1);
if(!x11760.valid){
continue;
}
CheckValue<IkReal> x11761 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x11759))+((cj0*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11761.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11760.value)))+(x11761.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11762=IKsin(j4);
IkReal x11763=IKcos(j4);
IkReal x11764=(gconst5*sj3);
IkReal x11765=(cj3*gconst5);
IkReal x11766=(gconst4*r11);
IkReal x11767=(sj1*sj2);
IkReal x11768=(cj2*sj1);
IkReal x11769=((1.0)*sj0);
IkReal x11770=(gconst4*r01);
IkReal x11771=(gconst4*r21);
IkReal x11772=((1.0)*cj0);
IkReal x11773=(cj1*sj2);
IkReal x11774=(gconst4*sj3);
IkReal x11775=(cj3*gconst4);
IkReal x11776=((1.0)*x11763);
IkReal x11777=((1.0)*cj1*cj2);
IkReal x11778=(cj3*x11762);
IkReal x11779=(cj3*x11763);
IkReal x11780=((1.0)*gconst5*x11762);
IkReal x11781=((1.0)*sj3*x11762);
evalcond[0]=((((-1.0)*r20*x11780))+((x11762*x11771))+(((-1.0)*r22*x11776)));
evalcond[1]=(((x11762*x11766))+cj0+(((-1.0)*r12*x11776))+(((-1.0)*r10*x11780)));
evalcond[2]=(((x11762*x11770))+(((-1.0)*r02*x11776))+(((-1.0)*r00*x11780))+(((-1.0)*x11769)));
evalcond[3]=((((-1.0)*r20*x11765*x11776))+x11773+x11768+((r20*x11774))+((x11771*x11779))+((r22*x11778))+((r21*x11764)));
evalcond[4]=(x11767+((r20*x11775))+((r20*x11763*x11764))+(((-1.0)*r22*x11781))+(((-1.0)*x11777))+(((-1.0)*sj3*x11771*x11776))+((r21*x11765)));
evalcond[5]=(((x11770*x11779))+((cj0*x11767))+(((-1.0)*r00*x11765*x11776))+((r02*x11778))+((r00*x11774))+((r01*x11764))+(((-1.0)*cj1*cj2*x11772)));
evalcond[6]=((((-1.0)*cj1*cj2*x11769))+((r11*x11764))+((r10*x11774))+((r12*x11778))+((sj0*x11767))+((x11766*x11779))+(((-1.0)*r10*x11765*x11776)));
evalcond[7]=((((-1.0)*x11768*x11772))+(((-1.0)*x11772*x11773))+((r00*x11763*x11764))+(((-1.0)*sj3*x11770*x11776))+((r00*x11775))+(((-1.0)*r02*x11781))+((r01*x11765)));
evalcond[8]=((((-1.0)*x11768*x11769))+((r11*x11765))+((r10*x11775))+(((-1.0)*sj3*x11766*x11776))+(((-1.0)*r12*x11781))+((r10*x11763*x11764))+(((-1.0)*x11769*x11773)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11782=((-1.0)*r10);
IkReal x11784 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x11784)==0){
continue;
}
IkReal x11783=pow(x11784,-0.5);
CheckValue<IkReal> x11785 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11782),IKFAST_ATAN2_MAGTHRESH);
if(!x11785.valid){
continue;
}
IkReal gconst6=((-1.0)*(x11785.value));
IkReal gconst7=(r11*x11783);
IkReal gconst8=(x11782*x11783);
CheckValue<IkReal> x11786 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11786.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x11786.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11787=((-1.0)*r10);
IkReal x11788=x11783;
CheckValue<IkReal> x11790 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11787),IKFAST_ATAN2_MAGTHRESH);
if(!x11790.valid){
continue;
}
IkReal x11789=((-1.0)*(x11790.value));
sj5=gconst7;
cj5=gconst8;
j5=x11789;
IkReal gconst6=x11789;
IkReal gconst7=(r11*x11788);
IkReal gconst8=(x11787*x11788);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11791=((1.0)*sj0);
IkReal x11792=((1.0)*gconst7);
CheckValue<IkReal> x11793 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x11791))+(((-1.0)*cj0*r02)))),IkReal((((gconst8*r10*sj0))+(((-1.0)*cj0*r01*x11792))+(((-1.0)*gconst7*r11*x11791))+((cj0*gconst8*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11793.valid){
continue;
}
CheckValue<IkReal> x11794=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11792))+(((-1.0)*gconst8*r21)))),-1);
if(!x11794.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11793.value)+(((1.5707963267949)*(x11794.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11795=IKsin(j4);
IkReal x11796=IKcos(j4);
IkReal x11797=(gconst7*sj3);
IkReal x11798=(cj3*gconst8);
IkReal x11799=(cj3*gconst7);
IkReal x11800=(sj1*sj2);
IkReal x11801=(cj2*sj1);
IkReal x11802=((1.0)*sj0);
IkReal x11803=((1.0)*cj0);
IkReal x11804=(gconst8*sj3);
IkReal x11805=(cj1*sj2);
IkReal x11806=((1.0)*x11796);
IkReal x11807=((1.0)*x11795);
IkReal x11808=((1.0)*cj1*cj2);
IkReal x11809=(cj3*x11795);
IkReal x11810=(gconst7*x11795);
IkReal x11811=(x11796*x11804);
evalcond[0]=(((r21*x11810))+(((-1.0)*gconst8*r20*x11807))+(((-1.0)*r22*x11806)));
evalcond[1]=((((-1.0)*gconst8*r10*x11807))+cj0+(((-1.0)*r12*x11806))+((r11*x11810)));
evalcond[2]=((((-1.0)*gconst8*r00*x11807))+((r01*x11810))+(((-1.0)*x11802))+(((-1.0)*r02*x11806)));
evalcond[3]=(((r21*x11804))+((r20*x11797))+((r22*x11809))+((r21*x11796*x11799))+(((-1.0)*r20*x11798*x11806))+x11801+x11805);
evalcond[4]=(((r20*x11799))+(((-1.0)*r21*x11797*x11806))+(((-1.0)*r22*sj3*x11807))+(((-1.0)*x11808))+((r21*x11798))+((r20*x11811))+x11800);
evalcond[5]=(((r02*x11809))+(((-1.0)*r00*x11798*x11806))+((cj0*x11800))+(((-1.0)*cj1*cj2*x11803))+((r01*x11804))+((r00*x11797))+((r01*x11796*x11799)));
evalcond[6]=(((r11*x11796*x11799))+((r10*x11797))+((r11*x11804))+((r12*x11809))+(((-1.0)*r10*x11798*x11806))+((sj0*x11800))+(((-1.0)*cj1*cj2*x11802)));
evalcond[7]=((((-1.0)*r02*sj3*x11807))+(((-1.0)*x11803*x11805))+((r00*x11811))+((r01*x11798))+(((-1.0)*x11801*x11803))+((r00*x11799))+(((-1.0)*r01*x11797*x11806)));
evalcond[8]=((((-1.0)*x11802*x11805))+(((-1.0)*r11*x11797*x11806))+((r11*x11798))+((r10*x11799))+((r10*x11811))+(((-1.0)*r12*sj3*x11807))+(((-1.0)*x11801*x11802)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11812=((1.0)*gconst8);
CheckValue<IkReal> x11813=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x11812))+(((-1.0)*gconst7*r00)))),-1);
if(!x11813.valid){
continue;
}
CheckValue<IkReal> x11814 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst7*r21))+(((-1.0)*cj0*r20*x11812)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11814.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11813.value)))+(x11814.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11815=IKsin(j4);
IkReal x11816=IKcos(j4);
IkReal x11817=(gconst7*sj3);
IkReal x11818=(cj3*gconst8);
IkReal x11819=(cj3*gconst7);
IkReal x11820=(sj1*sj2);
IkReal x11821=(cj2*sj1);
IkReal x11822=((1.0)*sj0);
IkReal x11823=((1.0)*cj0);
IkReal x11824=(gconst8*sj3);
IkReal x11825=(cj1*sj2);
IkReal x11826=((1.0)*x11816);
IkReal x11827=((1.0)*x11815);
IkReal x11828=((1.0)*cj1*cj2);
IkReal x11829=(cj3*x11815);
IkReal x11830=(gconst7*x11815);
IkReal x11831=(x11816*x11824);
evalcond[0]=(((r21*x11830))+(((-1.0)*gconst8*r20*x11827))+(((-1.0)*r22*x11826)));
evalcond[1]=(cj0+((r11*x11830))+(((-1.0)*r12*x11826))+(((-1.0)*gconst8*r10*x11827)));
evalcond[2]=((((-1.0)*gconst8*r00*x11827))+(((-1.0)*r02*x11826))+(((-1.0)*x11822))+((r01*x11830)));
evalcond[3]=(((r22*x11829))+(((-1.0)*r20*x11818*x11826))+((r20*x11817))+((r21*x11824))+x11825+x11821+((r21*x11816*x11819)));
evalcond[4]=((((-1.0)*r22*sj3*x11827))+((r21*x11818))+(((-1.0)*x11828))+((r20*x11831))+((r20*x11819))+(((-1.0)*r21*x11817*x11826))+x11820);
evalcond[5]=(((r00*x11817))+(((-1.0)*r00*x11818*x11826))+((r02*x11829))+((cj0*x11820))+((r01*x11816*x11819))+(((-1.0)*cj1*cj2*x11823))+((r01*x11824)));
evalcond[6]=((((-1.0)*r10*x11818*x11826))+((sj0*x11820))+((r12*x11829))+((r10*x11817))+((r11*x11816*x11819))+(((-1.0)*cj1*cj2*x11822))+((r11*x11824)));
evalcond[7]=((((-1.0)*x11821*x11823))+((r01*x11818))+((r00*x11819))+(((-1.0)*x11823*x11825))+(((-1.0)*r01*x11817*x11826))+((r00*x11831))+(((-1.0)*r02*sj3*x11827)));
evalcond[8]=((((-1.0)*x11821*x11822))+(((-1.0)*x11822*x11825))+((r10*x11831))+((r10*x11819))+(((-1.0)*r12*sj3*x11827))+((r11*x11818))+(((-1.0)*r11*x11817*x11826)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11832=((-1.0)*r11);
IkReal x11834 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x11834)==0){
continue;
}
IkReal x11833=pow(x11834,-0.5);
CheckValue<IkReal> x11835 = IKatan2WithCheck(IkReal(x11832),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11835.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x11835.value))));
IkReal gconst10=(x11832*x11833);
IkReal gconst11=((1.0)*r10*x11833);
CheckValue<IkReal> x11836 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11836.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x11836.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11837=((-1.0)*r11);
CheckValue<IkReal> x11840 = IKatan2WithCheck(IkReal(x11837),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11840.valid){
continue;
}
IkReal x11838=((1.0)*(x11840.value));
IkReal x11839=x11833;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11838)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11838)));
IkReal gconst10=(x11837*x11839);
IkReal gconst11=((1.0)*r10*x11839);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11841=((-1.0)*r11);
CheckValue<IkReal> x11844 = IKatan2WithCheck(IkReal(x11841),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11844.valid){
continue;
}
IkReal x11842=((1.0)*(x11844.value));
IkReal x11843=x11833;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11842)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11842)));
IkReal gconst10=(x11841*x11843);
IkReal gconst11=((1.0)*r10*x11843);
IkReal x11845=r12*r12;
IkReal x11846=((1.0)*sj0);
IkReal x11847=(cj0*r02);
IkReal x11848=x11833;
j4eval[0]=((IKabs((((sj0*x11845*x11848))+((r12*x11847*x11848))+(((-1.0)*x11846*x11848)))))+(IKabs(((((-1.0)*x11847))+(((-1.0)*r12*x11846))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11849=((-1.0)*r11);
CheckValue<IkReal> x11852 = IKatan2WithCheck(IkReal(x11849),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11852.valid){
continue;
}
IkReal x11850=((1.0)*(x11852.value));
IkReal x11851=x11833;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11850)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11850)));
IkReal gconst10=(x11849*x11851);
IkReal gconst11=((1.0)*r10*x11851);
IkReal x11853=((1.0)*cj3);
CheckValue<IkReal> x11858=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x11858.valid){
continue;
}
IkReal x11854=x11858.value;
IkReal x11855=(cj3*x11854);
IkReal x11856=(x11853*x11854);
IkReal x11857=((((-1.0)*x11853*(r22*r22)))+(((-1.0)*x11856*(r11*r11)*(r21*r21)))+(((-1.0)*x11856*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x11855)));
j4eval[0]=x11857;
j4eval[1]=IKsign(x11857);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11859=((-1.0)*r11);
CheckValue<IkReal> x11862 = IKatan2WithCheck(IkReal(x11859),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11862.valid){
continue;
}
IkReal x11860=((1.0)*(x11862.value));
IkReal x11861=x11833;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11860)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11860)));
IkReal gconst10=(x11859*x11861);
IkReal gconst11=((1.0)*r10*x11861);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11863=((-1.0)*r11);
CheckValue<IkReal> x11866 = IKatan2WithCheck(IkReal(x11863),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11866.valid){
continue;
}
IkReal x11864=((1.0)*(x11866.value));
IkReal x11865=x11833;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11864)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11864)));
IkReal gconst10=(x11863*x11865);
IkReal gconst11=((1.0)*r10*x11865);
IkReal x11867=r12*r12;
IkReal x11868=((1.0)*sj0);
IkReal x11869=(cj0*r02);
IkReal x11870=x11833;
j4eval[0]=((IKabs(((((-1.0)*x11869))+(((-1.0)*r12*x11868)))))+(IKabs((((r12*x11869*x11870))+(((-1.0)*x11868*x11870))+((sj0*x11867*x11870))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11871=((-1.0)*r11);
CheckValue<IkReal> x11874 = IKatan2WithCheck(IkReal(x11871),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11874.valid){
continue;
}
IkReal x11872=((1.0)*(x11874.value));
IkReal x11873=x11833;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11872)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11872)));
IkReal gconst10=(x11871*x11873);
IkReal gconst11=((1.0)*r10*x11873);
IkReal x11875=r12*r12;
IkReal x11876=(cj1*cj2*r22);
IkReal x11877=(r22*sj1*sj2);
CheckValue<IkReal> x11881=IKPowWithIntegerCheck(((-1.0)+x11875),-1);
if(!x11881.valid){
continue;
}
IkReal x11878=x11881.value;
if((((1.0)+(((-1.0)*x11875)))) < -0.00001)
continue;
IkReal x11879=IKsqrt(((1.0)+(((-1.0)*x11875))));
IkReal x11880=(r12*x11878*x11879);
j4eval[0]=((IKabs(((((-1.0)*x11876))+x11877)))+(IKabs(((((-1.0)*x11877*x11880))+((x11876*x11880))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11882=((-1.0)*r11);
CheckValue<IkReal> x11885 = IKatan2WithCheck(IkReal(x11882),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11885.valid){
continue;
}
IkReal x11883=((1.0)*(x11885.value));
IkReal x11884=x11833;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11883)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11883)));
IkReal gconst10=(x11882*x11884);
IkReal gconst11=((1.0)*r10*x11884);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11886=((-1.0)*r11);
CheckValue<IkReal> x11889 = IKatan2WithCheck(IkReal(x11886),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11889.valid){
continue;
}
IkReal x11887=((1.0)*(x11889.value));
IkReal x11888=x11833;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11887)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11887)));
IkReal gconst10=(x11886*x11888);
IkReal gconst11=((1.0)*r10*x11888);
IkReal x11890=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x11894=IKPowWithIntegerCheck(x11890,-1);
if(!x11894.valid){
continue;
}
IkReal x11891=x11894.value;
IkReal x11892=((1.0)*x11891);
IkReal x11893=((((-1.0)*x11892*(r00*r00)*(r10*r10)))+(((-2.0)*r00*r01*r10*r11*x11891))+(((-1.0)*(r02*r02)))+(((-1.0)*x11892*(r01*r01)*(r11*r11))));
j4eval[0]=x11893;
j4eval[1]=IKsign(x11893);
j4eval[2]=r02;
j4eval[3]=x11890;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11895=((-1.0)*r11);
CheckValue<IkReal> x11898 = IKatan2WithCheck(IkReal(x11895),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11898.valid){
continue;
}
IkReal x11896=((1.0)*(x11898.value));
IkReal x11897=x11833;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11896)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11896)));
IkReal gconst10=(x11895*x11897);
IkReal gconst11=((1.0)*r10*x11897);
IkReal x11899=r12*r12;
IkReal x11900=(cj1*cj2*r22);
IkReal x11901=(r22*sj1*sj2);
CheckValue<IkReal> x11905=IKPowWithIntegerCheck(((-1.0)+x11899),-1);
if(!x11905.valid){
continue;
}
IkReal x11902=x11905.value;
if((((1.0)+(((-1.0)*x11899)))) < -0.00001)
continue;
IkReal x11903=IKsqrt(((1.0)+(((-1.0)*x11899))));
IkReal x11904=(r12*x11902*x11903);
j4eval[0]=((IKabs(((((-1.0)*x11901*x11904))+((x11900*x11904)))))+(IKabs((x11901+(((-1.0)*x11900))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11906=(gconst10*r21);
IkReal x11907=(gconst11*r20);
IkReal x11908=(sj1*sj2);
IkReal x11909=(cj1*cj2);
CheckValue<IkReal> x11910=IKPowWithIntegerCheck(IKsign(((x11906*x11906)+(r22*r22)+(((-2.0)*x11906*x11907))+(x11907*x11907))),-1);
if(!x11910.valid){
continue;
}
CheckValue<IkReal> x11911 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x11909))+((r22*x11908)))),IkReal((((x11906*x11908))+(((-1.0)*x11906*x11909))+((x11907*x11909))+(((-1.0)*x11907*x11908)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11911.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11910.value)))+(x11911.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11912=IKsin(j4);
IkReal x11913=IKcos(j4);
IkReal x11914=((1.0)*cj2);
IkReal x11915=((1.0)*x11913);
IkReal x11916=(gconst10*x11912);
IkReal x11917=((1.0)*x11912);
IkReal x11918=(gconst11*x11913);
IkReal x11919=(gconst11*x11917);
evalcond[0]=((((-1.0)*r22*x11915))+(((-1.0)*r20*x11919))+((r21*x11916)));
evalcond[1]=(((r11*x11916))+(((-1.0)*r12*x11915))+(((-1.0)*r10*x11919)));
evalcond[2]=(((r00*x11918))+(((-1.0)*gconst10*r01*x11915))+(((-1.0)*r02*x11917)));
evalcond[3]=((-1.0)+((r01*x11916))+(((-1.0)*r02*x11915))+(((-1.0)*r00*x11919)));
evalcond[4]=((((-1.0)*gconst10*r21*x11915))+(((-1.0)*cj1*x11914))+(((-1.0)*r22*x11917))+((sj1*sj2))+((r20*x11918)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*gconst10*r11*x11915))+(((-1.0)*sj1*x11914))+((r10*x11918))+(((-1.0)*r12*x11917)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11920=(gconst11*r00);
IkReal x11921=(gconst10*r01);
CheckValue<IkReal> x11922 = IKatan2WithCheck(IkReal((x11920+(((-1.0)*x11921)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11922.valid){
continue;
}
CheckValue<IkReal> x11923=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x11920*x11920)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x11921*x11921)))+(((2.0)*x11920*x11921)))),-1);
if(!x11923.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11922.value)+(((1.5707963267949)*(x11923.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11924=IKsin(j4);
IkReal x11925=IKcos(j4);
IkReal x11926=((1.0)*cj2);
IkReal x11927=((1.0)*x11925);
IkReal x11928=(gconst10*x11924);
IkReal x11929=((1.0)*x11924);
IkReal x11930=(gconst11*x11925);
IkReal x11931=(gconst11*x11929);
evalcond[0]=(((r21*x11928))+(((-1.0)*r22*x11927))+(((-1.0)*r20*x11931)));
evalcond[1]=((((-1.0)*r10*x11931))+((r11*x11928))+(((-1.0)*r12*x11927)));
evalcond[2]=((((-1.0)*r02*x11929))+((r00*x11930))+(((-1.0)*gconst10*r01*x11927)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11927))+(((-1.0)*r00*x11931))+((r01*x11928)));
evalcond[4]=((((-1.0)*cj1*x11926))+((r20*x11930))+((sj1*sj2))+(((-1.0)*r22*x11929))+(((-1.0)*gconst10*r21*x11927)));
evalcond[5]=(((r10*x11930))+(((-1.0)*gconst10*r11*x11927))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x11929))+(((-1.0)*sj1*x11926)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11932 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11932.valid){
continue;
}
CheckValue<IkReal> x11933=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x11933.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11932.value)+(((1.5707963267949)*(x11933.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11934=IKsin(j4);
IkReal x11935=IKcos(j4);
IkReal x11936=((1.0)*cj2);
IkReal x11937=((1.0)*x11935);
IkReal x11938=(gconst10*x11934);
IkReal x11939=((1.0)*x11934);
IkReal x11940=(gconst11*x11935);
IkReal x11941=(gconst11*x11939);
evalcond[0]=((((-1.0)*r20*x11941))+((r21*x11938))+(((-1.0)*r22*x11937)));
evalcond[1]=(((r11*x11938))+(((-1.0)*r12*x11937))+(((-1.0)*r10*x11941)));
evalcond[2]=((((-1.0)*gconst10*r01*x11937))+(((-1.0)*r02*x11939))+((r00*x11940)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11937))+(((-1.0)*r00*x11941))+((r01*x11938)));
evalcond[4]=(((r20*x11940))+((sj1*sj2))+(((-1.0)*gconst10*r21*x11937))+(((-1.0)*r22*x11939))+(((-1.0)*cj1*x11936)));
evalcond[5]=((((-1.0)*sj1*x11936))+(((-1.0)*gconst10*r11*x11937))+(((-1.0)*cj1*sj2))+((r10*x11940))+(((-1.0)*r12*x11939)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11942=((-1.0)*r11);
CheckValue<IkReal> x11945 = IKatan2WithCheck(IkReal(x11942),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11945.valid){
continue;
}
IkReal x11943=((1.0)*(x11945.value));
IkReal x11944=x11833;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11943)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11943)));
IkReal gconst10=(x11942*x11944);
IkReal gconst11=((1.0)*r10*x11944);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11946=((-1.0)*r11);
CheckValue<IkReal> x11949 = IKatan2WithCheck(IkReal(x11946),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11949.valid){
continue;
}
IkReal x11947=((1.0)*(x11949.value));
IkReal x11948=x11833;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11947)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11947)));
IkReal gconst10=(x11946*x11948);
IkReal gconst11=((1.0)*r10*x11948);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11950=((-1.0)*r11);
CheckValue<IkReal> x11953 = IKatan2WithCheck(IkReal(x11950),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11953.valid){
continue;
}
IkReal x11951=((1.0)*(x11953.value));
IkReal x11952=x11833;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11951)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11951)));
IkReal gconst10=(x11950*x11952);
IkReal gconst11=((1.0)*r10*x11952);
IkReal x11954=r12*r12;
CheckValue<IkReal> x11957=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x11954))),-1);
if(!x11957.valid){
continue;
}
IkReal x11955=x11957.value;
IkReal x11956=((1.0)*x11955);
j4eval[0]=IKsign((((x11956*(r10*r10*r10*r10)))+x11954+(((2.0)*x11955*(r10*r10)*(r11*r11)))+((x11956*(r11*r11*r11*r11)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11958=(cj2*sj1);
IkReal x11959=(gconst10*r11);
IkReal x11960=(gconst11*r10);
IkReal x11961=(cj1*sj2);
CheckValue<IkReal> x11962=IKPowWithIntegerCheck(IKsign(((x11959*x11959)+(r12*r12)+(((-2.0)*x11959*x11960))+(x11960*x11960))),-1);
if(!x11962.valid){
continue;
}
CheckValue<IkReal> x11963 = IKatan2WithCheck(IkReal((((r12*x11958))+((r12*x11961)))),IkReal(((((-1.0)*x11960*x11961))+((x11959*x11961))+((x11958*x11959))+(((-1.0)*x11958*x11960)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11963.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11962.value)))+(x11963.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11964=IKsin(j4);
IkReal x11965=IKcos(j4);
IkReal x11966=((1.0)*x11965);
IkReal x11967=(gconst10*x11964);
IkReal x11968=((1.0)*x11964);
IkReal x11969=(gconst11*x11965);
IkReal x11970=(gconst11*x11968);
evalcond[0]=((((-1.0)*r20*x11970))+(((-1.0)*r22*x11966))+((r21*x11967)));
evalcond[1]=((((-1.0)*r10*x11970))+(((-1.0)*r12*x11966))+((r11*x11967)));
evalcond[2]=(((r00*x11969))+(((-1.0)*gconst10*r01*x11966))+(((-1.0)*r02*x11968)));
evalcond[3]=((1.0)+((r01*x11967))+(((-1.0)*r00*x11970))+(((-1.0)*r02*x11966)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x11968))+((cj1*sj2))+(((-1.0)*gconst10*r11*x11966))+((r10*x11969)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x11969))+(((-1.0)*r22*x11968))+(((-1.0)*gconst10*r21*x11966)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11971=(gconst11*r00);
IkReal x11972=(gconst10*r01);
CheckValue<IkReal> x11973 = IKatan2WithCheck(IkReal((x11971+(((-1.0)*x11972)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11973.valid){
continue;
}
CheckValue<IkReal> x11974=IKPowWithIntegerCheck(IKsign(((((-2.0)*x11971*x11972))+(x11971*x11971)+(x11972*x11972)+(r02*r02))),-1);
if(!x11974.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11973.value)+(((1.5707963267949)*(x11974.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11975=IKsin(j4);
IkReal x11976=IKcos(j4);
IkReal x11977=((1.0)*x11976);
IkReal x11978=(gconst10*x11975);
IkReal x11979=((1.0)*x11975);
IkReal x11980=(gconst11*x11976);
IkReal x11981=(gconst11*x11979);
evalcond[0]=((((-1.0)*r22*x11977))+(((-1.0)*r20*x11981))+((r21*x11978)));
evalcond[1]=((((-1.0)*r12*x11977))+((r11*x11978))+(((-1.0)*r10*x11981)));
evalcond[2]=((((-1.0)*gconst10*r01*x11977))+((r00*x11980))+(((-1.0)*r02*x11979)));
evalcond[3]=((1.0)+((r01*x11978))+(((-1.0)*r00*x11981))+(((-1.0)*r02*x11977)));
evalcond[4]=(((cj2*sj1))+((r10*x11980))+(((-1.0)*r12*x11979))+(((-1.0)*gconst10*r11*x11977))+((cj1*sj2)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x11980))+(((-1.0)*r22*x11979))+(((-1.0)*gconst10*r21*x11977)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11982=((1.0)*gconst11);
CheckValue<IkReal> x11983 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*r10*x11982)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11983.valid){
continue;
}
CheckValue<IkReal> x11984=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*r21*x11982)))),-1);
if(!x11984.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11983.value)+(((1.5707963267949)*(x11984.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11985=IKsin(j4);
IkReal x11986=IKcos(j4);
IkReal x11987=((1.0)*x11986);
IkReal x11988=(gconst10*x11985);
IkReal x11989=((1.0)*x11985);
IkReal x11990=(gconst11*x11986);
IkReal x11991=(gconst11*x11989);
evalcond[0]=(((r21*x11988))+(((-1.0)*r20*x11991))+(((-1.0)*r22*x11987)));
evalcond[1]=((((-1.0)*r12*x11987))+((r11*x11988))+(((-1.0)*r10*x11991)));
evalcond[2]=((((-1.0)*gconst10*r01*x11987))+(((-1.0)*r02*x11989))+((r00*x11990)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11987))+((r01*x11988))+(((-1.0)*r00*x11991)));
evalcond[4]=((((-1.0)*r12*x11989))+((cj2*sj1))+(((-1.0)*gconst10*r11*x11987))+((cj1*sj2))+((r10*x11990)));
evalcond[5]=(((r20*x11990))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst10*r21*x11987))+(((-1.0)*r22*x11989)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11992=((-1.0)*r11);
IkReal x11993=((-1.0)*r10);
CheckValue<IkReal> x11995 = IKatan2WithCheck(IkReal(x11992),IkReal(x11993),IKFAST_ATAN2_MAGTHRESH);
if(!x11995.valid){
continue;
}
IkReal x11994=((1.0)*(x11995.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11994)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11993);
rxp1_1=(px*r21);
rxp1_2=(px*x11992);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11994)));
IkReal gconst10=x11992;
IkReal gconst11=((1.0)*r10);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11996=((-1.0)*r11);
IkReal x11997=((-1.0)*r10);
CheckValue<IkReal> x11999 = IKatan2WithCheck(IkReal(x11996),IkReal(x11997),IKFAST_ATAN2_MAGTHRESH);
if(!x11999.valid){
continue;
}
IkReal x11998=((1.0)*(x11999.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11998)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11997);
rxp1_1=(px*r21);
rxp1_2=(px*x11996);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11998)));
IkReal gconst10=x11996;
IkReal gconst11=((1.0)*r10);
j4eval[0]=((((1.0)*r10*r20))+(((1.0)*r11*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12000=((-1.0)*r11);
IkReal x12001=((-1.0)*r10);
CheckValue<IkReal> x12003 = IKatan2WithCheck(IkReal(x12000),IkReal(x12001),IKFAST_ATAN2_MAGTHRESH);
if(!x12003.valid){
continue;
}
IkReal x12002=((1.0)*(x12003.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12002)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12001);
rxp1_1=(px*r21);
rxp1_2=(px*x12000);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12002)));
IkReal gconst10=x12000;
IkReal gconst11=((1.0)*r10);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12006=IKPowWithIntegerCheck(((((-1.0)*gconst10*r11))+((gconst11*r10))),-1);
if(!x12006.valid){
continue;
}
IkReal x12004=x12006.value;
IkReal x12005=(sj0*x12004);
cj4array[0]=(((cj1*sj2*x12005))+((cj2*sj1*x12005)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12007=IKsin(j4);
IkReal x12008=IKcos(j4);
IkReal x12009=(gconst10*r21);
IkReal x12010=(gconst11*r20);
IkReal x12011=((1.0)*x12007);
IkReal x12012=((1.0)*x12008);
evalcond[0]=((-1.0)*r02*x12007);
evalcond[1]=((((-1.0)*r02*x12012))+(((-1.0)*sj0)));
evalcond[2]=((((-1.0)*x12010*x12011))+((x12007*x12009)));
evalcond[3]=((((-1.0)*gconst11*r10*x12011))+((gconst10*r11*x12007)));
evalcond[4]=(((x12008*x12010))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x12009*x12012)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12014=IKPowWithIntegerCheck((((gconst11*r20))+(((-1.0)*gconst10*r21))),-1);
if(!x12014.valid){
continue;
}
IkReal x12013=x12014.value;
cj4array[0]=((((-1.0)*sj1*sj2*x12013))+((cj1*cj2*x12013)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12015=IKsin(j4);
IkReal x12016=IKcos(j4);
IkReal x12017=((1.0)*sj0);
IkReal x12018=(gconst10*x12015);
IkReal x12019=((1.0)*x12016);
IkReal x12020=((1.0)*gconst11*x12015);
evalcond[0]=((-1.0)*r02*x12015);
evalcond[1]=((((-1.0)*r02*x12019))+(((-1.0)*x12017)));
evalcond[2]=((((-1.0)*r20*x12020))+((r21*x12018)));
evalcond[3]=(((r11*x12018))+(((-1.0)*r10*x12020)));
evalcond[4]=(((gconst11*r10*x12016))+(((-1.0)*cj2*sj1*x12017))+(((-1.0)*cj1*sj2*x12017))+(((-1.0)*gconst10*r11*x12019)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12021=IKPowWithIntegerCheck(r02,-1);
if(!x12021.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x12021.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12022=IKsin(j4);
IkReal x12023=IKcos(j4);
IkReal x12024=(gconst10*r21);
IkReal x12025=((1.0)*sj0);
IkReal x12026=(gconst10*r11);
IkReal x12027=(gconst11*x12023);
IkReal x12028=((1.0)*x12023);
IkReal x12029=((1.0)*gconst11*x12022);
evalcond[0]=((-1.0)*r02*x12022);
evalcond[1]=((((-1.0)*r20*x12029))+((x12022*x12024)));
evalcond[2]=(((x12022*x12026))+(((-1.0)*r10*x12029)));
evalcond[3]=(((r20*x12027))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x12024*x12028)));
evalcond[4]=((((-1.0)*cj1*sj2*x12025))+(((-1.0)*cj2*sj1*x12025))+(((-1.0)*x12026*x12028))+((r10*x12027)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12030=((1.0)*gconst11);
CheckValue<IkReal> x12031 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x12030))+((gconst10*r11*sj0))+(((-1.0)*r10*sj0*x12030))+((cj0*gconst10*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12031.valid){
continue;
}
CheckValue<IkReal> x12032=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12032.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12031.value)+(((1.5707963267949)*(x12032.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12033=IKsin(j4);
IkReal x12034=IKcos(j4);
IkReal x12035=((1.0)*cj2);
IkReal x12036=((1.0)*sj0);
IkReal x12037=(cj1*sj2);
IkReal x12038=(gconst10*x12033);
IkReal x12039=((1.0)*x12034);
IkReal x12040=(gconst11*x12034);
IkReal x12041=((1.0)*x12033);
IkReal x12042=(gconst11*x12041);
evalcond[0]=((((-1.0)*r20*x12042))+((r21*x12038)));
evalcond[1]=(cj0+(((-1.0)*r10*x12042))+(((-1.0)*r12*x12039))+((r11*x12038)));
evalcond[2]=((((-1.0)*cj1*x12035))+((sj1*sj2))+((r20*x12040))+(((-1.0)*gconst10*r21*x12039)));
evalcond[3]=((((-1.0)*r00*x12042))+(((-1.0)*x12036))+((r01*x12038))+(((-1.0)*r02*x12039)));
evalcond[4]=((((-1.0)*gconst10*r01*x12039))+((r00*x12040))+(((-1.0)*cj0*sj1*x12035))+(((-1.0)*r02*x12041))+(((-1.0)*cj0*x12037)));
evalcond[5]=(((r10*x12040))+(((-1.0)*r12*x12041))+(((-1.0)*gconst10*r11*x12039))+(((-1.0)*x12036*x12037))+(((-1.0)*sj0*sj1*x12035)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12043=(gconst10*r21);
IkReal x12044=(gconst11*r20);
IkReal x12045=(sj1*sj2);
IkReal x12046=(cj1*cj2);
CheckValue<IkReal> x12047 = IKatan2WithCheck(IkReal((((r22*x12045))+(((-1.0)*r22*x12046)))),IkReal(((((-1.0)*x12044*x12045))+((x12043*x12045))+((x12044*x12046))+(((-1.0)*x12043*x12046)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12047.valid){
continue;
}
CheckValue<IkReal> x12048=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x12043*x12044))+(x12044*x12044)+(x12043*x12043))),-1);
if(!x12048.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12047.value)+(((1.5707963267949)*(x12048.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12049=IKsin(j4);
IkReal x12050=IKcos(j4);
IkReal x12051=((1.0)*cj2);
IkReal x12052=((1.0)*sj0);
IkReal x12053=(cj1*sj2);
IkReal x12054=((1.0)*x12050);
IkReal x12055=(gconst10*x12049);
IkReal x12056=((1.0)*x12049);
IkReal x12057=(gconst11*x12050);
IkReal x12058=(gconst11*x12056);
evalcond[0]=((((-1.0)*r20*x12058))+(((-1.0)*r22*x12054))+((r21*x12055)));
evalcond[1]=((((-1.0)*r10*x12058))+cj0+(((-1.0)*r12*x12054))+((r11*x12055)));
evalcond[2]=((((-1.0)*x12052))+((r01*x12055))+(((-1.0)*r02*x12054))+(((-1.0)*r00*x12058)));
evalcond[3]=(((r20*x12057))+(((-1.0)*cj1*x12051))+((sj1*sj2))+(((-1.0)*r22*x12056))+(((-1.0)*gconst10*r21*x12054)));
evalcond[4]=((((-1.0)*cj0*sj1*x12051))+((r00*x12057))+(((-1.0)*r02*x12056))+(((-1.0)*gconst10*r01*x12054))+(((-1.0)*cj0*x12053)));
evalcond[5]=(((r10*x12057))+(((-1.0)*x12052*x12053))+(((-1.0)*gconst10*r11*x12054))+(((-1.0)*r12*x12056))+(((-1.0)*sj0*sj1*x12051)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12059=((1.0)*sj0);
IkReal x12060=((1.0)*gconst10);
CheckValue<IkReal> x12061 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x12059)))),IkReal(((((-1.0)*cj0*r01*x12060))+(((-1.0)*gconst10*r11*x12059))+((cj0*gconst11*r00))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12061.valid){
continue;
}
CheckValue<IkReal> x12062=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12060))+(((-1.0)*gconst11*r21)))),-1);
if(!x12062.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12061.value)+(((1.5707963267949)*(x12062.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12063=IKsin(j4);
IkReal x12064=IKcos(j4);
IkReal x12065=((1.0)*cj2);
IkReal x12066=((1.0)*sj0);
IkReal x12067=(cj1*sj2);
IkReal x12068=((1.0)*x12064);
IkReal x12069=(gconst10*x12063);
IkReal x12070=((1.0)*x12063);
IkReal x12071=(gconst11*x12064);
IkReal x12072=(gconst11*x12070);
evalcond[0]=(((r21*x12069))+(((-1.0)*r20*x12072))+(((-1.0)*r22*x12068)));
evalcond[1]=(cj0+(((-1.0)*r10*x12072))+(((-1.0)*r12*x12068))+((r11*x12069)));
evalcond[2]=(((r01*x12069))+(((-1.0)*r02*x12068))+(((-1.0)*x12066))+(((-1.0)*r00*x12072)));
evalcond[3]=((((-1.0)*gconst10*r21*x12068))+((sj1*sj2))+((r20*x12071))+(((-1.0)*r22*x12070))+(((-1.0)*cj1*x12065)));
evalcond[4]=((((-1.0)*cj0*x12067))+(((-1.0)*r02*x12070))+(((-1.0)*cj0*sj1*x12065))+(((-1.0)*gconst10*r01*x12068))+((r00*x12071)));
evalcond[5]=((((-1.0)*sj0*sj1*x12065))+(((-1.0)*x12066*x12067))+((r10*x12071))+(((-1.0)*gconst10*r11*x12068))+(((-1.0)*r12*x12070)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12073=((1.0)*gconst11);
CheckValue<IkReal> x12074 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst10*r21))+(((-1.0)*cj0*r20*x12073)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12074.valid){
continue;
}
CheckValue<IkReal> x12075=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x12073)))),-1);
if(!x12075.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12074.value)+(((1.5707963267949)*(x12075.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12076=IKsin(j4);
IkReal x12077=IKcos(j4);
IkReal x12078=((1.0)*cj2);
IkReal x12079=((1.0)*sj0);
IkReal x12080=(cj1*sj2);
IkReal x12081=((1.0)*x12077);
IkReal x12082=(gconst10*x12076);
IkReal x12083=((1.0)*x12076);
IkReal x12084=(gconst11*x12077);
IkReal x12085=(gconst11*x12083);
evalcond[0]=((((-1.0)*r22*x12081))+((r21*x12082))+(((-1.0)*r20*x12085)));
evalcond[1]=((((-1.0)*r12*x12081))+cj0+((r11*x12082))+(((-1.0)*r10*x12085)));
evalcond[2]=(((r01*x12082))+(((-1.0)*r00*x12085))+(((-1.0)*r02*x12081))+(((-1.0)*x12079)));
evalcond[3]=(((r20*x12084))+((sj1*sj2))+(((-1.0)*gconst10*r21*x12081))+(((-1.0)*r22*x12083))+(((-1.0)*cj1*x12078)));
evalcond[4]=(((r00*x12084))+(((-1.0)*gconst10*r01*x12081))+(((-1.0)*cj0*x12080))+(((-1.0)*cj0*sj1*x12078))+(((-1.0)*r02*x12083)));
evalcond[5]=((((-1.0)*r12*x12083))+(((-1.0)*sj0*sj1*x12078))+(((-1.0)*gconst10*r11*x12081))+((r10*x12084))+(((-1.0)*x12079*x12080)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x12086=((-1.0)*r11);
CheckValue<IkReal> x12089 = IKatan2WithCheck(IkReal(x12086),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12089.valid){
continue;
}
IkReal x12087=((1.0)*(x12089.value));
IkReal x12088=x11833;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12087)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12087)));
IkReal gconst10=(x12086*x12088);
IkReal gconst11=((1.0)*r10*x12088);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12090=((-1.0)*r11);
CheckValue<IkReal> x12093 = IKatan2WithCheck(IkReal(x12090),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12093.valid){
continue;
}
IkReal x12091=((1.0)*(x12093.value));
IkReal x12092=x11833;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12091)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12091)));
IkReal gconst10=(x12090*x12092);
IkReal gconst11=((1.0)*r10*x12092);
IkReal x12094=r12*r12;
IkReal x12095=((1.0)*sj0);
IkReal x12096=(cj0*r02);
IkReal x12097=x11833;
j4eval[0]=((IKabs((((sj0*x12094*x12097))+(((-1.0)*x12095*x12097))+((r12*x12096*x12097)))))+(IKabs(((((-1.0)*x12096))+(((-1.0)*r12*x12095))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x12098=((-1.0)*r11);
CheckValue<IkReal> x12101 = IKatan2WithCheck(IkReal(x12098),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12101.valid){
continue;
}
IkReal x12099=((1.0)*(x12101.value));
IkReal x12100=x11833;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12099)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12099)));
IkReal gconst10=(x12098*x12100);
IkReal gconst11=((1.0)*r10*x12100);
IkReal x12102=r12*r12;
IkReal x12103=((1.0)+(((-1.0)*x12102)));
IkReal x12104=(r22*sj1*sj2);
IkReal x12105=(cj1*cj2*r22);
CheckValue<IkReal> x12112=IKPowWithIntegerCheck(x12103,-1);
if(!x12112.valid){
continue;
}
IkReal x12106=x12112.value;
CheckValue<IkReal> x12113=IKPowWithIntegerCheck(((-1.0)+x12102),-1);
if(!x12113.valid){
continue;
}
IkReal x12107=x12113.value;
IkReal x12108=((1.0)*x12106);
if((x12103) < -0.00001)
continue;
IkReal x12109=IKsqrt(x12103);
IkReal x12110=(r12*x12107*x12109);
IkReal x12111=((((-1.0)*x12108*(r10*r10)*(r20*r20)))+(((-1.0)*x12108*(r11*r11)*(r21*r21)))+(((-1.0)*(r22*r22)))+(((-2.0)*r10*r11*r20*r21*x12106)));
j4eval[0]=x12111;
j4eval[1]=((IKabs((x12104+(((-1.0)*x12105)))))+(IKabs((((x12105*x12110))+(((-1.0)*x12104*x12110))))));
j4eval[2]=IKsign(x12111);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12114=((-1.0)*r11);
CheckValue<IkReal> x12117 = IKatan2WithCheck(IkReal(x12114),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12117.valid){
continue;
}
IkReal x12115=((1.0)*(x12117.value));
IkReal x12116=x11833;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12115)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12115)));
IkReal gconst10=(x12114*x12116);
IkReal gconst11=((1.0)*r10*x12116);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12118=((-1.0)*r11);
CheckValue<IkReal> x12121 = IKatan2WithCheck(IkReal(x12118),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12121.valid){
continue;
}
IkReal x12119=((1.0)*(x12121.value));
IkReal x12120=x11833;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12119)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12119)));
IkReal gconst10=(x12118*x12120);
IkReal gconst11=((1.0)*r10*x12120);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12122=((-1.0)*r11);
CheckValue<IkReal> x12125 = IKatan2WithCheck(IkReal(x12122),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12125.valid){
continue;
}
IkReal x12123=((1.0)*(x12125.value));
IkReal x12124=x11833;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12123)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12123)));
IkReal gconst10=(x12122*x12124);
IkReal gconst11=((1.0)*r10*x12124);
IkReal x12126=(cj1*r02*sj2);
IkReal x12127=(cj2*r02*sj1);
IkReal x12128=x11833;
IkReal x12129=(r12*x12128);
j4eval[0]=((IKabs((((x12126*x12129))+((x12127*x12129)))))+(IKabs((x12127+x12126))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12130=(cj1*sj2);
IkReal x12131=(cj2*sj1);
IkReal x12132=(gconst11*r00);
IkReal x12133=((1.0)*gconst10*r01);
CheckValue<IkReal> x12134=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*gconst11*r21)))),-1);
if(!x12134.valid){
continue;
}
CheckValue<IkReal> x12135 = IKatan2WithCheck(IkReal(((((-1.0)*x12131*x12133))+((x12131*x12132))+(((-1.0)*x12130*x12133))+((x12130*x12132)))),IkReal((((r02*x12130))+((r02*x12131)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12135.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12134.value)))+(x12135.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12136=IKcos(j4);
IkReal x12137=IKsin(j4);
IkReal x12138=((1.0)*cj2);
IkReal x12139=((1.0)*x12136);
IkReal x12140=(gconst10*x12136);
IkReal x12141=(gconst10*x12137);
IkReal x12142=((1.0)*gconst11*x12137);
evalcond[0]=((((-1.0)*gconst11*r00*x12139))+((r01*x12140))+((r02*x12137)));
evalcond[1]=((((-1.0)*r22*x12139))+(((-1.0)*r20*x12142))+((r21*x12141)));
evalcond[2]=(((r11*x12141))+(((-1.0)*r12*x12139))+(((-1.0)*r10*x12142)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x12142))+((r01*x12141))+(((-1.0)*r02*x12139)));
evalcond[4]=((((-1.0)*cj1*x12138))+((sj1*sj2))+((r22*x12137))+((r21*x12140))+(((-1.0)*gconst11*r20*x12139)));
evalcond[5]=(((r12*x12137))+(((-1.0)*cj1*sj2))+((r11*x12140))+(((-1.0)*gconst11*r10*x12139))+(((-1.0)*sj1*x12138)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12143=(gconst10*r01);
IkReal x12144=(gconst11*r00);
CheckValue<IkReal> x12145 = IKatan2WithCheck(IkReal(((((-1.0)*x12144))+x12143)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12145.valid){
continue;
}
CheckValue<IkReal> x12146=IKPowWithIntegerCheck(IKsign(((x12143*x12143)+(x12144*x12144)+(((-2.0)*x12143*x12144))+(r02*r02))),-1);
if(!x12146.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12145.value)+(((1.5707963267949)*(x12146.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12147=IKcos(j4);
IkReal x12148=IKsin(j4);
IkReal x12149=((1.0)*cj2);
IkReal x12150=((1.0)*x12147);
IkReal x12151=(gconst10*x12147);
IkReal x12152=(gconst10*x12148);
IkReal x12153=((1.0)*gconst11*x12148);
evalcond[0]=(((r02*x12148))+((r01*x12151))+(((-1.0)*gconst11*r00*x12150)));
evalcond[1]=((((-1.0)*r22*x12150))+((r21*x12152))+(((-1.0)*r20*x12153)));
evalcond[2]=((((-1.0)*r12*x12150))+((r11*x12152))+(((-1.0)*r10*x12153)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x12150))+(((-1.0)*r00*x12153))+((r01*x12152)));
evalcond[4]=(((r22*x12148))+(((-1.0)*gconst11*r20*x12150))+((sj1*sj2))+(((-1.0)*cj1*x12149))+((r21*x12151)));
evalcond[5]=((((-1.0)*gconst11*r10*x12150))+(((-1.0)*cj1*sj2))+((r12*x12148))+(((-1.0)*sj1*x12149))+((r11*x12151)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12154 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12154.valid){
continue;
}
CheckValue<IkReal> x12155=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12155.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12154.value)+(((1.5707963267949)*(x12155.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12156=IKcos(j4);
IkReal x12157=IKsin(j4);
IkReal x12158=((1.0)*cj2);
IkReal x12159=((1.0)*x12156);
IkReal x12160=(gconst10*x12156);
IkReal x12161=(gconst10*x12157);
IkReal x12162=((1.0)*gconst11*x12157);
evalcond[0]=(((r02*x12157))+((r01*x12160))+(((-1.0)*gconst11*r00*x12159)));
evalcond[1]=(((r21*x12161))+(((-1.0)*r22*x12159))+(((-1.0)*r20*x12162)));
evalcond[2]=((((-1.0)*r10*x12162))+(((-1.0)*r12*x12159))+((r11*x12161)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x12159))+(((-1.0)*r00*x12162))+((r01*x12161)));
evalcond[4]=(((r21*x12160))+(((-1.0)*gconst11*r20*x12159))+((r22*x12157))+((sj1*sj2))+(((-1.0)*cj1*x12158)));
evalcond[5]=((((-1.0)*gconst11*r10*x12159))+((r12*x12157))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12158))+((r11*x12160)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12163=((-1.0)*r11);
CheckValue<IkReal> x12166 = IKatan2WithCheck(IkReal(x12163),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12166.valid){
continue;
}
IkReal x12164=((1.0)*(x12166.value));
IkReal x12165=x11833;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12164)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12164)));
IkReal gconst10=(x12163*x12165);
IkReal gconst11=((1.0)*r10*x12165);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x12167=((-1.0)*r11);
CheckValue<IkReal> x12170 = IKatan2WithCheck(IkReal(x12167),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12170.valid){
continue;
}
IkReal x12168=((1.0)*(x12170.value));
IkReal x12169=x11833;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12168)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12168)));
IkReal gconst10=(x12167*x12169);
IkReal gconst11=((1.0)*r10*x12169);
IkReal x12171=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x12175=IKPowWithIntegerCheck(x12171,-1);
if(!x12175.valid){
continue;
}
IkReal x12172=x12175.value;
IkReal x12173=((1.0)*x12172);
IkReal x12174=((((-1.0)*x12173*(r00*r00)*(r10*r10)))+(((-2.0)*r00*r01*r10*r11*x12172))+(((-1.0)*(r02*r02)))+(((-1.0)*x12173*(r01*r01)*(r11*r11))));
j4eval[0]=x12174;
j4eval[1]=r02;
j4eval[2]=x12171;
j4eval[3]=IKsign(x12174);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12176=((-1.0)*r11);
CheckValue<IkReal> x12179 = IKatan2WithCheck(IkReal(x12176),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12179.valid){
continue;
}
IkReal x12177=((1.0)*(x12179.value));
IkReal x12178=x11833;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12177)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12177)));
IkReal gconst10=(x12176*x12178);
IkReal gconst11=((1.0)*r10*x12178);
IkReal x12180=r12*r12;
IkReal x12181=((1.0)*r02);
IkReal x12182=(cj1*sj2);
IkReal x12183=(cj2*sj1);
CheckValue<IkReal> x12187=IKPowWithIntegerCheck(((-1.0)+x12180),-1);
if(!x12187.valid){
continue;
}
IkReal x12184=x12187.value;
if((((1.0)+(((-1.0)*x12180)))) < -0.00001)
continue;
IkReal x12185=IKsqrt(((1.0)+(((-1.0)*x12180))));
IkReal x12186=(r12*x12184*x12185);
j4eval[0]=((IKabs(((((-1.0)*x12181*x12182))+(((-1.0)*x12181*x12183)))))+(IKabs(((((-1.0)*x12181*x12183*x12186))+(((-1.0)*x12181*x12182*x12186))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12188=(cj1*sj2);
IkReal x12189=(gconst10*r01);
IkReal x12190=(cj2*sj1);
IkReal x12191=((1.0)*r02);
IkReal x12192=((1.0)*gconst11*r00);
CheckValue<IkReal> x12193 = IKatan2WithCheck(IkReal((((x12189*x12190))+((x12188*x12189))+(((-1.0)*x12188*x12192))+(((-1.0)*x12190*x12192)))),IkReal(((((-1.0)*x12188*x12191))+(((-1.0)*x12190*x12191)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12193.valid){
continue;
}
CheckValue<IkReal> x12194=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*gconst11*r21)))),-1);
if(!x12194.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12193.value)+(((1.5707963267949)*(x12194.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12195=IKcos(j4);
IkReal x12196=IKsin(j4);
IkReal x12197=((1.0)*x12195);
IkReal x12198=(gconst10*x12195);
IkReal x12199=(gconst10*x12196);
IkReal x12200=((1.0)*gconst11*x12196);
evalcond[0]=((((-1.0)*gconst11*r00*x12197))+((r02*x12196))+((r01*x12198)));
evalcond[1]=(((r21*x12199))+(((-1.0)*r22*x12197))+(((-1.0)*r20*x12200)));
evalcond[2]=(((r11*x12199))+(((-1.0)*r10*x12200))+(((-1.0)*r12*x12197)));
evalcond[3]=((1.0)+(((-1.0)*r02*x12197))+(((-1.0)*r00*x12200))+((r01*x12199)));
evalcond[4]=(((cj2*sj1))+((r12*x12196))+((cj1*sj2))+((r11*x12198))+(((-1.0)*gconst11*r10*x12197)));
evalcond[5]=(((r21*x12198))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x12196))+(((-1.0)*gconst11*r20*x12197)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12201=(gconst10*r01);
IkReal x12202=(gconst11*r00);
CheckValue<IkReal> x12203 = IKatan2WithCheck(IkReal(((((-1.0)*x12202))+x12201)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12203.valid){
continue;
}
CheckValue<IkReal> x12204=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x12202*x12202)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x12201*x12201)))+(((2.0)*x12201*x12202)))),-1);
if(!x12204.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12203.value)+(((1.5707963267949)*(x12204.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12205=IKcos(j4);
IkReal x12206=IKsin(j4);
IkReal x12207=((1.0)*x12205);
IkReal x12208=(gconst10*x12205);
IkReal x12209=(gconst10*x12206);
IkReal x12210=((1.0)*gconst11*x12206);
evalcond[0]=(((r02*x12206))+(((-1.0)*gconst11*r00*x12207))+((r01*x12208)));
evalcond[1]=((((-1.0)*r22*x12207))+((r21*x12209))+(((-1.0)*r20*x12210)));
evalcond[2]=((((-1.0)*r12*x12207))+(((-1.0)*r10*x12210))+((r11*x12209)));
evalcond[3]=((1.0)+(((-1.0)*r02*x12207))+(((-1.0)*r00*x12210))+((r01*x12209)));
evalcond[4]=(((cj2*sj1))+((r12*x12206))+(((-1.0)*gconst11*r10*x12207))+((cj1*sj2))+((r11*x12208)));
evalcond[5]=(((r22*x12206))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst11*r20*x12207))+((r21*x12208)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12211=((1.0)*gconst11);
CheckValue<IkReal> x12212=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*r21*x12211)))),-1);
if(!x12212.valid){
continue;
}
CheckValue<IkReal> x12213 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*r10*x12211)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12213.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12212.value)))+(x12213.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12214=IKcos(j4);
IkReal x12215=IKsin(j4);
IkReal x12216=((1.0)*x12214);
IkReal x12217=(gconst10*x12214);
IkReal x12218=(gconst10*x12215);
IkReal x12219=((1.0)*gconst11*x12215);
evalcond[0]=((((-1.0)*gconst11*r00*x12216))+((r02*x12215))+((r01*x12217)));
evalcond[1]=((((-1.0)*r22*x12216))+((r21*x12218))+(((-1.0)*r20*x12219)));
evalcond[2]=((((-1.0)*r12*x12216))+(((-1.0)*r10*x12219))+((r11*x12218)));
evalcond[3]=((1.0)+(((-1.0)*r02*x12216))+(((-1.0)*r00*x12219))+((r01*x12218)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst11*r10*x12216))+((r12*x12215))+((cj1*sj2))+((r11*x12217)));
evalcond[5]=(((r22*x12215))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst11*r20*x12216))+((r21*x12217)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12220=((-1.0)*r11);
IkReal x12221=((-1.0)*r10);
CheckValue<IkReal> x12223 = IKatan2WithCheck(IkReal(x12220),IkReal(x12221),IKFAST_ATAN2_MAGTHRESH);
if(!x12223.valid){
continue;
}
IkReal x12222=((1.0)*(x12223.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12222)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12221);
rxp1_1=(px*r21);
rxp1_2=(px*x12220);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12222)));
IkReal gconst10=x12220;
IkReal gconst11=((1.0)*r10);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12224=((-1.0)*r11);
IkReal x12225=((-1.0)*r10);
CheckValue<IkReal> x12227 = IKatan2WithCheck(IkReal(x12224),IkReal(x12225),IKFAST_ATAN2_MAGTHRESH);
if(!x12227.valid){
continue;
}
IkReal x12226=((1.0)*(x12227.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12226)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12225);
rxp1_1=(px*r21);
rxp1_2=(px*x12224);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12226)));
IkReal gconst10=x12224;
IkReal gconst11=((1.0)*r10);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12228=((-1.0)*r11);
IkReal x12229=((-1.0)*r10);
CheckValue<IkReal> x12231 = IKatan2WithCheck(IkReal(x12228),IkReal(x12229),IKFAST_ATAN2_MAGTHRESH);
if(!x12231.valid){
continue;
}
IkReal x12230=((1.0)*(x12231.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12230)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12229);
rxp1_1=(px*r21);
rxp1_2=(px*x12228);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12230)));
IkReal gconst10=x12228;
IkReal gconst11=((1.0)*r10);
j4eval[0]=-1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12234=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*gconst11*r10))),-1);
if(!x12234.valid){
continue;
}
IkReal x12232=x12234.value;
IkReal x12233=(sj0*x12232);
cj4array[0]=(((cj2*sj1*x12233))+((cj1*sj2*x12233)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12235=IKsin(j4);
IkReal x12236=IKcos(j4);
IkReal x12237=(gconst10*r21);
IkReal x12238=((1.0)*x12236);
IkReal x12239=((1.0)*gconst11*x12235);
evalcond[0]=(r02*x12235);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x12238)));
evalcond[2]=(((x12235*x12237))+(((-1.0)*r20*x12239)));
evalcond[3]=(((gconst10*r11*x12235))+(((-1.0)*r10*x12239)));
evalcond[4]=((((-1.0)*gconst11*r20*x12238))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x12236*x12237)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12241=IKPowWithIntegerCheck((((gconst10*r21))+(((-1.0)*gconst11*r20))),-1);
if(!x12241.valid){
continue;
}
IkReal x12240=x12241.value;
cj4array[0]=((((-1.0)*sj1*sj2*x12240))+((cj1*cj2*x12240)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12242=IKsin(j4);
IkReal x12243=IKcos(j4);
IkReal x12244=((1.0)*sj0);
IkReal x12245=(gconst10*x12242);
IkReal x12246=((1.0)*x12243);
IkReal x12247=((1.0)*gconst11*x12242);
evalcond[0]=(r02*x12242);
evalcond[1]=((((-1.0)*x12244))+(((-1.0)*r02*x12246)));
evalcond[2]=((((-1.0)*r20*x12247))+((r21*x12245)));
evalcond[3]=((((-1.0)*r10*x12247))+((r11*x12245)));
evalcond[4]=(((gconst10*r11*x12243))+(((-1.0)*cj2*sj1*x12244))+(((-1.0)*gconst11*r10*x12246))+(((-1.0)*cj1*sj2*x12244)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12248=IKPowWithIntegerCheck(r02,-1);
if(!x12248.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x12248.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12249=IKsin(j4);
IkReal x12250=IKcos(j4);
IkReal x12251=(gconst10*r21);
IkReal x12252=((1.0)*cj1);
IkReal x12253=(gconst10*r11);
IkReal x12254=((1.0)*gconst11*x12249);
IkReal x12255=((1.0)*gconst11*x12250);
evalcond[0]=(r02*x12249);
evalcond[1]=((((-1.0)*r20*x12254))+((x12249*x12251)));
evalcond[2]=(((x12249*x12253))+(((-1.0)*r10*x12254)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*r20*x12255))+((x12250*x12251))+(((-1.0)*cj2*x12252)));
evalcond[4]=((((-1.0)*cj2*sj0*sj1))+((x12250*x12253))+(((-1.0)*sj0*sj2*x12252))+(((-1.0)*r10*x12255)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12256=((1.0)*gconst11);
CheckValue<IkReal> x12257 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst10*r11*sj0))+((cj0*gconst10*r01))+(((-1.0)*r10*sj0*x12256))+(((-1.0)*cj0*r00*x12256)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12257.valid){
continue;
}
CheckValue<IkReal> x12258=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12258.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12257.value)+(((1.5707963267949)*(x12258.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12259=IKsin(j4);
IkReal x12260=IKcos(j4);
IkReal x12261=((1.0)*gconst11);
IkReal x12262=((1.0)*cj2);
IkReal x12263=((1.0)*sj0);
IkReal x12264=(cj1*sj2);
IkReal x12265=(gconst10*x12260);
IkReal x12266=(gconst10*x12259);
IkReal x12267=((1.0)*x12260);
evalcond[0]=((((-1.0)*r20*x12259*x12261))+((r21*x12266)));
evalcond[1]=((((-1.0)*r12*x12267))+cj0+((r11*x12266))+(((-1.0)*r10*x12259*x12261)));
evalcond[2]=(((sj1*sj2))+(((-1.0)*r20*x12260*x12261))+((r21*x12265))+(((-1.0)*cj1*x12262)));
evalcond[3]=((((-1.0)*r00*x12259*x12261))+((r01*x12266))+(((-1.0)*r02*x12267))+(((-1.0)*x12263)));
evalcond[4]=((((-1.0)*r00*x12260*x12261))+(((-1.0)*cj0*sj1*x12262))+((r01*x12265))+(((-1.0)*cj0*x12264))+((r02*x12259)));
evalcond[5]=(((r12*x12259))+(((-1.0)*r10*x12260*x12261))+((r11*x12265))+(((-1.0)*x12263*x12264))+(((-1.0)*sj0*sj1*x12262)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12268=(gconst10*r21);
IkReal x12269=(gconst11*r20);
IkReal x12270=(sj1*sj2);
IkReal x12271=(cj1*cj2);
CheckValue<IkReal> x12272 = IKatan2WithCheck(IkReal((((r22*x12270))+(((-1.0)*r22*x12271)))),IkReal((((x12268*x12270))+((x12269*x12271))+(((-1.0)*x12268*x12271))+(((-1.0)*x12269*x12270)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12272.valid){
continue;
}
CheckValue<IkReal> x12273=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x12268*x12268)))+(((-1.0)*(r22*r22)))+(((-1.0)*(x12269*x12269)))+(((2.0)*x12268*x12269)))),-1);
if(!x12273.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12272.value)+(((1.5707963267949)*(x12273.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12274=IKsin(j4);
IkReal x12275=IKcos(j4);
IkReal x12276=((1.0)*cj2);
IkReal x12277=((1.0)*sj0);
IkReal x12278=(cj1*sj2);
IkReal x12279=((1.0)*x12275);
IkReal x12280=(gconst10*x12275);
IkReal x12281=(gconst10*x12274);
IkReal x12282=((1.0)*gconst11*x12274);
evalcond[0]=((((-1.0)*r22*x12279))+(((-1.0)*r20*x12282))+((r21*x12281)));
evalcond[1]=((((-1.0)*r10*x12282))+cj0+((r11*x12281))+(((-1.0)*r12*x12279)));
evalcond[2]=((((-1.0)*r02*x12279))+(((-1.0)*x12277))+((r01*x12281))+(((-1.0)*r00*x12282)));
evalcond[3]=((((-1.0)*cj1*x12276))+((sj1*sj2))+(((-1.0)*gconst11*r20*x12279))+((r22*x12274))+((r21*x12280)));
evalcond[4]=((((-1.0)*cj0*x12278))+((r02*x12274))+((r01*x12280))+(((-1.0)*gconst11*r00*x12279))+(((-1.0)*cj0*sj1*x12276)));
evalcond[5]=((((-1.0)*sj0*sj1*x12276))+((r11*x12280))+((r12*x12274))+(((-1.0)*x12277*x12278))+(((-1.0)*gconst11*r10*x12279)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12283=((1.0)*sj0);
IkReal x12284=((1.0)*gconst10);
CheckValue<IkReal> x12285=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst11*r21))+(((-1.0)*r20*x12284)))),-1);
if(!x12285.valid){
continue;
}
CheckValue<IkReal> x12286 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x12283))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x12284))+(((-1.0)*gconst10*r11*x12283))+((cj0*gconst11*r00))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12286.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12285.value)))+(x12286.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12287=IKsin(j4);
IkReal x12288=IKcos(j4);
IkReal x12289=((1.0)*cj2);
IkReal x12290=((1.0)*sj0);
IkReal x12291=(cj1*sj2);
IkReal x12292=((1.0)*x12288);
IkReal x12293=(gconst10*x12288);
IkReal x12294=(gconst10*x12287);
IkReal x12295=((1.0)*gconst11*x12287);
evalcond[0]=(((r21*x12294))+(((-1.0)*r20*x12295))+(((-1.0)*r22*x12292)));
evalcond[1]=((((-1.0)*r10*x12295))+cj0+((r11*x12294))+(((-1.0)*r12*x12292)));
evalcond[2]=(((r01*x12294))+(((-1.0)*r00*x12295))+(((-1.0)*x12290))+(((-1.0)*r02*x12292)));
evalcond[3]=(((r21*x12293))+((r22*x12287))+(((-1.0)*cj1*x12289))+((sj1*sj2))+(((-1.0)*gconst11*r20*x12292)));
evalcond[4]=(((r01*x12293))+((r02*x12287))+(((-1.0)*cj0*x12291))+(((-1.0)*cj0*sj1*x12289))+(((-1.0)*gconst11*r00*x12292)));
evalcond[5]=((((-1.0)*x12290*x12291))+(((-1.0)*sj0*sj1*x12289))+((r11*x12293))+(((-1.0)*gconst11*r10*x12292))+((r12*x12287)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12296=((1.0)*gconst11);
CheckValue<IkReal> x12297 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x12296))+((cj0*gconst10*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12297.valid){
continue;
}
CheckValue<IkReal> x12298=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x12296)))),-1);
if(!x12298.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12297.value)+(((1.5707963267949)*(x12298.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12299=IKsin(j4);
IkReal x12300=IKcos(j4);
IkReal x12301=((1.0)*cj2);
IkReal x12302=((1.0)*sj0);
IkReal x12303=(cj1*sj2);
IkReal x12304=((1.0)*x12300);
IkReal x12305=(gconst10*x12300);
IkReal x12306=(gconst10*x12299);
IkReal x12307=((1.0)*gconst11*x12299);
evalcond[0]=((((-1.0)*r20*x12307))+((r21*x12306))+(((-1.0)*r22*x12304)));
evalcond[1]=(cj0+((r11*x12306))+(((-1.0)*r10*x12307))+(((-1.0)*r12*x12304)));
evalcond[2]=((((-1.0)*r02*x12304))+(((-1.0)*r00*x12307))+(((-1.0)*x12302))+((r01*x12306)));
evalcond[3]=((((-1.0)*cj1*x12301))+((r21*x12305))+(((-1.0)*gconst11*r20*x12304))+((sj1*sj2))+((r22*x12299)));
evalcond[4]=((((-1.0)*cj0*x12303))+(((-1.0)*gconst11*r00*x12304))+((r02*x12299))+((r01*x12305))+(((-1.0)*cj0*sj1*x12301)));
evalcond[5]=((((-1.0)*gconst11*r10*x12304))+((r11*x12305))+((r12*x12299))+(((-1.0)*x12302*x12303))+(((-1.0)*sj0*sj1*x12301)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12308=((-1.0)*r11);
CheckValue<IkReal> x12311 = IKatan2WithCheck(IkReal(x12308),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12311.valid){
continue;
}
IkReal x12309=((1.0)*(x12311.value));
IkReal x12310=x11833;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12309)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12309)));
IkReal gconst10=(x12308*x12310);
IkReal gconst11=((1.0)*r10*x12310);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12312=gconst10*gconst10;
IkReal x12313=gconst11*gconst11;
IkReal x12314=(gconst10*r21);
IkReal x12315=(cj3*r00);
IkReal x12316=(r00*sj3);
IkReal x12317=((1.0)*gconst11);
IkReal x12318=(gconst10*r20);
IkReal x12319=(r01*sj3);
IkReal x12320=(cj3*gconst11*r01);
IkReal x12321=(r21*x12312);
IkReal x12322=(r20*x12313);
CheckValue<IkReal> x12323=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12317*x12318*x12319))+(((-1.0)*x12314*x12316*x12317))+((x12316*x12322))+((x12319*x12321))+((r02*r22*sj3)))),-1);
if(!x12323.valid){
continue;
}
CheckValue<IkReal> x12324 = IKatan2WithCheck(IkReal((((gconst10*r22*x12315))+((r22*x12320)))),IkReal(((((-1.0)*x12315*x12317*x12318))+((x12314*x12320))+(((-1.0)*cj3*r01*x12322))+((x12315*x12321)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12324.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12323.value)))+(x12324.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12325=IKsin(j4);
IkReal x12326=IKcos(j4);
IkReal x12327=(sj1*sj2);
IkReal x12328=(gconst10*sj3);
IkReal x12329=(cj3*gconst10);
IkReal x12330=(gconst11*r20);
IkReal x12331=(gconst11*r21);
IkReal x12332=(gconst11*r00);
IkReal x12333=(cj3*gconst11);
IkReal x12334=(gconst11*r10);
IkReal x12335=((1.0)*cj1);
IkReal x12336=(cj2*sj1);
IkReal x12337=(gconst11*sj3);
IkReal x12338=(cj2*x12335);
IkReal x12339=((1.0)*x12326);
IkReal x12340=((1.0)*x12325);
IkReal x12341=(gconst10*x12325);
IkReal x12342=(cj3*x12325);
IkReal x12343=(sj3*x12326);
evalcond[0]=((((-1.0)*r22*x12339))+((r21*x12341))+(((-1.0)*x12330*x12340)));
evalcond[1]=(((r11*x12341))+(((-1.0)*x12334*x12340))+(((-1.0)*r12*x12339)));
evalcond[2]=((-1.0)+(((-1.0)*x12332*x12340))+((r01*x12341))+(((-1.0)*r02*x12339)));
evalcond[3]=(((r00*x12328))+((r01*x12337))+(((-1.0)*cj3*x12332*x12339))+((r02*x12342))+((r01*x12326*x12329)));
evalcond[4]=((((-1.0)*r01*x12328*x12339))+((r00*x12329))+((x12332*x12343))+((r01*x12333))+(((-1.0)*r02*sj3*x12340)));
evalcond[5]=((((-1.0)*cj3*x12330*x12339))+((cj1*sj2))+x12336+((r20*x12328))+((r22*x12342))+((sj3*x12331))+((r21*x12326*x12329)));
evalcond[6]=((((-1.0)*r10*x12333*x12339))+x12327+(((-1.0)*x12338))+((r11*x12326*x12329))+((r10*x12328))+((r11*x12337))+((r12*x12342)));
evalcond[7]=(((x12330*x12343))+x12327+((r20*x12329))+(((-1.0)*x12338))+(((-1.0)*r21*x12328*x12339))+((cj3*x12331))+(((-1.0)*r22*sj3*x12340)));
evalcond[8]=((((-1.0)*r11*x12328*x12339))+((x12334*x12343))+((r10*x12329))+(((-1.0)*sj2*x12335))+(((-1.0)*r12*sj3*x12340))+((r11*x12333))+(((-1.0)*x12336)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12344 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12344.valid){
continue;
}
CheckValue<IkReal> x12345=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12345.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12344.value)+(((1.5707963267949)*(x12345.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12346=IKsin(j4);
IkReal x12347=IKcos(j4);
IkReal x12348=(sj1*sj2);
IkReal x12349=(gconst10*sj3);
IkReal x12350=(cj3*gconst10);
IkReal x12351=(gconst11*r20);
IkReal x12352=(gconst11*r21);
IkReal x12353=(gconst11*r00);
IkReal x12354=(cj3*gconst11);
IkReal x12355=(gconst11*r10);
IkReal x12356=((1.0)*cj1);
IkReal x12357=(cj2*sj1);
IkReal x12358=(gconst11*sj3);
IkReal x12359=(cj2*x12356);
IkReal x12360=((1.0)*x12347);
IkReal x12361=((1.0)*x12346);
IkReal x12362=(gconst10*x12346);
IkReal x12363=(cj3*x12346);
IkReal x12364=(sj3*x12347);
evalcond[0]=((((-1.0)*r22*x12360))+((r21*x12362))+(((-1.0)*x12351*x12361)));
evalcond[1]=(((r11*x12362))+(((-1.0)*r12*x12360))+(((-1.0)*x12355*x12361)));
evalcond[2]=((-1.0)+(((-1.0)*x12353*x12361))+(((-1.0)*r02*x12360))+((r01*x12362)));
evalcond[3]=(((r00*x12349))+((r01*x12358))+((r01*x12347*x12350))+((r02*x12363))+(((-1.0)*cj3*x12353*x12360)));
evalcond[4]=(((x12353*x12364))+(((-1.0)*r02*sj3*x12361))+(((-1.0)*r01*x12349*x12360))+((r01*x12354))+((r00*x12350)));
evalcond[5]=(((r21*x12347*x12350))+((r20*x12349))+((cj1*sj2))+x12357+((sj3*x12352))+((r22*x12363))+(((-1.0)*cj3*x12351*x12360)));
evalcond[6]=((((-1.0)*x12359))+((r11*x12347*x12350))+x12348+(((-1.0)*r10*x12354*x12360))+((r11*x12358))+((r10*x12349))+((r12*x12363)));
evalcond[7]=(((r20*x12350))+(((-1.0)*r21*x12349*x12360))+(((-1.0)*x12359))+x12348+((cj3*x12352))+((x12351*x12364))+(((-1.0)*r22*sj3*x12361)));
evalcond[8]=((((-1.0)*x12357))+(((-1.0)*r11*x12349*x12360))+(((-1.0)*sj2*x12356))+((r11*x12354))+((x12355*x12364))+((r10*x12350))+(((-1.0)*r12*sj3*x12361)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12365=((-1.0)*r11);
CheckValue<IkReal> x12368 = IKatan2WithCheck(IkReal(x12365),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12368.valid){
continue;
}
IkReal x12366=((1.0)*(x12368.value));
IkReal x12367=x11833;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12366)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12366)));
IkReal gconst10=(x12365*x12367);
IkReal gconst11=((1.0)*r10*x12367);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12369=gconst10*gconst10;
IkReal x12370=gconst11*gconst11;
IkReal x12371=(gconst10*r21);
IkReal x12372=(cj3*r00);
IkReal x12373=(r00*sj3);
IkReal x12374=((1.0)*gconst11);
IkReal x12375=(gconst10*r20);
IkReal x12376=(r01*sj3);
IkReal x12377=(cj3*gconst11*r01);
IkReal x12378=(r21*x12369);
IkReal x12379=(r20*x12370);
CheckValue<IkReal> x12380 = IKatan2WithCheck(IkReal((((r22*x12377))+((gconst10*r22*x12372)))),IkReal(((((-1.0)*cj3*r01*x12379))+(((-1.0)*x12372*x12374*x12375))+((x12371*x12377))+((x12372*x12378)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12380.valid){
continue;
}
CheckValue<IkReal> x12381=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12371*x12373*x12374))+(((-1.0)*x12374*x12375*x12376))+((x12376*x12378))+((x12373*x12379))+((r02*r22*sj3)))),-1);
if(!x12381.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12380.value)+(((1.5707963267949)*(x12381.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12382=IKsin(j4);
IkReal x12383=IKcos(j4);
IkReal x12384=(cj2*sj1);
IkReal x12385=(cj1*sj2);
IkReal x12386=(gconst10*sj3);
IkReal x12387=(cj3*gconst10);
IkReal x12388=(gconst11*r20);
IkReal x12389=(gconst11*r21);
IkReal x12390=(gconst11*r00);
IkReal x12391=(sj1*sj2);
IkReal x12392=(cj3*gconst11);
IkReal x12393=(gconst11*r10);
IkReal x12394=(cj1*cj2);
IkReal x12395=(gconst11*sj3);
IkReal x12396=((1.0)*x12383);
IkReal x12397=((1.0)*x12382);
IkReal x12398=(gconst10*x12382);
IkReal x12399=(cj3*x12382);
IkReal x12400=(sj3*x12383);
IkReal x12401=(x12385+x12384);
evalcond[0]=((((-1.0)*r22*x12396))+((r21*x12398))+(((-1.0)*x12388*x12397)));
evalcond[1]=((((-1.0)*r12*x12396))+((r11*x12398))+(((-1.0)*x12393*x12397)));
evalcond[2]=((1.0)+(((-1.0)*r02*x12396))+((r01*x12398))+(((-1.0)*x12390*x12397)));
evalcond[3]=(((r02*x12399))+((r00*x12386))+((r01*x12395))+((r01*x12383*x12387))+(((-1.0)*cj3*x12390*x12396)));
evalcond[4]=(((r00*x12387))+((r01*x12392))+(((-1.0)*r01*x12386*x12396))+((x12390*x12400))+(((-1.0)*r02*sj3*x12397)));
evalcond[5]=(((r22*x12399))+(((-1.0)*cj3*x12388*x12396))+((r21*x12383*x12387))+((r20*x12386))+((sj3*x12389))+x12401);
evalcond[6]=(((r11*x12395))+((r10*x12386))+x12394+(((-1.0)*x12391))+(((-1.0)*r10*x12392*x12396))+((r11*x12383*x12387))+((r12*x12399)));
evalcond[7]=(((r11*x12392))+((r10*x12387))+(((-1.0)*r11*x12386*x12396))+((x12393*x12400))+x12401+(((-1.0)*r12*sj3*x12397)));
evalcond[8]=(((cj3*x12389))+(((-1.0)*r22*sj3*x12397))+x12391+((r20*x12387))+(((-1.0)*r21*x12386*x12396))+(((-1.0)*x12394))+((x12388*x12400)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12402=((1.0)*gconst11);
CheckValue<IkReal> x12403 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*r10*x12402)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12403.valid){
continue;
}
CheckValue<IkReal> x12404=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*r21*x12402)))),-1);
if(!x12404.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12403.value)+(((1.5707963267949)*(x12404.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12405=IKsin(j4);
IkReal x12406=IKcos(j4);
IkReal x12407=(cj2*sj1);
IkReal x12408=(cj1*sj2);
IkReal x12409=(gconst10*sj3);
IkReal x12410=(cj3*gconst10);
IkReal x12411=(gconst11*r20);
IkReal x12412=(gconst11*r21);
IkReal x12413=(gconst11*r00);
IkReal x12414=(sj1*sj2);
IkReal x12415=(cj3*gconst11);
IkReal x12416=(gconst11*r10);
IkReal x12417=(cj1*cj2);
IkReal x12418=(gconst11*sj3);
IkReal x12419=((1.0)*x12406);
IkReal x12420=((1.0)*x12405);
IkReal x12421=(gconst10*x12405);
IkReal x12422=(cj3*x12405);
IkReal x12423=(sj3*x12406);
IkReal x12424=(x12408+x12407);
evalcond[0]=((((-1.0)*r22*x12419))+((r21*x12421))+(((-1.0)*x12411*x12420)));
evalcond[1]=((((-1.0)*x12416*x12420))+((r11*x12421))+(((-1.0)*r12*x12419)));
evalcond[2]=((1.0)+(((-1.0)*r02*x12419))+((r01*x12421))+(((-1.0)*x12413*x12420)));
evalcond[3]=(((r01*x12418))+((r02*x12422))+(((-1.0)*cj3*x12413*x12419))+((r01*x12406*x12410))+((r00*x12409)));
evalcond[4]=((((-1.0)*r01*x12409*x12419))+(((-1.0)*r02*sj3*x12420))+((r00*x12410))+((r01*x12415))+((x12413*x12423)));
evalcond[5]=(((sj3*x12412))+(((-1.0)*cj3*x12411*x12419))+((r21*x12406*x12410))+((r22*x12422))+((r20*x12409))+x12424);
evalcond[6]=(((r11*x12418))+(((-1.0)*x12414))+((r12*x12422))+((r10*x12409))+(((-1.0)*r10*x12415*x12419))+x12417+((r11*x12406*x12410)));
evalcond[7]=(((r10*x12410))+((r11*x12415))+(((-1.0)*r12*sj3*x12420))+((x12416*x12423))+(((-1.0)*r11*x12409*x12419))+x12424);
evalcond[8]=((((-1.0)*r21*x12409*x12419))+((cj3*x12412))+(((-1.0)*r22*sj3*x12420))+((r20*x12410))+(((-1.0)*x12417))+((x12411*x12423))+x12414);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12425=((-1.0)*r11);
IkReal x12426=((-1.0)*r10);
CheckValue<IkReal> x12428 = IKatan2WithCheck(IkReal(x12425),IkReal(x12426),IKFAST_ATAN2_MAGTHRESH);
if(!x12428.valid){
continue;
}
IkReal x12427=((1.0)*(x12428.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12427)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12426);
rxp1_1=(px*r21);
rxp1_2=(px*x12425);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12427)));
IkReal gconst10=x12425;
IkReal gconst11=((1.0)*r10);
j4eval[0]=-1.0;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12429=((-1.0)*r11);
IkReal x12430=((-1.0)*r10);
CheckValue<IkReal> x12432 = IKatan2WithCheck(IkReal(x12429),IkReal(x12430),IKFAST_ATAN2_MAGTHRESH);
if(!x12432.valid){
continue;
}
IkReal x12431=((1.0)*(x12432.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12431)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12430);
rxp1_1=(px*r21);
rxp1_2=(px*x12429);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12431)));
IkReal gconst10=x12429;
IkReal gconst11=((1.0)*r10);
IkReal x12433=((1.0)*cj3);
j4eval[0]=-1.0;
j4eval[1]=((((-1.0)*r11*r21*x12433))+(((-1.0)*r10*r20*x12433)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12434=((-1.0)*r11);
IkReal x12435=((-1.0)*r10);
CheckValue<IkReal> x12437 = IKatan2WithCheck(IkReal(x12434),IkReal(x12435),IKFAST_ATAN2_MAGTHRESH);
if(!x12437.valid){
continue;
}
IkReal x12436=((1.0)*(x12437.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12436)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12435);
rxp1_1=(px*r21);
rxp1_2=(px*x12434);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12436)));
IkReal gconst10=x12434;
IkReal gconst11=((1.0)*r10);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12439=IKPowWithIntegerCheck(r02,-1);
if(!x12439.valid){
continue;
}
IkReal x12438=x12439.value;
CheckValue<IkReal> x12440=IKPowWithIntegerCheck(cj3,-1);
if(!x12440.valid){
continue;
}
if( IKabs((x12438*(x12440.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x12438)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x12438*(x12440.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x12438))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x12438*(x12440.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x12438));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12441=IKsin(j4);
IkReal x12442=IKcos(j4);
IkReal x12443=(cj3*r10);
IkReal x12444=((1.0)*gconst11);
IkReal x12445=(sj1*sj2);
IkReal x12446=(gconst11*sj3);
IkReal x12447=(cj3*r11);
IkReal x12448=(cj2*sj1);
IkReal x12449=(gconst10*r20);
IkReal x12450=(gconst10*sj3);
IkReal x12451=((1.0)*cj0);
IkReal x12452=((1.0)*sj0);
IkReal x12453=(cj1*sj2);
IkReal x12454=(cj3*r21);
IkReal x12455=((1.0)*cj1*cj2);
IkReal x12456=(r20*x12442);
IkReal x12457=(gconst10*x12441);
IkReal x12458=(gconst10*x12442);
IkReal x12459=(r02*x12441);
IkReal x12460=((1.0)*x12442);
evalcond[0]=((((-1.0)*r02*x12460))+(((-1.0)*x12452)));
evalcond[1]=((((-1.0)*r20*x12441*x12444))+((r21*x12457)));
evalcond[2]=((((-1.0)*r10*x12441*x12444))+cj0+((r11*x12457)));
evalcond[3]=(((cj0*x12445))+((cj3*x12459))+(((-1.0)*cj1*cj2*x12451)));
evalcond[4]=((((-1.0)*sj3*x12459))+(((-1.0)*x12451*x12453))+(((-1.0)*x12448*x12451)));
evalcond[5]=((((-1.0)*cj3*x12444*x12456))+((r21*x12446))+((x12454*x12458))+((sj3*x12449))+x12448+x12453);
evalcond[6]=(((cj3*x12449))+((x12446*x12456))+(((-1.0)*r21*x12450*x12460))+(((-1.0)*x12455))+x12445+((gconst11*x12454)));
evalcond[7]=(((sj0*x12445))+((r11*x12446))+(((-1.0)*cj1*cj2*x12452))+((x12447*x12458))+(((-1.0)*x12442*x12443*x12444))+((r10*x12450)));
evalcond[8]=(((gconst10*x12443))+(((-1.0)*r11*x12450*x12460))+((r10*x12442*x12446))+(((-1.0)*x12452*x12453))+(((-1.0)*x12448*x12452))+((gconst11*x12447)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12461=((1.0)*r20);
IkReal x12462=((1.0)*gconst11);
CheckValue<IkReal> x12463=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*r10*x12462))),-1);
if(!x12463.valid){
continue;
}
CheckValue<IkReal> x12464=IKPowWithIntegerCheck(((((-1.0)*cj3*gconst11*x12461))+((cj3*gconst10*r21))),-1);
if(!x12464.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x12463.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12464.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst10*sj3*x12461))+(((-1.0)*r21*sj3*x12462)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x12463.value)))+IKsqr(((x12464.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst10*sj3*x12461))+(((-1.0)*r21*sj3*x12462))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x12463.value)), ((x12464.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst10*sj3*x12461))+(((-1.0)*r21*sj3*x12462))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12465=IKsin(j4);
IkReal x12466=IKcos(j4);
IkReal x12467=(cj3*r10);
IkReal x12468=((1.0)*gconst11);
IkReal x12469=(sj1*sj2);
IkReal x12470=(gconst11*sj3);
IkReal x12471=(cj3*r11);
IkReal x12472=(cj2*sj1);
IkReal x12473=(gconst10*r20);
IkReal x12474=(gconst10*sj3);
IkReal x12475=((1.0)*cj0);
IkReal x12476=((1.0)*sj0);
IkReal x12477=(cj1*sj2);
IkReal x12478=(cj3*r21);
IkReal x12479=((1.0)*cj1*cj2);
IkReal x12480=(r20*x12466);
IkReal x12481=(gconst10*x12465);
IkReal x12482=(gconst10*x12466);
IkReal x12483=(r02*x12465);
IkReal x12484=((1.0)*x12466);
evalcond[0]=((((-1.0)*r02*x12484))+(((-1.0)*x12476)));
evalcond[1]=((((-1.0)*r20*x12465*x12468))+((r21*x12481)));
evalcond[2]=(cj0+(((-1.0)*r10*x12465*x12468))+((r11*x12481)));
evalcond[3]=(((cj0*x12469))+((cj3*x12483))+(((-1.0)*cj1*cj2*x12475)));
evalcond[4]=((((-1.0)*x12472*x12475))+(((-1.0)*x12475*x12477))+(((-1.0)*sj3*x12483)));
evalcond[5]=(((sj3*x12473))+((x12478*x12482))+x12472+x12477+((r21*x12470))+(((-1.0)*cj3*x12468*x12480)));
evalcond[6]=(((cj3*x12473))+(((-1.0)*x12479))+x12469+(((-1.0)*r21*x12474*x12484))+((gconst11*x12478))+((x12470*x12480)));
evalcond[7]=((((-1.0)*x12466*x12467*x12468))+((r11*x12470))+((sj0*x12469))+((r10*x12474))+((x12471*x12482))+(((-1.0)*cj1*cj2*x12476)));
evalcond[8]=((((-1.0)*x12476*x12477))+(((-1.0)*x12472*x12476))+((r10*x12466*x12470))+((gconst10*x12467))+((gconst11*x12471))+(((-1.0)*r11*x12474*x12484)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12485=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*gconst11*r10))),-1);
if(!x12485.valid){
continue;
}
CheckValue<IkReal> x12486=IKPowWithIntegerCheck(r02,-1);
if(!x12486.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x12485.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x12486.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x12485.value)))+IKsqr(((-1.0)*sj0*(x12486.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x12485.value)), ((-1.0)*sj0*(x12486.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12487=IKsin(j4);
IkReal x12488=IKcos(j4);
IkReal x12489=(cj3*r10);
IkReal x12490=((1.0)*gconst11);
IkReal x12491=(sj1*sj2);
IkReal x12492=(gconst11*sj3);
IkReal x12493=(cj3*r11);
IkReal x12494=(cj2*sj1);
IkReal x12495=(gconst10*r20);
IkReal x12496=(gconst10*sj3);
IkReal x12497=((1.0)*cj0);
IkReal x12498=((1.0)*sj0);
IkReal x12499=(cj1*sj2);
IkReal x12500=(cj3*r21);
IkReal x12501=((1.0)*cj1*cj2);
IkReal x12502=(r20*x12488);
IkReal x12503=(gconst10*x12487);
IkReal x12504=(gconst10*x12488);
IkReal x12505=(r02*x12487);
IkReal x12506=((1.0)*x12488);
evalcond[0]=((((-1.0)*r02*x12506))+(((-1.0)*x12498)));
evalcond[1]=((((-1.0)*r20*x12487*x12490))+((r21*x12503)));
evalcond[2]=(((r11*x12503))+cj0+(((-1.0)*r10*x12487*x12490)));
evalcond[3]=(((cj3*x12505))+((cj0*x12491))+(((-1.0)*cj1*cj2*x12497)));
evalcond[4]=((((-1.0)*sj3*x12505))+(((-1.0)*x12497*x12499))+(((-1.0)*x12494*x12497)));
evalcond[5]=(((r21*x12492))+x12494+x12499+(((-1.0)*cj3*x12490*x12502))+((x12500*x12504))+((sj3*x12495)));
evalcond[6]=(((x12492*x12502))+(((-1.0)*x12501))+((cj3*x12495))+(((-1.0)*r21*x12496*x12506))+x12491+((gconst11*x12500)));
evalcond[7]=(((x12493*x12504))+((sj0*x12491))+((r10*x12496))+(((-1.0)*x12488*x12489*x12490))+(((-1.0)*cj1*cj2*x12498))+((r11*x12492)));
evalcond[8]=(((gconst10*x12489))+(((-1.0)*r11*x12496*x12506))+((gconst11*x12493))+(((-1.0)*x12498*x12499))+((r10*x12488*x12492))+(((-1.0)*x12494*x12498)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12507=((-1.0)*r11);
CheckValue<IkReal> x12510 = IKatan2WithCheck(IkReal(x12507),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12510.valid){
continue;
}
IkReal x12508=((1.0)*(x12510.value));
IkReal x12509=x11833;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12508)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12508)));
IkReal gconst10=(x12507*x12509);
IkReal gconst11=((1.0)*r10*x12509);
IkReal x12511=r12*r12;
IkReal x12512=((1.0)*sj0);
IkReal x12513=(cj0*r02);
IkReal x12514=x11833;
j4eval[0]=((IKabs(((((-1.0)*r12*x12512))+(((-1.0)*x12513)))))+(IKabs((((sj0*x12511*x12514))+(((-1.0)*x12512*x12514))+((r12*x12513*x12514))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12515=((1.0)*r12);
IkReal x12516=(sj1*sj2);
IkReal x12517=((1.0)*r21);
IkReal x12518=(cj3*gconst11);
IkReal x12519=(r11*sj3);
IkReal x12520=(gconst11*r20);
IkReal x12521=((1.0)*sj3);
IkReal x12522=(cj1*cj2);
IkReal x12523=(gconst10*r21*sj3);
IkReal x12524=(cj3*gconst10*r20);
CheckValue<IkReal> x12525=IKPowWithIntegerCheck(((((-1.0)*gconst11*r10*x12520*x12521))+((gconst11*r10*x12523))+((gconst10*x12519*x12520))+(((-1.0)*x12517*x12519*(gconst10*gconst10)))),-1);
if(!x12525.valid){
continue;
}
CheckValue<IkReal> x12526=IKPowWithIntegerCheck((((sj3*x12520))+(((-1.0)*gconst10*sj3*x12517))),-1);
if(!x12526.valid){
continue;
}
if( IKabs(((x12525.value)*(((((-1.0)*cj0*x12520*x12521))+((cj0*x12523))+(((-1.0)*r21*x12515*x12518))+(((-1.0)*x12515*x12524))+((r12*x12522))+(((-1.0)*x12515*x12516)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12526.value)*(((((-1.0)*x12516))+x12522+(((-1.0)*x12524))+(((-1.0)*x12517*x12518)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12525.value)*(((((-1.0)*cj0*x12520*x12521))+((cj0*x12523))+(((-1.0)*r21*x12515*x12518))+(((-1.0)*x12515*x12524))+((r12*x12522))+(((-1.0)*x12515*x12516))))))+IKsqr(((x12526.value)*(((((-1.0)*x12516))+x12522+(((-1.0)*x12524))+(((-1.0)*x12517*x12518))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12525.value)*(((((-1.0)*cj0*x12520*x12521))+((cj0*x12523))+(((-1.0)*r21*x12515*x12518))+(((-1.0)*x12515*x12524))+((r12*x12522))+(((-1.0)*x12515*x12516))))), ((x12526.value)*(((((-1.0)*x12516))+x12522+(((-1.0)*x12524))+(((-1.0)*x12517*x12518))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12527=IKsin(j4);
IkReal x12528=IKcos(j4);
IkReal x12529=(cj3*r10);
IkReal x12530=(gconst11*r20);
IkReal x12531=(gconst11*sj3);
IkReal x12532=(sj1*sj2);
IkReal x12533=(cj3*r11);
IkReal x12534=(r10*sj3);
IkReal x12535=(gconst10*r01);
IkReal x12536=(gconst10*sj3);
IkReal x12537=(cj2*sj1);
IkReal x12538=((1.0)*sj0);
IkReal x12539=(cj1*sj2);
IkReal x12540=(gconst10*r21);
IkReal x12541=(cj3*gconst10);
IkReal x12542=(cj3*gconst11);
IkReal x12543=((1.0)*cj0);
IkReal x12544=((1.0)*x12527);
IkReal x12545=((1.0)*cj1*cj2);
IkReal x12546=(gconst11*x12528);
IkReal x12547=(sj3*x12528);
IkReal x12548=(gconst10*x12527);
IkReal x12549=((1.0)*x12528);
IkReal x12550=(cj3*x12528);
IkReal x12551=(cj3*x12527);
evalcond[0]=(((x12527*x12540))+(((-1.0)*x12530*x12544)));
evalcond[1]=(cj0+((r11*x12548))+(((-1.0)*gconst11*r10*x12544))+(((-1.0)*r12*x12549)));
evalcond[2]=(((x12527*x12535))+(((-1.0)*x12538))+(((-1.0)*gconst11*r00*x12544))+(((-1.0)*r02*x12549)));
evalcond[3]=(((r20*x12536))+((r21*x12531))+((x12540*x12550))+x12537+x12539+(((-1.0)*cj3*x12530*x12549)));
evalcond[4]=(((x12530*x12547))+((r20*x12541))+(((-1.0)*r21*x12536*x12549))+x12532+((r21*x12542))+(((-1.0)*x12545)));
evalcond[5]=(((r00*x12536))+(((-1.0)*r00*x12542*x12549))+((x12535*x12550))+(((-1.0)*cj1*cj2*x12543))+((r02*x12551))+((r01*x12531))+((cj0*x12532)));
evalcond[6]=(((r11*x12531))+((r12*x12551))+(((-1.0)*cj1*cj2*x12538))+((gconst10*x12528*x12533))+((gconst10*x12534))+((sj0*x12532))+(((-1.0)*x12529*x12546)));
evalcond[7]=(((r00*x12528*x12531))+((r00*x12541))+((r01*x12542))+(((-1.0)*x12537*x12543))+(((-1.0)*x12535*x12547))+(((-1.0)*x12539*x12543))+(((-1.0)*r02*sj3*x12544)));
evalcond[8]=((((-1.0)*x12538*x12539))+(((-1.0)*r12*sj3*x12544))+((gconst10*x12529))+(((-1.0)*x12537*x12538))+((r10*x12528*x12531))+((gconst11*x12533))+(((-1.0)*r11*x12536*x12549)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12552=((1.0)*sj0);
IkReal x12553=((1.0)*gconst10);
CheckValue<IkReal> x12554=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12553))+(((-1.0)*gconst11*r21)))),-1);
if(!x12554.valid){
continue;
}
CheckValue<IkReal> x12555 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x12552))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst10*r11*x12552))+(((-1.0)*cj0*r01*x12553))+((cj0*gconst11*r00))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12555.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12554.value)))+(x12555.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12556=IKsin(j4);
IkReal x12557=IKcos(j4);
IkReal x12558=(cj3*r10);
IkReal x12559=(gconst11*r20);
IkReal x12560=(gconst11*sj3);
IkReal x12561=(sj1*sj2);
IkReal x12562=(cj3*r11);
IkReal x12563=(r10*sj3);
IkReal x12564=(gconst10*r01);
IkReal x12565=(gconst10*sj3);
IkReal x12566=(cj2*sj1);
IkReal x12567=((1.0)*sj0);
IkReal x12568=(cj1*sj2);
IkReal x12569=(gconst10*r21);
IkReal x12570=(cj3*gconst10);
IkReal x12571=(cj3*gconst11);
IkReal x12572=((1.0)*cj0);
IkReal x12573=((1.0)*x12556);
IkReal x12574=((1.0)*cj1*cj2);
IkReal x12575=(gconst11*x12557);
IkReal x12576=(sj3*x12557);
IkReal x12577=(gconst10*x12556);
IkReal x12578=((1.0)*x12557);
IkReal x12579=(cj3*x12557);
IkReal x12580=(cj3*x12556);
evalcond[0]=(((x12556*x12569))+(((-1.0)*x12559*x12573)));
evalcond[1]=((((-1.0)*gconst11*r10*x12573))+cj0+(((-1.0)*r12*x12578))+((r11*x12577)));
evalcond[2]=(((x12556*x12564))+(((-1.0)*r02*x12578))+(((-1.0)*gconst11*r00*x12573))+(((-1.0)*x12567)));
evalcond[3]=((((-1.0)*cj3*x12559*x12578))+((r20*x12565))+((x12569*x12579))+((r21*x12560))+x12568+x12566);
evalcond[4]=(((r21*x12571))+(((-1.0)*x12574))+((r20*x12570))+x12561+(((-1.0)*r21*x12565*x12578))+((x12559*x12576)));
evalcond[5]=((((-1.0)*r00*x12571*x12578))+((r01*x12560))+((r00*x12565))+((r02*x12580))+((x12564*x12579))+(((-1.0)*cj1*cj2*x12572))+((cj0*x12561)));
evalcond[6]=(((r11*x12560))+((r12*x12580))+((sj0*x12561))+(((-1.0)*x12558*x12575))+((gconst10*x12557*x12562))+(((-1.0)*cj1*cj2*x12567))+((gconst10*x12563)));
evalcond[7]=((((-1.0)*x12564*x12576))+((r00*x12557*x12560))+((r00*x12570))+((r01*x12571))+(((-1.0)*x12566*x12572))+(((-1.0)*r02*sj3*x12573))+(((-1.0)*x12568*x12572)));
evalcond[8]=((((-1.0)*x12567*x12568))+((gconst11*x12562))+((gconst10*x12558))+(((-1.0)*x12566*x12567))+(((-1.0)*r11*x12565*x12578))+((r10*x12557*x12560))+(((-1.0)*r12*sj3*x12573)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12581=gconst10*gconst10;
IkReal x12582=r21*r21;
IkReal x12583=gconst11*gconst11;
IkReal x12584=r20*r20;
IkReal x12585=((1.0)*cj3);
IkReal x12586=(r20*sj3);
IkReal x12587=(gconst10*gconst11);
IkReal x12588=(cj2*sj1);
IkReal x12589=(gconst10*r21);
IkReal x12590=(cj1*sj2);
IkReal x12591=((1.0)*gconst11*r20);
CheckValue<IkReal> x12592=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12581*x12582*x12585))+(((-1.0)*x12585*(r22*r22)))+(((2.0)*cj3*r20*r21*x12587))+(((-1.0)*x12583*x12584*x12585)))),-1);
if(!x12592.valid){
continue;
}
CheckValue<IkReal> x12593 = IKatan2WithCheck(IkReal((((gconst11*r21*r22*sj3))+((r22*x12588))+((r22*x12590))+((gconst10*r22*x12586)))),IkReal(((((-1.0)*sj3*x12584*x12587))+(((-1.0)*x12588*x12591))+(((-1.0)*x12590*x12591))+((r21*x12581*x12586))+((x12589*x12590))+(((-1.0)*r21*x12583*x12586))+((sj3*x12582*x12587))+((x12588*x12589)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12593.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12592.value)))+(x12593.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12594=IKsin(j4);
IkReal x12595=IKcos(j4);
IkReal x12596=(cj3*r10);
IkReal x12597=(gconst11*r20);
IkReal x12598=(gconst11*sj3);
IkReal x12599=(sj1*sj2);
IkReal x12600=(gconst11*r00);
IkReal x12601=(cj3*r11);
IkReal x12602=(gconst10*sj3);
IkReal x12603=(cj2*sj1);
IkReal x12604=(cj3*r01);
IkReal x12605=((1.0)*sj0);
IkReal x12606=(cj1*sj2);
IkReal x12607=(cj3*r21);
IkReal x12608=(cj3*gconst10);
IkReal x12609=((1.0)*cj0);
IkReal x12610=((1.0)*x12595);
IkReal x12611=((1.0)*x12594);
IkReal x12612=((1.0)*cj1*cj2);
IkReal x12613=(cj3*x12594);
IkReal x12614=(gconst10*x12594);
IkReal x12615=(gconst10*x12595);
evalcond[0]=((((-1.0)*r22*x12610))+((r21*x12614))+(((-1.0)*x12597*x12611)));
evalcond[1]=((((-1.0)*r12*x12610))+cj0+(((-1.0)*gconst11*r10*x12611))+((r11*x12614)));
evalcond[2]=((((-1.0)*r02*x12610))+(((-1.0)*x12605))+(((-1.0)*x12600*x12611))+((r01*x12614)));
evalcond[3]=(((r20*x12602))+((r21*x12598))+x12603+x12606+(((-1.0)*cj3*x12597*x12610))+((x12607*x12615))+((r22*x12613)));
evalcond[4]=(((r20*x12608))+((sj3*x12595*x12597))+(((-1.0)*r22*sj3*x12611))+((gconst11*x12607))+x12599+(((-1.0)*r21*x12602*x12610))+(((-1.0)*x12612)));
evalcond[5]=(((r02*x12613))+((r01*x12598))+((r00*x12602))+((cj0*x12599))+(((-1.0)*cj3*x12600*x12610))+((x12604*x12615))+(((-1.0)*cj1*cj2*x12609)));
evalcond[6]=(((x12601*x12615))+(((-1.0)*gconst11*x12596*x12610))+((r10*x12602))+((r12*x12613))+(((-1.0)*cj1*cj2*x12605))+((sj0*x12599))+((r11*x12598)));
evalcond[7]=(((r00*x12608))+(((-1.0)*x12606*x12609))+(((-1.0)*r01*x12602*x12610))+((gconst11*x12604))+(((-1.0)*r02*sj3*x12611))+((r00*x12595*x12598))+(((-1.0)*x12603*x12609)));
evalcond[8]=((((-1.0)*r11*x12602*x12610))+((r10*x12595*x12598))+((gconst11*x12601))+((gconst10*x12596))+(((-1.0)*r12*sj3*x12611))+(((-1.0)*x12605*x12606))+(((-1.0)*x12603*x12605)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12616=((1.0)*sj0);
IkReal x12617=((1.0)*gconst10);
CheckValue<IkReal> x12618=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12617))+(((-1.0)*gconst11*r21)))),-1);
if(!x12618.valid){
continue;
}
CheckValue<IkReal> x12619 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x12616))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x12617))+((cj0*gconst11*r00))+((gconst11*r10*sj0))+(((-1.0)*gconst10*r11*x12616)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12619.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12618.value)))+(x12619.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12620=IKsin(j4);
IkReal x12621=IKcos(j4);
IkReal x12622=(cj3*r10);
IkReal x12623=(gconst11*r20);
IkReal x12624=(gconst11*sj3);
IkReal x12625=(sj1*sj2);
IkReal x12626=(gconst11*r00);
IkReal x12627=(cj3*r11);
IkReal x12628=(gconst10*sj3);
IkReal x12629=(cj2*sj1);
IkReal x12630=(cj3*r01);
IkReal x12631=((1.0)*sj0);
IkReal x12632=(cj1*sj2);
IkReal x12633=(cj3*r21);
IkReal x12634=(cj3*gconst10);
IkReal x12635=((1.0)*cj0);
IkReal x12636=((1.0)*x12621);
IkReal x12637=((1.0)*x12620);
IkReal x12638=((1.0)*cj1*cj2);
IkReal x12639=(cj3*x12620);
IkReal x12640=(gconst10*x12620);
IkReal x12641=(gconst10*x12621);
evalcond[0]=((((-1.0)*r22*x12636))+(((-1.0)*x12623*x12637))+((r21*x12640)));
evalcond[1]=(cj0+(((-1.0)*gconst11*r10*x12637))+((r11*x12640))+(((-1.0)*r12*x12636)));
evalcond[2]=((((-1.0)*x12626*x12637))+((r01*x12640))+(((-1.0)*x12631))+(((-1.0)*r02*x12636)));
evalcond[3]=(((r21*x12624))+((x12633*x12641))+x12632+x12629+(((-1.0)*cj3*x12623*x12636))+((r22*x12639))+((r20*x12628)));
evalcond[4]=(((sj3*x12621*x12623))+((r20*x12634))+(((-1.0)*x12638))+x12625+(((-1.0)*r22*sj3*x12637))+(((-1.0)*r21*x12628*x12636))+((gconst11*x12633)));
evalcond[5]=(((x12630*x12641))+(((-1.0)*cj1*cj2*x12635))+((r01*x12624))+((r02*x12639))+((r00*x12628))+((cj0*x12625))+(((-1.0)*cj3*x12626*x12636)));
evalcond[6]=(((x12627*x12641))+((r12*x12639))+((sj0*x12625))+(((-1.0)*cj1*cj2*x12631))+(((-1.0)*gconst11*x12622*x12636))+((r10*x12628))+((r11*x12624)));
evalcond[7]=((((-1.0)*r02*sj3*x12637))+((r00*x12621*x12624))+(((-1.0)*x12632*x12635))+((r00*x12634))+(((-1.0)*r01*x12628*x12636))+(((-1.0)*x12629*x12635))+((gconst11*x12630)));
evalcond[8]=(((r10*x12621*x12624))+((gconst11*x12627))+(((-1.0)*x12631*x12632))+((gconst10*x12622))+(((-1.0)*r12*sj3*x12637))+(((-1.0)*r11*x12628*x12636))+(((-1.0)*x12629*x12631)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12642=((1.0)*gconst11);
CheckValue<IkReal> x12643 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x12642))+((cj0*gconst10*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12643.valid){
continue;
}
CheckValue<IkReal> x12644=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x12642)))),-1);
if(!x12644.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12643.value)+(((1.5707963267949)*(x12644.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12645=IKsin(j4);
IkReal x12646=IKcos(j4);
IkReal x12647=(cj3*r10);
IkReal x12648=(gconst11*r20);
IkReal x12649=(gconst11*sj3);
IkReal x12650=(sj1*sj2);
IkReal x12651=(gconst11*r00);
IkReal x12652=(cj3*r11);
IkReal x12653=(gconst10*sj3);
IkReal x12654=(cj2*sj1);
IkReal x12655=(cj3*r01);
IkReal x12656=((1.0)*sj0);
IkReal x12657=(cj1*sj2);
IkReal x12658=(cj3*r21);
IkReal x12659=(cj3*gconst10);
IkReal x12660=((1.0)*cj0);
IkReal x12661=((1.0)*x12646);
IkReal x12662=((1.0)*x12645);
IkReal x12663=((1.0)*cj1*cj2);
IkReal x12664=(cj3*x12645);
IkReal x12665=(gconst10*x12645);
IkReal x12666=(gconst10*x12646);
evalcond[0]=((((-1.0)*r22*x12661))+(((-1.0)*x12648*x12662))+((r21*x12665)));
evalcond[1]=(cj0+((r11*x12665))+(((-1.0)*r12*x12661))+(((-1.0)*gconst11*r10*x12662)));
evalcond[2]=((((-1.0)*x12656))+(((-1.0)*r02*x12661))+((r01*x12665))+(((-1.0)*x12651*x12662)));
evalcond[3]=((((-1.0)*cj3*x12648*x12661))+((x12658*x12666))+((r22*x12664))+x12654+x12657+((r21*x12649))+((r20*x12653)));
evalcond[4]=((((-1.0)*x12663))+(((-1.0)*r22*sj3*x12662))+((sj3*x12646*x12648))+((gconst11*x12658))+x12650+(((-1.0)*r21*x12653*x12661))+((r20*x12659)));
evalcond[5]=(((x12655*x12666))+((r02*x12664))+(((-1.0)*cj3*x12651*x12661))+((r01*x12649))+(((-1.0)*cj1*cj2*x12660))+((r00*x12653))+((cj0*x12650)));
evalcond[6]=((((-1.0)*gconst11*x12647*x12661))+((r10*x12653))+((sj0*x12650))+((r12*x12664))+((x12652*x12666))+(((-1.0)*cj1*cj2*x12656))+((r11*x12649)));
evalcond[7]=((((-1.0)*x12657*x12660))+(((-1.0)*x12654*x12660))+(((-1.0)*r02*sj3*x12662))+((r00*x12646*x12649))+(((-1.0)*r01*x12653*x12661))+((gconst11*x12655))+((r00*x12659)));
evalcond[8]=((((-1.0)*x12656*x12657))+((r10*x12646*x12649))+(((-1.0)*r11*x12653*x12661))+((gconst11*x12652))+(((-1.0)*r12*sj3*x12662))+((gconst10*x12647))+(((-1.0)*x12654*x12656)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12667=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12667;
j4eval[1]=IKsign(x12667);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12668=((1.0)*cj5);
IkReal x12669=((((-1.0)*r01*x12668))+(((-1.0)*r00*sj5)));
j4eval[0]=x12669;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x12668)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12669);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12670=cj5*cj5;
IkReal x12671=(cj3*r21);
IkReal x12672=(cj5*sj5);
IkReal x12673=((1.0)*cj3);
IkReal x12674=(((r11*x12670*x12671))+((cj3*r11*r20*x12672))+(((-1.0)*r10*r20*x12670*x12673))+(((-1.0)*r12*r22*x12673))+((r10*x12671*x12672))+(((-1.0)*r11*x12671)));
j4eval[0]=x12674;
j4eval[1]=IKsign(x12674);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12675=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12675;
j4eval[1]=IKsign(x12675);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12676=((1.0)*cj5);
IkReal x12677=((((-1.0)*r00*sj5))+(((-1.0)*r01*x12676)));
j4eval[0]=x12677;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x12676))))));
j4eval[2]=IKsign(x12677);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12678=cj5*cj5;
IkReal x12679=r11*r11;
IkReal x12680=(r11*sj5);
IkReal x12681=(cj5*r10);
IkReal x12682=((((-2.0)*x12680*x12681))+(r12*r12)+(((-1.0)*x12678*x12679))+x12679+((x12678*(r10*r10))));
j4eval[0]=x12682;
j4eval[1]=IKsign(x12682);
j4eval[2]=((IKabs(r12))+(IKabs((x12681+(((-1.0)*x12680))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12683=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12683);
rxp1_1=(px*r21);
rxp1_2=(r11*x12683);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12684=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12684);
rxp1_1=(px*r21);
rxp1_2=(r11*x12684);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12685=((1.0)*sj1);
CheckValue<IkReal> x12686=IKPowWithIntegerCheck(r02,-1);
if(!x12686.valid){
continue;
}
CheckValue<IkReal> x12687=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12687.valid){
continue;
}
if( IKabs(((x12686.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12685)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12687.value)*((((cj1*cj2))+(((-1.0)*sj2*x12685)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12686.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12685))))))+IKsqr(((x12687.value)*((((cj1*cj2))+(((-1.0)*sj2*x12685))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12686.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12685))))), ((x12687.value)*((((cj1*cj2))+(((-1.0)*sj2*x12685))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12688=IKsin(j4);
IkReal x12689=IKcos(j4);
IkReal x12690=(cj5*r20);
IkReal x12691=((1.0)*cj2);
IkReal x12692=(cj5*r10);
IkReal x12693=((1.0)*x12688);
IkReal x12694=(sj5*x12688);
IkReal x12695=((1.0)*sj5*x12689);
evalcond[0]=((-1.0)*r02*x12689);
evalcond[1]=(((r21*x12694))+(((-1.0)*x12690*x12693)));
evalcond[2]=((((-1.0)*r11*x12695))+((x12689*x12692)));
evalcond[3]=((1.0)+(((-1.0)*x12692*x12693))+((r11*x12694)));
evalcond[4]=((((-1.0)*r02*x12693))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12691)));
evalcond[5]=((((-1.0)*cj1*x12691))+((sj1*sj2))+((x12689*x12690))+(((-1.0)*r21*x12695)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12696=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x12696.valid){
continue;
}
CheckValue<IkReal> x12697=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12697.valid){
continue;
}
if( IKabs(((-1.0)*(x12696.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12697.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12696.value)))+IKsqr(((x12697.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12696.value)), ((x12697.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12698=IKsin(j4);
IkReal x12699=IKcos(j4);
IkReal x12700=(cj5*r20);
IkReal x12701=((1.0)*cj2);
IkReal x12702=(cj5*r10);
IkReal x12703=((1.0)*x12698);
IkReal x12704=(sj5*x12698);
IkReal x12705=((1.0)*sj5*x12699);
evalcond[0]=((-1.0)*r02*x12699);
evalcond[1]=(((r21*x12704))+(((-1.0)*x12700*x12703)));
evalcond[2]=(((x12699*x12702))+(((-1.0)*r11*x12705)));
evalcond[3]=((1.0)+(((-1.0)*x12702*x12703))+((r11*x12704)));
evalcond[4]=((((-1.0)*sj1*x12701))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x12703)));
evalcond[5]=(((x12699*x12700))+((sj1*sj2))+(((-1.0)*r21*x12705))+(((-1.0)*cj1*x12701)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12706=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12706);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12706);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12707=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12707);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12707);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12708=IKPowWithIntegerCheck(r22,-1);
if(!x12708.valid){
continue;
}
CheckValue<IkReal> x12709=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x12709.valid){
continue;
}
if( IKabs(((x12708.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12709.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12708.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x12709.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12708.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x12709.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12710=IKsin(j4);
IkReal x12711=IKcos(j4);
IkReal x12712=((1.0)*cj2);
IkReal x12713=(cj5*x12711);
IkReal x12714=(sj5*x12710);
IkReal x12715=((1.0)*sj5*x12711);
IkReal x12716=((1.0)*cj5*x12710);
evalcond[0]=((-1.0)*r22*x12711);
evalcond[1]=((((-1.0)*r00*x12716))+((r01*x12714)));
evalcond[2]=(((sj1*sj2))+(((-1.0)*r22*x12710))+(((-1.0)*cj1*x12712)));
evalcond[3]=(((r10*x12713))+(((-1.0)*r11*x12715)));
evalcond[4]=((1.0)+(((-1.0)*r10*x12716))+((r11*x12714)));
evalcond[5]=((((-1.0)*sj1*x12712))+(((-1.0)*cj1*sj2))+((r00*x12713))+(((-1.0)*r01*x12715)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12717=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x12717.valid){
continue;
}
CheckValue<IkReal> x12718=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x12718.valid){
continue;
}
if( IKabs(((-1.0)*(x12717.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12718.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12717.value)))+IKsqr(((x12718.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12717.value)), ((x12718.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12719=IKsin(j4);
IkReal x12720=IKcos(j4);
IkReal x12721=((1.0)*cj2);
IkReal x12722=(cj5*x12720);
IkReal x12723=(sj5*x12719);
IkReal x12724=((1.0)*sj5*x12720);
IkReal x12725=((1.0)*cj5*x12719);
evalcond[0]=((-1.0)*r22*x12720);
evalcond[1]=((((-1.0)*r00*x12725))+((r01*x12723)));
evalcond[2]=(((sj1*sj2))+(((-1.0)*r22*x12719))+(((-1.0)*cj1*x12721)));
evalcond[3]=(((r10*x12722))+(((-1.0)*r11*x12724)));
evalcond[4]=((1.0)+((r11*x12723))+(((-1.0)*r10*x12725)));
evalcond[5]=((((-1.0)*sj1*x12721))+(((-1.0)*r01*x12724))+(((-1.0)*cj1*sj2))+((r00*x12722)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12726=cj5*cj5;
IkReal x12727=r11*r11;
IkReal x12728=(cj5*r10);
IkReal x12729=(r11*sj5);
CheckValue<IkReal> x12730 = IKatan2WithCheck(IkReal(((((-1.0)*x12729))+x12728)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x12730.valid){
continue;
}
CheckValue<IkReal> x12731=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x12726*x12727))+x12727+((x12726*(r10*r10)))+(((-2.0)*x12728*x12729)))),-1);
if(!x12731.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12730.value)+(((1.5707963267949)*(x12731.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12732=IKsin(j4);
IkReal x12733=IKcos(j4);
IkReal x12734=(cj5*r10);
IkReal x12735=(r01*sj5);
IkReal x12736=((1.0)*cj2);
IkReal x12737=(cj5*r00);
IkReal x12738=(cj5*r20);
IkReal x12739=((1.0)*x12733);
IkReal x12740=((1.0)*x12732);
IkReal x12741=(sj5*x12732);
evalcond[0]=((((-1.0)*r22*x12739))+(((-1.0)*x12738*x12740))+((r21*x12741)));
evalcond[1]=((((-1.0)*r02*x12739))+((x12732*x12735))+(((-1.0)*x12737*x12740)));
evalcond[2]=((((-1.0)*r12*x12740))+((x12733*x12734))+(((-1.0)*r11*sj5*x12739)));
evalcond[3]=((1.0)+((r11*x12741))+(((-1.0)*r12*x12739))+(((-1.0)*x12734*x12740)));
evalcond[4]=(((x12733*x12738))+((sj1*sj2))+(((-1.0)*r22*x12740))+(((-1.0)*r21*sj5*x12739))+(((-1.0)*cj1*x12736)));
evalcond[5]=((((-1.0)*sj1*x12736))+((x12733*x12737))+(((-1.0)*r02*x12740))+(((-1.0)*x12735*x12739))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12742=((1.0)*cj5);
CheckValue<IkReal> x12743 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x12742)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12743.valid){
continue;
}
CheckValue<IkReal> x12744=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x12742)))),-1);
if(!x12744.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12743.value)+(((1.5707963267949)*(x12744.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12745=IKsin(j4);
IkReal x12746=IKcos(j4);
IkReal x12747=(cj5*r10);
IkReal x12748=(r01*sj5);
IkReal x12749=((1.0)*cj2);
IkReal x12750=(cj5*r00);
IkReal x12751=(cj5*r20);
IkReal x12752=((1.0)*x12746);
IkReal x12753=((1.0)*x12745);
IkReal x12754=(sj5*x12745);
evalcond[0]=((((-1.0)*r22*x12752))+((r21*x12754))+(((-1.0)*x12751*x12753)));
evalcond[1]=(((x12745*x12748))+(((-1.0)*r02*x12752))+(((-1.0)*x12750*x12753)));
evalcond[2]=((((-1.0)*r12*x12753))+(((-1.0)*r11*sj5*x12752))+((x12746*x12747)));
evalcond[3]=((1.0)+((r11*x12754))+(((-1.0)*r12*x12752))+(((-1.0)*x12747*x12753)));
evalcond[4]=((((-1.0)*r21*sj5*x12752))+(((-1.0)*r22*x12753))+((sj1*sj2))+(((-1.0)*cj1*x12749))+((x12746*x12751)));
evalcond[5]=((((-1.0)*r02*x12753))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12749))+(((-1.0)*x12748*x12752))+((x12746*x12750)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12755=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12755.valid){
continue;
}
CheckValue<IkReal> x12756 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12756.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12755.value)))+(x12756.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12757=IKsin(j4);
IkReal x12758=IKcos(j4);
IkReal x12759=(cj5*r10);
IkReal x12760=(r01*sj5);
IkReal x12761=((1.0)*cj2);
IkReal x12762=(cj5*r00);
IkReal x12763=(cj5*r20);
IkReal x12764=((1.0)*x12758);
IkReal x12765=((1.0)*x12757);
IkReal x12766=(sj5*x12757);
evalcond[0]=(((r21*x12766))+(((-1.0)*x12763*x12765))+(((-1.0)*r22*x12764)));
evalcond[1]=((((-1.0)*x12762*x12765))+(((-1.0)*r02*x12764))+((x12757*x12760)));
evalcond[2]=((((-1.0)*r12*x12765))+((x12758*x12759))+(((-1.0)*r11*sj5*x12764)));
evalcond[3]=((1.0)+(((-1.0)*x12759*x12765))+(((-1.0)*r12*x12764))+((r11*x12766)));
evalcond[4]=((((-1.0)*r21*sj5*x12764))+(((-1.0)*r22*x12765))+((x12758*x12763))+((sj1*sj2))+(((-1.0)*cj1*x12761)));
evalcond[5]=((((-1.0)*sj1*x12761))+((x12758*x12762))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x12765))+(((-1.0)*x12760*x12764)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12767=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12767;
j4eval[1]=IKsign(x12767);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12768=((1.0)*cj5);
IkReal x12769=((((-1.0)*r01*x12768))+(((-1.0)*r00*sj5)));
j4eval[0]=x12769;
j4eval[1]=((IKabs(((((-1.0)*r20*x12768))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12769);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12770=(sj1*sj2);
IkReal x12771=(cj5*r10);
IkReal x12772=(r11*sj5);
IkReal x12773=(cj1*cj2);
IkReal x12774=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x12774;
j4eval[1]=((IKabs((((r12*x12773))+(((-1.0)*r12*x12770)))))+(IKabs((((x12770*x12772))+(((-1.0)*x12772*x12773))+(((-1.0)*x12770*x12771))+((x12771*x12773))))));
j4eval[2]=IKsign(x12774);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12775=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12775);
rxp1_1=(px*r21);
rxp1_2=(r11*x12775);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12776=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12776);
rxp1_1=(px*r21);
rxp1_2=(r11*x12776);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x12777=((1.0)*cj5);
j4eval[0]=(((r11*sj5))+(((-1.0)*r10*x12777)));
j4eval[1]=((((-1.0)*r20*x12777))+((r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12778=((1.0)*cj5);
CheckValue<IkReal> x12779=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*r10*x12778))),-1);
if(!x12779.valid){
continue;
}
CheckValue<IkReal> x12780=IKPowWithIntegerCheck(((((-1.0)*r20*x12778))+((r21*sj5))),-1);
if(!x12780.valid){
continue;
}
if( IKabs(((-1.0)*(x12779.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12780.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12779.value)))+IKsqr(((x12780.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12779.value)), ((x12780.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12781=IKsin(j4);
IkReal x12782=IKcos(j4);
IkReal x12783=((1.0)*cj2);
IkReal x12784=(r21*sj5);
IkReal x12785=(r11*sj5);
IkReal x12786=((1.0)*cj5*x12781);
IkReal x12787=((1.0)*cj5*x12782);
evalcond[0]=((-1.0)*r02*x12782);
evalcond[1]=((((-1.0)*r20*x12786))+((x12781*x12784)));
evalcond[2]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12783))+((r02*x12781)));
evalcond[3]=(((x12782*x12785))+(((-1.0)*r10*x12787)));
evalcond[4]=((1.0)+(((-1.0)*r10*x12786))+((x12781*x12785)));
evalcond[5]=(((x12782*x12784))+((sj1*sj2))+(((-1.0)*r20*x12787))+(((-1.0)*cj1*x12783)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12788=IKPowWithIntegerCheck(r02,-1);
if(!x12788.valid){
continue;
}
CheckValue<IkReal> x12789=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x12789.valid){
continue;
}
if( IKabs(((x12788.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12789.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12788.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x12789.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12788.value)*((((cj2*sj1))+((cj1*sj2))))), ((x12789.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12790=IKsin(j4);
IkReal x12791=IKcos(j4);
IkReal x12792=((1.0)*cj2);
IkReal x12793=(r21*sj5);
IkReal x12794=(r11*sj5);
IkReal x12795=((1.0)*cj5*x12790);
IkReal x12796=((1.0)*cj5*x12791);
evalcond[0]=((-1.0)*r02*x12791);
evalcond[1]=((((-1.0)*r20*x12795))+((x12790*x12793)));
evalcond[2]=(((r02*x12790))+(((-1.0)*sj1*x12792))+(((-1.0)*cj1*sj2)));
evalcond[3]=(((x12791*x12794))+(((-1.0)*r10*x12796)));
evalcond[4]=((1.0)+(((-1.0)*r10*x12795))+((x12790*x12794)));
evalcond[5]=(((x12791*x12793))+(((-1.0)*r20*x12796))+((sj1*sj2))+(((-1.0)*cj1*x12792)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12797=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12797;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12797);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12798=((1.0)*cj5);
IkReal x12799=((((-1.0)*r21*x12798))+(((-1.0)*r20*sj5)));
j4eval[0]=x12799;
j4eval[1]=((IKabs(((((-1.0)*r10*x12798))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x12799);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12800=cj5*cj5;
IkReal x12801=(r11*r21);
IkReal x12802=((1.0)*r20);
IkReal x12803=(cj5*sj5);
IkReal x12804=((((-1.0)*r10*x12800*x12802))+((x12800*x12801))+((r11*r20*x12803))+(((-1.0)*r12*r22))+(((-1.0)*x12801))+((r10*r21*x12803)));
j4eval[0]=x12804;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*x12802)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12804);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12805=cj5*cj5;
IkReal x12806=(r21*sj5);
IkReal x12807=(r11*r21);
IkReal x12808=((1.0)*r20);
CheckValue<IkReal> x12809 = IKatan2WithCheck(IkReal((x12806+(((-1.0)*cj5*x12808)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12809.valid){
continue;
}
CheckValue<IkReal> x12810=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+(((-1.0)*r10*x12805*x12808))+(((-1.0)*x12807))+((cj5*r10*x12806))+((x12805*x12807))+((cj5*r11*r20*sj5)))),-1);
if(!x12810.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12809.value)+(((1.5707963267949)*(x12810.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12811=IKcos(j4);
IkReal x12812=IKsin(j4);
IkReal x12813=(cj5*r00);
IkReal x12814=(cj5*r20);
IkReal x12815=(cj5*r10);
IkReal x12816=((1.0)*x12811);
IkReal x12817=((1.0)*x12812);
IkReal x12818=(sj5*x12811);
IkReal x12819=(sj5*x12812);
evalcond[0]=((((-1.0)*x12814*x12816))+((r21*x12818))+((r22*x12812)));
evalcond[1]=(((r12*x12812))+((r11*x12818))+(((-1.0)*x12815*x12816)));
evalcond[2]=((((-1.0)*x12814*x12817))+((r21*x12819))+(((-1.0)*r22*x12816)));
evalcond[3]=((((-1.0)*r02*x12816))+(((-1.0)*x12813*x12817))+((r01*x12819)));
evalcond[4]=((-1.0)+((r02*x12812))+(((-1.0)*x12813*x12816))+((r01*x12818)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12816))+((r11*x12819))+(((-1.0)*x12815*x12817)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12820=((1.0)*cj5);
CheckValue<IkReal> x12821 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x12820))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12821.valid){
continue;
}
CheckValue<IkReal> x12822=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12820))+(((-1.0)*r20*sj5)))),-1);
if(!x12822.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12821.value)+(((1.5707963267949)*(x12822.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12823=IKcos(j4);
IkReal x12824=IKsin(j4);
IkReal x12825=(cj5*r00);
IkReal x12826=(cj5*r20);
IkReal x12827=(cj5*r10);
IkReal x12828=((1.0)*x12823);
IkReal x12829=((1.0)*x12824);
IkReal x12830=(sj5*x12823);
IkReal x12831=(sj5*x12824);
evalcond[0]=(((r21*x12830))+(((-1.0)*x12826*x12828))+((r22*x12824)));
evalcond[1]=(((r11*x12830))+(((-1.0)*x12827*x12828))+((r12*x12824)));
evalcond[2]=(((r21*x12831))+(((-1.0)*r22*x12828))+(((-1.0)*x12826*x12829)));
evalcond[3]=((((-1.0)*r02*x12828))+(((-1.0)*x12825*x12829))+((r01*x12831)));
evalcond[4]=((-1.0)+(((-1.0)*x12825*x12828))+((r02*x12824))+((r01*x12830)));
evalcond[5]=((1.0)+((r11*x12831))+(((-1.0)*r12*x12828))+(((-1.0)*x12827*x12829)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12832 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12832.valid){
continue;
}
CheckValue<IkReal> x12833=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12833.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12832.value)+(((1.5707963267949)*(x12833.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12834=IKcos(j4);
IkReal x12835=IKsin(j4);
IkReal x12836=(cj5*r00);
IkReal x12837=(cj5*r20);
IkReal x12838=(cj5*r10);
IkReal x12839=((1.0)*x12834);
IkReal x12840=((1.0)*x12835);
IkReal x12841=(sj5*x12834);
IkReal x12842=(sj5*x12835);
evalcond[0]=((((-1.0)*x12837*x12839))+((r22*x12835))+((r21*x12841)));
evalcond[1]=(((r12*x12835))+(((-1.0)*x12838*x12839))+((r11*x12841)));
evalcond[2]=((((-1.0)*r22*x12839))+((r21*x12842))+(((-1.0)*x12837*x12840)));
evalcond[3]=(((r01*x12842))+(((-1.0)*r02*x12839))+(((-1.0)*x12836*x12840)));
evalcond[4]=((-1.0)+((r01*x12841))+(((-1.0)*x12836*x12839))+((r02*x12835)));
evalcond[5]=((1.0)+(((-1.0)*x12838*x12840))+((r11*x12842))+(((-1.0)*r12*x12839)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12843=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12843;
j4eval[1]=IKsign(x12843);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12844=((1.0)*cj5);
IkReal x12845=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12844)));
j4eval[0]=x12845;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x12844)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12845);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12846=cj5*cj5;
IkReal x12847=(r11*r21);
IkReal x12848=((1.0)*r20);
IkReal x12849=(cj5*sj5);
IkReal x12850=(((r11*r20*x12849))+(((-1.0)*r12*r22))+((x12846*x12847))+(((-1.0)*x12847))+((r10*r21*x12849))+(((-1.0)*r10*x12846*x12848)));
j4eval[0]=x12850;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x12848))))));
j4eval[2]=IKsign(x12850);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12851=cj5*cj5;
IkReal x12852=(r21*sj5);
IkReal x12853=(r11*r21);
IkReal x12854=((1.0)*r20);
CheckValue<IkReal> x12855 = IKatan2WithCheck(IkReal((x12852+(((-1.0)*cj5*x12854)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12855.valid){
continue;
}
CheckValue<IkReal> x12856=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x12851*x12854))+(((-1.0)*r12*r22))+(((-1.0)*x12853))+((cj5*r10*x12852))+((x12851*x12853))+((cj5*r11*r20*sj5)))),-1);
if(!x12856.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12855.value)+(((1.5707963267949)*(x12856.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12857=IKcos(j4);
IkReal x12858=IKsin(j4);
IkReal x12859=(cj5*r00);
IkReal x12860=(cj5*r20);
IkReal x12861=(cj5*r10);
IkReal x12862=((1.0)*x12857);
IkReal x12863=((1.0)*x12858);
IkReal x12864=(sj5*x12857);
IkReal x12865=(sj5*x12858);
evalcond[0]=(((r21*x12864))+((r22*x12858))+(((-1.0)*x12860*x12862)));
evalcond[1]=(((r11*x12864))+(((-1.0)*x12861*x12862))+((r12*x12858)));
evalcond[2]=(((r21*x12865))+(((-1.0)*x12860*x12863))+(((-1.0)*r22*x12862)));
evalcond[3]=((((-1.0)*x12859*x12863))+(((-1.0)*r02*x12862))+((r01*x12865)));
evalcond[4]=((1.0)+(((-1.0)*x12859*x12862))+((r02*x12858))+((r01*x12864)));
evalcond[5]=((1.0)+((r11*x12865))+(((-1.0)*x12861*x12863))+(((-1.0)*r12*x12862)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12866=((1.0)*cj5);
CheckValue<IkReal> x12867 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x12866)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12867.valid){
continue;
}
CheckValue<IkReal> x12868=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12866)))),-1);
if(!x12868.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12867.value)+(((1.5707963267949)*(x12868.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12869=IKcos(j4);
IkReal x12870=IKsin(j4);
IkReal x12871=(cj5*r00);
IkReal x12872=(cj5*r20);
IkReal x12873=(cj5*r10);
IkReal x12874=((1.0)*x12869);
IkReal x12875=((1.0)*x12870);
IkReal x12876=(sj5*x12869);
IkReal x12877=(sj5*x12870);
evalcond[0]=((((-1.0)*x12872*x12874))+((r22*x12870))+((r21*x12876)));
evalcond[1]=(((r11*x12876))+((r12*x12870))+(((-1.0)*x12873*x12874)));
evalcond[2]=((((-1.0)*r22*x12874))+(((-1.0)*x12872*x12875))+((r21*x12877)));
evalcond[3]=((((-1.0)*x12871*x12875))+((r01*x12877))+(((-1.0)*r02*x12874)));
evalcond[4]=((1.0)+(((-1.0)*x12871*x12874))+((r01*x12876))+((r02*x12870)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12874))+((r11*x12877))+(((-1.0)*x12873*x12875)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12878=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12878.valid){
continue;
}
CheckValue<IkReal> x12879 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12879.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12878.value)))+(x12879.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12880=IKcos(j4);
IkReal x12881=IKsin(j4);
IkReal x12882=(cj5*r00);
IkReal x12883=(cj5*r20);
IkReal x12884=(cj5*r10);
IkReal x12885=((1.0)*x12880);
IkReal x12886=((1.0)*x12881);
IkReal x12887=(sj5*x12880);
IkReal x12888=(sj5*x12881);
evalcond[0]=((((-1.0)*x12883*x12885))+((r22*x12881))+((r21*x12887)));
evalcond[1]=((((-1.0)*x12884*x12885))+((r12*x12881))+((r11*x12887)));
evalcond[2]=((((-1.0)*r22*x12885))+(((-1.0)*x12883*x12886))+((r21*x12888)));
evalcond[3]=((((-1.0)*r02*x12885))+((r01*x12888))+(((-1.0)*x12882*x12886)));
evalcond[4]=((1.0)+((r01*x12887))+(((-1.0)*x12882*x12885))+((r02*x12881)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12885))+(((-1.0)*x12884*x12886))+((r11*x12888)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12889=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12889;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12889);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12890=((1.0)*cj5);
IkReal x12891=((((-1.0)*r21*x12890))+(((-1.0)*r20*sj5)));
j4eval[0]=x12891;
j4eval[1]=((IKabs((((r11*sj5))+(((-1.0)*r10*x12890)))))+(IKabs(r12)));
j4eval[2]=IKsign(x12891);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12892=cj5*cj5;
IkReal x12893=(r11*r21);
IkReal x12894=((1.0)*r20);
IkReal x12895=(cj5*sj5);
IkReal x12896=((((-1.0)*x12893))+(((-1.0)*r12*r22))+((r11*r20*x12895))+((r10*r21*x12895))+(((-1.0)*r10*x12892*x12894))+((x12892*x12893)));
j4eval[0]=x12896;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x12894))))));
j4eval[2]=IKsign(x12896);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12897=cj5*cj5;
IkReal x12898=(r21*sj5);
IkReal x12899=(r11*r21);
IkReal x12900=((1.0)*r20);
CheckValue<IkReal> x12901=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12899))+((cj5*r10*x12898))+(((-1.0)*r12*r22))+(((-1.0)*r10*x12897*x12900))+((x12897*x12899))+((cj5*r11*r20*sj5)))),-1);
if(!x12901.valid){
continue;
}
CheckValue<IkReal> x12902 = IKatan2WithCheck(IkReal((x12898+(((-1.0)*cj5*x12900)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12902.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12901.value)))+(x12902.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12903=IKcos(j4);
IkReal x12904=IKsin(j4);
IkReal x12905=(cj5*r00);
IkReal x12906=(cj5*r20);
IkReal x12907=(cj5*r10);
IkReal x12908=((1.0)*x12903);
IkReal x12909=((1.0)*x12904);
IkReal x12910=(sj5*x12903);
IkReal x12911=(sj5*x12904);
evalcond[0]=((((-1.0)*x12906*x12908))+((r21*x12910))+((r22*x12904)));
evalcond[1]=((((-1.0)*x12907*x12908))+((r12*x12904))+((r11*x12910)));
evalcond[2]=((((-1.0)*x12906*x12909))+((r21*x12911))+(((-1.0)*r22*x12908)));
evalcond[3]=((((-1.0)*r02*x12908))+(((-1.0)*x12905*x12909))+((r01*x12911)));
evalcond[4]=((-1.0)+((r02*x12904))+(((-1.0)*x12905*x12908))+((r01*x12910)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12908))+(((-1.0)*x12907*x12909))+((r11*x12911)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12912=((1.0)*cj5);
CheckValue<IkReal> x12913 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x12912))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12913.valid){
continue;
}
CheckValue<IkReal> x12914=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12912))+(((-1.0)*r20*sj5)))),-1);
if(!x12914.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12913.value)+(((1.5707963267949)*(x12914.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12915=IKcos(j4);
IkReal x12916=IKsin(j4);
IkReal x12917=(cj5*r00);
IkReal x12918=(cj5*r20);
IkReal x12919=(cj5*r10);
IkReal x12920=((1.0)*x12915);
IkReal x12921=((1.0)*x12916);
IkReal x12922=(sj5*x12915);
IkReal x12923=(sj5*x12916);
evalcond[0]=((((-1.0)*x12918*x12920))+((r21*x12922))+((r22*x12916)));
evalcond[1]=((((-1.0)*x12919*x12920))+((r11*x12922))+((r12*x12916)));
evalcond[2]=((((-1.0)*x12918*x12921))+((r21*x12923))+(((-1.0)*r22*x12920)));
evalcond[3]=((((-1.0)*r02*x12920))+(((-1.0)*x12917*x12921))+((r01*x12923)));
evalcond[4]=((-1.0)+(((-1.0)*x12917*x12920))+((r02*x12916))+((r01*x12922)));
evalcond[5]=((1.0)+(((-1.0)*x12919*x12921))+((r11*x12923))+(((-1.0)*r12*x12920)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12924 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12924.valid){
continue;
}
CheckValue<IkReal> x12925=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12925.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12924.value)+(((1.5707963267949)*(x12925.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12926=IKcos(j4);
IkReal x12927=IKsin(j4);
IkReal x12928=(cj5*r00);
IkReal x12929=(cj5*r20);
IkReal x12930=(cj5*r10);
IkReal x12931=((1.0)*x12926);
IkReal x12932=((1.0)*x12927);
IkReal x12933=(sj5*x12926);
IkReal x12934=(sj5*x12927);
evalcond[0]=((((-1.0)*x12929*x12931))+((r22*x12927))+((r21*x12933)));
evalcond[1]=(((r11*x12933))+(((-1.0)*x12930*x12931))+((r12*x12927)));
evalcond[2]=((((-1.0)*x12929*x12932))+(((-1.0)*r22*x12931))+((r21*x12934)));
evalcond[3]=((((-1.0)*x12928*x12932))+(((-1.0)*r02*x12931))+((r01*x12934)));
evalcond[4]=((-1.0)+(((-1.0)*x12928*x12931))+((r02*x12927))+((r01*x12933)));
evalcond[5]=((1.0)+((r11*x12934))+(((-1.0)*r12*x12931))+(((-1.0)*x12930*x12932)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12935=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12935;
j4eval[1]=IKsign(x12935);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12936=((1.0)*cj5);
IkReal x12937=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12936)));
j4eval[0]=x12937;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x12936))+((r21*sj5))))));
j4eval[2]=IKsign(x12937);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12938=cj5*cj5;
IkReal x12939=(r11*r21);
IkReal x12940=((1.0)*r20);
IkReal x12941=(cj5*sj5);
IkReal x12942=((((-1.0)*r10*x12938*x12940))+(((-1.0)*r12*r22))+(((-1.0)*x12939))+((r10*r21*x12941))+((r11*r20*x12941))+((x12938*x12939)));
j4eval[0]=x12942;
j4eval[1]=((IKabs(((((-1.0)*cj5*x12940))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12942);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12943=cj5*cj5;
IkReal x12944=(r21*sj5);
IkReal x12945=(r11*r21);
IkReal x12946=((1.0)*r20);
CheckValue<IkReal> x12947=IKPowWithIntegerCheck(IKsign((((x12943*x12945))+(((-1.0)*r12*r22))+(((-1.0)*x12945))+((cj5*r10*x12944))+(((-1.0)*r10*x12943*x12946))+((cj5*r11*r20*sj5)))),-1);
if(!x12947.valid){
continue;
}
CheckValue<IkReal> x12948 = IKatan2WithCheck(IkReal((x12944+(((-1.0)*cj5*x12946)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12948.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12947.value)))+(x12948.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12949=IKcos(j4);
IkReal x12950=IKsin(j4);
IkReal x12951=(cj5*r00);
IkReal x12952=(cj5*r20);
IkReal x12953=(cj5*r10);
IkReal x12954=((1.0)*x12949);
IkReal x12955=((1.0)*x12950);
IkReal x12956=(sj5*x12949);
IkReal x12957=(sj5*x12950);
evalcond[0]=((((-1.0)*x12952*x12954))+((r22*x12950))+((r21*x12956)));
evalcond[1]=(((r12*x12950))+(((-1.0)*x12953*x12954))+((r11*x12956)));
evalcond[2]=((((-1.0)*x12952*x12955))+((r21*x12957))+(((-1.0)*r22*x12954)));
evalcond[3]=(((r01*x12957))+(((-1.0)*x12951*x12955))+(((-1.0)*r02*x12954)));
evalcond[4]=((1.0)+((r01*x12956))+(((-1.0)*x12951*x12954))+((r02*x12950)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12954))+(((-1.0)*x12953*x12955))+((r11*x12957)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12958=((1.0)*cj5);
CheckValue<IkReal> x12959=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12958)))),-1);
if(!x12959.valid){
continue;
}
CheckValue<IkReal> x12960 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x12958)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12960.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12959.value)))+(x12960.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12961=IKcos(j4);
IkReal x12962=IKsin(j4);
IkReal x12963=(cj5*r00);
IkReal x12964=(cj5*r20);
IkReal x12965=(cj5*r10);
IkReal x12966=((1.0)*x12961);
IkReal x12967=((1.0)*x12962);
IkReal x12968=(sj5*x12961);
IkReal x12969=(sj5*x12962);
evalcond[0]=(((r22*x12962))+((r21*x12968))+(((-1.0)*x12964*x12966)));
evalcond[1]=((((-1.0)*x12965*x12966))+((r11*x12968))+((r12*x12962)));
evalcond[2]=((((-1.0)*r22*x12966))+((r21*x12969))+(((-1.0)*x12964*x12967)));
evalcond[3]=(((r01*x12969))+(((-1.0)*r02*x12966))+(((-1.0)*x12963*x12967)));
evalcond[4]=((1.0)+((r01*x12968))+((r02*x12962))+(((-1.0)*x12963*x12966)));
evalcond[5]=((1.0)+(((-1.0)*x12965*x12967))+(((-1.0)*r12*x12966))+((r11*x12969)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12970=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12970.valid){
continue;
}
CheckValue<IkReal> x12971 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12971.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12970.value)))+(x12971.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12972=IKcos(j4);
IkReal x12973=IKsin(j4);
IkReal x12974=(cj5*r00);
IkReal x12975=(cj5*r20);
IkReal x12976=(cj5*r10);
IkReal x12977=((1.0)*x12972);
IkReal x12978=((1.0)*x12973);
IkReal x12979=(sj5*x12972);
IkReal x12980=(sj5*x12973);
evalcond[0]=((((-1.0)*x12975*x12977))+((r22*x12973))+((r21*x12979)));
evalcond[1]=((((-1.0)*x12976*x12977))+((r11*x12979))+((r12*x12973)));
evalcond[2]=(((r21*x12980))+(((-1.0)*r22*x12977))+(((-1.0)*x12975*x12978)));
evalcond[3]=((((-1.0)*x12974*x12978))+((r01*x12980))+(((-1.0)*r02*x12977)));
evalcond[4]=((1.0)+(((-1.0)*x12974*x12977))+((r01*x12979))+((r02*x12973)));
evalcond[5]=((1.0)+(((-1.0)*x12976*x12978))+((r11*x12980))+(((-1.0)*r12*x12977)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12981=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12981;
j4eval[1]=IKsign(x12981);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12982=((1.0)*cj5);
IkReal x12983=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12982)));
j4eval[0]=x12983;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x12982))))));
j4eval[2]=IKsign(x12983);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12984=cj5*cj5;
IkReal x12985=(r11*r21);
IkReal x12986=((1.0)*r20);
IkReal x12987=(cj5*sj5);
IkReal x12988=(((r10*r21*x12987))+(((-1.0)*r12*r22))+((x12984*x12985))+(((-1.0)*r10*x12984*x12986))+((r11*r20*x12987))+(((-1.0)*x12985)));
j4eval[0]=x12988;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*x12986)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12988);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12989=cj5*cj5;
IkReal x12990=(r21*sj5);
IkReal x12991=(r11*r21);
IkReal x12992=((1.0)*r20);
CheckValue<IkReal> x12993=IKPowWithIntegerCheck(IKsign((((x12989*x12991))+(((-1.0)*r12*r22))+(((-1.0)*r10*x12989*x12992))+((cj5*r10*x12990))+(((-1.0)*x12991))+((cj5*r11*r20*sj5)))),-1);
if(!x12993.valid){
continue;
}
CheckValue<IkReal> x12994 = IKatan2WithCheck(IkReal((x12990+(((-1.0)*cj5*x12992)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12994.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12993.value)))+(x12994.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12995=IKcos(j4);
IkReal x12996=IKsin(j4);
IkReal x12997=(cj5*r00);
IkReal x12998=(cj5*r20);
IkReal x12999=(cj5*r10);
IkReal x13000=((1.0)*x12995);
IkReal x13001=((1.0)*x12996);
IkReal x13002=(sj5*x12995);
IkReal x13003=(sj5*x12996);
evalcond[0]=(((r22*x12996))+(((-1.0)*x12998*x13000))+((r21*x13002)));
evalcond[1]=((((-1.0)*x12999*x13000))+((r12*x12996))+((r11*x13002)));
evalcond[2]=((((-1.0)*r22*x13000))+(((-1.0)*x12998*x13001))+((r21*x13003)));
evalcond[3]=((((-1.0)*r02*x13000))+((r01*x13003))+(((-1.0)*x12997*x13001)));
evalcond[4]=((1.0)+((r02*x12996))+((r01*x13002))+(((-1.0)*x12997*x13000)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13000))+(((-1.0)*x12999*x13001))+((r11*x13003)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13004=((1.0)*cj5);
CheckValue<IkReal> x13005 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x13004)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13005.valid){
continue;
}
CheckValue<IkReal> x13006=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x13004))+(((-1.0)*r10*sj5)))),-1);
if(!x13006.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13005.value)+(((1.5707963267949)*(x13006.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13007=IKcos(j4);
IkReal x13008=IKsin(j4);
IkReal x13009=(cj5*r00);
IkReal x13010=(cj5*r20);
IkReal x13011=(cj5*r10);
IkReal x13012=((1.0)*x13007);
IkReal x13013=((1.0)*x13008);
IkReal x13014=(sj5*x13007);
IkReal x13015=(sj5*x13008);
evalcond[0]=(((r21*x13014))+(((-1.0)*x13010*x13012))+((r22*x13008)));
evalcond[1]=(((r12*x13008))+((r11*x13014))+(((-1.0)*x13011*x13012)));
evalcond[2]=((((-1.0)*r22*x13012))+((r21*x13015))+(((-1.0)*x13010*x13013)));
evalcond[3]=(((r01*x13015))+(((-1.0)*x13009*x13013))+(((-1.0)*r02*x13012)));
evalcond[4]=((1.0)+((r01*x13014))+(((-1.0)*x13009*x13012))+((r02*x13008)));
evalcond[5]=((1.0)+((r11*x13015))+(((-1.0)*x13011*x13013))+(((-1.0)*r12*x13012)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13016=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13016.valid){
continue;
}
CheckValue<IkReal> x13017 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13017.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13016.value)))+(x13017.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13018=IKcos(j4);
IkReal x13019=IKsin(j4);
IkReal x13020=(cj5*r00);
IkReal x13021=(cj5*r20);
IkReal x13022=(cj5*r10);
IkReal x13023=((1.0)*x13018);
IkReal x13024=((1.0)*x13019);
IkReal x13025=(sj5*x13018);
IkReal x13026=(sj5*x13019);
evalcond[0]=((((-1.0)*x13021*x13023))+((r21*x13025))+((r22*x13019)));
evalcond[1]=(((r11*x13025))+((r12*x13019))+(((-1.0)*x13022*x13023)));
evalcond[2]=((((-1.0)*x13021*x13024))+(((-1.0)*r22*x13023))+((r21*x13026)));
evalcond[3]=(((r01*x13026))+(((-1.0)*r02*x13023))+(((-1.0)*x13020*x13024)));
evalcond[4]=((1.0)+((r01*x13025))+((r02*x13019))+(((-1.0)*x13020*x13023)));
evalcond[5]=((1.0)+((r11*x13026))+(((-1.0)*x13022*x13024))+(((-1.0)*r12*x13023)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x13027=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x13027;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13027);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x13028=((1.0)*cj5);
IkReal x13029=((((-1.0)*r21*x13028))+(((-1.0)*r20*sj5)));
j4eval[0]=x13029;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x13028))+((r11*sj5))))));
j4eval[2]=IKsign(x13029);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x13030=cj5*cj5;
IkReal x13031=(r11*r21);
IkReal x13032=((1.0)*r20);
IkReal x13033=(cj5*sj5);
IkReal x13034=((((-1.0)*x13031))+(((-1.0)*r12*r22))+(((-1.0)*r10*x13030*x13032))+((x13030*x13031))+((r10*r21*x13033))+((r11*r20*x13033)));
j4eval[0]=x13034;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x13032))))));
j4eval[2]=IKsign(x13034);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13035=cj5*cj5;
IkReal x13036=(r21*sj5);
IkReal x13037=(r11*r21);
IkReal x13038=((1.0)*r20);
CheckValue<IkReal> x13039=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13037))+(((-1.0)*r12*r22))+((x13035*x13037))+(((-1.0)*r10*x13035*x13038))+((cj5*r10*x13036))+((cj5*r11*r20*sj5)))),-1);
if(!x13039.valid){
continue;
}
CheckValue<IkReal> x13040 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x13038))+x13036)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13040.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13039.value)))+(x13040.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13041=IKcos(j4);
IkReal x13042=IKsin(j4);
IkReal x13043=(cj5*r00);
IkReal x13044=(cj5*r20);
IkReal x13045=(cj5*r10);
IkReal x13046=((1.0)*x13041);
IkReal x13047=((1.0)*x13042);
IkReal x13048=(sj5*x13041);
IkReal x13049=(sj5*x13042);
evalcond[0]=(((r21*x13048))+((r22*x13042))+(((-1.0)*x13044*x13046)));
evalcond[1]=(((r11*x13048))+(((-1.0)*x13045*x13046))+((r12*x13042)));
evalcond[2]=(((r21*x13049))+(((-1.0)*r22*x13046))+(((-1.0)*x13044*x13047)));
evalcond[3]=((((-1.0)*r02*x13046))+((r01*x13049))+(((-1.0)*x13043*x13047)));
evalcond[4]=((-1.0)+((r02*x13042))+((r01*x13048))+(((-1.0)*x13043*x13046)));
evalcond[5]=((1.0)+((r11*x13049))+(((-1.0)*x13045*x13047))+(((-1.0)*r12*x13046)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13050=((1.0)*cj5);
CheckValue<IkReal> x13051=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13050))+(((-1.0)*r20*sj5)))),-1);
if(!x13051.valid){
continue;
}
CheckValue<IkReal> x13052 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x13050)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13052.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13051.value)))+(x13052.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13053=IKcos(j4);
IkReal x13054=IKsin(j4);
IkReal x13055=(cj5*r00);
IkReal x13056=(cj5*r20);
IkReal x13057=(cj5*r10);
IkReal x13058=((1.0)*x13053);
IkReal x13059=((1.0)*x13054);
IkReal x13060=(sj5*x13053);
IkReal x13061=(sj5*x13054);
evalcond[0]=(((r22*x13054))+((r21*x13060))+(((-1.0)*x13056*x13058)));
evalcond[1]=(((r12*x13054))+(((-1.0)*x13057*x13058))+((r11*x13060)));
evalcond[2]=(((r21*x13061))+(((-1.0)*r22*x13058))+(((-1.0)*x13056*x13059)));
evalcond[3]=((((-1.0)*r02*x13058))+(((-1.0)*x13055*x13059))+((r01*x13061)));
evalcond[4]=((-1.0)+((r02*x13054))+(((-1.0)*x13055*x13058))+((r01*x13060)));
evalcond[5]=((1.0)+(((-1.0)*x13057*x13059))+(((-1.0)*r12*x13058))+((r11*x13061)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13062 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13062.valid){
continue;
}
CheckValue<IkReal> x13063=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x13063.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13062.value)+(((1.5707963267949)*(x13063.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13064=IKcos(j4);
IkReal x13065=IKsin(j4);
IkReal x13066=(cj5*r00);
IkReal x13067=(cj5*r20);
IkReal x13068=(cj5*r10);
IkReal x13069=((1.0)*x13064);
IkReal x13070=((1.0)*x13065);
IkReal x13071=(sj5*x13064);
IkReal x13072=(sj5*x13065);
evalcond[0]=(((r21*x13071))+((r22*x13065))+(((-1.0)*x13067*x13069)));
evalcond[1]=(((r12*x13065))+((r11*x13071))+(((-1.0)*x13068*x13069)));
evalcond[2]=(((r21*x13072))+(((-1.0)*x13067*x13070))+(((-1.0)*r22*x13069)));
evalcond[3]=(((r01*x13072))+(((-1.0)*r02*x13069))+(((-1.0)*x13066*x13070)));
evalcond[4]=((-1.0)+((r02*x13065))+((r01*x13071))+(((-1.0)*x13066*x13069)));
evalcond[5]=((1.0)+(((-1.0)*x13068*x13070))+((r11*x13072))+(((-1.0)*r12*x13069)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x13073=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x13073;
j4eval[1]=IKsign(x13073);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x13074=((1.0)*cj5);
IkReal x13075=((((-1.0)*r11*x13074))+(((-1.0)*r10*sj5)));
j4eval[0]=x13075;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x13074)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13075);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x13076=cj5*cj5;
IkReal x13077=(r11*r21);
IkReal x13078=((1.0)*r20);
IkReal x13079=(cj5*sj5);
IkReal x13080=((((-1.0)*r12*r22))+((x13076*x13077))+((r11*r20*x13079))+(((-1.0)*x13077))+((r10*r21*x13079))+(((-1.0)*r10*x13076*x13078)));
j4eval[0]=x13080;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x13078))))));
j4eval[2]=IKsign(x13080);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13081=cj5*cj5;
IkReal x13082=(r21*sj5);
IkReal x13083=(r11*r21);
IkReal x13084=((1.0)*r20);
CheckValue<IkReal> x13085 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x13084))+x13082)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13085.valid){
continue;
}
CheckValue<IkReal> x13086=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x13081*x13084))+(((-1.0)*r12*r22))+(((-1.0)*x13083))+((x13081*x13083))+((cj5*r11*r20*sj5))+((cj5*r10*x13082)))),-1);
if(!x13086.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13085.value)+(((1.5707963267949)*(x13086.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13087=IKcos(j4);
IkReal x13088=IKsin(j4);
IkReal x13089=(cj5*r00);
IkReal x13090=(cj5*r20);
IkReal x13091=(cj5*r10);
IkReal x13092=((1.0)*x13087);
IkReal x13093=((1.0)*x13088);
IkReal x13094=(sj5*x13087);
IkReal x13095=(sj5*x13088);
evalcond[0]=((((-1.0)*x13090*x13092))+((r22*x13088))+((r21*x13094)));
evalcond[1]=(((r11*x13094))+((r12*x13088))+(((-1.0)*x13091*x13092)));
evalcond[2]=((((-1.0)*x13090*x13093))+(((-1.0)*r22*x13092))+((r21*x13095)));
evalcond[3]=(((r01*x13095))+(((-1.0)*x13089*x13093))+(((-1.0)*r02*x13092)));
evalcond[4]=((1.0)+((r02*x13088))+((r01*x13094))+(((-1.0)*x13089*x13092)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13092))+((r11*x13095))+(((-1.0)*x13091*x13093)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13096=((1.0)*cj5);
CheckValue<IkReal> x13097 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x13096))+((r21*sj5)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13097.valid){
continue;
}
CheckValue<IkReal> x13098=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x13096)))),-1);
if(!x13098.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13097.value)+(((1.5707963267949)*(x13098.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13099=IKcos(j4);
IkReal x13100=IKsin(j4);
IkReal x13101=(cj5*r00);
IkReal x13102=(cj5*r20);
IkReal x13103=(cj5*r10);
IkReal x13104=((1.0)*x13099);
IkReal x13105=((1.0)*x13100);
IkReal x13106=(sj5*x13099);
IkReal x13107=(sj5*x13100);
evalcond[0]=((((-1.0)*x13102*x13104))+((r22*x13100))+((r21*x13106)));
evalcond[1]=((((-1.0)*x13103*x13104))+((r12*x13100))+((r11*x13106)));
evalcond[2]=((((-1.0)*x13102*x13105))+((r21*x13107))+(((-1.0)*r22*x13104)));
evalcond[3]=(((r01*x13107))+(((-1.0)*x13101*x13105))+(((-1.0)*r02*x13104)));
evalcond[4]=((1.0)+((r01*x13106))+(((-1.0)*x13101*x13104))+((r02*x13100)));
evalcond[5]=((1.0)+(((-1.0)*x13103*x13105))+(((-1.0)*r12*x13104))+((r11*x13107)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13108=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13108.valid){
continue;
}
CheckValue<IkReal> x13109 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13109.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13108.value)))+(x13109.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13110=IKcos(j4);
IkReal x13111=IKsin(j4);
IkReal x13112=(cj5*r00);
IkReal x13113=(cj5*r20);
IkReal x13114=(cj5*r10);
IkReal x13115=((1.0)*x13110);
IkReal x13116=((1.0)*x13111);
IkReal x13117=(sj5*x13110);
IkReal x13118=(sj5*x13111);
evalcond[0]=(((r22*x13111))+((r21*x13117))+(((-1.0)*x13113*x13115)));
evalcond[1]=(((r12*x13111))+(((-1.0)*x13114*x13115))+((r11*x13117)));
evalcond[2]=(((r21*x13118))+(((-1.0)*x13113*x13116))+(((-1.0)*r22*x13115)));
evalcond[3]=((((-1.0)*x13112*x13116))+(((-1.0)*r02*x13115))+((r01*x13118)));
evalcond[4]=((1.0)+(((-1.0)*x13112*x13115))+((r02*x13111))+((r01*x13117)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13115))+(((-1.0)*x13114*x13116))+((r11*x13118)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x13119=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x13119;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13119);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x13120=((1.0)*cj5);
IkReal x13121=((((-1.0)*r21*x13120))+(((-1.0)*r20*sj5)));
j4eval[0]=x13121;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x13120))))));
j4eval[2]=IKsign(x13121);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x13122=cj5*cj5;
IkReal x13123=(r11*r21);
IkReal x13124=((1.0)*r20);
IkReal x13125=(cj5*sj5);
IkReal x13126=((((-1.0)*r10*x13122*x13124))+(((-1.0)*r12*r22))+((r10*r21*x13125))+((x13122*x13123))+((r11*r20*x13125))+(((-1.0)*x13123)));
j4eval[0]=x13126;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*x13124)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13126);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13127=cj5*cj5;
IkReal x13128=(r21*sj5);
IkReal x13129=(r11*r21);
IkReal x13130=((1.0)*r20);
CheckValue<IkReal> x13131=IKPowWithIntegerCheck(IKsign((((cj5*r10*x13128))+(((-1.0)*r12*r22))+(((-1.0)*r10*x13127*x13130))+((x13127*x13129))+((cj5*r11*r20*sj5))+(((-1.0)*x13129)))),-1);
if(!x13131.valid){
continue;
}
CheckValue<IkReal> x13132 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x13130))+x13128)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13132.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13131.value)))+(x13132.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13133=IKcos(j4);
IkReal x13134=IKsin(j4);
IkReal x13135=(cj5*r00);
IkReal x13136=(cj5*r20);
IkReal x13137=(cj5*r10);
IkReal x13138=((1.0)*x13133);
IkReal x13139=((1.0)*x13134);
IkReal x13140=(sj5*x13133);
IkReal x13141=(sj5*x13134);
evalcond[0]=((((-1.0)*x13136*x13138))+((r21*x13140))+((r22*x13134)));
evalcond[1]=(((r12*x13134))+((r11*x13140))+(((-1.0)*x13137*x13138)));
evalcond[2]=((((-1.0)*x13136*x13139))+(((-1.0)*r22*x13138))+((r21*x13141)));
evalcond[3]=((((-1.0)*x13135*x13139))+((r01*x13141))+(((-1.0)*r02*x13138)));
evalcond[4]=((-1.0)+(((-1.0)*x13135*x13138))+((r02*x13134))+((r01*x13140)));
evalcond[5]=((1.0)+((r11*x13141))+(((-1.0)*x13137*x13139))+(((-1.0)*r12*x13138)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13142=((1.0)*cj5);
CheckValue<IkReal> x13143=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13142))+(((-1.0)*r20*sj5)))),-1);
if(!x13143.valid){
continue;
}
CheckValue<IkReal> x13144 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x13142))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13144.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13143.value)))+(x13144.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13145=IKcos(j4);
IkReal x13146=IKsin(j4);
IkReal x13147=(cj5*r00);
IkReal x13148=(cj5*r20);
IkReal x13149=(cj5*r10);
IkReal x13150=((1.0)*x13145);
IkReal x13151=((1.0)*x13146);
IkReal x13152=(sj5*x13145);
IkReal x13153=(sj5*x13146);
evalcond[0]=(((r21*x13152))+((r22*x13146))+(((-1.0)*x13148*x13150)));
evalcond[1]=(((r12*x13146))+((r11*x13152))+(((-1.0)*x13149*x13150)));
evalcond[2]=(((r21*x13153))+(((-1.0)*x13148*x13151))+(((-1.0)*r22*x13150)));
evalcond[3]=((((-1.0)*x13147*x13151))+(((-1.0)*r02*x13150))+((r01*x13153)));
evalcond[4]=((-1.0)+(((-1.0)*x13147*x13150))+((r02*x13146))+((r01*x13152)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13150))+((r11*x13153))+(((-1.0)*x13149*x13151)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13154 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13154.valid){
continue;
}
CheckValue<IkReal> x13155=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x13155.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13154.value)+(((1.5707963267949)*(x13155.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13156=IKcos(j4);
IkReal x13157=IKsin(j4);
IkReal x13158=(cj5*r00);
IkReal x13159=(cj5*r20);
IkReal x13160=(cj5*r10);
IkReal x13161=((1.0)*x13156);
IkReal x13162=((1.0)*x13157);
IkReal x13163=(sj5*x13156);
IkReal x13164=(sj5*x13157);
evalcond[0]=(((r22*x13157))+(((-1.0)*x13159*x13161))+((r21*x13163)));
evalcond[1]=((((-1.0)*x13160*x13161))+((r11*x13163))+((r12*x13157)));
evalcond[2]=((((-1.0)*r22*x13161))+(((-1.0)*x13159*x13162))+((r21*x13164)));
evalcond[3]=(((r01*x13164))+(((-1.0)*x13158*x13162))+(((-1.0)*r02*x13161)));
evalcond[4]=((-1.0)+((r02*x13157))+((r01*x13163))+(((-1.0)*x13158*x13161)));
evalcond[5]=((1.0)+(((-1.0)*x13160*x13162))+(((-1.0)*r12*x13161))+((r11*x13164)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13165=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13165);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13165);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13166=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13166);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13166);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13167=((1.0)*cj5);
j4eval[0]=(((r11*sj5))+(((-1.0)*r10*x13167)));
j4eval[1]=((((-1.0)*r00*x13167))+((r01*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13168=((1.0)*cj5);
CheckValue<IkReal> x13169=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*r10*x13168))),-1);
if(!x13169.valid){
continue;
}
CheckValue<IkReal> x13170=IKPowWithIntegerCheck(((((-1.0)*r00*x13168))+((r01*sj5))),-1);
if(!x13170.valid){
continue;
}
if( IKabs(((-1.0)*(x13169.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13170.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13169.value)))+IKsqr(((x13170.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13169.value)), ((x13170.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13171=IKsin(j4);
IkReal x13172=IKcos(j4);
IkReal x13173=((1.0)*cj5);
IkReal x13174=((1.0)*cj2);
IkReal x13175=(sj5*x13172);
IkReal x13176=(sj5*x13171);
evalcond[0]=((-1.0)*r22*x13172);
evalcond[1]=((((-1.0)*cj1*x13174))+((sj1*sj2))+((r22*x13171)));
evalcond[2]=(((r01*x13176))+(((-1.0)*r00*x13171*x13173)));
evalcond[3]=((((-1.0)*r10*x13172*x13173))+((r11*x13175)));
evalcond[4]=((1.0)+(((-1.0)*r10*x13171*x13173))+((r11*x13176)));
evalcond[5]=(((r01*x13175))+(((-1.0)*sj1*x13174))+(((-1.0)*cj1*sj2))+(((-1.0)*r00*x13172*x13173)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13177=IKPowWithIntegerCheck(r22,-1);
if(!x13177.valid){
continue;
}
CheckValue<IkReal> x13178=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x13178.valid){
continue;
}
if( IKabs(((x13177.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13178.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13177.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x13178.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13177.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x13178.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13179=IKsin(j4);
IkReal x13180=IKcos(j4);
IkReal x13181=((1.0)*cj5);
IkReal x13182=((1.0)*cj2);
IkReal x13183=(sj5*x13180);
IkReal x13184=(sj5*x13179);
evalcond[0]=((-1.0)*r22*x13180);
evalcond[1]=(((sj1*sj2))+(((-1.0)*cj1*x13182))+((r22*x13179)));
evalcond[2]=((((-1.0)*r00*x13179*x13181))+((r01*x13184)));
evalcond[3]=(((r11*x13183))+(((-1.0)*r10*x13180*x13181)));
evalcond[4]=((1.0)+((r11*x13184))+(((-1.0)*r10*x13179*x13181)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r01*x13183))+(((-1.0)*sj1*x13182))+(((-1.0)*r00*x13180*x13181)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13185=(sj1*sj2);
IkReal x13186=(cj5*r10);
IkReal x13187=(r11*sj5);
IkReal x13188=(cj1*cj2);
CheckValue<IkReal> x13189=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x13189.valid){
continue;
}
CheckValue<IkReal> x13190 = IKatan2WithCheck(IkReal(((((-1.0)*x13185*x13186))+((x13186*x13188))+(((-1.0)*x13187*x13188))+((x13185*x13187)))),IkReal((((r12*x13188))+(((-1.0)*r12*x13185)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13190.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13189.value)))+(x13190.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13191=IKcos(j4);
IkReal x13192=IKsin(j4);
IkReal x13193=(cj5*r00);
IkReal x13194=(cj5*r10);
IkReal x13195=(r21*sj5);
IkReal x13196=((1.0)*cj2);
IkReal x13197=(cj5*r20);
IkReal x13198=((1.0)*x13191);
IkReal x13199=((1.0)*x13192);
IkReal x13200=(sj5*x13192);
IkReal x13201=(sj5*x13191);
evalcond[0]=(((r12*x13192))+(((-1.0)*x13194*x13198))+((r11*x13201)));
evalcond[1]=((((-1.0)*r22*x13198))+((x13192*x13195))+(((-1.0)*x13197*x13199)));
evalcond[2]=(((r01*x13200))+(((-1.0)*r02*x13198))+(((-1.0)*x13193*x13199)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13198))+(((-1.0)*x13194*x13199))+((r11*x13200)));
evalcond[4]=((((-1.0)*cj1*x13196))+((sj1*sj2))+(((-1.0)*x13197*x13198))+((x13191*x13195))+((r22*x13192)));
evalcond[5]=(((r01*x13201))+((r02*x13192))+(((-1.0)*cj1*sj2))+(((-1.0)*x13193*x13198))+(((-1.0)*sj1*x13196)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13202=((1.0)*cj5);
CheckValue<IkReal> x13203=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x13202)))),-1);
if(!x13203.valid){
continue;
}
CheckValue<IkReal> x13204 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x13202)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13204.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13203.value)))+(x13204.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13205=IKcos(j4);
IkReal x13206=IKsin(j4);
IkReal x13207=(cj5*r00);
IkReal x13208=(cj5*r10);
IkReal x13209=(r21*sj5);
IkReal x13210=((1.0)*cj2);
IkReal x13211=(cj5*r20);
IkReal x13212=((1.0)*x13205);
IkReal x13213=((1.0)*x13206);
IkReal x13214=(sj5*x13206);
IkReal x13215=(sj5*x13205);
evalcond[0]=(((r11*x13215))+(((-1.0)*x13208*x13212))+((r12*x13206)));
evalcond[1]=((((-1.0)*x13211*x13213))+(((-1.0)*r22*x13212))+((x13206*x13209)));
evalcond[2]=((((-1.0)*x13207*x13213))+((r01*x13214))+(((-1.0)*r02*x13212)));
evalcond[3]=((1.0)+((r11*x13214))+(((-1.0)*x13208*x13213))+(((-1.0)*r12*x13212)));
evalcond[4]=((((-1.0)*cj1*x13210))+((x13205*x13209))+((sj1*sj2))+((r22*x13206))+(((-1.0)*x13211*x13212)));
evalcond[5]=((((-1.0)*x13207*x13212))+((r01*x13215))+((r02*x13206))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x13210)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13216=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13216.valid){
continue;
}
CheckValue<IkReal> x13217 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13217.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13216.value)))+(x13217.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13218=IKcos(j4);
IkReal x13219=IKsin(j4);
IkReal x13220=(cj5*r00);
IkReal x13221=(cj5*r10);
IkReal x13222=(r21*sj5);
IkReal x13223=((1.0)*cj2);
IkReal x13224=(cj5*r20);
IkReal x13225=((1.0)*x13218);
IkReal x13226=((1.0)*x13219);
IkReal x13227=(sj5*x13219);
IkReal x13228=(sj5*x13218);
evalcond[0]=(((r12*x13219))+(((-1.0)*x13221*x13225))+((r11*x13228)));
evalcond[1]=((((-1.0)*r22*x13225))+((x13219*x13222))+(((-1.0)*x13224*x13226)));
evalcond[2]=((((-1.0)*x13220*x13226))+(((-1.0)*r02*x13225))+((r01*x13227)));
evalcond[3]=((1.0)+(((-1.0)*x13221*x13226))+(((-1.0)*r12*x13225))+((r11*x13227)));
evalcond[4]=(((x13218*x13222))+(((-1.0)*cj1*x13223))+((sj1*sj2))+((r22*x13219))+(((-1.0)*x13224*x13225)));
evalcond[5]=((((-1.0)*x13220*x13225))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x13223))+((r01*x13228))+((r02*x13219)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13229=((-1.0)*r00);
IkReal x13231 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x13231)==0){
continue;
}
IkReal x13230=pow(x13231,-0.5);
CheckValue<IkReal> x13232 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13229),IKFAST_ATAN2_MAGTHRESH);
if(!x13232.valid){
continue;
}
IkReal gconst18=((-1.0)*(x13232.value));
IkReal gconst19=(r01*x13230);
IkReal gconst20=(x13229*x13230);
CheckValue<IkReal> x13233 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13233.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x13233.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13234=((-1.0)*r00);
IkReal x13235=x13230;
CheckValue<IkReal> x13237 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13234),IKFAST_ATAN2_MAGTHRESH);
if(!x13237.valid){
continue;
}
IkReal x13236=((-1.0)*(x13237.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst19;
cj5=gconst20;
j5=x13236;
IkReal gconst18=x13236;
IkReal gconst19=(r01*x13235);
IkReal gconst20=(x13234*x13235);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13238=((-1.0)*r00);
IkReal x13239=x13230;
CheckValue<IkReal> x13241 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13238),IKFAST_ATAN2_MAGTHRESH);
if(!x13241.valid){
continue;
}
IkReal x13240=((-1.0)*(x13241.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst19;
cj5=gconst20;
j5=x13240;
IkReal gconst18=x13240;
IkReal gconst19=(r01*x13239);
IkReal gconst20=(x13238*x13239);
CheckValue<IkReal> x13249=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x13249.valid){
continue;
}
IkReal x13242=x13249.value;
IkReal x13243=(sj3*x13242);
IkReal x13244=(r11*x13243);
IkReal x13245=(r21*x13243);
IkReal x13246=(r20*x13243);
IkReal x13247=(r10*x13243);
IkReal x13248=(r00*r01*x13243);
j4eval[0]=IKsign((((r10*x13246*(r00*r00)))+((r12*r22*sj3))+((r00*r01*r10*x13245))+((r21*x13244*(r01*r01)))+((r00*r01*r20*x13244))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13250=gconst19*gconst19;
IkReal x13251=gconst20*gconst20;
IkReal x13252=(gconst20*sj3);
IkReal x13253=((1.0)*cj3);
IkReal x13254=(r10*sj3);
IkReal x13255=(gconst19*r21);
IkReal x13256=(r11*r20);
IkReal x13257=(cj3*gconst20);
IkReal x13258=((1.0)*r10*r20);
IkReal x13259=(r21*x13250);
CheckValue<IkReal> x13260=IKPowWithIntegerCheck(IKsign((((r10*x13255*x13257))+(((-1.0)*r12*r22*x13253))+((gconst19*x13256*x13257))+(((-1.0)*r10*r20*x13251*x13253))+(((-1.0)*r11*x13253*x13259)))),-1);
if(!x13260.valid){
continue;
}
CheckValue<IkReal> x13261 = IKatan2WithCheck(IkReal((((gconst19*r22*x13254))+((r11*r22*x13252)))),IkReal(((((-1.0)*gconst19*x13252*x13258))+(((-1.0)*sj3*x13251*x13256))+((x13254*x13259))+((r11*x13252*x13255)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13261.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13260.value)))+(x13261.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13262=IKsin(j4);
IkReal x13263=IKcos(j4);
IkReal x13264=(sj1*sj2);
IkReal x13265=(gconst20*sj3);
IkReal x13266=(gconst19*r21);
IkReal x13267=(gconst20*r10);
IkReal x13268=(cj3*gconst19);
IkReal x13269=(gconst19*sj3);
IkReal x13270=((1.0)*cj1);
IkReal x13271=(cj3*gconst20);
IkReal x13272=(cj2*sj1);
IkReal x13273=(cj2*x13270);
IkReal x13274=((1.0)*x13263);
IkReal x13275=((1.0)*x13262);
IkReal x13276=(cj3*x13262);
IkReal x13277=(gconst19*x13262);
evalcond[0]=((((-1.0)*r22*x13274))+(((-1.0)*gconst20*r20*x13275))+((x13262*x13266)));
evalcond[1]=((((-1.0)*gconst20*r00*x13275))+((r01*x13277))+(((-1.0)*r02*x13274)));
evalcond[2]=((1.0)+((r11*x13277))+(((-1.0)*x13267*x13275))+(((-1.0)*r12*x13274)));
evalcond[3]=(((r11*x13265))+((r12*x13276))+((r10*x13269))+(((-1.0)*cj3*x13267*x13274))+((r11*x13263*x13268)));
evalcond[4]=(((r11*x13271))+(((-1.0)*r11*x13269*x13274))+((r10*x13268))+((r10*x13263*x13265))+(((-1.0)*r12*sj3*x13275)));
evalcond[5]=(((r21*x13265))+((cj1*sj2))+((r20*x13269))+((cj3*x13263*x13266))+((r22*x13276))+x13272+(((-1.0)*r20*x13271*x13274)));
evalcond[6]=((((-1.0)*x13273))+((r01*x13263*x13268))+(((-1.0)*r00*x13271*x13274))+((r00*x13269))+((r01*x13265))+((r02*x13276))+x13264);
evalcond[7]=((((-1.0)*x13273))+((r21*x13271))+((r20*x13268))+(((-1.0)*sj3*x13266*x13274))+(((-1.0)*r22*sj3*x13275))+x13264+((r20*x13263*x13265)));
evalcond[8]=((((-1.0)*x13272))+((r01*x13271))+((r00*x13268))+(((-1.0)*sj2*x13270))+((r00*x13263*x13265))+(((-1.0)*r02*sj3*x13275))+(((-1.0)*r01*x13269*x13274)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13278=gconst19*gconst19;
IkReal x13279=gconst20*gconst20;
IkReal x13280=(r21*sj3);
IkReal x13281=(cj3*r11);
IkReal x13282=(gconst19*gconst20);
IkReal x13283=((1.0)*r10);
IkReal x13284=(cj3*r10);
IkReal x13285=(r20*x13279);
CheckValue<IkReal> x13286 = IKatan2WithCheck(IkReal((((gconst20*r22*x13281))+((gconst19*r22*x13284)))),IkReal(((((-1.0)*cj3*r20*x13282*x13283))+(((-1.0)*x13281*x13285))+((r21*x13278*x13284))+((r21*x13281*x13282)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13286.valid){
continue;
}
CheckValue<IkReal> x13287=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13280*x13282*x13283))+(((-1.0)*r11*r20*sj3*x13282))+((r10*sj3*x13285))+((r11*x13278*x13280))+((r12*r22*sj3)))),-1);
if(!x13287.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13286.value)+(((1.5707963267949)*(x13287.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13288=IKsin(j4);
IkReal x13289=IKcos(j4);
IkReal x13290=(sj1*sj2);
IkReal x13291=(gconst20*sj3);
IkReal x13292=(gconst19*r21);
IkReal x13293=(gconst20*r10);
IkReal x13294=(cj3*gconst19);
IkReal x13295=(gconst19*sj3);
IkReal x13296=((1.0)*cj1);
IkReal x13297=(cj3*gconst20);
IkReal x13298=(cj2*sj1);
IkReal x13299=(cj2*x13296);
IkReal x13300=((1.0)*x13289);
IkReal x13301=((1.0)*x13288);
IkReal x13302=(cj3*x13288);
IkReal x13303=(gconst19*x13288);
evalcond[0]=((((-1.0)*gconst20*r20*x13301))+((x13288*x13292))+(((-1.0)*r22*x13300)));
evalcond[1]=((((-1.0)*gconst20*r00*x13301))+((r01*x13303))+(((-1.0)*r02*x13300)));
evalcond[2]=((1.0)+(((-1.0)*x13293*x13301))+(((-1.0)*r12*x13300))+((r11*x13303)));
evalcond[3]=(((r11*x13291))+((r12*x13302))+((r11*x13289*x13294))+(((-1.0)*cj3*x13293*x13300))+((r10*x13295)));
evalcond[4]=((((-1.0)*r12*sj3*x13301))+((r11*x13297))+((r10*x13289*x13291))+(((-1.0)*r11*x13295*x13300))+((r10*x13294)));
evalcond[5]=(((r20*x13295))+((cj1*sj2))+(((-1.0)*r20*x13297*x13300))+((r22*x13302))+((cj3*x13289*x13292))+x13298+((r21*x13291)));
evalcond[6]=((((-1.0)*r00*x13297*x13300))+x13290+((r02*x13302))+(((-1.0)*x13299))+((r01*x13289*x13294))+((r00*x13295))+((r01*x13291)));
evalcond[7]=(((r20*x13294))+((r20*x13289*x13291))+(((-1.0)*sj3*x13292*x13300))+(((-1.0)*r22*sj3*x13301))+x13290+(((-1.0)*x13299))+((r21*x13297)));
evalcond[8]=(((r00*x13289*x13291))+(((-1.0)*r01*x13295*x13300))+(((-1.0)*r02*sj3*x13301))+(((-1.0)*x13298))+(((-1.0)*sj2*x13296))+((r00*x13294))+((r01*x13297)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13304 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst20*r00))+((gconst19*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13304.valid){
continue;
}
CheckValue<IkReal> x13305=IKPowWithIntegerCheck(IKsign((((gconst20*r21))+((gconst19*r20)))),-1);
if(!x13305.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13304.value)+(((1.5707963267949)*(x13305.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13306=IKsin(j4);
IkReal x13307=IKcos(j4);
IkReal x13308=(sj1*sj2);
IkReal x13309=(gconst20*sj3);
IkReal x13310=(gconst19*r21);
IkReal x13311=(gconst20*r10);
IkReal x13312=(cj3*gconst19);
IkReal x13313=(gconst19*sj3);
IkReal x13314=((1.0)*cj1);
IkReal x13315=(cj3*gconst20);
IkReal x13316=(cj2*sj1);
IkReal x13317=(cj2*x13314);
IkReal x13318=((1.0)*x13307);
IkReal x13319=((1.0)*x13306);
IkReal x13320=(cj3*x13306);
IkReal x13321=(gconst19*x13306);
evalcond[0]=(((x13306*x13310))+(((-1.0)*gconst20*r20*x13319))+(((-1.0)*r22*x13318)));
evalcond[1]=((((-1.0)*gconst20*r00*x13319))+(((-1.0)*r02*x13318))+((r01*x13321)));
evalcond[2]=((1.0)+(((-1.0)*x13311*x13319))+((r11*x13321))+(((-1.0)*r12*x13318)));
evalcond[3]=(((r12*x13320))+(((-1.0)*cj3*x13311*x13318))+((r10*x13313))+((r11*x13307*x13312))+((r11*x13309)));
evalcond[4]=((((-1.0)*r11*x13313*x13318))+((r11*x13315))+((r10*x13312))+((r10*x13307*x13309))+(((-1.0)*r12*sj3*x13319)));
evalcond[5]=(((r21*x13309))+((r20*x13313))+((cj1*sj2))+(((-1.0)*r20*x13315*x13318))+((cj3*x13307*x13310))+x13316+((r22*x13320)));
evalcond[6]=(((r01*x13307*x13312))+((r02*x13320))+((r00*x13313))+((r01*x13309))+(((-1.0)*r00*x13315*x13318))+(((-1.0)*x13317))+x13308);
evalcond[7]=((((-1.0)*r22*sj3*x13319))+((r20*x13312))+(((-1.0)*x13317))+((r21*x13315))+x13308+((r20*x13307*x13309))+(((-1.0)*sj3*x13310*x13318)));
evalcond[8]=((((-1.0)*sj2*x13314))+(((-1.0)*r02*sj3*x13319))+(((-1.0)*r01*x13313*x13318))+((r01*x13315))+((r00*x13312))+((r00*x13307*x13309))+(((-1.0)*x13316)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13322=((-1.0)*r01);
IkReal x13324 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x13324)==0){
continue;
}
IkReal x13323=pow(x13324,-0.5);
CheckValue<IkReal> x13325 = IKatan2WithCheck(IkReal(x13322),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13325.valid){
continue;
}
IkReal gconst21=((3.14159265358979)+(((-1.0)*(x13325.value))));
IkReal gconst22=(x13322*x13323);
IkReal gconst23=((1.0)*r00*x13323);
CheckValue<IkReal> x13326 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13326.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x13326.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13327=((-1.0)*r01);
CheckValue<IkReal> x13330 = IKatan2WithCheck(IkReal(x13327),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13330.valid){
continue;
}
IkReal x13328=((1.0)*(x13330.value));
IkReal x13329=x13323;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x13328)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x13328)));
IkReal gconst22=(x13327*x13329);
IkReal gconst23=((1.0)*r00*x13329);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x13331=((-1.0)*r01);
CheckValue<IkReal> x13334 = IKatan2WithCheck(IkReal(x13331),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13334.valid){
continue;
}
IkReal x13332=((1.0)*(x13334.value));
IkReal x13333=x13323;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x13332)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x13332)));
IkReal gconst22=(x13331*x13333);
IkReal gconst23=((1.0)*r00*x13333);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13335=gconst22*gconst22;
IkReal x13336=gconst23*gconst23;
IkReal x13337=(r21*sj3);
IkReal x13338=((1.0)*cj3);
IkReal x13339=(gconst23*r11);
IkReal x13340=(r22*sj3);
IkReal x13341=(gconst22*r10);
IkReal x13342=((1.0)*r20*sj3);
CheckValue<IkReal> x13343 = IKatan2WithCheck(IkReal((((x13340*x13341))+((x13339*x13340)))),IkReal((((r10*x13335*x13337))+(((-1.0)*r11*x13336*x13342))+(((-1.0)*gconst23*x13341*x13342))+((gconst22*x13337*x13339)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13343.valid){
continue;
}
CheckValue<IkReal> x13344=IKPowWithIntegerCheck(IKsign((((cj3*gconst22*r20*x13339))+(((-1.0)*r12*r22*x13338))+(((-1.0)*r11*r21*x13335*x13338))+(((-1.0)*r10*r20*x13336*x13338))+((cj3*gconst23*r21*x13341)))),-1);
if(!x13344.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13343.value)+(((1.5707963267949)*(x13344.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13345=IKsin(j4);
IkReal x13346=IKcos(j4);
IkReal x13347=(sj1*sj2);
IkReal x13348=(gconst23*sj3);
IkReal x13349=(gconst22*sj3);
IkReal x13350=(cj2*sj1);
IkReal x13351=((1.0)*cj1);
IkReal x13352=(cj3*gconst23);
IkReal x13353=(cj3*gconst22);
IkReal x13354=(cj2*x13351);
IkReal x13355=((1.0)*x13346);
IkReal x13356=(cj3*x13345);
IkReal x13357=(gconst22*x13345);
IkReal x13358=((1.0)*sj3*x13345);
IkReal x13359=(x13346*x13353);
IkReal x13360=((1.0)*gconst23*x13345);
evalcond[0]=((((-1.0)*r22*x13355))+(((-1.0)*r20*x13360))+((r21*x13357)));
evalcond[1]=((((-1.0)*r02*x13355))+(((-1.0)*r00*x13360))+((r01*x13357)));
evalcond[2]=((1.0)+(((-1.0)*r10*x13360))+(((-1.0)*r12*x13355))+((r11*x13357)));
evalcond[3]=(((r10*x13349))+((r11*x13348))+(((-1.0)*r10*x13352*x13355))+((r11*x13359))+((r12*x13356)));
evalcond[4]=(((r10*x13346*x13348))+(((-1.0)*r12*x13358))+(((-1.0)*r11*x13349*x13355))+((r10*x13353))+((r11*x13352)));
evalcond[5]=(((r22*x13356))+(((-1.0)*r20*x13352*x13355))+((cj1*sj2))+((r21*x13348))+((r21*x13359))+((r20*x13349))+x13350);
evalcond[6]=(((r02*x13356))+(((-1.0)*r00*x13352*x13355))+((r01*x13359))+((r00*x13349))+((r01*x13348))+(((-1.0)*x13354))+x13347);
evalcond[7]=((((-1.0)*r22*x13358))+((r20*x13353))+(((-1.0)*r21*x13349*x13355))+((r21*x13352))+((r20*x13346*x13348))+(((-1.0)*x13354))+x13347);
evalcond[8]=((((-1.0)*r02*x13358))+(((-1.0)*x13350))+((r01*x13352))+((r00*x13353))+(((-1.0)*r01*x13349*x13355))+(((-1.0)*sj2*x13351))+((r00*x13346*x13348)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13361=((1.0)*gconst23);
CheckValue<IkReal> x13362 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst22*r21))+(((-1.0)*r20*x13361)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13362.valid){
continue;
}
CheckValue<IkReal> x13363=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst22*r00))+(((-1.0)*r01*x13361)))),-1);
if(!x13363.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13362.value)+(((1.5707963267949)*(x13363.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13364=IKsin(j4);
IkReal x13365=IKcos(j4);
IkReal x13366=(sj1*sj2);
IkReal x13367=(gconst23*sj3);
IkReal x13368=(gconst22*sj3);
IkReal x13369=(cj2*sj1);
IkReal x13370=((1.0)*cj1);
IkReal x13371=(cj3*gconst23);
IkReal x13372=(cj3*gconst22);
IkReal x13373=(cj2*x13370);
IkReal x13374=((1.0)*x13365);
IkReal x13375=(cj3*x13364);
IkReal x13376=(gconst22*x13364);
IkReal x13377=((1.0)*sj3*x13364);
IkReal x13378=(x13365*x13372);
IkReal x13379=((1.0)*gconst23*x13364);
evalcond[0]=((((-1.0)*r22*x13374))+(((-1.0)*r20*x13379))+((r21*x13376)));
evalcond[1]=((((-1.0)*r00*x13379))+((r01*x13376))+(((-1.0)*r02*x13374)));
evalcond[2]=((1.0)+((r11*x13376))+(((-1.0)*r10*x13379))+(((-1.0)*r12*x13374)));
evalcond[3]=(((r10*x13368))+((r12*x13375))+((r11*x13378))+((r11*x13367))+(((-1.0)*r10*x13371*x13374)));
evalcond[4]=(((r10*x13372))+((r11*x13371))+(((-1.0)*r11*x13368*x13374))+((r10*x13365*x13367))+(((-1.0)*r12*x13377)));
evalcond[5]=((((-1.0)*r20*x13371*x13374))+((r20*x13368))+((cj1*sj2))+((r22*x13375))+((r21*x13367))+((r21*x13378))+x13369);
evalcond[6]=(((r02*x13375))+((r01*x13367))+(((-1.0)*r00*x13371*x13374))+((r01*x13378))+((r00*x13368))+(((-1.0)*x13373))+x13366);
evalcond[7]=((((-1.0)*r22*x13377))+((r20*x13372))+((r20*x13365*x13367))+(((-1.0)*x13373))+(((-1.0)*r21*x13368*x13374))+((r21*x13371))+x13366);
evalcond[8]=((((-1.0)*x13369))+(((-1.0)*r01*x13368*x13374))+((r00*x13372))+((r01*x13371))+((r00*x13365*x13367))+(((-1.0)*r02*x13377))+(((-1.0)*sj2*x13370)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13380=IKPowWithIntegerCheck(IKsign((((gconst22*r20))+((gconst23*r21)))),-1);
if(!x13380.valid){
continue;
}
CheckValue<IkReal> x13381 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst22*r01))+(((-1.0)*gconst23*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13381.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13380.value)))+(x13381.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13382=IKsin(j4);
IkReal x13383=IKcos(j4);
IkReal x13384=(sj1*sj2);
IkReal x13385=(gconst23*sj3);
IkReal x13386=(gconst22*sj3);
IkReal x13387=(cj2*sj1);
IkReal x13388=((1.0)*cj1);
IkReal x13389=(cj3*gconst23);
IkReal x13390=(cj3*gconst22);
IkReal x13391=(cj2*x13388);
IkReal x13392=((1.0)*x13383);
IkReal x13393=(cj3*x13382);
IkReal x13394=(gconst22*x13382);
IkReal x13395=((1.0)*sj3*x13382);
IkReal x13396=(x13383*x13390);
IkReal x13397=((1.0)*gconst23*x13382);
evalcond[0]=(((r21*x13394))+(((-1.0)*r22*x13392))+(((-1.0)*r20*x13397)));
evalcond[1]=(((r01*x13394))+(((-1.0)*r00*x13397))+(((-1.0)*r02*x13392)));
evalcond[2]=((1.0)+((r11*x13394))+(((-1.0)*r10*x13397))+(((-1.0)*r12*x13392)));
evalcond[3]=(((r11*x13396))+((r11*x13385))+((r10*x13386))+((r12*x13393))+(((-1.0)*r10*x13389*x13392)));
evalcond[4]=(((r11*x13389))+((r10*x13390))+((r10*x13383*x13385))+(((-1.0)*r12*x13395))+(((-1.0)*r11*x13386*x13392)));
evalcond[5]=(((r21*x13396))+((r20*x13386))+((cj1*sj2))+(((-1.0)*r20*x13389*x13392))+((r22*x13393))+x13387+((r21*x13385)));
evalcond[6]=(((r01*x13385))+((r01*x13396))+((r00*x13386))+(((-1.0)*x13391))+((r02*x13393))+(((-1.0)*r00*x13389*x13392))+x13384);
evalcond[7]=((((-1.0)*r22*x13395))+(((-1.0)*r21*x13386*x13392))+((r20*x13390))+(((-1.0)*x13391))+x13384+((r20*x13383*x13385))+((r21*x13389)));
evalcond[8]=((((-1.0)*x13387))+(((-1.0)*r01*x13386*x13392))+((r00*x13390))+((r01*x13389))+(((-1.0)*r02*x13395))+(((-1.0)*sj2*x13388))+((r00*x13383*x13385)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13399 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x13399)==0){
continue;
}
IkReal x13398=pow(x13399,-0.5);
CheckValue<IkReal> x13400 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13400.valid){
continue;
}
IkReal gconst24=((-1.0)*(x13400.value));
IkReal gconst25=((-1.0)*r21*x13398);
IkReal gconst26=(r20*x13398);
CheckValue<IkReal> x13401 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13401.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x13401.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x13404 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13404.valid){
continue;
}
IkReal x13402=((-1.0)*(x13404.value));
IkReal x13403=x13398;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x13402;
IkReal gconst24=x13402;
IkReal gconst25=((-1.0)*r21*x13403);
IkReal gconst26=(r20*x13403);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13407 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13407.valid){
continue;
}
IkReal x13405=((-1.0)*(x13407.value));
IkReal x13406=x13398;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x13405;
IkReal gconst24=x13405;
IkReal gconst25=((-1.0)*r21*x13406);
IkReal gconst26=(r20*x13406);
CheckValue<IkReal> x13415=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x13415.valid){
continue;
}
IkReal x13408=x13415.value;
IkReal x13409=(sj3*x13408);
IkReal x13410=(r11*x13409);
IkReal x13411=(r00*x13409);
IkReal x13412=(r01*x13409);
IkReal x13413=(r10*x13409);
IkReal x13414=(r20*r21*x13409);
j4eval[0]=IKsign((((r02*r12*sj3))+((r01*x13410*(r21*r21)))+((r10*x13411*(r20*r20)))+((r00*r20*r21*x13410))+((r10*r20*r21*x13412))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13416=gconst25*gconst25;
IkReal x13417=gconst26*gconst26;
IkReal x13418=(r00*r11);
IkReal x13419=(r01*r10);
IkReal x13420=(r02*sj3);
IkReal x13421=(gconst25*r10);
IkReal x13422=(gconst26*r11);
IkReal x13423=((1.0)*sj3);
IkReal x13424=((1.0)*cj3);
IkReal x13425=(cj3*gconst25*gconst26);
CheckValue<IkReal> x13426=IKPowWithIntegerCheck(IKsign((((x13419*x13425))+(((-1.0)*r01*r11*x13416*x13424))+(((-1.0)*r02*r12*x13424))+(((-1.0)*r00*r10*x13417*x13424))+((x13418*x13425)))),-1);
if(!x13426.valid){
continue;
}
CheckValue<IkReal> x13427 = IKatan2WithCheck(IkReal((((x13420*x13421))+((x13420*x13422)))),IkReal((((sj3*x13416*x13419))+(((-1.0)*gconst26*r00*x13421*x13423))+(((-1.0)*x13417*x13418*x13423))+((gconst25*r01*sj3*x13422)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13427.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13426.value)))+(x13427.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13428=IKsin(j4);
IkReal x13429=IKcos(j4);
IkReal x13430=(sj1*sj2);
IkReal x13431=(gconst26*sj3);
IkReal x13432=(gconst25*sj3);
IkReal x13433=(gconst26*r10);
IkReal x13434=(gconst25*r11);
IkReal x13435=(cj3*gconst25);
IkReal x13436=((1.0)*cj2);
IkReal x13437=(cj1*sj2);
IkReal x13438=(gconst26*r00);
IkReal x13439=(gconst26*r20);
IkReal x13440=(cj3*gconst26);
IkReal x13441=(cj1*x13436);
IkReal x13442=((1.0)*x13429);
IkReal x13443=((1.0)*x13428);
IkReal x13444=(cj3*x13428);
IkReal x13445=(gconst25*x13428);
evalcond[0]=((((-1.0)*x13439*x13443))+(((-1.0)*r22*x13442))+((r21*x13445)));
evalcond[1]=((((-1.0)*x13438*x13443))+(((-1.0)*r02*x13442))+((r01*x13445)));
evalcond[2]=((1.0)+((x13428*x13434))+(((-1.0)*x13433*x13443))+(((-1.0)*r12*x13442)));
evalcond[3]=(((r11*x13431))+((r12*x13444))+(((-1.0)*cj3*x13433*x13442))+((cj3*x13429*x13434))+((r10*x13432)));
evalcond[4]=(((r10*x13429*x13431))+(((-1.0)*r11*x13432*x13442))+(((-1.0)*r12*sj3*x13443))+((r11*x13440))+((r10*x13435)));
evalcond[5]=(((r22*x13444))+x13437+((cj2*sj1))+(((-1.0)*cj3*x13439*x13442))+((r21*x13429*x13435))+((r21*x13431))+((r20*x13432)));
evalcond[6]=(((r01*x13431))+x13430+((r02*x13444))+(((-1.0)*x13441))+((r01*x13429*x13435))+(((-1.0)*cj3*x13438*x13442))+((r00*x13432)));
evalcond[7]=(x13430+(((-1.0)*r22*sj3*x13443))+(((-1.0)*x13441))+((r20*x13435))+((r21*x13440))+((r20*x13429*x13431))+(((-1.0)*r21*x13432*x13442)));
evalcond[8]=((((-1.0)*x13437))+(((-1.0)*sj1*x13436))+(((-1.0)*r02*sj3*x13443))+((r01*x13440))+((r00*x13435))+(((-1.0)*r01*x13432*x13442))+((r00*x13429*x13431)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13446=gconst26*gconst26;
IkReal x13447=gconst25*gconst25;
IkReal x13448=(r01*r10);
IkReal x13449=(cj3*r11);
IkReal x13450=(gconst25*gconst26);
IkReal x13451=(cj3*r10);
IkReal x13452=(r00*x13446);
IkReal x13453=((1.0)*sj3*x13450);
CheckValue<IkReal> x13454 = IKatan2WithCheck(IkReal((((gconst26*r02*x13449))+((gconst25*r02*x13451)))),IkReal(((((-1.0)*x13449*x13452))+((r01*x13449*x13450))+(((-1.0)*r00*x13450*x13451))+((cj3*x13447*x13448)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13454.valid){
continue;
}
CheckValue<IkReal> x13455=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*r00*r11*x13453))+(((-1.0)*x13448*x13453))+((r01*r11*sj3*x13447))+((r10*sj3*x13452)))),-1);
if(!x13455.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13454.value)+(((1.5707963267949)*(x13455.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13456=IKsin(j4);
IkReal x13457=IKcos(j4);
IkReal x13458=(sj1*sj2);
IkReal x13459=(gconst26*sj3);
IkReal x13460=(gconst25*sj3);
IkReal x13461=(gconst26*r10);
IkReal x13462=(gconst25*r11);
IkReal x13463=(cj3*gconst25);
IkReal x13464=((1.0)*cj2);
IkReal x13465=(cj1*sj2);
IkReal x13466=(gconst26*r00);
IkReal x13467=(gconst26*r20);
IkReal x13468=(cj3*gconst26);
IkReal x13469=(cj1*x13464);
IkReal x13470=((1.0)*x13457);
IkReal x13471=((1.0)*x13456);
IkReal x13472=(cj3*x13456);
IkReal x13473=(gconst25*x13456);
evalcond[0]=(((r21*x13473))+(((-1.0)*x13467*x13471))+(((-1.0)*r22*x13470)));
evalcond[1]=(((r01*x13473))+(((-1.0)*r02*x13470))+(((-1.0)*x13466*x13471)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13470))+((x13456*x13462))+(((-1.0)*x13461*x13471)));
evalcond[3]=(((r10*x13460))+((cj3*x13457*x13462))+((r12*x13472))+((r11*x13459))+(((-1.0)*cj3*x13461*x13470)));
evalcond[4]=(((r10*x13463))+(((-1.0)*r11*x13460*x13470))+((r10*x13457*x13459))+((r11*x13468))+(((-1.0)*r12*sj3*x13471)));
evalcond[5]=(x13465+((r20*x13460))+((cj2*sj1))+(((-1.0)*cj3*x13467*x13470))+((r21*x13459))+((r22*x13472))+((r21*x13457*x13463)));
evalcond[6]=((((-1.0)*cj3*x13466*x13470))+x13458+((r01*x13457*x13463))+(((-1.0)*x13469))+((r02*x13472))+((r01*x13459))+((r00*x13460)));
evalcond[7]=(x13458+((r20*x13463))+((r21*x13468))+(((-1.0)*r22*sj3*x13471))+(((-1.0)*r21*x13460*x13470))+(((-1.0)*x13469))+((r20*x13457*x13459)));
evalcond[8]=((((-1.0)*r02*sj3*x13471))+(((-1.0)*sj1*x13464))+((r00*x13457*x13459))+(((-1.0)*x13465))+((r01*x13468))+((r00*x13463))+(((-1.0)*r01*x13460*x13470)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13474=((1.0)*gconst26);
CheckValue<IkReal> x13475=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13474))+(((-1.0)*gconst25*r00)))),-1);
if(!x13475.valid){
continue;
}
CheckValue<IkReal> x13476 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst25*r21))+(((-1.0)*r20*x13474)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13476.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13475.value)))+(x13476.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13477=IKsin(j4);
IkReal x13478=IKcos(j4);
IkReal x13479=(sj1*sj2);
IkReal x13480=(gconst26*sj3);
IkReal x13481=(gconst25*sj3);
IkReal x13482=(gconst26*r10);
IkReal x13483=(gconst25*r11);
IkReal x13484=(cj3*gconst25);
IkReal x13485=((1.0)*cj2);
IkReal x13486=(cj1*sj2);
IkReal x13487=(gconst26*r00);
IkReal x13488=(gconst26*r20);
IkReal x13489=(cj3*gconst26);
IkReal x13490=(cj1*x13485);
IkReal x13491=((1.0)*x13478);
IkReal x13492=((1.0)*x13477);
IkReal x13493=(cj3*x13477);
IkReal x13494=(gconst25*x13477);
evalcond[0]=((((-1.0)*x13488*x13492))+(((-1.0)*r22*x13491))+((r21*x13494)));
evalcond[1]=((((-1.0)*r02*x13491))+((r01*x13494))+(((-1.0)*x13487*x13492)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13491))+(((-1.0)*x13482*x13492))+((x13477*x13483)));
evalcond[3]=((((-1.0)*cj3*x13482*x13491))+((cj3*x13478*x13483))+((r11*x13480))+((r10*x13481))+((r12*x13493)));
evalcond[4]=(((r10*x13478*x13480))+(((-1.0)*r12*sj3*x13492))+(((-1.0)*r11*x13481*x13491))+((r11*x13489))+((r10*x13484)));
evalcond[5]=(x13486+((cj2*sj1))+((r22*x13493))+(((-1.0)*cj3*x13488*x13491))+((r21*x13478*x13484))+((r20*x13481))+((r21*x13480)));
evalcond[6]=(x13479+((r02*x13493))+((r00*x13481))+((r01*x13480))+(((-1.0)*cj3*x13487*x13491))+(((-1.0)*x13490))+((r01*x13478*x13484)));
evalcond[7]=(x13479+(((-1.0)*r22*sj3*x13492))+((r20*x13484))+((r20*x13478*x13480))+(((-1.0)*r21*x13481*x13491))+((r21*x13489))+(((-1.0)*x13490)));
evalcond[8]=((((-1.0)*r01*x13481*x13491))+(((-1.0)*sj1*x13485))+(((-1.0)*r02*sj3*x13492))+(((-1.0)*x13486))+((r00*x13484))+((r00*x13478*x13480))+((r01*x13489)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13496 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x13496)==0){
continue;
}
IkReal x13495=pow(x13496,-0.5);
CheckValue<IkReal> x13497 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13497.valid){
continue;
}
IkReal gconst27=((3.14159265358979)+(((-1.0)*(x13497.value))));
IkReal gconst28=((1.0)*r21*x13495);
IkReal gconst29=((-1.0)*r20*x13495);
CheckValue<IkReal> x13498 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13498.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x13498.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13501 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13501.valid){
continue;
}
IkReal x13499=((1.0)*(x13501.value));
IkReal x13500=x13495;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13499)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13499)));
IkReal gconst28=((1.0)*r21*x13500);
IkReal gconst29=((-1.0)*r20*x13500);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13504 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13504.valid){
continue;
}
IkReal x13502=((1.0)*(x13504.value));
IkReal x13503=x13495;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13502)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13502)));
IkReal gconst28=((1.0)*r21*x13503);
IkReal gconst29=((-1.0)*r20*x13503);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x13507 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13507.valid){
continue;
}
IkReal x13505=((1.0)*(x13507.value));
IkReal x13506=x13495;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13505)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13505)));
IkReal gconst28=((1.0)*r21*x13506);
IkReal gconst29=((-1.0)*r20*x13506);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13510 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13510.valid){
continue;
}
IkReal x13508=((1.0)*(x13510.value));
IkReal x13509=x13495;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13508)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13508)));
IkReal gconst28=((1.0)*r21*x13509);
IkReal gconst29=((-1.0)*r20*x13509);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13513 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13513.valid){
continue;
}
IkReal x13511=((1.0)*(x13513.value));
IkReal x13512=x13495;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13511)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13511)));
IkReal gconst28=((1.0)*r21*x13512);
IkReal gconst29=((-1.0)*r20*x13512);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x13516 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13516.valid){
continue;
}
IkReal x13514=((1.0)*(x13516.value));
IkReal x13515=x13495;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13514)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13514)));
IkReal gconst28=((1.0)*r21*x13515);
IkReal gconst29=((-1.0)*r20*x13515);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13517=(gconst29*r10);
IkReal x13518=(gconst28*r11);
CheckValue<IkReal> x13519=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x13517*x13517)+(x13518*x13518)+(((-2.0)*x13517*x13518)))),-1);
if(!x13519.valid){
continue;
}
CheckValue<IkReal> x13520 = IKatan2WithCheck(IkReal((x13517+(((-1.0)*x13518)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13520.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13519.value)))+(x13520.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13521=IKsin(j4);
IkReal x13522=IKcos(j4);
IkReal x13523=(gconst28*r11);
IkReal x13524=((1.0)*cj2);
IkReal x13525=((1.0)*x13522);
IkReal x13526=(gconst29*x13522);
IkReal x13527=(gconst28*x13521);
IkReal x13528=((1.0)*x13521);
IkReal x13529=(gconst29*x13528);
evalcond[0]=(((r21*x13527))+(((-1.0)*r22*x13525))+(((-1.0)*r20*x13529)));
evalcond[1]=(((r01*x13527))+(((-1.0)*r00*x13529))+(((-1.0)*r02*x13525)));
evalcond[2]=((((-1.0)*r12*x13528))+(((-1.0)*x13523*x13525))+((r10*x13526)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13525))+((x13521*x13523))+(((-1.0)*r10*x13529)));
evalcond[4]=((((-1.0)*r22*x13528))+((r20*x13526))+((sj1*sj2))+(((-1.0)*cj1*x13524))+(((-1.0)*gconst28*r21*x13525)));
evalcond[5]=((((-1.0)*sj1*x13524))+(((-1.0)*gconst28*r01*x13525))+(((-1.0)*cj1*sj2))+((r00*x13526))+(((-1.0)*r02*x13528)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13530=((1.0)*gconst29);
CheckValue<IkReal> x13531 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13530))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13531.valid){
continue;
}
CheckValue<IkReal> x13532=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst28*r00))+(((-1.0)*r01*x13530)))),-1);
if(!x13532.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13531.value)+(((1.5707963267949)*(x13532.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13533=IKsin(j4);
IkReal x13534=IKcos(j4);
IkReal x13535=(gconst28*r11);
IkReal x13536=((1.0)*cj2);
IkReal x13537=((1.0)*x13534);
IkReal x13538=(gconst29*x13534);
IkReal x13539=(gconst28*x13533);
IkReal x13540=((1.0)*x13533);
IkReal x13541=(gconst29*x13540);
evalcond[0]=((((-1.0)*r22*x13537))+((r21*x13539))+(((-1.0)*r20*x13541)));
evalcond[1]=((((-1.0)*r00*x13541))+(((-1.0)*r02*x13537))+((r01*x13539)));
evalcond[2]=((((-1.0)*x13535*x13537))+((r10*x13538))+(((-1.0)*r12*x13540)));
evalcond[3]=((1.0)+((x13533*x13535))+(((-1.0)*r12*x13537))+(((-1.0)*r10*x13541)));
evalcond[4]=(((r20*x13538))+(((-1.0)*cj1*x13536))+((sj1*sj2))+(((-1.0)*gconst28*r21*x13537))+(((-1.0)*r22*x13540)));
evalcond[5]=((((-1.0)*sj1*x13536))+(((-1.0)*r02*x13540))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst28*r01*x13537))+((r00*x13538)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13542=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13542.valid){
continue;
}
CheckValue<IkReal> x13543 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13543.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13542.value)))+(x13543.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13544=IKsin(j4);
IkReal x13545=IKcos(j4);
IkReal x13546=(gconst28*r11);
IkReal x13547=((1.0)*cj2);
IkReal x13548=((1.0)*x13545);
IkReal x13549=(gconst29*x13545);
IkReal x13550=(gconst28*x13544);
IkReal x13551=((1.0)*x13544);
IkReal x13552=(gconst29*x13551);
evalcond[0]=(((r21*x13550))+(((-1.0)*r22*x13548))+(((-1.0)*r20*x13552)));
evalcond[1]=((((-1.0)*r00*x13552))+((r01*x13550))+(((-1.0)*r02*x13548)));
evalcond[2]=(((r10*x13549))+(((-1.0)*x13546*x13548))+(((-1.0)*r12*x13551)));
evalcond[3]=((1.0)+((x13544*x13546))+(((-1.0)*r10*x13552))+(((-1.0)*r12*x13548)));
evalcond[4]=((((-1.0)*gconst28*r21*x13548))+((sj1*sj2))+((r20*x13549))+(((-1.0)*cj1*x13547))+(((-1.0)*r22*x13551)));
evalcond[5]=((((-1.0)*gconst28*r01*x13548))+((r00*x13549))+(((-1.0)*r02*x13551))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x13547)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13555 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13555.valid){
continue;
}
IkReal x13553=((1.0)*(x13555.value));
IkReal x13554=x13495;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13553)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13553)));
IkReal gconst28=((1.0)*r21*x13554);
IkReal gconst29=((-1.0)*r20*x13554);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13558 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13558.valid){
continue;
}
IkReal x13556=((1.0)*(x13558.value));
IkReal x13557=x13495;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13556)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13556)));
IkReal gconst28=((1.0)*r21*x13557);
IkReal gconst29=((-1.0)*r20*x13557);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x13561 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13561.valid){
continue;
}
IkReal x13559=((1.0)*(x13561.value));
IkReal x13560=x13495;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13559)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13559)));
IkReal gconst28=((1.0)*r21*x13560);
IkReal gconst29=((-1.0)*r20*x13560);
IkReal x13562=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x13566=IKPowWithIntegerCheck(x13562,-1);
if(!x13566.valid){
continue;
}
IkReal x13563=x13566.value;
IkReal x13564=((1.0)*x13563);
IkReal x13565=((((-1.0)*x13564*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x13563))+(((-1.0)*x13564*(r10*r10)*(r20*r20))));
j4eval[0]=x13565;
j4eval[1]=r12;
j4eval[2]=x13562;
j4eval[3]=IKsign(x13565);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13567=(gconst28*r11);
IkReal x13568=(gconst29*r10);
CheckValue<IkReal> x13569=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x13568*x13568)))+(((2.0)*x13567*x13568))+(((-1.0)*(r12*r12)))+(((-1.0)*(x13567*x13567))))),-1);
if(!x13569.valid){
continue;
}
CheckValue<IkReal> x13570 = IKatan2WithCheck(IkReal((x13567+(((-1.0)*x13568)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13570.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13569.value)))+(x13570.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13571=IKcos(j4);
IkReal x13572=IKsin(j4);
IkReal x13573=(gconst29*r10);
IkReal x13574=(gconst29*r20);
IkReal x13575=(gconst28*r21);
IkReal x13576=((1.0)*cj2);
IkReal x13577=(gconst29*r00);
IkReal x13578=((1.0)*x13571);
IkReal x13579=((1.0)*x13572);
IkReal x13580=(gconst28*x13571);
IkReal x13581=(gconst28*x13572);
evalcond[0]=(((r12*x13572))+(((-1.0)*x13573*x13578))+((r11*x13580)));
evalcond[1]=((((-1.0)*r22*x13578))+((x13572*x13575))+(((-1.0)*x13574*x13579)));
evalcond[2]=((((-1.0)*r02*x13578))+(((-1.0)*x13577*x13579))+((r01*x13581)));
evalcond[3]=((1.0)+(((-1.0)*x13573*x13579))+(((-1.0)*r12*x13578))+((r11*x13581)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj1*x13576))+((x13571*x13575))+(((-1.0)*x13574*x13578))+((r22*x13572)));
evalcond[5]=((((-1.0)*x13577*x13578))+(((-1.0)*sj1*x13576))+(((-1.0)*cj1*sj2))+((r01*x13580))+((r02*x13572)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13582=((1.0)*gconst29);
CheckValue<IkReal> x13583=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13582))+(((-1.0)*gconst28*r00)))),-1);
if(!x13583.valid){
continue;
}
CheckValue<IkReal> x13584 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13582))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13584.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13583.value)))+(x13584.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13585=IKcos(j4);
IkReal x13586=IKsin(j4);
IkReal x13587=(gconst29*r10);
IkReal x13588=(gconst29*r20);
IkReal x13589=(gconst28*r21);
IkReal x13590=((1.0)*cj2);
IkReal x13591=(gconst29*r00);
IkReal x13592=((1.0)*x13585);
IkReal x13593=((1.0)*x13586);
IkReal x13594=(gconst28*x13585);
IkReal x13595=(gconst28*x13586);
evalcond[0]=(((r11*x13594))+((r12*x13586))+(((-1.0)*x13587*x13592)));
evalcond[1]=((((-1.0)*x13588*x13593))+((x13586*x13589))+(((-1.0)*r22*x13592)));
evalcond[2]=(((r01*x13595))+(((-1.0)*r02*x13592))+(((-1.0)*x13591*x13593)));
evalcond[3]=((1.0)+((r11*x13595))+(((-1.0)*x13587*x13593))+(((-1.0)*r12*x13592)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj1*x13590))+(((-1.0)*x13588*x13592))+((x13585*x13589))+((r22*x13586)));
evalcond[5]=(((r01*x13594))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x13590))+((r02*x13586))+(((-1.0)*x13591*x13592)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13596=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13596.valid){
continue;
}
CheckValue<IkReal> x13597 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13597.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13596.value)))+(x13597.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13598=IKcos(j4);
IkReal x13599=IKsin(j4);
IkReal x13600=(gconst29*r10);
IkReal x13601=(gconst29*r20);
IkReal x13602=(gconst28*r21);
IkReal x13603=((1.0)*cj2);
IkReal x13604=(gconst29*r00);
IkReal x13605=((1.0)*x13598);
IkReal x13606=((1.0)*x13599);
IkReal x13607=(gconst28*x13598);
IkReal x13608=(gconst28*x13599);
evalcond[0]=(((r11*x13607))+(((-1.0)*x13600*x13605))+((r12*x13599)));
evalcond[1]=(((x13599*x13602))+(((-1.0)*r22*x13605))+(((-1.0)*x13601*x13606)));
evalcond[2]=((((-1.0)*x13604*x13606))+(((-1.0)*r02*x13605))+((r01*x13608)));
evalcond[3]=((1.0)+((r11*x13608))+(((-1.0)*r12*x13605))+(((-1.0)*x13600*x13606)));
evalcond[4]=(((r22*x13599))+((x13598*x13602))+(((-1.0)*cj1*x13603))+((sj1*sj2))+(((-1.0)*x13601*x13605)));
evalcond[5]=((((-1.0)*x13604*x13605))+(((-1.0)*sj1*x13603))+(((-1.0)*cj1*sj2))+((r02*x13599))+((r01*x13607)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13611 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13611.valid){
continue;
}
IkReal x13609=((1.0)*(x13611.value));
IkReal x13610=x13495;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13609)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13609)));
IkReal gconst28=((1.0)*r21*x13610);
IkReal gconst29=((-1.0)*r20*x13610);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13614 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13614.valid){
continue;
}
IkReal x13612=((1.0)*(x13614.value));
IkReal x13613=x13495;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13612)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13612)));
IkReal gconst28=((1.0)*r21*x13613);
IkReal gconst29=((-1.0)*r20*x13613);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x13617 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13617.valid){
continue;
}
IkReal x13615=((1.0)*(x13617.value));
IkReal x13616=x13495;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13615)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13615)));
IkReal gconst28=((1.0)*r21*x13616);
IkReal gconst29=((-1.0)*r20*x13616);
IkReal x13618=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x13622=IKPowWithIntegerCheck(x13618,-1);
if(!x13622.valid){
continue;
}
IkReal x13619=x13622.value;
IkReal x13620=((1.0)*x13619);
IkReal x13621=((((-2.0)*r10*r11*r20*r21*x13619))+(((-1.0)*x13620*(r10*r10)*(r20*r20)))+(((-1.0)*x13620*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12))));
j4eval[0]=x13621;
j4eval[1]=r12;
j4eval[2]=x13618;
j4eval[3]=IKsign(x13621);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13623=(gconst28*r11);
IkReal x13624=(gconst29*r10);
CheckValue<IkReal> x13625 = IKatan2WithCheck(IkReal((x13623+(((-1.0)*x13624)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13625.valid){
continue;
}
CheckValue<IkReal> x13626=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x13624*x13624)))+(((-1.0)*(x13623*x13623)))+(((2.0)*x13623*x13624))+(((-1.0)*(r12*r12))))),-1);
if(!x13626.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13625.value)+(((1.5707963267949)*(x13626.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13627=IKcos(j4);
IkReal x13628=IKsin(j4);
IkReal x13629=(gconst29*r10);
IkReal x13630=(gconst29*r20);
IkReal x13631=(gconst28*r21);
IkReal x13632=(gconst29*r00);
IkReal x13633=((1.0)*x13627);
IkReal x13634=((1.0)*x13628);
IkReal x13635=(gconst28*x13627);
IkReal x13636=(gconst28*x13628);
evalcond[0]=(((r11*x13635))+((r12*x13628))+(((-1.0)*x13629*x13633)));
evalcond[1]=((((-1.0)*x13630*x13634))+(((-1.0)*r22*x13633))+((x13628*x13631)));
evalcond[2]=((((-1.0)*r02*x13633))+((r01*x13636))+(((-1.0)*x13632*x13634)));
evalcond[3]=((1.0)+((r11*x13636))+(((-1.0)*r12*x13633))+(((-1.0)*x13629*x13634)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x13630*x13633))+((cj1*sj2))+((r22*x13628))+((x13627*x13631)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x13628))+((r01*x13635))+(((-1.0)*x13632*x13633)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13637=((1.0)*gconst29);
CheckValue<IkReal> x13638 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst28*r21))+(((-1.0)*r20*x13637)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13638.valid){
continue;
}
CheckValue<IkReal> x13639=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13637))+(((-1.0)*gconst28*r00)))),-1);
if(!x13639.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13638.value)+(((1.5707963267949)*(x13639.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13640=IKcos(j4);
IkReal x13641=IKsin(j4);
IkReal x13642=(gconst29*r10);
IkReal x13643=(gconst29*r20);
IkReal x13644=(gconst28*r21);
IkReal x13645=(gconst29*r00);
IkReal x13646=((1.0)*x13640);
IkReal x13647=((1.0)*x13641);
IkReal x13648=(gconst28*x13640);
IkReal x13649=(gconst28*x13641);
evalcond[0]=(((r11*x13648))+((r12*x13641))+(((-1.0)*x13642*x13646)));
evalcond[1]=((((-1.0)*x13643*x13647))+((x13641*x13644))+(((-1.0)*r22*x13646)));
evalcond[2]=(((r01*x13649))+(((-1.0)*r02*x13646))+(((-1.0)*x13645*x13647)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13646))+((r11*x13649))+(((-1.0)*x13642*x13647)));
evalcond[4]=(((cj2*sj1))+((r22*x13641))+((cj1*sj2))+(((-1.0)*x13643*x13646))+((x13640*x13644)));
evalcond[5]=(((r02*x13641))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x13648))+(((-1.0)*x13645*x13646)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13650=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13650.valid){
continue;
}
CheckValue<IkReal> x13651 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13651.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13650.value)))+(x13651.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13652=IKcos(j4);
IkReal x13653=IKsin(j4);
IkReal x13654=(gconst29*r10);
IkReal x13655=(gconst29*r20);
IkReal x13656=(gconst28*r21);
IkReal x13657=(gconst29*r00);
IkReal x13658=((1.0)*x13652);
IkReal x13659=((1.0)*x13653);
IkReal x13660=(gconst28*x13652);
IkReal x13661=(gconst28*x13653);
evalcond[0]=(((r12*x13653))+(((-1.0)*x13654*x13658))+((r11*x13660)));
evalcond[1]=((((-1.0)*r22*x13658))+(((-1.0)*x13655*x13659))+((x13653*x13656)));
evalcond[2]=((((-1.0)*r02*x13658))+((r01*x13661))+(((-1.0)*x13657*x13659)));
evalcond[3]=((1.0)+(((-1.0)*x13654*x13659))+((r11*x13661))+(((-1.0)*r12*x13658)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x13652*x13656))+(((-1.0)*x13655*x13658))+((r22*x13653)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x13660))+((r02*x13653))+(((-1.0)*x13657*x13658)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13664 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13664.valid){
continue;
}
IkReal x13662=((1.0)*(x13664.value));
IkReal x13663=x13495;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13662)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13662)));
IkReal gconst28=((1.0)*r21*x13663);
IkReal gconst29=((-1.0)*r20*x13663);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13667 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13667.valid){
continue;
}
IkReal x13665=((1.0)*(x13667.value));
IkReal x13666=x13495;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13665)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13665)));
IkReal gconst28=((1.0)*r21*x13666);
IkReal gconst29=((-1.0)*r20*x13666);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x13670 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13670.valid){
continue;
}
IkReal x13668=((1.0)*(x13670.value));
IkReal x13669=x13495;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13668)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13668)));
IkReal gconst28=((1.0)*r21*x13669);
IkReal gconst29=((-1.0)*r20*x13669);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13671=(gconst29*r10);
IkReal x13672=(gconst28*r11);
CheckValue<IkReal> x13673 = IKatan2WithCheck(IkReal((x13671+(((-1.0)*x13672)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13673.valid){
continue;
}
CheckValue<IkReal> x13674=IKPowWithIntegerCheck(IKsign(((((-2.0)*x13671*x13672))+(r12*r12)+(x13672*x13672)+(x13671*x13671))),-1);
if(!x13674.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13673.value)+(((1.5707963267949)*(x13674.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13675=IKsin(j4);
IkReal x13676=IKcos(j4);
IkReal x13677=(gconst28*r11);
IkReal x13678=((1.0)*x13676);
IkReal x13679=(gconst29*x13676);
IkReal x13680=(gconst28*x13675);
IkReal x13681=((1.0)*x13675);
IkReal x13682=(gconst29*x13681);
evalcond[0]=((((-1.0)*r20*x13682))+((r21*x13680))+(((-1.0)*r22*x13678)));
evalcond[1]=((((-1.0)*r00*x13682))+(((-1.0)*r02*x13678))+((r01*x13680)));
evalcond[2]=((((-1.0)*x13677*x13678))+(((-1.0)*r12*x13681))+((r10*x13679)));
evalcond[3]=((1.0)+(((-1.0)*r10*x13682))+(((-1.0)*r12*x13678))+((x13675*x13677)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst28*r21*x13678))+(((-1.0)*r22*x13681))+((cj1*sj2))+((r20*x13679)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r00*x13679))+(((-1.0)*r02*x13681))+(((-1.0)*gconst28*r01*x13678)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13683=((1.0)*gconst29);
CheckValue<IkReal> x13684 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13683))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13684.valid){
continue;
}
CheckValue<IkReal> x13685=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13683))+(((-1.0)*gconst28*r00)))),-1);
if(!x13685.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13684.value)+(((1.5707963267949)*(x13685.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13686=IKsin(j4);
IkReal x13687=IKcos(j4);
IkReal x13688=(gconst28*r11);
IkReal x13689=((1.0)*x13687);
IkReal x13690=(gconst29*x13687);
IkReal x13691=(gconst28*x13686);
IkReal x13692=((1.0)*x13686);
IkReal x13693=(gconst29*x13692);
evalcond[0]=((((-1.0)*r20*x13693))+(((-1.0)*r22*x13689))+((r21*x13691)));
evalcond[1]=(((r01*x13691))+(((-1.0)*r00*x13693))+(((-1.0)*r02*x13689)));
evalcond[2]=((((-1.0)*x13688*x13689))+((r10*x13690))+(((-1.0)*r12*x13692)));
evalcond[3]=((1.0)+((x13686*x13688))+(((-1.0)*r12*x13689))+(((-1.0)*r10*x13693)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r20*x13690))+(((-1.0)*gconst28*r21*x13689))+(((-1.0)*r22*x13692)));
evalcond[5]=(((r00*x13690))+(((-1.0)*gconst28*r01*x13689))+(((-1.0)*r02*x13692))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13694=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13694.valid){
continue;
}
CheckValue<IkReal> x13695 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13695.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13694.value)))+(x13695.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13696=IKsin(j4);
IkReal x13697=IKcos(j4);
IkReal x13698=(gconst28*r11);
IkReal x13699=((1.0)*x13697);
IkReal x13700=(gconst29*x13697);
IkReal x13701=(gconst28*x13696);
IkReal x13702=((1.0)*x13696);
IkReal x13703=(gconst29*x13702);
evalcond[0]=(((r21*x13701))+(((-1.0)*r20*x13703))+(((-1.0)*r22*x13699)));
evalcond[1]=((((-1.0)*r00*x13703))+(((-1.0)*r02*x13699))+((r01*x13701)));
evalcond[2]=((((-1.0)*r12*x13702))+((r10*x13700))+(((-1.0)*x13698*x13699)));
evalcond[3]=((1.0)+((x13696*x13698))+(((-1.0)*r10*x13703))+(((-1.0)*r12*x13699)));
evalcond[4]=((((-1.0)*r22*x13702))+((cj2*sj1))+((r20*x13700))+(((-1.0)*gconst28*r21*x13699))+((cj1*sj2)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r00*x13700))+(((-1.0)*gconst28*r01*x13699))+(((-1.0)*r02*x13702)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r02);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((1.0)+r12);
op[1]=((((-2.0)*gconst29*r10))+(((2.0)*gconst28*r11)));
op[2]=((1.0)+(((-1.0)*r12)));
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13704=gconst28*gconst28;
IkReal x13705=gconst29*gconst29;
IkReal x13706=(r11*r21);
IkReal x13707=(gconst29*sj3);
IkReal x13708=((1.0)*cj3);
IkReal x13709=(r10*r20);
IkReal x13710=(r10*r21);
IkReal x13711=(r11*r20);
IkReal x13712=(cj3*gconst28*gconst29);
CheckValue<IkReal> x13713=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13705*x13708*x13709))+((x13710*x13712))+(((-1.0)*x13704*x13706*x13708))+((x13711*x13712))+(((-1.0)*r12*r22*x13708)))),-1);
if(!x13713.valid){
continue;
}
CheckValue<IkReal> x13714 = IKatan2WithCheck(IkReal((((r11*r22*x13707))+((gconst28*r10*r22*sj3)))),IkReal(((((-1.0)*gconst28*x13707*x13709))+((sj3*x13704*x13710))+(((-1.0)*sj3*x13705*x13711))+((gconst28*x13706*x13707)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13714.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13713.value)))+(x13714.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13715=IKsin(j4);
IkReal x13716=IKcos(j4);
IkReal x13717=(sj1*sj2);
IkReal x13718=(gconst29*r20);
IkReal x13719=(gconst28*r20);
IkReal x13720=((1.0)*cj2);
IkReal x13721=(r11*sj3);
IkReal x13722=(cj1*sj2);
IkReal x13723=(gconst29*r01);
IkReal x13724=(gconst29*r10);
IkReal x13725=(cj3*gconst28);
IkReal x13726=(cj3*gconst29);
IkReal x13727=(gconst28*sj3);
IkReal x13728=(gconst29*r00);
IkReal x13729=(cj1*x13720);
IkReal x13730=((1.0)*x13716);
IkReal x13731=((1.0)*x13715);
IkReal x13732=(gconst28*x13715);
IkReal x13733=(cj3*x13715);
IkReal x13734=(sj3*x13716);
evalcond[0]=((((-1.0)*r22*x13730))+((r21*x13732))+(((-1.0)*x13718*x13731)));
evalcond[1]=((((-1.0)*r02*x13730))+(((-1.0)*x13728*x13731))+((r01*x13732)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13730))+(((-1.0)*x13724*x13731))+((r11*x13732)));
evalcond[3]=(((r10*x13727))+((r12*x13733))+((r11*x13716*x13725))+((gconst29*x13721))+(((-1.0)*cj3*x13724*x13730)));
evalcond[4]=((((-1.0)*gconst28*x13721*x13730))+((r10*x13725))+((r11*x13726))+((x13724*x13734))+(((-1.0)*r12*sj3*x13731)));
evalcond[5]=(((cj2*sj1))+((gconst29*r21*sj3))+((sj3*x13719))+((r22*x13733))+x13722+(((-1.0)*cj3*x13718*x13730))+((r21*x13716*x13725)));
evalcond[6]=(((r00*x13727))+x13717+((r02*x13733))+((r01*x13716*x13725))+(((-1.0)*r00*x13726*x13730))+(((-1.0)*x13729))+((sj3*x13723)));
evalcond[7]=((((-1.0)*r21*x13727*x13730))+x13717+((r21*x13726))+((cj3*x13719))+((x13718*x13734))+(((-1.0)*x13729))+(((-1.0)*r22*sj3*x13731)));
evalcond[8]=((((-1.0)*r02*sj3*x13731))+((x13728*x13734))+((r00*x13725))+(((-1.0)*r01*x13727*x13730))+(((-1.0)*sj1*x13720))+(((-1.0)*x13722))+((cj3*x13723)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13735=((1.0)*gconst29);
CheckValue<IkReal> x13736 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13735))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13736.valid){
continue;
}
CheckValue<IkReal> x13737=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst28*r00))+(((-1.0)*r01*x13735)))),-1);
if(!x13737.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13736.value)+(((1.5707963267949)*(x13737.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13738=IKsin(j4);
IkReal x13739=IKcos(j4);
IkReal x13740=(sj1*sj2);
IkReal x13741=(gconst29*r20);
IkReal x13742=(gconst28*r20);
IkReal x13743=((1.0)*cj2);
IkReal x13744=(r11*sj3);
IkReal x13745=(cj1*sj2);
IkReal x13746=(gconst29*r01);
IkReal x13747=(gconst29*r10);
IkReal x13748=(cj3*gconst28);
IkReal x13749=(cj3*gconst29);
IkReal x13750=(gconst28*sj3);
IkReal x13751=(gconst29*r00);
IkReal x13752=(cj1*x13743);
IkReal x13753=((1.0)*x13739);
IkReal x13754=((1.0)*x13738);
IkReal x13755=(gconst28*x13738);
IkReal x13756=(cj3*x13738);
IkReal x13757=(sj3*x13739);
evalcond[0]=(((r21*x13755))+(((-1.0)*r22*x13753))+(((-1.0)*x13741*x13754)));
evalcond[1]=((((-1.0)*x13751*x13754))+((r01*x13755))+(((-1.0)*r02*x13753)));
evalcond[2]=((1.0)+((r11*x13755))+(((-1.0)*x13747*x13754))+(((-1.0)*r12*x13753)));
evalcond[3]=(((gconst29*x13744))+(((-1.0)*cj3*x13747*x13753))+((r12*x13756))+((r11*x13739*x13748))+((r10*x13750)));
evalcond[4]=(((x13747*x13757))+(((-1.0)*r12*sj3*x13754))+((r10*x13748))+(((-1.0)*gconst28*x13744*x13753))+((r11*x13749)));
evalcond[5]=(((cj2*sj1))+((r22*x13756))+((r21*x13739*x13748))+((gconst29*r21*sj3))+x13745+(((-1.0)*cj3*x13741*x13753))+((sj3*x13742)));
evalcond[6]=(((r01*x13739*x13748))+x13740+((r02*x13756))+(((-1.0)*x13752))+(((-1.0)*r00*x13749*x13753))+((r00*x13750))+((sj3*x13746)));
evalcond[7]=(x13740+(((-1.0)*x13752))+((x13741*x13757))+(((-1.0)*r22*sj3*x13754))+((r21*x13749))+((cj3*x13742))+(((-1.0)*r21*x13750*x13753)));
evalcond[8]=((((-1.0)*x13745))+(((-1.0)*sj1*x13743))+(((-1.0)*r02*sj3*x13754))+((x13751*x13757))+(((-1.0)*r01*x13750*x13753))+((cj3*x13746))+((r00*x13748)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13758=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13758.valid){
continue;
}
CheckValue<IkReal> x13759 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13759.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13758.value)))+(x13759.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13760=IKsin(j4);
IkReal x13761=IKcos(j4);
IkReal x13762=(sj1*sj2);
IkReal x13763=(gconst29*r20);
IkReal x13764=(gconst28*r20);
IkReal x13765=((1.0)*cj2);
IkReal x13766=(r11*sj3);
IkReal x13767=(cj1*sj2);
IkReal x13768=(gconst29*r01);
IkReal x13769=(gconst29*r10);
IkReal x13770=(cj3*gconst28);
IkReal x13771=(cj3*gconst29);
IkReal x13772=(gconst28*sj3);
IkReal x13773=(gconst29*r00);
IkReal x13774=(cj1*x13765);
IkReal x13775=((1.0)*x13761);
IkReal x13776=((1.0)*x13760);
IkReal x13777=(gconst28*x13760);
IkReal x13778=(cj3*x13760);
IkReal x13779=(sj3*x13761);
evalcond[0]=((((-1.0)*r22*x13775))+(((-1.0)*x13763*x13776))+((r21*x13777)));
evalcond[1]=((((-1.0)*x13773*x13776))+((r01*x13777))+(((-1.0)*r02*x13775)));
evalcond[2]=((1.0)+((r11*x13777))+(((-1.0)*x13769*x13776))+(((-1.0)*r12*x13775)));
evalcond[3]=(((gconst29*x13766))+((r11*x13761*x13770))+((r10*x13772))+(((-1.0)*cj3*x13769*x13775))+((r12*x13778)));
evalcond[4]=(((r11*x13771))+(((-1.0)*gconst28*x13766*x13775))+((x13769*x13779))+((r10*x13770))+(((-1.0)*r12*sj3*x13776)));
evalcond[5]=(((cj2*sj1))+((gconst29*r21*sj3))+((r21*x13761*x13770))+x13767+(((-1.0)*cj3*x13763*x13775))+((sj3*x13764))+((r22*x13778)));
evalcond[6]=((((-1.0)*x13774))+x13762+((r01*x13761*x13770))+((r00*x13772))+((sj3*x13768))+(((-1.0)*r00*x13771*x13775))+((r02*x13778)));
evalcond[7]=((((-1.0)*x13774))+x13762+(((-1.0)*r22*sj3*x13776))+(((-1.0)*r21*x13772*x13775))+((cj3*x13764))+((x13763*x13779))+((r21*x13771)));
evalcond[8]=((((-1.0)*x13767))+(((-1.0)*sj1*x13765))+((r00*x13770))+((cj3*x13768))+(((-1.0)*r02*sj3*x13776))+(((-1.0)*r01*x13772*x13775))+((x13773*x13779)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13780=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13780);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13780);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13781=(r11*sj5);
IkReal x13782=((1.0)*cj5*r10);
j4eval[0]=(x13781+(((-1.0)*x13782)));
j4eval[1]=((((-1.0)*cj3*x13782))+((cj3*x13781)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13783=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13783);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13783);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13784=(cj5*r10);
IkReal x13785=(r11*sj5);
j4eval[0]=(x13785+(((-1.0)*x13784)));
j4eval[1]=((((-1.0)*sj3*x13785))+((sj3*x13784)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x13786=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13786);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13786);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
j4eval[2]=(((cj3*r11*sj5))+(((-1.0)*cj3*cj5*r10)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13787=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13787);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13787);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x13788=((1.0)*cj5);
j4eval[0]=((((-1.0)*r10*x13788))+((r11*sj5)));
j4eval[1]=(((r01*sj5))+(((-1.0)*r00*x13788)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13789=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13789);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13789);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r22;
j4eval[1]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13790=((1.0)*sj1);
CheckValue<IkReal> x13791=IKPowWithIntegerCheck(r22,-1);
if(!x13791.valid){
continue;
}
CheckValue<IkReal> x13792=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x13792.valid){
continue;
}
if( IKabs(((x13791.value)*(((((-1.0)*cj2*x13790))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13792.value)*(((((-1.0)*sj2*x13790))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13791.value)*(((((-1.0)*cj2*x13790))+(((-1.0)*cj1*sj2))))))+IKsqr(((x13792.value)*(((((-1.0)*sj2*x13790))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13791.value)*(((((-1.0)*cj2*x13790))+(((-1.0)*cj1*sj2))))), ((x13792.value)*(((((-1.0)*sj2*x13790))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13793=IKsin(j4);
IkReal x13794=IKcos(j4);
IkReal x13795=((1.0)*cj5);
IkReal x13796=(sj5*x13794);
IkReal x13797=(sj5*x13793);
evalcond[0]=((-1.0)*r22*x13794);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((r22*x13793)));
evalcond[2]=((((-1.0)*r00*x13793*x13795))+((r01*x13797)));
evalcond[3]=((((-1.0)*r10*x13794*x13795))+((r11*x13796)));
evalcond[4]=((1.0)+((r11*x13797))+(((-1.0)*r10*x13793*x13795)));
evalcond[5]=(((r01*x13796))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r00*x13794*x13795)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13798=((1.0)*cj5);
CheckValue<IkReal> x13799=IKPowWithIntegerCheck(((((-1.0)*r10*x13798))+((r11*sj5))),-1);
if(!x13799.valid){
continue;
}
CheckValue<IkReal> x13800=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*r00*x13798))),-1);
if(!x13800.valid){
continue;
}
if( IKabs(((-1.0)*(x13799.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13800.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13799.value)))+IKsqr(((x13800.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13799.value)), ((x13800.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13801=IKsin(j4);
IkReal x13802=IKcos(j4);
IkReal x13803=((1.0)*cj5);
IkReal x13804=(sj5*x13802);
IkReal x13805=(sj5*x13801);
evalcond[0]=((-1.0)*r22*x13802);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((r22*x13801)));
evalcond[2]=(((r01*x13805))+(((-1.0)*r00*x13801*x13803)));
evalcond[3]=(((r11*x13804))+(((-1.0)*r10*x13802*x13803)));
evalcond[4]=((1.0)+((r11*x13805))+(((-1.0)*r10*x13801*x13803)));
evalcond[5]=(((r01*x13804))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r00*x13802*x13803)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13806=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13806);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13806);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r22;
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13807=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13807);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13807);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13808=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x13808.valid){
continue;
}
CheckValue<IkReal> x13809=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x13809.valid){
continue;
}
if( IKabs(((-1.0)*(x13808.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13809.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13808.value)))+IKsqr(((x13809.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13808.value)), ((x13809.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13810=IKsin(j4);
IkReal x13811=IKcos(j4);
IkReal x13812=(cj5*x13811);
IkReal x13813=(sj5*x13810);
IkReal x13814=((1.0)*cj5*x13810);
IkReal x13815=((1.0)*sj5*x13811);
evalcond[0]=((-1.0)*r22*x13811);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x13810)));
evalcond[2]=(((r01*x13813))+(((-1.0)*r00*x13814)));
evalcond[3]=(((r10*x13812))+(((-1.0)*r11*x13815)));
evalcond[4]=((1.0)+((r11*x13813))+(((-1.0)*r10*x13814)));
evalcond[5]=(((r00*x13812))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r01*x13815)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13816=IKPowWithIntegerCheck(r22,-1);
if(!x13816.valid){
continue;
}
CheckValue<IkReal> x13817=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x13817.valid){
continue;
}
if( IKabs(((x13816.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13817.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13816.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x13817.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13816.value)*((((cj2*sj1))+((cj1*sj2))))), ((x13817.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13818=IKsin(j4);
IkReal x13819=IKcos(j4);
IkReal x13820=(cj5*x13819);
IkReal x13821=(sj5*x13818);
IkReal x13822=((1.0)*cj5*x13818);
IkReal x13823=((1.0)*sj5*x13819);
evalcond[0]=((-1.0)*r22*x13819);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x13818)));
evalcond[2]=(((r01*x13821))+(((-1.0)*r00*x13822)));
evalcond[3]=(((r10*x13820))+(((-1.0)*r11*x13823)));
evalcond[4]=((1.0)+((r11*x13821))+(((-1.0)*r10*x13822)));
evalcond[5]=(((r00*x13820))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r01*x13823)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13824=((1.0)*r10);
CheckValue<IkReal> x13825=IKPowWithIntegerCheck(cj3,-1);
if(!x13825.valid){
continue;
}
CheckValue<IkReal> x13826=IKPowWithIntegerCheck(r22,-1);
if(!x13826.valid){
continue;
}
CheckValue<IkReal> x13827=IKPowWithIntegerCheck(((((-1.0)*cj3*cj5*x13824))+((cj3*r11*sj5))),-1);
if(!x13827.valid){
continue;
}
if( IKabs(((x13825.value)*(x13826.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13827.value)*(((((-1.0)*sj3*sj5*x13824))+(((-1.0)*cj5*r11*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13825.value)*(x13826.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((x13827.value)*(((((-1.0)*sj3*sj5*x13824))+(((-1.0)*cj5*r11*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13825.value)*(x13826.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))), ((x13827.value)*(((((-1.0)*sj3*sj5*x13824))+(((-1.0)*cj5*r11*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13828=IKsin(j4);
IkReal x13829=IKcos(j4);
IkReal x13830=(sj1*sj2);
IkReal x13831=(r11*sj5);
IkReal x13832=(r00*sj3);
IkReal x13833=(cj5*r01);
IkReal x13834=((1.0)*cj1);
IkReal x13835=(cj3*sj5);
IkReal x13836=(cj5*r11);
IkReal x13837=(r10*sj3);
IkReal x13838=(cj2*sj1);
IkReal x13839=((1.0)*cj5);
IkReal x13840=((1.0)*sj3);
IkReal x13841=(r01*sj5);
IkReal x13842=(cj2*x13834);
IkReal x13843=(cj3*x13829);
IkReal x13844=(r22*x13828);
IkReal x13845=(cj5*x13829);
IkReal x13846=(x13828*x13839);
evalcond[0]=((-1.0)*r22*x13829);
evalcond[1]=(x13838+((cj1*sj2))+((cj3*x13844)));
evalcond[2]=(((x13828*x13841))+(((-1.0)*r00*x13846)));
evalcond[3]=((1.0)+(((-1.0)*r10*x13846))+((x13828*x13831)));
evalcond[4]=((((-1.0)*x13842))+x13830+(((-1.0)*x13840*x13844)));
evalcond[5]=((((-1.0)*r10*x13839*x13843))+((sj5*x13837))+((sj3*x13836))+((x13831*x13843)));
evalcond[6]=(((x13837*x13845))+(((-1.0)*x13829*x13831*x13840))+((r10*x13835))+((cj3*x13836)));
evalcond[7]=((((-1.0)*x13842))+x13830+(((-1.0)*r00*x13839*x13843))+((sj5*x13832))+((sj3*x13833))+((r01*x13829*x13835)));
evalcond[8]=((((-1.0)*sj2*x13834))+(((-1.0)*x13829*x13840*x13841))+((x13832*x13845))+(((-1.0)*x13838))+((r00*x13835))+((cj3*x13833)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13847=(cj5*r10);
IkReal x13848=((1.0)*r11);
CheckValue<IkReal> x13849=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*x13847))),-1);
if(!x13849.valid){
continue;
}
CheckValue<IkReal> x13850=IKPowWithIntegerCheck(((((-1.0)*sj3*sj5*x13848))+((sj3*x13847))),-1);
if(!x13850.valid){
continue;
}
if( IKabs(((-1.0)*(x13849.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13850.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x13848)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13849.value)))+IKsqr(((x13850.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x13848))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13849.value)), ((x13850.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x13848))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13851=IKsin(j4);
IkReal x13852=IKcos(j4);
IkReal x13853=(sj1*sj2);
IkReal x13854=(r11*sj5);
IkReal x13855=(r00*sj3);
IkReal x13856=(cj5*r01);
IkReal x13857=((1.0)*cj1);
IkReal x13858=(cj3*sj5);
IkReal x13859=(cj5*r11);
IkReal x13860=(r10*sj3);
IkReal x13861=(cj2*sj1);
IkReal x13862=((1.0)*cj5);
IkReal x13863=((1.0)*sj3);
IkReal x13864=(r01*sj5);
IkReal x13865=(cj2*x13857);
IkReal x13866=(cj3*x13852);
IkReal x13867=(r22*x13851);
IkReal x13868=(cj5*x13852);
IkReal x13869=(x13851*x13862);
evalcond[0]=((-1.0)*r22*x13852);
evalcond[1]=(x13861+((cj1*sj2))+((cj3*x13867)));
evalcond[2]=((((-1.0)*r00*x13869))+((x13851*x13864)));
evalcond[3]=((1.0)+((x13851*x13854))+(((-1.0)*r10*x13869)));
evalcond[4]=((((-1.0)*x13863*x13867))+x13853+(((-1.0)*x13865)));
evalcond[5]=(((x13854*x13866))+((sj3*x13859))+((sj5*x13860))+(((-1.0)*r10*x13862*x13866)));
evalcond[6]=(((x13860*x13868))+((cj3*x13859))+((r10*x13858))+(((-1.0)*x13852*x13854*x13863)));
evalcond[7]=(((r01*x13852*x13858))+x13853+((sj3*x13856))+(((-1.0)*r00*x13862*x13866))+((sj5*x13855))+(((-1.0)*x13865)));
evalcond[8]=(((r00*x13858))+(((-1.0)*x13861))+(((-1.0)*sj2*x13857))+(((-1.0)*x13852*x13863*x13864))+((x13855*x13868))+((cj3*x13856)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13870=((1.0)*sj3);
IkReal x13871=(r11*sj5);
IkReal x13872=((1.0)*cj5*r10);
CheckValue<IkReal> x13873=IKPowWithIntegerCheck((x13871+(((-1.0)*x13872))),-1);
if(!x13873.valid){
continue;
}
CheckValue<IkReal> x13874=IKPowWithIntegerCheck((((cj3*x13871))+(((-1.0)*cj3*x13872))),-1);
if(!x13874.valid){
continue;
}
if( IKabs(((-1.0)*(x13873.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13874.value)*(((((-1.0)*cj5*r11*x13870))+(((-1.0)*r10*sj5*x13870)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13873.value)))+IKsqr(((x13874.value)*(((((-1.0)*cj5*r11*x13870))+(((-1.0)*r10*sj5*x13870))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13873.value)), ((x13874.value)*(((((-1.0)*cj5*r11*x13870))+(((-1.0)*r10*sj5*x13870))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13875=IKsin(j4);
IkReal x13876=IKcos(j4);
IkReal x13877=(sj1*sj2);
IkReal x13878=(r11*sj5);
IkReal x13879=(r00*sj3);
IkReal x13880=(cj5*r01);
IkReal x13881=((1.0)*cj1);
IkReal x13882=(cj3*sj5);
IkReal x13883=(cj5*r11);
IkReal x13884=(r10*sj3);
IkReal x13885=(cj2*sj1);
IkReal x13886=((1.0)*cj5);
IkReal x13887=((1.0)*sj3);
IkReal x13888=(r01*sj5);
IkReal x13889=(cj2*x13881);
IkReal x13890=(cj3*x13876);
IkReal x13891=(r22*x13875);
IkReal x13892=(cj5*x13876);
IkReal x13893=(x13875*x13886);
evalcond[0]=((-1.0)*r22*x13876);
evalcond[1]=(x13885+((cj3*x13891))+((cj1*sj2)));
evalcond[2]=((((-1.0)*r00*x13893))+((x13875*x13888)));
evalcond[3]=((1.0)+((x13875*x13878))+(((-1.0)*r10*x13893)));
evalcond[4]=(x13877+(((-1.0)*x13887*x13891))+(((-1.0)*x13889)));
evalcond[5]=(((sj5*x13884))+((sj3*x13883))+((x13878*x13890))+(((-1.0)*r10*x13886*x13890)));
evalcond[6]=(((cj3*x13883))+((r10*x13882))+((x13884*x13892))+(((-1.0)*x13876*x13878*x13887)));
evalcond[7]=(((r01*x13876*x13882))+((sj5*x13879))+((sj3*x13880))+x13877+(((-1.0)*r00*x13886*x13890))+(((-1.0)*x13889)));
evalcond[8]=((((-1.0)*sj2*x13881))+((cj3*x13880))+((x13879*x13892))+(((-1.0)*x13885))+((r00*x13882))+(((-1.0)*x13876*x13887*x13888)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13894=cj5*cj5;
IkReal x13895=((1.0)*cj3);
IkReal x13896=(r10*r21);
IkReal x13897=(cj5*sj5);
IkReal x13898=(r11*r21);
IkReal x13899=(r11*r20);
IkReal x13900=(r22*sj3);
IkReal x13901=(r10*r20);
IkReal x13902=((1.0)*sj3*x13894);
CheckValue<IkReal> x13903 = IKatan2WithCheck(IkReal((((cj5*r11*x13900))+((r10*sj5*x13900)))),IkReal((((sj3*x13896))+(((-1.0)*x13896*x13902))+(((-1.0)*sj3*x13897*x13901))+(((-1.0)*x13899*x13902))+((sj3*x13897*x13898)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13903.valid){
continue;
}
CheckValue<IkReal> x13904=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13894*x13895*x13901))+((cj3*x13894*x13898))+((cj3*x13896*x13897))+(((-1.0)*r12*r22*x13895))+((cj3*x13897*x13899))+(((-1.0)*x13895*x13898)))),-1);
if(!x13904.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13903.value)+(((1.5707963267949)*(x13904.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13905=IKsin(j4);
IkReal x13906=IKcos(j4);
IkReal x13907=(sj1*sj2);
IkReal x13908=(cj5*sj3);
IkReal x13909=(cj5*r10);
IkReal x13910=(r00*sj5);
IkReal x13911=(r11*sj5);
IkReal x13912=(cj3*cj5);
IkReal x13913=((1.0)*cj1);
IkReal x13914=(cj3*sj5);
IkReal x13915=(r21*sj5);
IkReal x13916=(cj2*sj1);
IkReal x13917=(sj3*sj5);
IkReal x13918=(r01*sj5);
IkReal x13919=(cj2*x13913);
IkReal x13920=((1.0)*x13906);
IkReal x13921=((1.0)*x13905);
IkReal x13922=(cj3*x13905);
IkReal x13923=(cj3*x13906);
evalcond[0]=((((-1.0)*r22*x13920))+(((-1.0)*cj5*r20*x13921))+((x13905*x13915)));
evalcond[1]=((((-1.0)*cj5*r00*x13921))+(((-1.0)*r02*x13920))+((x13905*x13918)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13920))+(((-1.0)*x13909*x13921))+((x13905*x13911)));
evalcond[3]=(((r10*x13917))+((x13911*x13923))+(((-1.0)*cj3*x13909*x13920))+((r11*x13908))+((r12*x13922)));
evalcond[4]=(((r10*x13914))+(((-1.0)*r12*sj3*x13921))+((r11*x13912))+((r10*x13906*x13908))+(((-1.0)*sj3*x13911*x13920)));
evalcond[5]=((((-1.0)*r20*x13912*x13920))+((cj1*sj2))+x13916+((r21*x13906*x13914))+((r22*x13922))+((r20*x13917))+((r21*x13908)));
evalcond[6]=(((r01*x13906*x13914))+x13907+((sj3*x13910))+((r01*x13908))+((r02*x13922))+(((-1.0)*x13919))+(((-1.0)*r00*x13912*x13920)));
evalcond[7]=(((r20*x13906*x13908))+(((-1.0)*sj3*x13915*x13920))+x13907+((r20*x13914))+((r21*x13912))+(((-1.0)*x13919))+(((-1.0)*r22*sj3*x13921)));
evalcond[8]=((((-1.0)*x13916))+(((-1.0)*sj2*x13913))+((r00*x13906*x13908))+((cj3*x13910))+((r01*x13912))+(((-1.0)*r02*sj3*x13921))+(((-1.0)*r01*x13917*x13920)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13924=((1.0)*cj5);
CheckValue<IkReal> x13925 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x13924)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13925.valid){
continue;
}
CheckValue<IkReal> x13926=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x13924)))),-1);
if(!x13926.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13925.value)+(((1.5707963267949)*(x13926.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13927=IKsin(j4);
IkReal x13928=IKcos(j4);
IkReal x13929=(sj1*sj2);
IkReal x13930=(cj5*sj3);
IkReal x13931=(cj5*r10);
IkReal x13932=(r00*sj5);
IkReal x13933=(r11*sj5);
IkReal x13934=(cj3*cj5);
IkReal x13935=((1.0)*cj1);
IkReal x13936=(cj3*sj5);
IkReal x13937=(r21*sj5);
IkReal x13938=(cj2*sj1);
IkReal x13939=(sj3*sj5);
IkReal x13940=(r01*sj5);
IkReal x13941=(cj2*x13935);
IkReal x13942=((1.0)*x13928);
IkReal x13943=((1.0)*x13927);
IkReal x13944=(cj3*x13927);
IkReal x13945=(cj3*x13928);
evalcond[0]=(((x13927*x13937))+(((-1.0)*cj5*r20*x13943))+(((-1.0)*r22*x13942)));
evalcond[1]=((((-1.0)*cj5*r00*x13943))+(((-1.0)*r02*x13942))+((x13927*x13940)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13942))+((x13927*x13933))+(((-1.0)*x13931*x13943)));
evalcond[3]=(((r11*x13930))+(((-1.0)*cj3*x13931*x13942))+((r10*x13939))+((r12*x13944))+((x13933*x13945)));
evalcond[4]=(((r11*x13934))+(((-1.0)*r12*sj3*x13943))+(((-1.0)*sj3*x13933*x13942))+((r10*x13936))+((r10*x13928*x13930)));
evalcond[5]=(((r20*x13939))+(((-1.0)*r20*x13934*x13942))+((r21*x13930))+((cj1*sj2))+x13938+((r22*x13944))+((r21*x13928*x13936)));
evalcond[6]=(((sj3*x13932))+((r01*x13930))+(((-1.0)*r00*x13934*x13942))+x13929+((r01*x13928*x13936))+(((-1.0)*x13941))+((r02*x13944)));
evalcond[7]=(((r20*x13936))+((r21*x13934))+x13929+(((-1.0)*x13941))+(((-1.0)*r22*sj3*x13943))+((r20*x13928*x13930))+(((-1.0)*sj3*x13937*x13942)));
evalcond[8]=((((-1.0)*r01*x13939*x13942))+(((-1.0)*sj2*x13935))+((cj3*x13932))+((r01*x13934))+((r00*x13928*x13930))+(((-1.0)*r02*sj3*x13943))+(((-1.0)*x13938)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13946=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13946.valid){
continue;
}
CheckValue<IkReal> x13947 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13947.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13946.value)))+(x13947.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13948=IKsin(j4);
IkReal x13949=IKcos(j4);
IkReal x13950=(sj1*sj2);
IkReal x13951=(cj5*sj3);
IkReal x13952=(cj5*r10);
IkReal x13953=(r00*sj5);
IkReal x13954=(r11*sj5);
IkReal x13955=(cj3*cj5);
IkReal x13956=((1.0)*cj1);
IkReal x13957=(cj3*sj5);
IkReal x13958=(r21*sj5);
IkReal x13959=(cj2*sj1);
IkReal x13960=(sj3*sj5);
IkReal x13961=(r01*sj5);
IkReal x13962=(cj2*x13956);
IkReal x13963=((1.0)*x13949);
IkReal x13964=((1.0)*x13948);
IkReal x13965=(cj3*x13948);
IkReal x13966=(cj3*x13949);
evalcond[0]=(((x13948*x13958))+(((-1.0)*r22*x13963))+(((-1.0)*cj5*r20*x13964)));
evalcond[1]=((((-1.0)*r02*x13963))+(((-1.0)*cj5*r00*x13964))+((x13948*x13961)));
evalcond[2]=((1.0)+((x13948*x13954))+(((-1.0)*r12*x13963))+(((-1.0)*x13952*x13964)));
evalcond[3]=(((r11*x13951))+((r10*x13960))+(((-1.0)*cj3*x13952*x13963))+((r12*x13965))+((x13954*x13966)));
evalcond[4]=(((r11*x13955))+(((-1.0)*r12*sj3*x13964))+((r10*x13949*x13951))+(((-1.0)*sj3*x13954*x13963))+((r10*x13957)));
evalcond[5]=(((cj1*sj2))+x13959+(((-1.0)*r20*x13955*x13963))+((r21*x13949*x13957))+((r21*x13951))+((r20*x13960))+((r22*x13965)));
evalcond[6]=(((r02*x13965))+(((-1.0)*r00*x13955*x13963))+((r01*x13951))+x13950+((r01*x13949*x13957))+(((-1.0)*x13962))+((sj3*x13953)));
evalcond[7]=((((-1.0)*r22*sj3*x13964))+x13950+((r21*x13955))+(((-1.0)*x13962))+((r20*x13949*x13951))+(((-1.0)*sj3*x13958*x13963))+((r20*x13957)));
evalcond[8]=(((cj3*x13953))+((r01*x13955))+(((-1.0)*r01*x13960*x13963))+(((-1.0)*r02*sj3*x13964))+((r00*x13949*x13951))+(((-1.0)*sj2*x13956))+(((-1.0)*x13959)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13967=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13967;
j4eval[1]=IKsign(x13967);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13968=((1.0)*cj5);
IkReal x13969=((((-1.0)*r21*x13968))+(((-1.0)*r20*sj5)));
j4eval[0]=x13969;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x13968))))));
j4eval[2]=IKsign(x13969);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13970=cj5*cj5;
IkReal x13971=(cj3*r21);
IkReal x13972=(cj5*sj5);
IkReal x13973=((1.0)*cj3);
IkReal x13974=((((-1.0)*r12*r22*x13973))+((r10*x13971*x13972))+((cj3*r11*r20*x13972))+(((-1.0)*r10*r20*x13970*x13973))+(((-1.0)*r11*x13971))+((r11*x13970*x13971)));
j4eval[0]=x13974;
j4eval[1]=IKsign(x13974);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13975=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13975;
j4eval[1]=IKsign(x13975);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13976=((1.0)*cj5);
IkReal x13977=((((-1.0)*r21*x13976))+(((-1.0)*r20*sj5)));
j4eval[0]=x13977;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x13976))))));
j4eval[2]=IKsign(x13977);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13978=cj5*cj5;
IkReal x13979=r11*r11;
IkReal x13980=(cj5*r10);
IkReal x13981=(r11*sj5);
IkReal x13982=(((x13978*x13979))+(((-1.0)*x13979))+(((-1.0)*x13978*(r10*r10)))+(((-1.0)*(r12*r12)))+(((2.0)*x13980*x13981)));
j4eval[0]=x13982;
j4eval[1]=((IKabs(r12))+(IKabs((x13980+(((-1.0)*x13981))))));
j4eval[2]=IKsign(x13982);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13983=cj5*cj5;
IkReal x13984=r11*r11;
IkReal x13985=(cj5*r10);
IkReal x13986=(r11*sj5);
CheckValue<IkReal> x13987 = IKatan2WithCheck(IkReal((x13985+(((-1.0)*x13986)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13987.valid){
continue;
}
CheckValue<IkReal> x13988=IKPowWithIntegerCheck(IKsign((((x13983*x13984))+(((-1.0)*x13983*(r10*r10)))+(((-1.0)*(r12*r12)))+(((-1.0)*x13984))+(((2.0)*x13985*x13986)))),-1);
if(!x13988.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13987.value)+(((1.5707963267949)*(x13988.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13989=IKsin(j4);
IkReal x13990=IKcos(j4);
IkReal x13991=(cj5*r10);
IkReal x13992=(r01*sj5);
IkReal x13993=(cj5*r00);
IkReal x13994=(cj5*r20);
IkReal x13995=((1.0)*x13990);
IkReal x13996=((1.0)*x13989);
IkReal x13997=(sj5*x13989);
evalcond[0]=(((r21*x13997))+(((-1.0)*x13994*x13996))+(((-1.0)*r22*x13995)));
evalcond[1]=((((-1.0)*x13993*x13996))+(((-1.0)*r02*x13995))+((x13989*x13992)));
evalcond[2]=((((-1.0)*r11*sj5*x13995))+(((-1.0)*r12*x13996))+((x13990*x13991)));
evalcond[3]=((-1.0)+((r11*x13997))+(((-1.0)*r12*x13995))+(((-1.0)*x13991*x13996)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x13992*x13995))+(((-1.0)*r02*x13996))+((cj1*sj2))+((x13990*x13993)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x13996))+(((-1.0)*r21*sj5*x13995))+((x13990*x13994)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13998=((1.0)*cj5);
CheckValue<IkReal> x13999=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13998))+(((-1.0)*r20*sj5)))),-1);
if(!x13999.valid){
continue;
}
CheckValue<IkReal> x14000 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x13998)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14000.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13999.value)))+(x14000.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14001=IKsin(j4);
IkReal x14002=IKcos(j4);
IkReal x14003=(cj5*r10);
IkReal x14004=(r01*sj5);
IkReal x14005=(cj5*r00);
IkReal x14006=(cj5*r20);
IkReal x14007=((1.0)*x14002);
IkReal x14008=((1.0)*x14001);
IkReal x14009=(sj5*x14001);
evalcond[0]=(((r21*x14009))+(((-1.0)*x14006*x14008))+(((-1.0)*r22*x14007)));
evalcond[1]=((((-1.0)*r02*x14007))+(((-1.0)*x14005*x14008))+((x14001*x14004)));
evalcond[2]=(((x14002*x14003))+(((-1.0)*r11*sj5*x14007))+(((-1.0)*r12*x14008)));
evalcond[3]=((-1.0)+((r11*x14009))+(((-1.0)*x14003*x14008))+(((-1.0)*r12*x14007)));
evalcond[4]=((((-1.0)*r02*x14008))+((cj2*sj1))+((cj1*sj2))+((x14002*x14005))+(((-1.0)*x14004*x14007)));
evalcond[5]=(((x14002*x14006))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x14007))+(((-1.0)*r22*x14008)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14010 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14010.valid){
continue;
}
CheckValue<IkReal> x14011=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x14011.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14010.value)+(((1.5707963267949)*(x14011.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14012=IKsin(j4);
IkReal x14013=IKcos(j4);
IkReal x14014=(cj5*r10);
IkReal x14015=(r01*sj5);
IkReal x14016=(cj5*r00);
IkReal x14017=(cj5*r20);
IkReal x14018=((1.0)*x14013);
IkReal x14019=((1.0)*x14012);
IkReal x14020=(sj5*x14012);
evalcond[0]=(((r21*x14020))+(((-1.0)*x14017*x14019))+(((-1.0)*r22*x14018)));
evalcond[1]=(((x14012*x14015))+(((-1.0)*r02*x14018))+(((-1.0)*x14016*x14019)));
evalcond[2]=((((-1.0)*r11*sj5*x14018))+(((-1.0)*r12*x14019))+((x14013*x14014)));
evalcond[3]=((-1.0)+((r11*x14020))+(((-1.0)*x14014*x14019))+(((-1.0)*r12*x14018)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x14015*x14018))+(((-1.0)*r02*x14019))+((cj1*sj2))+((x14013*x14016)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x14013*x14017))+(((-1.0)*r21*sj5*x14018))+(((-1.0)*r22*x14019)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14021=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x14021;
j4eval[1]=IKsign(x14021);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14022=((1.0)*cj5);
IkReal x14023=((((-1.0)*r21*x14022))+(((-1.0)*r20*sj5)));
j4eval[0]=x14023;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x14022))))));
j4eval[2]=IKsign(x14023);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14024=cj5*cj5;
IkReal x14025=r11*r11;
IkReal x14026=(r11*sj5);
IkReal x14027=(cj5*r10);
IkReal x14028=((r12*r12)+(((-1.0)*x14024*x14025))+(((-2.0)*x14026*x14027))+x14025+((x14024*(r10*r10))));
j4eval[0]=x14028;
j4eval[1]=IKsign(x14028);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x14027))+x14026))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14029=cj5*cj5;
IkReal x14030=r11*r11;
IkReal x14031=(cj5*r10);
IkReal x14032=(r11*sj5);
CheckValue<IkReal> x14033=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x14029*x14030))+((x14029*(r10*r10)))+x14030+(((-2.0)*x14031*x14032)))),-1);
if(!x14033.valid){
continue;
}
CheckValue<IkReal> x14034 = IKatan2WithCheck(IkReal(((((-1.0)*x14031))+x14032)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x14034.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14033.value)))+(x14034.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14035=IKcos(j4);
IkReal x14036=IKsin(j4);
IkReal x14037=(cj5*r00);
IkReal x14038=(cj5*r10);
IkReal x14039=(r21*sj5);
IkReal x14040=(cj5*r20);
IkReal x14041=((1.0)*x14035);
IkReal x14042=((1.0)*x14036);
IkReal x14043=(sj5*x14036);
IkReal x14044=(sj5*x14035);
evalcond[0]=(((r11*x14044))+(((-1.0)*x14038*x14041))+((r12*x14036)));
evalcond[1]=((((-1.0)*x14040*x14042))+((x14036*x14039))+(((-1.0)*r22*x14041)));
evalcond[2]=((((-1.0)*x14037*x14042))+((r01*x14043))+(((-1.0)*r02*x14041)));
evalcond[3]=((-1.0)+((r11*x14043))+(((-1.0)*x14038*x14042))+(((-1.0)*r12*x14041)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x14037*x14041))+((r01*x14044))+((cj1*sj2))+((r02*x14036)));
evalcond[5]=(((r22*x14036))+(((-1.0)*x14040*x14041))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x14035*x14039)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14045=((1.0)*cj5);
CheckValue<IkReal> x14046 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x14045)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14046.valid){
continue;
}
CheckValue<IkReal> x14047=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14045))+(((-1.0)*r20*sj5)))),-1);
if(!x14047.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14046.value)+(((1.5707963267949)*(x14047.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14048=IKcos(j4);
IkReal x14049=IKsin(j4);
IkReal x14050=(cj5*r00);
IkReal x14051=(cj5*r10);
IkReal x14052=(r21*sj5);
IkReal x14053=(cj5*r20);
IkReal x14054=((1.0)*x14048);
IkReal x14055=((1.0)*x14049);
IkReal x14056=(sj5*x14049);
IkReal x14057=(sj5*x14048);
evalcond[0]=(((r11*x14057))+(((-1.0)*x14051*x14054))+((r12*x14049)));
evalcond[1]=((((-1.0)*x14053*x14055))+(((-1.0)*r22*x14054))+((x14049*x14052)));
evalcond[2]=((((-1.0)*x14050*x14055))+(((-1.0)*r02*x14054))+((r01*x14056)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x14054))+((r11*x14056))+(((-1.0)*x14051*x14055)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x14050*x14054))+((cj1*sj2))+((r02*x14049))+((r01*x14057)));
evalcond[5]=(((r22*x14049))+(((-1.0)*x14053*x14054))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x14048*x14052)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14058 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14058.valid){
continue;
}
CheckValue<IkReal> x14059=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x14059.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14058.value)+(((1.5707963267949)*(x14059.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14060=IKcos(j4);
IkReal x14061=IKsin(j4);
IkReal x14062=(cj5*r00);
IkReal x14063=(cj5*r10);
IkReal x14064=(r21*sj5);
IkReal x14065=(cj5*r20);
IkReal x14066=((1.0)*x14060);
IkReal x14067=((1.0)*x14061);
IkReal x14068=(sj5*x14061);
IkReal x14069=(sj5*x14060);
evalcond[0]=(((r11*x14069))+((r12*x14061))+(((-1.0)*x14063*x14066)));
evalcond[1]=((((-1.0)*r22*x14066))+(((-1.0)*x14065*x14067))+((x14061*x14064)));
evalcond[2]=(((r01*x14068))+(((-1.0)*x14062*x14067))+(((-1.0)*r02*x14066)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x14066))+((r11*x14068))+(((-1.0)*x14063*x14067)));
evalcond[4]=(((r02*x14061))+((cj2*sj1))+((cj1*sj2))+((r01*x14069))+(((-1.0)*x14062*x14066)));
evalcond[5]=(((x14060*x14064))+((r22*x14061))+(((-1.0)*x14065*x14066))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14071 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14071)==0){
continue;
}
IkReal x14070=pow(x14071,-0.5);
CheckValue<IkReal> x14072 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14072.valid){
continue;
}
IkReal gconst36=((-1.0)*(x14072.value));
IkReal gconst37=((-1.0)*r01*x14070);
IkReal gconst38=(r00*x14070);
CheckValue<IkReal> x14073 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14073.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14073.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x14076 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14076.valid){
continue;
}
IkReal x14074=((-1.0)*(x14076.value));
IkReal x14075=x14070;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst37;
cj5=gconst38;
j5=x14074;
IkReal gconst36=x14074;
IkReal gconst37=((-1.0)*r01*x14075);
IkReal gconst38=(r00*x14075);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14079 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14079.valid){
continue;
}
IkReal x14077=((-1.0)*(x14079.value));
IkReal x14078=x14070;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst37;
cj5=gconst38;
j5=x14077;
IkReal gconst36=x14077;
IkReal gconst37=((-1.0)*r01*x14078);
IkReal gconst38=(r00*x14078);
CheckValue<IkReal> x14087=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x14087.valid){
continue;
}
IkReal x14080=x14087.value;
IkReal x14081=(sj3*x14080);
IkReal x14082=(r11*x14081);
IkReal x14083=(r21*x14081);
IkReal x14084=(r20*x14081);
IkReal x14085=(r10*x14081);
IkReal x14086=(r00*r01*x14081);
j4eval[0]=IKsign((((r00*r01*r10*x14083))+((r10*x14084*(r00*r00)))+((r12*r22*sj3))+((r00*r01*r20*x14082))+((r21*x14082*(r01*r01)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14088=gconst38*gconst38;
IkReal x14089=gconst37*gconst37;
IkReal x14090=((1.0)*cj3);
IkReal x14091=(r11*r20);
IkReal x14092=(r10*sj3);
IkReal x14093=(gconst37*gconst38);
IkReal x14094=(r11*sj3);
IkReal x14095=(r21*x14089);
IkReal x14096=(cj3*x14093);
CheckValue<IkReal> x14097 = IKatan2WithCheck(IkReal((((gconst37*r22*x14092))+((gconst38*r22*x14094)))),IkReal(((((-1.0)*r20*x14092*x14093))+((r21*x14093*x14094))+(((-1.0)*sj3*x14088*x14091))+((x14092*x14095)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14097.valid){
continue;
}
CheckValue<IkReal> x14098=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x14090*x14095))+((x14091*x14096))+(((-1.0)*r12*r22*x14090))+((r10*r21*x14096))+(((-1.0)*r10*r20*x14088*x14090)))),-1);
if(!x14098.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14097.value)+(((1.5707963267949)*(x14098.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14099=IKsin(j4);
IkReal x14100=IKcos(j4);
IkReal x14101=(cj2*sj1);
IkReal x14102=(cj1*sj2);
IkReal x14103=(gconst38*r21);
IkReal x14104=(cj3*r20);
IkReal x14105=(gconst38*r10);
IkReal x14106=(cj3*gconst37);
IkReal x14107=(sj1*sj2);
IkReal x14108=(gconst38*r00);
IkReal x14109=(cj1*cj2);
IkReal x14110=(gconst37*sj3);
IkReal x14111=(gconst38*r20);
IkReal x14112=(gconst38*r01);
IkReal x14113=(gconst38*r11);
IkReal x14114=((1.0)*x14100);
IkReal x14115=((1.0)*x14099);
IkReal x14116=(cj3*x14099);
IkReal x14117=(sj3*x14100);
IkReal x14118=(gconst37*x14099);
IkReal x14119=(x14102+x14101);
evalcond[0]=((((-1.0)*r22*x14114))+(((-1.0)*x14111*x14115))+((r21*x14118)));
evalcond[1]=((((-1.0)*x14108*x14115))+((r01*x14118))+(((-1.0)*r02*x14114)));
evalcond[2]=((-1.0)+((r11*x14118))+(((-1.0)*x14105*x14115))+(((-1.0)*r12*x14114)));
evalcond[3]=(((sj3*x14113))+((r10*x14110))+(((-1.0)*cj3*x14105*x14114))+((r12*x14116))+((r11*x14100*x14106)));
evalcond[4]=((((-1.0)*r11*x14110*x14114))+((cj3*x14113))+((x14105*x14117))+((r10*x14106))+(((-1.0)*r12*sj3*x14115)));
evalcond[5]=(((sj3*x14103))+((r21*x14100*x14106))+((r22*x14116))+(((-1.0)*gconst38*x14104*x14114))+((r20*x14110))+x14119);
evalcond[6]=(((r02*x14116))+((sj3*x14112))+((r00*x14110))+(((-1.0)*x14107))+x14109+((r01*x14100*x14106))+(((-1.0)*cj3*x14108*x14114)));
evalcond[7]=((((-1.0)*r01*x14110*x14114))+((r00*x14106))+((x14108*x14117))+(((-1.0)*r02*sj3*x14115))+((cj3*x14112))+x14119);
evalcond[8]=(((x14111*x14117))+(((-1.0)*r21*x14110*x14114))+((cj3*x14103))+(((-1.0)*x14109))+x14107+((gconst37*x14104))+(((-1.0)*r22*sj3*x14115)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14120=gconst38*gconst38;
IkReal x14121=gconst37*gconst37;
IkReal x14122=(gconst37*r10);
IkReal x14123=(cj3*r22);
IkReal x14124=((1.0)*gconst38);
IkReal x14125=(r21*sj3);
IkReal x14126=(gconst38*r11);
IkReal x14127=(cj3*r20);
IkReal x14128=(cj3*r21);
IkReal x14129=(r20*sj3);
CheckValue<IkReal> x14130 = IKatan2WithCheck(IkReal((((x14123*x14126))+((x14122*x14123)))),IkReal((((r10*x14121*x14128))+(((-1.0)*x14122*x14124*x14127))+((gconst37*x14126*x14128))+(((-1.0)*r11*x14120*x14127)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14130.valid){
continue;
}
CheckValue<IkReal> x14131=IKPowWithIntegerCheck(IKsign((((r10*x14120*x14129))+((r12*r22*sj3))+(((-1.0)*x14122*x14124*x14125))+((r11*x14121*x14125))+(((-1.0)*gconst37*r11*x14124*x14129)))),-1);
if(!x14131.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14130.value)+(((1.5707963267949)*(x14131.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14132=IKsin(j4);
IkReal x14133=IKcos(j4);
IkReal x14134=(cj2*sj1);
IkReal x14135=(cj1*sj2);
IkReal x14136=(gconst38*r21);
IkReal x14137=(cj3*r20);
IkReal x14138=(gconst38*r10);
IkReal x14139=(cj3*gconst37);
IkReal x14140=(sj1*sj2);
IkReal x14141=(gconst38*r00);
IkReal x14142=(cj1*cj2);
IkReal x14143=(gconst37*sj3);
IkReal x14144=(gconst38*r20);
IkReal x14145=(gconst38*r01);
IkReal x14146=(gconst38*r11);
IkReal x14147=((1.0)*x14133);
IkReal x14148=((1.0)*x14132);
IkReal x14149=(cj3*x14132);
IkReal x14150=(sj3*x14133);
IkReal x14151=(gconst37*x14132);
IkReal x14152=(x14134+x14135);
evalcond[0]=((((-1.0)*x14144*x14148))+(((-1.0)*r22*x14147))+((r21*x14151)));
evalcond[1]=(((r01*x14151))+(((-1.0)*x14141*x14148))+(((-1.0)*r02*x14147)));
evalcond[2]=((-1.0)+((r11*x14151))+(((-1.0)*x14138*x14148))+(((-1.0)*r12*x14147)));
evalcond[3]=(((r10*x14143))+(((-1.0)*cj3*x14138*x14147))+((r11*x14133*x14139))+((sj3*x14146))+((r12*x14149)));
evalcond[4]=((((-1.0)*r11*x14143*x14147))+((cj3*x14146))+((x14138*x14150))+(((-1.0)*r12*sj3*x14148))+((r10*x14139)));
evalcond[5]=((((-1.0)*gconst38*x14137*x14147))+((sj3*x14136))+((r21*x14133*x14139))+((r22*x14149))+x14152+((r20*x14143)));
evalcond[6]=((((-1.0)*cj3*x14141*x14147))+((r02*x14149))+((r01*x14133*x14139))+((sj3*x14145))+((r00*x14143))+x14142+(((-1.0)*x14140)));
evalcond[7]=((((-1.0)*r01*x14143*x14147))+(((-1.0)*r02*sj3*x14148))+((cj3*x14145))+x14152+((r00*x14139))+((x14141*x14150)));
evalcond[8]=((((-1.0)*r22*sj3*x14148))+((gconst37*x14137))+((x14144*x14150))+(((-1.0)*r21*x14143*x14147))+x14140+(((-1.0)*x14142))+((cj3*x14136)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14153=((1.0)*gconst38);
CheckValue<IkReal> x14154 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst37*r01))+(((-1.0)*r00*x14153)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14154.valid){
continue;
}
CheckValue<IkReal> x14155=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst37*r20))+(((-1.0)*r21*x14153)))),-1);
if(!x14155.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14154.value)+(((1.5707963267949)*(x14155.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14156=IKsin(j4);
IkReal x14157=IKcos(j4);
IkReal x14158=(cj2*sj1);
IkReal x14159=(cj1*sj2);
IkReal x14160=(gconst38*r21);
IkReal x14161=(cj3*r20);
IkReal x14162=(gconst38*r10);
IkReal x14163=(cj3*gconst37);
IkReal x14164=(sj1*sj2);
IkReal x14165=(gconst38*r00);
IkReal x14166=(cj1*cj2);
IkReal x14167=(gconst37*sj3);
IkReal x14168=(gconst38*r20);
IkReal x14169=(gconst38*r01);
IkReal x14170=(gconst38*r11);
IkReal x14171=((1.0)*x14157);
IkReal x14172=((1.0)*x14156);
IkReal x14173=(cj3*x14156);
IkReal x14174=(sj3*x14157);
IkReal x14175=(gconst37*x14156);
IkReal x14176=(x14158+x14159);
evalcond[0]=((((-1.0)*x14168*x14172))+((r21*x14175))+(((-1.0)*r22*x14171)));
evalcond[1]=(((r01*x14175))+(((-1.0)*r02*x14171))+(((-1.0)*x14165*x14172)));
evalcond[2]=((-1.0)+((r11*x14175))+(((-1.0)*x14162*x14172))+(((-1.0)*r12*x14171)));
evalcond[3]=(((r11*x14157*x14163))+((r10*x14167))+((r12*x14173))+((sj3*x14170))+(((-1.0)*cj3*x14162*x14171)));
evalcond[4]=((((-1.0)*r12*sj3*x14172))+((r10*x14163))+(((-1.0)*r11*x14167*x14171))+((cj3*x14170))+((x14162*x14174)));
evalcond[5]=(((r22*x14173))+((sj3*x14160))+((r21*x14157*x14163))+(((-1.0)*gconst38*x14161*x14171))+x14176+((r20*x14167)));
evalcond[6]=(((sj3*x14169))+((r02*x14173))+((r00*x14167))+x14166+(((-1.0)*cj3*x14165*x14171))+((r01*x14157*x14163))+(((-1.0)*x14164)));
evalcond[7]=(((cj3*x14169))+((r00*x14163))+((x14165*x14174))+x14176+(((-1.0)*r01*x14167*x14171))+(((-1.0)*r02*sj3*x14172)));
evalcond[8]=(((cj3*x14160))+(((-1.0)*r21*x14167*x14171))+((gconst37*x14161))+x14164+((x14168*x14174))+(((-1.0)*r22*sj3*x14172))+(((-1.0)*x14166)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14178 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14178)==0){
continue;
}
IkReal x14177=pow(x14178,-0.5);
CheckValue<IkReal> x14179 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14179.valid){
continue;
}
IkReal gconst39=((3.14159265358979)+(((-1.0)*(x14179.value))));
IkReal gconst40=((1.0)*r01*x14177);
IkReal gconst41=((-1.0)*r00*x14177);
CheckValue<IkReal> x14180 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14180.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14180.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x14183 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14183.valid){
continue;
}
IkReal x14181=((1.0)*(x14183.value));
IkReal x14182=x14177;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x14181)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x14181)));
IkReal gconst40=((1.0)*r01*x14182);
IkReal gconst41=((-1.0)*r00*x14182);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14186 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14186.valid){
continue;
}
IkReal x14184=((1.0)*(x14186.value));
IkReal x14185=x14177;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x14184)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x14184)));
IkReal gconst40=((1.0)*r01*x14185);
IkReal gconst41=((-1.0)*r00*x14185);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14187=gconst41*gconst41;
IkReal x14188=gconst40*gconst40;
IkReal x14189=(gconst40*r10);
IkReal x14190=(r22*sj3);
IkReal x14191=(r11*sj3);
IkReal x14192=((1.0)*cj3);
IkReal x14193=(gconst41*r21);
IkReal x14194=(gconst41*r20);
IkReal x14195=(r21*x14188);
IkReal x14196=((1.0)*r20*x14187);
CheckValue<IkReal> x14197=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22*x14192))+((cj3*x14189*x14193))+(((-1.0)*r11*x14192*x14195))+((cj3*gconst40*r11*x14194))+(((-1.0)*r10*r20*x14187*x14192)))),-1);
if(!x14197.valid){
continue;
}
CheckValue<IkReal> x14198 = IKatan2WithCheck(IkReal((((gconst41*r11*x14190))+((x14189*x14190)))),IkReal((((r10*sj3*x14195))+(((-1.0)*sj3*x14189*x14194))+(((-1.0)*x14191*x14196))+((gconst40*x14191*x14193)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14198.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14197.value)))+(x14198.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14199=IKsin(j4);
IkReal x14200=IKcos(j4);
IkReal x14201=(cj2*sj1);
IkReal x14202=(cj1*sj2);
IkReal x14203=(gconst40*sj3);
IkReal x14204=(gconst41*sj3);
IkReal x14205=(gconst41*r20);
IkReal x14206=(cj3*gconst41);
IkReal x14207=(sj1*sj2);
IkReal x14208=(cj1*cj2);
IkReal x14209=(cj3*gconst40);
IkReal x14210=((1.0)*x14200);
IkReal x14211=((1.0)*x14199);
IkReal x14212=(cj3*x14199);
IkReal x14213=(gconst40*x14199);
IkReal x14214=(x14201+x14202);
IkReal x14215=(x14200*x14209);
evalcond[0]=((((-1.0)*x14205*x14211))+(((-1.0)*r22*x14210))+((r21*x14213)));
evalcond[1]=((((-1.0)*gconst41*r00*x14211))+(((-1.0)*r02*x14210))+((r01*x14213)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x14210))+((r11*x14213))+(((-1.0)*gconst41*r10*x14211)));
evalcond[3]=(((r11*x14215))+(((-1.0)*r10*x14206*x14210))+((r12*x14212))+((r10*x14203))+((r11*x14204)));
evalcond[4]=((((-1.0)*r11*x14203*x14210))+((r10*x14209))+((r10*x14200*x14204))+(((-1.0)*r12*sj3*x14211))+((r11*x14206)));
evalcond[5]=(((r22*x14212))+((r20*x14203))+((r21*x14204))+((r21*x14215))+(((-1.0)*cj3*x14205*x14210))+x14214);
evalcond[6]=((((-1.0)*r00*x14206*x14210))+((r01*x14215))+((r00*x14203))+((r01*x14204))+(((-1.0)*x14207))+((r02*x14212))+x14208);
evalcond[7]=((((-1.0)*r02*sj3*x14211))+((r00*x14200*x14204))+((r00*x14209))+(((-1.0)*r01*x14203*x14210))+((r01*x14206))+x14214);
evalcond[8]=(((r20*x14209))+((r21*x14206))+(((-1.0)*r21*x14203*x14210))+(((-1.0)*r22*sj3*x14211))+(((-1.0)*x14208))+((r20*x14200*x14204))+x14207);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14216=((1.0)*gconst41);
CheckValue<IkReal> x14217=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14216))+(((-1.0)*gconst40*r20)))),-1);
if(!x14217.valid){
continue;
}
CheckValue<IkReal> x14218 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x14216))+((gconst40*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14218.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14217.value)))+(x14218.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14219=IKsin(j4);
IkReal x14220=IKcos(j4);
IkReal x14221=(cj2*sj1);
IkReal x14222=(cj1*sj2);
IkReal x14223=(gconst40*sj3);
IkReal x14224=(gconst41*sj3);
IkReal x14225=(gconst41*r20);
IkReal x14226=(cj3*gconst41);
IkReal x14227=(sj1*sj2);
IkReal x14228=(cj1*cj2);
IkReal x14229=(cj3*gconst40);
IkReal x14230=((1.0)*x14220);
IkReal x14231=((1.0)*x14219);
IkReal x14232=(cj3*x14219);
IkReal x14233=(gconst40*x14219);
IkReal x14234=(x14222+x14221);
IkReal x14235=(x14220*x14229);
evalcond[0]=(((r21*x14233))+(((-1.0)*x14225*x14231))+(((-1.0)*r22*x14230)));
evalcond[1]=((((-1.0)*gconst41*r00*x14231))+(((-1.0)*r02*x14230))+((r01*x14233)));
evalcond[2]=((-1.0)+(((-1.0)*gconst41*r10*x14231))+(((-1.0)*r12*x14230))+((r11*x14233)));
evalcond[3]=(((r10*x14223))+(((-1.0)*r10*x14226*x14230))+((r11*x14224))+((r12*x14232))+((r11*x14235)));
evalcond[4]=(((r10*x14220*x14224))+((r10*x14229))+(((-1.0)*r12*sj3*x14231))+(((-1.0)*r11*x14223*x14230))+((r11*x14226)));
evalcond[5]=(((r20*x14223))+((r21*x14235))+((r21*x14224))+((r22*x14232))+(((-1.0)*cj3*x14225*x14230))+x14234);
evalcond[6]=(((r02*x14232))+(((-1.0)*r00*x14226*x14230))+((r01*x14235))+((r00*x14223))+(((-1.0)*x14227))+((r01*x14224))+x14228);
evalcond[7]=(((r00*x14220*x14224))+(((-1.0)*r02*sj3*x14231))+((r00*x14229))+(((-1.0)*r01*x14223*x14230))+((r01*x14226))+x14234);
evalcond[8]=(((r20*x14229))+((r20*x14220*x14224))+((r21*x14226))+(((-1.0)*r22*sj3*x14231))+(((-1.0)*x14228))+(((-1.0)*r21*x14223*x14230))+x14227);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14236 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst40*r21))+(((-1.0)*gconst41*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14236.valid){
continue;
}
CheckValue<IkReal> x14237=IKPowWithIntegerCheck(IKsign((((gconst41*r01))+((gconst40*r00)))),-1);
if(!x14237.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14236.value)+(((1.5707963267949)*(x14237.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14238=IKsin(j4);
IkReal x14239=IKcos(j4);
IkReal x14240=(cj2*sj1);
IkReal x14241=(cj1*sj2);
IkReal x14242=(gconst40*sj3);
IkReal x14243=(gconst41*sj3);
IkReal x14244=(gconst41*r20);
IkReal x14245=(cj3*gconst41);
IkReal x14246=(sj1*sj2);
IkReal x14247=(cj1*cj2);
IkReal x14248=(cj3*gconst40);
IkReal x14249=((1.0)*x14239);
IkReal x14250=((1.0)*x14238);
IkReal x14251=(cj3*x14238);
IkReal x14252=(gconst40*x14238);
IkReal x14253=(x14240+x14241);
IkReal x14254=(x14239*x14248);
evalcond[0]=(((r21*x14252))+(((-1.0)*r22*x14249))+(((-1.0)*x14244*x14250)));
evalcond[1]=((((-1.0)*gconst41*r00*x14250))+(((-1.0)*r02*x14249))+((r01*x14252)));
evalcond[2]=((-1.0)+(((-1.0)*gconst41*r10*x14250))+((r11*x14252))+(((-1.0)*r12*x14249)));
evalcond[3]=(((r12*x14251))+((r11*x14254))+((r11*x14243))+((r10*x14242))+(((-1.0)*r10*x14245*x14249)));
evalcond[4]=((((-1.0)*r11*x14242*x14249))+((r10*x14239*x14243))+((r11*x14245))+((r10*x14248))+(((-1.0)*r12*sj3*x14250)));
evalcond[5]=(((r21*x14243))+((r21*x14254))+(((-1.0)*cj3*x14244*x14249))+((r20*x14242))+x14253+((r22*x14251)));
evalcond[6]=((((-1.0)*x14246))+((r02*x14251))+((r01*x14243))+(((-1.0)*r00*x14245*x14249))+x14247+((r00*x14242))+((r01*x14254)));
evalcond[7]=((((-1.0)*r02*sj3*x14250))+((r00*x14239*x14243))+((r01*x14245))+(((-1.0)*r01*x14242*x14249))+x14253+((r00*x14248)));
evalcond[8]=(((r21*x14245))+(((-1.0)*x14247))+(((-1.0)*r22*sj3*x14250))+(((-1.0)*r21*x14242*x14249))+((r20*x14248))+((r20*x14239*x14243))+x14246);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14255=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14255);
rxp1_1=(px*r21);
rxp1_2=(r11*x14255);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x14256=(r11*sj5);
IkReal x14257=((1.0)*cj5*r10);
j4eval[0]=((((-1.0)*x14257))+x14256);
j4eval[1]=(((cj3*x14256))+(((-1.0)*cj3*x14257)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14258=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14258);
rxp1_1=(px*r21);
rxp1_2=(r11*x14258);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x14259=(cj5*r10);
IkReal x14260=(r11*sj5);
j4eval[0]=(x14260+(((-1.0)*x14259)));
j4eval[1]=(((sj3*x14259))+(((-1.0)*sj3*x14260)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14261=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14261);
rxp1_1=(px*r21);
rxp1_2=(r11*x14261);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=(((cj3*r11*sj5))+(((-1.0)*cj3*cj5*r10)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14262=((1.0)*r10);
CheckValue<IkReal> x14263=IKPowWithIntegerCheck(cj3,-1);
if(!x14263.valid){
continue;
}
CheckValue<IkReal> x14264=IKPowWithIntegerCheck(r02,-1);
if(!x14264.valid){
continue;
}
CheckValue<IkReal> x14265=IKPowWithIntegerCheck((((cj3*r11*sj5))+(((-1.0)*cj3*cj5*x14262))),-1);
if(!x14265.valid){
continue;
}
if( IKabs(((x14263.value)*(x14264.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14265.value)*(((((-1.0)*sj3*sj5*x14262))+(((-1.0)*cj5*r11*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14263.value)*(x14264.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x14265.value)*(((((-1.0)*sj3*sj5*x14262))+(((-1.0)*cj5*r11*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14263.value)*(x14264.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x14265.value)*(((((-1.0)*sj3*sj5*x14262))+(((-1.0)*cj5*r11*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14266=IKsin(j4);
IkReal x14267=IKcos(j4);
IkReal x14268=(cj2*sj1);
IkReal x14269=(cj1*sj2);
IkReal x14270=(cj5*r10);
IkReal x14271=(sj1*sj2);
IkReal x14272=(cj5*sj3);
IkReal x14273=(r11*sj5);
IkReal x14274=(cj3*sj5);
IkReal x14275=(r21*sj5);
IkReal x14276=(cj1*cj2);
IkReal x14277=(cj3*cj5);
IkReal x14278=(sj3*sj5);
IkReal x14279=((1.0)*x14266);
IkReal x14280=(r20*x14267);
IkReal x14281=(cj3*x14267);
IkReal x14282=(sj3*x14267);
IkReal x14283=(x14268+x14269);
evalcond[0]=((-1.0)*r02*x14267);
evalcond[1]=(((x14266*x14275))+(((-1.0)*cj5*r20*x14279)));
evalcond[2]=((((-1.0)*x14271))+((cj3*r02*x14266))+x14276);
evalcond[3]=((((-1.0)*r02*sj3*x14279))+x14283);
evalcond[4]=((-1.0)+((x14266*x14273))+(((-1.0)*x14270*x14279)));
evalcond[5]=(((x14273*x14281))+((r11*x14272))+(((-1.0)*x14270*x14281))+((r10*x14278)));
evalcond[6]=((((-1.0)*x14273*x14282))+((r11*x14277))+((r10*x14274))+((x14270*x14282)));
evalcond[7]=(((r21*x14272))+((r21*x14267*x14274))+((r20*x14278))+(((-1.0)*x14277*x14280))+x14283);
evalcond[8]=((((-1.0)*x14276))+((x14272*x14280))+((r21*x14277))+((r20*x14274))+(((-1.0)*x14275*x14282))+x14271);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14284=(cj5*r10);
IkReal x14285=((1.0)*r11);
CheckValue<IkReal> x14286=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*x14284))),-1);
if(!x14286.valid){
continue;
}
CheckValue<IkReal> x14287=IKPowWithIntegerCheck(((((-1.0)*sj3*sj5*x14285))+((sj3*x14284))),-1);
if(!x14287.valid){
continue;
}
if( IKabs(x14286.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14287.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14285)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14286.value)+IKsqr(((x14287.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14285))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14286.value, ((x14287.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14285))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14288=IKsin(j4);
IkReal x14289=IKcos(j4);
IkReal x14290=(cj2*sj1);
IkReal x14291=(cj1*sj2);
IkReal x14292=(cj5*r10);
IkReal x14293=(sj1*sj2);
IkReal x14294=(cj5*sj3);
IkReal x14295=(r11*sj5);
IkReal x14296=(cj3*sj5);
IkReal x14297=(r21*sj5);
IkReal x14298=(cj1*cj2);
IkReal x14299=(cj3*cj5);
IkReal x14300=(sj3*sj5);
IkReal x14301=((1.0)*x14288);
IkReal x14302=(r20*x14289);
IkReal x14303=(cj3*x14289);
IkReal x14304=(sj3*x14289);
IkReal x14305=(x14291+x14290);
evalcond[0]=((-1.0)*r02*x14289);
evalcond[1]=((((-1.0)*cj5*r20*x14301))+((x14288*x14297)));
evalcond[2]=(((cj3*r02*x14288))+(((-1.0)*x14293))+x14298);
evalcond[3]=((((-1.0)*r02*sj3*x14301))+x14305);
evalcond[4]=((-1.0)+(((-1.0)*x14292*x14301))+((x14288*x14295)));
evalcond[5]=(((r11*x14294))+(((-1.0)*x14292*x14303))+((r10*x14300))+((x14295*x14303)));
evalcond[6]=(((r10*x14296))+((x14292*x14304))+((r11*x14299))+(((-1.0)*x14295*x14304)));
evalcond[7]=(((r20*x14300))+((r21*x14294))+((r21*x14289*x14296))+(((-1.0)*x14299*x14302))+x14305);
evalcond[8]=(((r20*x14296))+((r21*x14299))+(((-1.0)*x14298))+(((-1.0)*x14297*x14304))+x14293+((x14294*x14302)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14306=((1.0)*r10);
IkReal x14307=(r11*sj5);
CheckValue<IkReal> x14308=IKPowWithIntegerCheck(((((-1.0)*cj5*x14306))+x14307),-1);
if(!x14308.valid){
continue;
}
CheckValue<IkReal> x14309=IKPowWithIntegerCheck(((((-1.0)*cj3*cj5*x14306))+((cj3*x14307))),-1);
if(!x14309.valid){
continue;
}
if( IKabs(x14308.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14309.value)*(((((-1.0)*sj3*sj5*x14306))+(((-1.0)*cj5*r11*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14308.value)+IKsqr(((x14309.value)*(((((-1.0)*sj3*sj5*x14306))+(((-1.0)*cj5*r11*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14308.value, ((x14309.value)*(((((-1.0)*sj3*sj5*x14306))+(((-1.0)*cj5*r11*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14310=IKsin(j4);
IkReal x14311=IKcos(j4);
IkReal x14312=(cj2*sj1);
IkReal x14313=(cj1*sj2);
IkReal x14314=(cj5*r10);
IkReal x14315=(sj1*sj2);
IkReal x14316=(cj5*sj3);
IkReal x14317=(r11*sj5);
IkReal x14318=(cj3*sj5);
IkReal x14319=(r21*sj5);
IkReal x14320=(cj1*cj2);
IkReal x14321=(cj3*cj5);
IkReal x14322=(sj3*sj5);
IkReal x14323=((1.0)*x14310);
IkReal x14324=(r20*x14311);
IkReal x14325=(cj3*x14311);
IkReal x14326=(sj3*x14311);
IkReal x14327=(x14312+x14313);
evalcond[0]=((-1.0)*r02*x14311);
evalcond[1]=((((-1.0)*cj5*r20*x14323))+((x14310*x14319)));
evalcond[2]=((((-1.0)*x14315))+((cj3*r02*x14310))+x14320);
evalcond[3]=((((-1.0)*r02*sj3*x14323))+x14327);
evalcond[4]=((-1.0)+(((-1.0)*x14314*x14323))+((x14310*x14317)));
evalcond[5]=((((-1.0)*x14314*x14325))+((r11*x14316))+((r10*x14322))+((x14317*x14325)));
evalcond[6]=(((x14314*x14326))+((r11*x14321))+(((-1.0)*x14317*x14326))+((r10*x14318)));
evalcond[7]=((((-1.0)*x14321*x14324))+((r20*x14322))+((r21*x14316))+x14327+((r21*x14311*x14318)));
evalcond[8]=(((r20*x14318))+(((-1.0)*x14319*x14326))+((r21*x14321))+((x14316*x14324))+x14315+(((-1.0)*x14320)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14328=cj5*cj5;
IkReal x14329=((1.0)*cj3);
IkReal x14330=(r10*r21);
IkReal x14331=(cj5*sj5);
IkReal x14332=(r11*r21);
IkReal x14333=(r11*r20);
IkReal x14334=(r22*sj3);
IkReal x14335=(r10*r20);
IkReal x14336=((1.0)*sj3*x14328);
CheckValue<IkReal> x14337=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14329*x14332))+((cj3*x14330*x14331))+((cj3*x14328*x14332))+(((-1.0)*x14328*x14329*x14335))+((cj3*x14331*x14333))+(((-1.0)*r12*r22*x14329)))),-1);
if(!x14337.valid){
continue;
}
CheckValue<IkReal> x14338 = IKatan2WithCheck(IkReal((((r10*sj5*x14334))+((cj5*r11*x14334)))),IkReal((((sj3*x14331*x14332))+(((-1.0)*x14330*x14336))+(((-1.0)*x14333*x14336))+((sj3*x14330))+(((-1.0)*sj3*x14331*x14335)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14338.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14337.value)))+(x14338.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14339=IKsin(j4);
IkReal x14340=IKcos(j4);
IkReal x14341=(cj2*sj1);
IkReal x14342=(cj1*sj2);
IkReal x14343=(cj5*sj3);
IkReal x14344=(cj5*r10);
IkReal x14345=(r00*sj5);
IkReal x14346=(sj1*sj2);
IkReal x14347=(r11*sj5);
IkReal x14348=(cj3*cj5);
IkReal x14349=(cj3*sj5);
IkReal x14350=(r21*sj5);
IkReal x14351=(cj1*cj2);
IkReal x14352=(sj3*sj5);
IkReal x14353=(r01*sj5);
IkReal x14354=((1.0)*x14340);
IkReal x14355=((1.0)*x14339);
IkReal x14356=(cj3*x14339);
IkReal x14357=(cj3*x14340);
IkReal x14358=(x14341+x14342);
evalcond[0]=((((-1.0)*cj5*r20*x14355))+((x14339*x14350))+(((-1.0)*r22*x14354)));
evalcond[1]=((((-1.0)*cj5*r00*x14355))+(((-1.0)*r02*x14354))+((x14339*x14353)));
evalcond[2]=((-1.0)+(((-1.0)*x14344*x14355))+(((-1.0)*r12*x14354))+((x14339*x14347)));
evalcond[3]=(((x14347*x14357))+((r12*x14356))+((r11*x14343))+((r10*x14352))+(((-1.0)*cj3*x14344*x14354)));
evalcond[4]=(((r11*x14348))+((r10*x14349))+(((-1.0)*r12*sj3*x14355))+(((-1.0)*sj3*x14347*x14354))+((r10*x14340*x14343)));
evalcond[5]=(((r21*x14340*x14349))+((r20*x14352))+(((-1.0)*r20*x14348*x14354))+((r21*x14343))+((r22*x14356))+x14358);
evalcond[6]=(((r02*x14356))+((r01*x14343))+(((-1.0)*x14346))+(((-1.0)*r00*x14348*x14354))+((sj3*x14345))+x14351+((r01*x14340*x14349)));
evalcond[7]=(((cj3*x14345))+((r01*x14348))+((r00*x14340*x14343))+x14358+(((-1.0)*r01*x14352*x14354))+(((-1.0)*r02*sj3*x14355)));
evalcond[8]=((((-1.0)*r22*sj3*x14355))+((r21*x14348))+(((-1.0)*x14351))+(((-1.0)*sj3*x14350*x14354))+((r20*x14349))+x14346+((r20*x14340*x14343)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14359=((1.0)*cj5);
CheckValue<IkReal> x14360=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14359))+(((-1.0)*r20*sj5)))),-1);
if(!x14360.valid){
continue;
}
CheckValue<IkReal> x14361 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x14359)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14361.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14360.value)))+(x14361.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14362=IKsin(j4);
IkReal x14363=IKcos(j4);
IkReal x14364=(cj2*sj1);
IkReal x14365=(cj1*sj2);
IkReal x14366=(cj5*sj3);
IkReal x14367=(cj5*r10);
IkReal x14368=(r00*sj5);
IkReal x14369=(sj1*sj2);
IkReal x14370=(r11*sj5);
IkReal x14371=(cj3*cj5);
IkReal x14372=(cj3*sj5);
IkReal x14373=(r21*sj5);
IkReal x14374=(cj1*cj2);
IkReal x14375=(sj3*sj5);
IkReal x14376=(r01*sj5);
IkReal x14377=((1.0)*x14363);
IkReal x14378=((1.0)*x14362);
IkReal x14379=(cj3*x14362);
IkReal x14380=(cj3*x14363);
IkReal x14381=(x14365+x14364);
evalcond[0]=(((x14362*x14373))+(((-1.0)*r22*x14377))+(((-1.0)*cj5*r20*x14378)));
evalcond[1]=(((x14362*x14376))+(((-1.0)*cj5*r00*x14378))+(((-1.0)*r02*x14377)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x14377))+((x14362*x14370))+(((-1.0)*x14367*x14378)));
evalcond[3]=(((r11*x14366))+((r10*x14375))+(((-1.0)*cj3*x14367*x14377))+((r12*x14379))+((x14370*x14380)));
evalcond[4]=(((r10*x14363*x14366))+((r10*x14372))+(((-1.0)*sj3*x14370*x14377))+(((-1.0)*r12*sj3*x14378))+((r11*x14371)));
evalcond[5]=((((-1.0)*r20*x14371*x14377))+((r22*x14379))+((r21*x14363*x14372))+((r21*x14366))+((r20*x14375))+x14381);
evalcond[6]=(((sj3*x14368))+(((-1.0)*x14369))+(((-1.0)*r00*x14371*x14377))+((r01*x14366))+((r01*x14363*x14372))+x14374+((r02*x14379)));
evalcond[7]=(((r01*x14371))+((cj3*x14368))+((r00*x14363*x14366))+(((-1.0)*r02*sj3*x14378))+(((-1.0)*r01*x14375*x14377))+x14381);
evalcond[8]=(((r21*x14371))+(((-1.0)*x14374))+(((-1.0)*r22*sj3*x14378))+(((-1.0)*sj3*x14373*x14377))+((r20*x14363*x14366))+((r20*x14372))+x14369);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14382 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14382.valid){
continue;
}
CheckValue<IkReal> x14383=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x14383.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14382.value)+(((1.5707963267949)*(x14383.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14384=IKsin(j4);
IkReal x14385=IKcos(j4);
IkReal x14386=(cj2*sj1);
IkReal x14387=(cj1*sj2);
IkReal x14388=(cj5*sj3);
IkReal x14389=(cj5*r10);
IkReal x14390=(r00*sj5);
IkReal x14391=(sj1*sj2);
IkReal x14392=(r11*sj5);
IkReal x14393=(cj3*cj5);
IkReal x14394=(cj3*sj5);
IkReal x14395=(r21*sj5);
IkReal x14396=(cj1*cj2);
IkReal x14397=(sj3*sj5);
IkReal x14398=(r01*sj5);
IkReal x14399=((1.0)*x14385);
IkReal x14400=((1.0)*x14384);
IkReal x14401=(cj3*x14384);
IkReal x14402=(cj3*x14385);
IkReal x14403=(x14387+x14386);
evalcond[0]=(((x14384*x14395))+(((-1.0)*r22*x14399))+(((-1.0)*cj5*r20*x14400)));
evalcond[1]=(((x14384*x14398))+(((-1.0)*cj5*r00*x14400))+(((-1.0)*r02*x14399)));
evalcond[2]=((-1.0)+((x14384*x14392))+(((-1.0)*r12*x14399))+(((-1.0)*x14389*x14400)));
evalcond[3]=(((r12*x14401))+((r11*x14388))+((r10*x14397))+((x14392*x14402))+(((-1.0)*cj3*x14389*x14399)));
evalcond[4]=((((-1.0)*sj3*x14392*x14399))+((r10*x14385*x14388))+((r10*x14394))+((r11*x14393))+(((-1.0)*r12*sj3*x14400)));
evalcond[5]=(((r21*x14385*x14394))+((r21*x14388))+((r22*x14401))+x14403+(((-1.0)*r20*x14393*x14399))+((r20*x14397)));
evalcond[6]=((((-1.0)*x14391))+((r01*x14388))+((r02*x14401))+((r01*x14385*x14394))+x14396+(((-1.0)*r00*x14393*x14399))+((sj3*x14390)));
evalcond[7]=((((-1.0)*r02*sj3*x14400))+((r00*x14385*x14388))+((r01*x14393))+((cj3*x14390))+x14403+(((-1.0)*r01*x14397*x14399)));
evalcond[8]=((((-1.0)*r22*sj3*x14400))+((r21*x14393))+(((-1.0)*x14396))+(((-1.0)*sj3*x14395*x14399))+((r20*x14385*x14388))+x14391+((r20*x14394)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14404=((-1.0)*r00);
IkReal x14406 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14406)==0){
continue;
}
IkReal x14405=pow(x14406,-0.5);
CheckValue<IkReal> x14407 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x14404),IKFAST_ATAN2_MAGTHRESH);
if(!x14407.valid){
continue;
}
IkReal gconst12=((-1.0)*(x14407.value));
IkReal gconst13=(r01*x14405);
IkReal gconst14=(x14404*x14405);
CheckValue<IkReal> x14408 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14408.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14408.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x14409=((-1.0)*r00);
IkReal x14410=x14405;
CheckValue<IkReal> x14412 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x14409),IKFAST_ATAN2_MAGTHRESH);
if(!x14412.valid){
continue;
}
IkReal x14411=((-1.0)*(x14412.value));
sj5=gconst13;
cj5=gconst14;
j5=x14411;
IkReal gconst12=x14411;
IkReal gconst13=(r01*x14410);
IkReal gconst14=(x14409*x14410);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14413=((1.0)*sj0);
IkReal x14414=((1.0)*cj0);
CheckValue<IkReal> x14415 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x14414))+(((-1.0)*r12*x14413)))),IkReal(((((-1.0)*gconst13*r11*x14413))+((cj0*gconst14*r00))+((gconst14*r10*sj0))+(((-1.0)*gconst13*r01*x14414)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14415.valid){
continue;
}
CheckValue<IkReal> x14416=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*r20))+(((-1.0)*gconst14*r21)))),-1);
if(!x14416.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14415.value)+(((1.5707963267949)*(x14416.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14417=IKsin(j4);
IkReal x14418=IKcos(j4);
IkReal x14419=((1.0)*r22);
IkReal x14420=((1.0)*r12);
IkReal x14421=(gconst13*sj3);
IkReal x14422=(gconst13*r01);
IkReal x14423=(sj1*sj2);
IkReal x14424=(gconst14*sj3);
IkReal x14425=(cj2*sj1);
IkReal x14426=((1.0)*sj0);
IkReal x14427=(cj3*gconst13);
IkReal x14428=(cj3*gconst14);
IkReal x14429=((1.0)*cj0);
IkReal x14430=((1.0)*gconst14);
IkReal x14431=(cj1*sj2);
IkReal x14432=(sj3*x14417);
IkReal x14433=((1.0)*cj1*cj2);
IkReal x14434=(cj3*x14418);
IkReal x14435=(cj3*x14417);
IkReal x14436=(gconst13*x14417);
IkReal x14437=((1.0)*x14418);
IkReal x14438=(x14417*x14430);
evalcond[0]=(((r21*x14436))+(((-1.0)*x14418*x14419))+(((-1.0)*r20*x14438)));
evalcond[1]=((((-1.0)*r10*x14438))+cj0+((r11*x14436))+(((-1.0)*x14418*x14420)));
evalcond[2]=((((-1.0)*r00*x14438))+((x14417*x14422))+(((-1.0)*r02*x14437))+(((-1.0)*x14426)));
evalcond[3]=((((-1.0)*r20*x14428*x14437))+((r20*x14421))+((r21*x14418*x14427))+x14431+x14425+((r22*x14435))+((r21*x14424)));
evalcond[4]=((((-1.0)*x14433))+((r20*x14427))+(((-1.0)*r21*x14421*x14437))+x14423+((r20*x14418*x14424))+(((-1.0)*x14419*x14432))+((r21*x14428)));
evalcond[5]=(((cj0*x14423))+((x14422*x14434))+((r01*x14424))+((r00*x14421))+((r02*x14435))+(((-1.0)*cj1*cj2*x14429))+(((-1.0)*r00*x14428*x14437)));
evalcond[6]=(((r11*x14418*x14427))+(((-1.0)*r10*x14428*x14437))+((r11*x14424))+((sj0*x14423))+((r12*x14435))+((r10*x14421))+(((-1.0)*cj1*cj2*x14426)));
evalcond[7]=((((-1.0)*x14425*x14429))+((r01*x14428))+(((-1.0)*r01*x14421*x14437))+((r00*x14427))+(((-1.0)*x14429*x14431))+(((-1.0)*r02*x14432))+((r00*x14418*x14424)));
evalcond[8]=((((-1.0)*x14426*x14431))+(((-1.0)*x14420*x14432))+(((-1.0)*x14425*x14426))+((r11*x14428))+((r10*x14418*x14424))+((r10*x14427))+(((-1.0)*r11*x14421*x14437)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14439=((1.0)*gconst14);
CheckValue<IkReal> x14440 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x14439))+((gconst13*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14440.valid){
continue;
}
CheckValue<IkReal> x14441=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*r10))+(((-1.0)*r11*x14439)))),-1);
if(!x14441.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14440.value)+(((1.5707963267949)*(x14441.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14442=IKsin(j4);
IkReal x14443=IKcos(j4);
IkReal x14444=((1.0)*r22);
IkReal x14445=((1.0)*r12);
IkReal x14446=(gconst13*sj3);
IkReal x14447=(gconst13*r01);
IkReal x14448=(sj1*sj2);
IkReal x14449=(gconst14*sj3);
IkReal x14450=(cj2*sj1);
IkReal x14451=((1.0)*sj0);
IkReal x14452=(cj3*gconst13);
IkReal x14453=(cj3*gconst14);
IkReal x14454=((1.0)*cj0);
IkReal x14455=((1.0)*gconst14);
IkReal x14456=(cj1*sj2);
IkReal x14457=(sj3*x14442);
IkReal x14458=((1.0)*cj1*cj2);
IkReal x14459=(cj3*x14443);
IkReal x14460=(cj3*x14442);
IkReal x14461=(gconst13*x14442);
IkReal x14462=((1.0)*x14443);
IkReal x14463=(x14442*x14455);
evalcond[0]=(((r21*x14461))+(((-1.0)*r20*x14463))+(((-1.0)*x14443*x14444)));
evalcond[1]=(cj0+(((-1.0)*r10*x14463))+((r11*x14461))+(((-1.0)*x14443*x14445)));
evalcond[2]=((((-1.0)*r00*x14463))+(((-1.0)*x14451))+((x14442*x14447))+(((-1.0)*r02*x14462)));
evalcond[3]=(((r20*x14446))+((r22*x14460))+((r21*x14443*x14452))+x14456+x14450+(((-1.0)*r20*x14453*x14462))+((r21*x14449)));
evalcond[4]=((((-1.0)*x14458))+(((-1.0)*r21*x14446*x14462))+((r20*x14452))+x14448+((r20*x14443*x14449))+((r21*x14453))+(((-1.0)*x14444*x14457)));
evalcond[5]=(((r01*x14449))+((r00*x14446))+(((-1.0)*r00*x14453*x14462))+((r02*x14460))+((x14447*x14459))+(((-1.0)*cj1*cj2*x14454))+((cj0*x14448)));
evalcond[6]=(((r11*x14443*x14452))+(((-1.0)*r10*x14453*x14462))+((sj0*x14448))+((r10*x14446))+((r11*x14449))+((r12*x14460))+(((-1.0)*cj1*cj2*x14451)));
evalcond[7]=((((-1.0)*r02*x14457))+(((-1.0)*x14454*x14456))+((r00*x14452))+((r01*x14453))+(((-1.0)*r01*x14446*x14462))+(((-1.0)*x14450*x14454))+((r00*x14443*x14449)));
evalcond[8]=(((r10*x14452))+((r11*x14453))+(((-1.0)*r11*x14446*x14462))+(((-1.0)*x14451*x14456))+((r10*x14443*x14449))+(((-1.0)*x14450*x14451))+(((-1.0)*x14445*x14457)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14464=((-1.0)*r01);
IkReal x14466 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14466)==0){
continue;
}
IkReal x14465=pow(x14466,-0.5);
CheckValue<IkReal> x14467 = IKatan2WithCheck(IkReal(x14464),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14467.valid){
continue;
}
IkReal gconst15=((3.14159265358979)+(((-1.0)*(x14467.value))));
IkReal gconst16=(x14464*x14465);
IkReal gconst17=((1.0)*r00*x14465);
CheckValue<IkReal> x14468 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14468.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14468.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x14469=((-1.0)*r01);
CheckValue<IkReal> x14472 = IKatan2WithCheck(IkReal(x14469),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14472.valid){
continue;
}
IkReal x14470=((1.0)*(x14472.value));
IkReal x14471=x14465;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14470)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14470)));
IkReal gconst16=(x14469*x14471);
IkReal gconst17=((1.0)*r00*x14471);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14473=((-1.0)*r01);
CheckValue<IkReal> x14476 = IKatan2WithCheck(IkReal(x14473),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14476.valid){
continue;
}
IkReal x14474=((1.0)*(x14476.value));
IkReal x14475=x14465;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14474)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14474)));
IkReal gconst16=(x14473*x14475);
IkReal gconst17=((1.0)*r00*x14475);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14477=((-1.0)*r01);
CheckValue<IkReal> x14480 = IKatan2WithCheck(IkReal(x14477),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14480.valid){
continue;
}
IkReal x14478=((1.0)*(x14480.value));
IkReal x14479=x14465;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14478)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14478)));
IkReal gconst16=(x14477*x14479);
IkReal gconst17=((1.0)*r00*x14479);
IkReal x14481=r02*r02;
IkReal x14482=(r12*sj0);
IkReal x14483=((1.0)*cj0);
IkReal x14484=x14465;
j4eval[0]=((IKabs(((((-1.0)*x14483*x14484))+((cj0*x14481*x14484))+((r02*x14482*x14484)))))+(IKabs(((((-1.0)*x14482))+(((-1.0)*r02*x14483))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x14485=((-1.0)*r01);
CheckValue<IkReal> x14488 = IKatan2WithCheck(IkReal(x14485),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14488.valid){
continue;
}
IkReal x14486=((1.0)*(x14488.value));
IkReal x14487=x14465;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14486)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14486)));
IkReal gconst16=(x14485*x14487);
IkReal gconst17=((1.0)*r00*x14487);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14489=((-1.0)*r01);
CheckValue<IkReal> x14492 = IKatan2WithCheck(IkReal(x14489),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14492.valid){
continue;
}
IkReal x14490=((1.0)*(x14492.value));
IkReal x14491=x14465;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14490)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14490)));
IkReal gconst16=(x14489*x14491);
IkReal gconst17=((1.0)*r00*x14491);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14493=gconst16*gconst16;
IkReal x14494=gconst17*gconst17;
IkReal x14495=(r11*sj3);
IkReal x14496=(cj3*r10);
IkReal x14497=((1.0)*cj3);
IkReal x14498=(r10*sj3);
IkReal x14499=(gconst16*gconst17);
IkReal x14500=(r21*x14493);
IkReal x14501=((1.0)*r20*x14494);
CheckValue<IkReal> x14502=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22*x14497))+((cj3*r11*r20*x14499))+(((-1.0)*x14496*x14501))+(((-1.0)*r11*x14497*x14500))+((r21*x14496*x14499)))),-1);
if(!x14502.valid){
continue;
}
CheckValue<IkReal> x14503 = IKatan2WithCheck(IkReal((((gconst17*r22*x14495))+((gconst16*r22*x14498)))),IkReal((((r21*x14495*x14499))+(((-1.0)*x14495*x14501))+(((-1.0)*r20*x14498*x14499))+((x14498*x14500)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14503.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14502.value)))+(x14503.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14504=IKsin(j4);
IkReal x14505=IKcos(j4);
IkReal x14506=(cj2*sj1);
IkReal x14507=(cj1*sj2);
IkReal x14508=(gconst16*r21);
IkReal x14509=(cj3*gconst17);
IkReal x14510=(gconst16*r20);
IkReal x14511=(sj1*sj2);
IkReal x14512=(gconst17*r20);
IkReal x14513=(gconst17*sj3);
IkReal x14514=(gconst16*r10);
IkReal x14515=(cj1*cj2);
IkReal x14516=(gconst16*sj3);
IkReal x14517=((1.0)*x14505);
IkReal x14518=((1.0)*x14504);
IkReal x14519=(gconst16*x14504);
IkReal x14520=(cj3*x14505);
IkReal x14521=(cj3*x14504);
IkReal x14522=(x14507+x14506);
evalcond[0]=((((-1.0)*r22*x14517))+(((-1.0)*x14512*x14518))+((x14504*x14508)));
evalcond[1]=((((-1.0)*gconst17*r00*x14518))+((r01*x14519))+(((-1.0)*r02*x14517)));
evalcond[2]=((-1.0)+(((-1.0)*gconst17*r10*x14518))+((r11*x14519))+(((-1.0)*r12*x14517)));
evalcond[3]=(((sj3*x14514))+((r11*x14513))+((r12*x14521))+(((-1.0)*r10*x14509*x14517))+((gconst16*r11*x14520)));
evalcond[4]=(((cj3*x14514))+(((-1.0)*r11*x14516*x14517))+((r10*x14505*x14513))+((r11*x14509))+(((-1.0)*r12*sj3*x14518)));
evalcond[5]=(((r22*x14521))+((sj3*x14510))+x14522+(((-1.0)*r20*x14509*x14517))+((x14508*x14520))+((r21*x14513)));
evalcond[6]=(((gconst16*r01*x14520))+((r00*x14516))+((r01*x14513))+(((-1.0)*r00*x14509*x14517))+x14515+((r02*x14521))+(((-1.0)*x14511)));
evalcond[7]=((((-1.0)*r01*x14516*x14517))+(((-1.0)*r02*sj3*x14518))+x14522+((r01*x14509))+((cj3*gconst16*r00))+((r00*x14505*x14513)));
evalcond[8]=(((cj3*x14510))+((r21*x14509))+x14511+(((-1.0)*r22*sj3*x14518))+((sj3*x14505*x14512))+(((-1.0)*sj3*x14508*x14517))+(((-1.0)*x14515)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14523=((1.0)*gconst17);
CheckValue<IkReal> x14524 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x14523))+((gconst16*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14524.valid){
continue;
}
CheckValue<IkReal> x14525=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*r21*x14523)))),-1);
if(!x14525.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14524.value)+(((1.5707963267949)*(x14525.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14526=IKsin(j4);
IkReal x14527=IKcos(j4);
IkReal x14528=(cj2*sj1);
IkReal x14529=(cj1*sj2);
IkReal x14530=(gconst16*r21);
IkReal x14531=(cj3*gconst17);
IkReal x14532=(gconst16*r20);
IkReal x14533=(sj1*sj2);
IkReal x14534=(gconst17*r20);
IkReal x14535=(gconst17*sj3);
IkReal x14536=(gconst16*r10);
IkReal x14537=(cj1*cj2);
IkReal x14538=(gconst16*sj3);
IkReal x14539=((1.0)*x14527);
IkReal x14540=((1.0)*x14526);
IkReal x14541=(gconst16*x14526);
IkReal x14542=(cj3*x14527);
IkReal x14543=(cj3*x14526);
IkReal x14544=(x14529+x14528);
evalcond[0]=((((-1.0)*r22*x14539))+((x14526*x14530))+(((-1.0)*x14534*x14540)));
evalcond[1]=(((r01*x14541))+(((-1.0)*gconst17*r00*x14540))+(((-1.0)*r02*x14539)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x14539))+((r11*x14541))+(((-1.0)*gconst17*r10*x14540)));
evalcond[3]=(((r12*x14543))+(((-1.0)*r10*x14531*x14539))+((gconst16*r11*x14542))+((r11*x14535))+((sj3*x14536)));
evalcond[4]=(((r10*x14527*x14535))+((cj3*x14536))+((r11*x14531))+(((-1.0)*r12*sj3*x14540))+(((-1.0)*r11*x14538*x14539)));
evalcond[5]=((((-1.0)*r20*x14531*x14539))+((r21*x14535))+((r22*x14543))+x14544+((sj3*x14532))+((x14530*x14542)));
evalcond[6]=(((r02*x14543))+(((-1.0)*x14533))+((r00*x14538))+((r01*x14535))+(((-1.0)*r00*x14531*x14539))+x14537+((gconst16*r01*x14542)));
evalcond[7]=((((-1.0)*r02*sj3*x14540))+(((-1.0)*r01*x14538*x14539))+((r01*x14531))+x14544+((r00*x14527*x14535))+((cj3*gconst16*r00)));
evalcond[8]=((((-1.0)*x14537))+((cj3*x14532))+((r21*x14531))+(((-1.0)*sj3*x14530*x14539))+((sj3*x14527*x14534))+x14533+(((-1.0)*r22*sj3*x14540)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14545=IKPowWithIntegerCheck(IKsign((((gconst17*r01))+((gconst16*r00)))),-1);
if(!x14545.valid){
continue;
}
CheckValue<IkReal> x14546 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst17*r20))+((gconst16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14546.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14545.value)))+(x14546.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14547=IKsin(j4);
IkReal x14548=IKcos(j4);
IkReal x14549=(cj2*sj1);
IkReal x14550=(cj1*sj2);
IkReal x14551=(gconst16*r21);
IkReal x14552=(cj3*gconst17);
IkReal x14553=(gconst16*r20);
IkReal x14554=(sj1*sj2);
IkReal x14555=(gconst17*r20);
IkReal x14556=(gconst17*sj3);
IkReal x14557=(gconst16*r10);
IkReal x14558=(cj1*cj2);
IkReal x14559=(gconst16*sj3);
IkReal x14560=((1.0)*x14548);
IkReal x14561=((1.0)*x14547);
IkReal x14562=(gconst16*x14547);
IkReal x14563=(cj3*x14548);
IkReal x14564=(cj3*x14547);
IkReal x14565=(x14550+x14549);
evalcond[0]=((((-1.0)*r22*x14560))+(((-1.0)*x14555*x14561))+((x14547*x14551)));
evalcond[1]=(((r01*x14562))+(((-1.0)*r02*x14560))+(((-1.0)*gconst17*r00*x14561)));
evalcond[2]=((-1.0)+(((-1.0)*gconst17*r10*x14561))+(((-1.0)*r12*x14560))+((r11*x14562)));
evalcond[3]=(((sj3*x14557))+(((-1.0)*r10*x14552*x14560))+((gconst16*r11*x14563))+((r11*x14556))+((r12*x14564)));
evalcond[4]=((((-1.0)*r11*x14559*x14560))+((r10*x14548*x14556))+((r11*x14552))+((cj3*x14557))+(((-1.0)*r12*sj3*x14561)));
evalcond[5]=(((sj3*x14553))+(((-1.0)*r20*x14552*x14560))+x14565+((r22*x14564))+((x14551*x14563))+((r21*x14556)));
evalcond[6]=(((gconst16*r01*x14563))+((r02*x14564))+x14558+(((-1.0)*x14554))+((r01*x14556))+((r00*x14559))+(((-1.0)*r00*x14552*x14560)));
evalcond[7]=((((-1.0)*r01*x14559*x14560))+x14565+((r00*x14548*x14556))+((r01*x14552))+(((-1.0)*r02*sj3*x14561))+((cj3*gconst16*r00)));
evalcond[8]=(((sj3*x14548*x14555))+(((-1.0)*sj3*x14551*x14560))+(((-1.0)*r22*sj3*x14561))+x14554+(((-1.0)*x14558))+((cj3*x14553))+((r21*x14552)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x14566=((-1.0)*r01);
CheckValue<IkReal> x14569 = IKatan2WithCheck(IkReal(x14566),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14569.valid){
continue;
}
IkReal x14567=((1.0)*(x14569.value));
IkReal x14568=x14465;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14567)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14567)));
IkReal gconst16=(x14566*x14568);
IkReal gconst17=((1.0)*r00*x14568);
IkReal x14570=r02*r02;
IkReal x14571=(r12*sj0);
IkReal x14572=((1.0)*cj0);
IkReal x14573=x14465;
j4eval[0]=((IKabs(((((-1.0)*r02*x14572))+(((-1.0)*x14571)))))+(IKabs(((((-1.0)*x14572*x14573))+((r02*x14571*x14573))+((cj0*x14570*x14573))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14574=((1.0)*r12);
IkReal x14575=(sj1*sj2);
IkReal x14576=(cj1*cj2);
IkReal x14577=((1.0)*sj3);
IkReal x14578=(gconst16*r21);
IkReal x14579=(cj3*gconst16*r20);
IkReal x14580=(gconst17*r20*sj3);
IkReal x14581=(cj3*gconst17*r21);
CheckValue<IkReal> x14582=IKPowWithIntegerCheck((((gconst17*r10*sj3*x14578))+((gconst16*r11*x14580))+(((-1.0)*gconst16*r11*x14577*x14578))+(((-1.0)*r10*r20*x14577*(gconst17*gconst17)))),-1);
if(!x14582.valid){
continue;
}
CheckValue<IkReal> x14583=IKPowWithIntegerCheck(((((-1.0)*x14577*x14578))+x14580),-1);
if(!x14583.valid){
continue;
}
if( IKabs(((x14582.value)*(((((-1.0)*x14574*x14579))+(((-1.0)*x14574*x14575))+((cj0*sj3*x14578))+((r12*x14576))+(((-1.0)*cj0*gconst17*r20*x14577))+(((-1.0)*x14574*x14581)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14583.value)*(((((-1.0)*x14581))+x14576+(((-1.0)*x14579))+(((-1.0)*x14575)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14582.value)*(((((-1.0)*x14574*x14579))+(((-1.0)*x14574*x14575))+((cj0*sj3*x14578))+((r12*x14576))+(((-1.0)*cj0*gconst17*r20*x14577))+(((-1.0)*x14574*x14581))))))+IKsqr(((x14583.value)*(((((-1.0)*x14581))+x14576+(((-1.0)*x14579))+(((-1.0)*x14575))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14582.value)*(((((-1.0)*x14574*x14579))+(((-1.0)*x14574*x14575))+((cj0*sj3*x14578))+((r12*x14576))+(((-1.0)*cj0*gconst17*r20*x14577))+(((-1.0)*x14574*x14581))))), ((x14583.value)*(((((-1.0)*x14581))+x14576+(((-1.0)*x14579))+(((-1.0)*x14575))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14584=IKsin(j4);
IkReal x14585=IKcos(j4);
IkReal x14586=((1.0)*gconst17);
IkReal x14587=(gconst17*sj3);
IkReal x14588=(gconst16*r21);
IkReal x14589=(cj3*gconst17);
IkReal x14590=(sj1*sj2);
IkReal x14591=((1.0)*sj0);
IkReal x14592=(gconst16*sj3);
IkReal x14593=(cj3*gconst16);
IkReal x14594=(cj2*sj1);
IkReal x14595=((1.0)*cj0);
IkReal x14596=((1.0)*sj3);
IkReal x14597=(cj1*sj2);
IkReal x14598=(cj3*x14585);
IkReal x14599=(gconst16*x14584);
IkReal x14600=((1.0)*x14585);
IkReal x14601=((1.0)*cj1*cj2);
IkReal x14602=(r02*x14584);
IkReal x14603=(r12*x14584);
evalcond[0]=((((-1.0)*r20*x14584*x14586))+((x14584*x14588)));
evalcond[1]=(cj0+(((-1.0)*r12*x14600))+(((-1.0)*r10*x14584*x14586))+((r11*x14599)));
evalcond[2]=((((-1.0)*x14591))+(((-1.0)*r00*x14584*x14586))+((r01*x14599))+(((-1.0)*r02*x14600)));
evalcond[3]=(((r20*x14592))+(((-1.0)*r20*x14586*x14598))+((r21*x14587))+x14594+x14597+((x14588*x14598)));
evalcond[4]=(((r20*x14593))+((r20*x14585*x14587))+((r21*x14589))+x14590+(((-1.0)*x14585*x14588*x14596))+(((-1.0)*x14601)));
evalcond[5]=(((r01*x14585*x14593))+(((-1.0)*cj1*cj2*x14595))+((cj3*x14602))+(((-1.0)*r00*x14586*x14598))+((r01*x14587))+((cj0*x14590))+((r00*x14592)));
evalcond[6]=(((sj0*x14590))+(((-1.0)*r10*x14586*x14598))+(((-1.0)*cj1*cj2*x14591))+((r10*x14592))+((cj3*x14603))+((r11*x14585*x14593))+((r11*x14587)));
evalcond[7]=(((r00*x14585*x14587))+(((-1.0)*x14595*x14597))+(((-1.0)*r01*x14592*x14600))+(((-1.0)*x14594*x14595))+((r01*x14589))+((r00*x14593))+(((-1.0)*x14596*x14602)));
evalcond[8]=(((r10*x14585*x14587))+((r10*x14593))+(((-1.0)*r11*x14592*x14600))+((r11*x14589))+(((-1.0)*x14591*x14594))+(((-1.0)*x14591*x14597))+(((-1.0)*x14596*x14603)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14604=((1.0)*sj0);
IkReal x14605=((1.0)*cj0);
CheckValue<IkReal> x14606=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*gconst17*r21)))),-1);
if(!x14606.valid){
continue;
}
CheckValue<IkReal> x14607 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x14604))+(((-1.0)*r02*x14605)))),IkReal(((((-1.0)*gconst16*r01*x14605))+((cj0*gconst17*r00))+((gconst17*r10*sj0))+(((-1.0)*gconst16*r11*x14604)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14607.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14606.value)))+(x14607.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14608=IKsin(j4);
IkReal x14609=IKcos(j4);
IkReal x14610=((1.0)*gconst17);
IkReal x14611=(gconst17*sj3);
IkReal x14612=(gconst16*r21);
IkReal x14613=(cj3*gconst17);
IkReal x14614=(sj1*sj2);
IkReal x14615=((1.0)*sj0);
IkReal x14616=(gconst16*sj3);
IkReal x14617=(cj3*gconst16);
IkReal x14618=(cj2*sj1);
IkReal x14619=((1.0)*cj0);
IkReal x14620=((1.0)*sj3);
IkReal x14621=(cj1*sj2);
IkReal x14622=(cj3*x14609);
IkReal x14623=(gconst16*x14608);
IkReal x14624=((1.0)*x14609);
IkReal x14625=((1.0)*cj1*cj2);
IkReal x14626=(r02*x14608);
IkReal x14627=(r12*x14608);
evalcond[0]=(((x14608*x14612))+(((-1.0)*r20*x14608*x14610)));
evalcond[1]=((((-1.0)*r10*x14608*x14610))+cj0+((r11*x14623))+(((-1.0)*r12*x14624)));
evalcond[2]=((((-1.0)*r00*x14608*x14610))+(((-1.0)*r02*x14624))+((r01*x14623))+(((-1.0)*x14615)));
evalcond[3]=(((r21*x14611))+(((-1.0)*r20*x14610*x14622))+x14618+x14621+((x14612*x14622))+((r20*x14616)));
evalcond[4]=(((r20*x14609*x14611))+(((-1.0)*x14625))+((r21*x14613))+x14614+(((-1.0)*x14609*x14612*x14620))+((r20*x14617)));
evalcond[5]=(((r01*x14609*x14617))+((cj3*x14626))+((cj0*x14614))+((r01*x14611))+(((-1.0)*cj1*cj2*x14619))+((r00*x14616))+(((-1.0)*r00*x14610*x14622)));
evalcond[6]=(((sj0*x14614))+((r10*x14616))+((r11*x14609*x14617))+((cj3*x14627))+(((-1.0)*r10*x14610*x14622))+(((-1.0)*cj1*cj2*x14615))+((r11*x14611)));
evalcond[7]=((((-1.0)*x14620*x14626))+(((-1.0)*x14619*x14621))+(((-1.0)*r01*x14616*x14624))+((r01*x14613))+((r00*x14617))+(((-1.0)*x14618*x14619))+((r00*x14609*x14611)));
evalcond[8]=((((-1.0)*x14615*x14618))+(((-1.0)*x14620*x14627))+((r10*x14617))+((r11*x14613))+(((-1.0)*r11*x14616*x14624))+((r10*x14609*x14611))+(((-1.0)*x14615*x14621)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14628=((1.0)*sj0);
IkReal x14629=((1.0)*cj0);
CheckValue<IkReal> x14630=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*gconst17*r21)))),-1);
if(!x14630.valid){
continue;
}
CheckValue<IkReal> x14631 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x14629))+(((-1.0)*r12*x14628)))),IkReal(((((-1.0)*gconst16*r01*x14629))+((cj0*gconst17*r00))+((gconst17*r10*sj0))+(((-1.0)*gconst16*r11*x14628)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14631.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14630.value)))+(x14631.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14632=IKsin(j4);
IkReal x14633=IKcos(j4);
IkReal x14634=(cj3*gconst17);
IkReal x14635=(gconst16*r21);
IkReal x14636=(gconst17*sj3);
IkReal x14637=(gconst16*r20);
IkReal x14638=(sj1*sj2);
IkReal x14639=(gconst16*r10);
IkReal x14640=(cj2*sj1);
IkReal x14641=(gconst16*sj3);
IkReal x14642=((1.0)*cj0);
IkReal x14643=((1.0)*sj0);
IkReal x14644=(cj1*sj2);
IkReal x14645=((1.0)*x14633);
IkReal x14646=(gconst16*x14632);
IkReal x14647=(cj3*x14633);
IkReal x14648=(cj3*x14632);
IkReal x14649=((1.0)*cj1*cj2);
IkReal x14650=((1.0)*gconst17*x14632);
IkReal x14651=((1.0)*sj3*x14632);
evalcond[0]=((((-1.0)*r22*x14645))+(((-1.0)*r20*x14650))+((x14632*x14635)));
evalcond[1]=(((r11*x14646))+cj0+(((-1.0)*r12*x14645))+(((-1.0)*r10*x14650)));
evalcond[2]=(((r01*x14646))+(((-1.0)*r02*x14645))+(((-1.0)*x14643))+(((-1.0)*r00*x14650)));
evalcond[3]=(((sj3*x14637))+(((-1.0)*r20*x14634*x14645))+((r22*x14648))+((x14635*x14647))+x14640+x14644+((r21*x14636)));
evalcond[4]=((((-1.0)*r22*x14651))+((cj3*x14637))+((r20*x14633*x14636))+x14638+(((-1.0)*x14649))+(((-1.0)*sj3*x14635*x14645))+((r21*x14634)));
evalcond[5]=((((-1.0)*r00*x14634*x14645))+((r00*x14641))+(((-1.0)*cj1*cj2*x14642))+((cj0*x14638))+((r01*x14636))+((r02*x14648))+((gconst16*r01*x14647)));
evalcond[6]=(((gconst16*r11*x14647))+((r12*x14648))+(((-1.0)*r10*x14634*x14645))+((sj3*x14639))+(((-1.0)*cj1*cj2*x14643))+((r11*x14636))+((sj0*x14638)));
evalcond[7]=((((-1.0)*x14642*x14644))+(((-1.0)*x14640*x14642))+(((-1.0)*r02*x14651))+((r01*x14634))+(((-1.0)*r01*x14641*x14645))+((r00*x14633*x14636))+((cj3*gconst16*r00)));
evalcond[8]=((((-1.0)*r12*x14651))+(((-1.0)*x14640*x14643))+((cj3*x14639))+((r11*x14634))+(((-1.0)*x14643*x14644))+((r10*x14633*x14636))+(((-1.0)*r11*x14641*x14645)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14652=((1.0)*gconst17);
CheckValue<IkReal> x14653 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst16*r21*sj0))+(((-1.0)*r20*sj0*x14652)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14653.valid){
continue;
}
CheckValue<IkReal> x14654=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r10))+(((-1.0)*r11*x14652)))),-1);
if(!x14654.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14653.value)+(((1.5707963267949)*(x14654.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14655=IKsin(j4);
IkReal x14656=IKcos(j4);
IkReal x14657=(cj3*gconst17);
IkReal x14658=(gconst16*r21);
IkReal x14659=(gconst17*sj3);
IkReal x14660=(gconst16*r20);
IkReal x14661=(sj1*sj2);
IkReal x14662=(gconst16*r10);
IkReal x14663=(cj2*sj1);
IkReal x14664=(gconst16*sj3);
IkReal x14665=((1.0)*cj0);
IkReal x14666=((1.0)*sj0);
IkReal x14667=(cj1*sj2);
IkReal x14668=((1.0)*x14656);
IkReal x14669=(gconst16*x14655);
IkReal x14670=(cj3*x14656);
IkReal x14671=(cj3*x14655);
IkReal x14672=((1.0)*cj1*cj2);
IkReal x14673=((1.0)*gconst17*x14655);
IkReal x14674=((1.0)*sj3*x14655);
evalcond[0]=((((-1.0)*r22*x14668))+((x14655*x14658))+(((-1.0)*r20*x14673)));
evalcond[1]=(cj0+(((-1.0)*r10*x14673))+(((-1.0)*r12*x14668))+((r11*x14669)));
evalcond[2]=((((-1.0)*r00*x14673))+((r01*x14669))+(((-1.0)*r02*x14668))+(((-1.0)*x14666)));
evalcond[3]=((((-1.0)*r20*x14657*x14668))+((x14658*x14670))+x14663+x14667+((r21*x14659))+((r22*x14671))+((sj3*x14660)));
evalcond[4]=((((-1.0)*x14672))+(((-1.0)*sj3*x14658*x14668))+(((-1.0)*r22*x14674))+((cj3*x14660))+x14661+((r21*x14657))+((r20*x14656*x14659)));
evalcond[5]=(((r02*x14671))+(((-1.0)*r00*x14657*x14668))+((gconst16*r01*x14670))+((r01*x14659))+((cj0*x14661))+((r00*x14664))+(((-1.0)*cj1*cj2*x14665)));
evalcond[6]=(((sj0*x14661))+(((-1.0)*r10*x14657*x14668))+(((-1.0)*cj1*cj2*x14666))+((r12*x14671))+((sj3*x14662))+((gconst16*r11*x14670))+((r11*x14659)));
evalcond[7]=((((-1.0)*x14663*x14665))+(((-1.0)*r01*x14664*x14668))+((r01*x14657))+(((-1.0)*r02*x14674))+(((-1.0)*x14665*x14667))+((cj3*gconst16*r00))+((r00*x14656*x14659)));
evalcond[8]=(((r10*x14656*x14659))+(((-1.0)*r11*x14664*x14668))+(((-1.0)*x14663*x14666))+(((-1.0)*x14666*x14667))+((cj3*x14662))+(((-1.0)*r12*x14674))+((r11*x14657)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14675=((1.0)*gconst17);
CheckValue<IkReal> x14676 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x14675))+((cj0*gconst16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14676.valid){
continue;
}
CheckValue<IkReal> x14677=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r00))+(((-1.0)*r01*x14675)))),-1);
if(!x14677.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14676.value)+(((1.5707963267949)*(x14677.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14678=IKsin(j4);
IkReal x14679=IKcos(j4);
IkReal x14680=(cj3*gconst17);
IkReal x14681=(gconst16*r21);
IkReal x14682=(gconst17*sj3);
IkReal x14683=(gconst16*r20);
IkReal x14684=(sj1*sj2);
IkReal x14685=(gconst16*r10);
IkReal x14686=(cj2*sj1);
IkReal x14687=(gconst16*sj3);
IkReal x14688=((1.0)*cj0);
IkReal x14689=((1.0)*sj0);
IkReal x14690=(cj1*sj2);
IkReal x14691=((1.0)*x14679);
IkReal x14692=(gconst16*x14678);
IkReal x14693=(cj3*x14679);
IkReal x14694=(cj3*x14678);
IkReal x14695=((1.0)*cj1*cj2);
IkReal x14696=((1.0)*gconst17*x14678);
IkReal x14697=((1.0)*sj3*x14678);
evalcond[0]=(((x14678*x14681))+(((-1.0)*r20*x14696))+(((-1.0)*r22*x14691)));
evalcond[1]=(cj0+((r11*x14692))+(((-1.0)*r12*x14691))+(((-1.0)*r10*x14696)));
evalcond[2]=((((-1.0)*r00*x14696))+((r01*x14692))+(((-1.0)*r02*x14691))+(((-1.0)*x14689)));
evalcond[3]=(((r22*x14694))+((sj3*x14683))+((x14681*x14693))+x14690+x14686+(((-1.0)*r20*x14680*x14691))+((r21*x14682)));
evalcond[4]=(((cj3*x14683))+((r20*x14679*x14682))+(((-1.0)*sj3*x14681*x14691))+(((-1.0)*x14695))+(((-1.0)*r22*x14697))+x14684+((r21*x14680)));
evalcond[5]=(((r00*x14687))+((r01*x14682))+(((-1.0)*cj1*cj2*x14688))+(((-1.0)*r00*x14680*x14691))+((r02*x14694))+((gconst16*r01*x14693))+((cj0*x14684)));
evalcond[6]=(((sj3*x14685))+(((-1.0)*cj1*cj2*x14689))+((r11*x14682))+(((-1.0)*r10*x14680*x14691))+((r12*x14694))+((gconst16*r11*x14693))+((sj0*x14684)));
evalcond[7]=(((r00*x14679*x14682))+((r01*x14680))+(((-1.0)*r02*x14697))+(((-1.0)*x14686*x14688))+(((-1.0)*r01*x14687*x14691))+((cj3*gconst16*r00))+(((-1.0)*x14688*x14690)));
evalcond[8]=(((cj3*x14685))+((r11*x14680))+(((-1.0)*x14686*x14689))+(((-1.0)*r11*x14687*x14691))+((r10*x14679*x14682))+(((-1.0)*r12*x14697))+(((-1.0)*x14689*x14690)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x14698=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14698;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x14698);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x14699=((1.0)*cj5);
IkReal x14700=((((-1.0)*r10*sj5))+(((-1.0)*r11*x14699)));
j4eval[0]=x14700;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x14699))))));
j4eval[2]=IKsign(x14700);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x14701=cj5*cj5;
IkReal x14702=(cj3*r01);
IkReal x14703=(cj5*sj5);
IkReal x14704=((1.0)*cj3);
IkReal x14705=((((-1.0)*r21*x14702))+(((-1.0)*r02*r22*x14704))+(((-1.0)*r00*r20*x14701*x14704))+((r21*x14701*x14702))+((cj3*r00*r21*x14703))+((r20*x14702*x14703)));
j4eval[0]=x14705;
j4eval[1]=IKsign(x14705);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14706=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14706;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x14706);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14707=((1.0)*cj5);
IkReal x14708=((((-1.0)*r10*sj5))+(((-1.0)*r11*x14707)));
j4eval[0]=x14708;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x14707))))));
j4eval[2]=IKsign(x14708);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14709=cj5*cj5;
IkReal x14710=r01*r01;
IkReal x14711=(r01*sj5);
IkReal x14712=(cj5*r00);
IkReal x14713=((((-1.0)*(r02*r02)))+(((-1.0)*x14710))+(((-1.0)*x14709*(r00*r00)))+(((2.0)*x14711*x14712))+((x14709*x14710)));
j4eval[0]=x14713;
j4eval[1]=IKsign(x14713);
j4eval[2]=((IKabs(((((-1.0)*x14711))+x14712)))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14714=cj5*cj5;
IkReal x14715=r01*r01;
IkReal x14716=(r01*sj5);
IkReal x14717=(cj5*r00);
CheckValue<IkReal> x14718=IKPowWithIntegerCheck(IKsign(((((2.0)*x14716*x14717))+(((-1.0)*(r02*r02)))+(((-1.0)*x14715))+((x14714*x14715))+(((-1.0)*x14714*(r00*r00))))),-1);
if(!x14718.valid){
continue;
}
CheckValue<IkReal> x14719 = IKatan2WithCheck(IkReal(((((-1.0)*x14716))+x14717)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x14719.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14718.value)))+(x14719.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14720=IKsin(j4);
IkReal x14721=IKcos(j4);
IkReal x14722=(cj5*r10);
IkReal x14723=(r01*sj5);
IkReal x14724=((1.0)*cj2);
IkReal x14725=(cj5*r00);
IkReal x14726=(cj5*r20);
IkReal x14727=((1.0)*x14721);
IkReal x14728=((1.0)*x14720);
IkReal x14729=(sj5*x14720);
evalcond[0]=(((r21*x14729))+(((-1.0)*x14726*x14728))+(((-1.0)*r22*x14727)));
evalcond[1]=((((-1.0)*r12*x14727))+(((-1.0)*x14722*x14728))+((r11*x14729)));
evalcond[2]=((((-1.0)*x14723*x14727))+((x14721*x14725))+(((-1.0)*r02*x14728)));
evalcond[3]=((-1.0)+((x14720*x14723))+(((-1.0)*r02*x14727))+(((-1.0)*x14725*x14728)));
evalcond[4]=((((-1.0)*r21*sj5*x14727))+((sj1*sj2))+(((-1.0)*cj1*x14724))+((x14721*x14726))+(((-1.0)*r22*x14728)));
evalcond[5]=((((-1.0)*r12*x14728))+(((-1.0)*sj1*x14724))+(((-1.0)*cj1*sj2))+((x14721*x14722))+(((-1.0)*r11*sj5*x14727)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14730=((1.0)*cj5);
CheckValue<IkReal> x14731 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x14730))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14731.valid){
continue;
}
CheckValue<IkReal> x14732=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x14730))+(((-1.0)*r10*sj5)))),-1);
if(!x14732.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14731.value)+(((1.5707963267949)*(x14732.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14733=IKsin(j4);
IkReal x14734=IKcos(j4);
IkReal x14735=(cj5*r10);
IkReal x14736=(r01*sj5);
IkReal x14737=((1.0)*cj2);
IkReal x14738=(cj5*r00);
IkReal x14739=(cj5*r20);
IkReal x14740=((1.0)*x14734);
IkReal x14741=((1.0)*x14733);
IkReal x14742=(sj5*x14733);
evalcond[0]=(((r21*x14742))+(((-1.0)*x14739*x14741))+(((-1.0)*r22*x14740)));
evalcond[1]=(((r11*x14742))+(((-1.0)*x14735*x14741))+(((-1.0)*r12*x14740)));
evalcond[2]=((((-1.0)*x14736*x14740))+(((-1.0)*r02*x14741))+((x14734*x14738)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x14740))+(((-1.0)*x14738*x14741))+((x14733*x14736)));
evalcond[4]=(((x14734*x14739))+((sj1*sj2))+(((-1.0)*r22*x14741))+(((-1.0)*cj1*x14737))+(((-1.0)*r21*sj5*x14740)));
evalcond[5]=((((-1.0)*sj1*x14737))+(((-1.0)*r11*sj5*x14740))+((x14734*x14735))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x14741)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14743=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x14743.valid){
continue;
}
CheckValue<IkReal> x14744 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14744.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14743.value)))+(x14744.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14745=IKsin(j4);
IkReal x14746=IKcos(j4);
IkReal x14747=(cj5*r10);
IkReal x14748=(r01*sj5);
IkReal x14749=((1.0)*cj2);
IkReal x14750=(cj5*r00);
IkReal x14751=(cj5*r20);
IkReal x14752=((1.0)*x14746);
IkReal x14753=((1.0)*x14745);
IkReal x14754=(sj5*x14745);
evalcond[0]=((((-1.0)*x14751*x14753))+((r21*x14754))+(((-1.0)*r22*x14752)));
evalcond[1]=((((-1.0)*r12*x14752))+(((-1.0)*x14747*x14753))+((r11*x14754)));
evalcond[2]=(((x14746*x14750))+(((-1.0)*r02*x14753))+(((-1.0)*x14748*x14752)));
evalcond[3]=((-1.0)+((x14745*x14748))+(((-1.0)*r02*x14752))+(((-1.0)*x14750*x14753)));
evalcond[4]=(((x14746*x14751))+(((-1.0)*r21*sj5*x14752))+((sj1*sj2))+(((-1.0)*cj1*x14749))+(((-1.0)*r22*x14753)));
evalcond[5]=((((-1.0)*r11*sj5*x14752))+(((-1.0)*r12*x14753))+(((-1.0)*cj1*sj2))+((x14746*x14747))+(((-1.0)*sj1*x14749)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14755=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14755;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x14755);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14756=((1.0)*cj5);
IkReal x14757=((((-1.0)*r10*sj5))+(((-1.0)*r11*x14756)));
j4eval[0]=x14757;
j4eval[1]=((IKabs(((((-1.0)*r20*x14756))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x14757);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14758=cj5*cj5;
IkReal x14759=r01*r01;
IkReal x14760=(cj5*r00);
IkReal x14761=(r01*sj5);
IkReal x14762=(((x14758*(r00*r00)))+(((-2.0)*x14760*x14761))+(((-1.0)*x14758*x14759))+x14759+(r02*r02));
j4eval[0]=x14762;
j4eval[1]=IKsign(x14762);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x14760))+x14761))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14763=cj5*cj5;
IkReal x14764=r01*r01;
IkReal x14765=(r01*sj5);
IkReal x14766=(cj5*r00);
CheckValue<IkReal> x14767=IKPowWithIntegerCheck(IKsign(((((-2.0)*x14765*x14766))+(((-1.0)*x14763*x14764))+x14764+((x14763*(r00*r00)))+(r02*r02))),-1);
if(!x14767.valid){
continue;
}
CheckValue<IkReal> x14768 = IKatan2WithCheck(IkReal(((((-1.0)*x14766))+x14765)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x14768.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14767.value)))+(x14768.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14769=IKcos(j4);
IkReal x14770=IKsin(j4);
IkReal x14771=(cj5*r00);
IkReal x14772=(cj5*r10);
IkReal x14773=(r21*sj5);
IkReal x14774=((1.0)*cj2);
IkReal x14775=(cj5*r20);
IkReal x14776=((1.0)*x14769);
IkReal x14777=((1.0)*x14770);
IkReal x14778=(sj5*x14770);
IkReal x14779=(sj5*x14769);
evalcond[0]=((((-1.0)*x14771*x14776))+((r01*x14779))+((r02*x14770)));
evalcond[1]=(((x14770*x14773))+(((-1.0)*x14775*x14777))+(((-1.0)*r22*x14776)));
evalcond[2]=((((-1.0)*x14772*x14777))+((r11*x14778))+(((-1.0)*r12*x14776)));
evalcond[3]=((-1.0)+(((-1.0)*x14771*x14777))+(((-1.0)*r02*x14776))+((r01*x14778)));
evalcond[4]=(((r22*x14770))+(((-1.0)*x14775*x14776))+((sj1*sj2))+((x14769*x14773))+(((-1.0)*cj1*x14774)));
evalcond[5]=((((-1.0)*x14772*x14776))+((r12*x14770))+((r11*x14779))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x14774)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14780=((1.0)*cj5);
CheckValue<IkReal> x14781 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x14780)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14781.valid){
continue;
}
CheckValue<IkReal> x14782=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x14780)))),-1);
if(!x14782.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14781.value)+(((1.5707963267949)*(x14782.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14783=IKcos(j4);
IkReal x14784=IKsin(j4);
IkReal x14785=(cj5*r00);
IkReal x14786=(cj5*r10);
IkReal x14787=(r21*sj5);
IkReal x14788=((1.0)*cj2);
IkReal x14789=(cj5*r20);
IkReal x14790=((1.0)*x14783);
IkReal x14791=((1.0)*x14784);
IkReal x14792=(sj5*x14784);
IkReal x14793=(sj5*x14783);
evalcond[0]=(((r01*x14793))+((r02*x14784))+(((-1.0)*x14785*x14790)));
evalcond[1]=((((-1.0)*x14789*x14791))+((x14784*x14787))+(((-1.0)*r22*x14790)));
evalcond[2]=((((-1.0)*r12*x14790))+((r11*x14792))+(((-1.0)*x14786*x14791)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x14790))+((r01*x14792))+(((-1.0)*x14785*x14791)));
evalcond[4]=((((-1.0)*x14789*x14790))+((x14783*x14787))+((sj1*sj2))+(((-1.0)*cj1*x14788))+((r22*x14784)));
evalcond[5]=((((-1.0)*sj1*x14788))+(((-1.0)*cj1*sj2))+((r11*x14793))+((r12*x14784))+(((-1.0)*x14786*x14790)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14794=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x14794.valid){
continue;
}
CheckValue<IkReal> x14795 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14795.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14794.value)))+(x14795.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14796=IKcos(j4);
IkReal x14797=IKsin(j4);
IkReal x14798=(cj5*r00);
IkReal x14799=(cj5*r10);
IkReal x14800=(r21*sj5);
IkReal x14801=((1.0)*cj2);
IkReal x14802=(cj5*r20);
IkReal x14803=((1.0)*x14796);
IkReal x14804=((1.0)*x14797);
IkReal x14805=(sj5*x14797);
IkReal x14806=(sj5*x14796);
evalcond[0]=(((r01*x14806))+((r02*x14797))+(((-1.0)*x14798*x14803)));
evalcond[1]=((((-1.0)*r22*x14803))+(((-1.0)*x14802*x14804))+((x14797*x14800)));
evalcond[2]=((((-1.0)*x14799*x14804))+(((-1.0)*r12*x14803))+((r11*x14805)));
evalcond[3]=((-1.0)+((r01*x14805))+(((-1.0)*r02*x14803))+(((-1.0)*x14798*x14804)));
evalcond[4]=((((-1.0)*x14802*x14803))+((x14796*x14800))+((sj1*sj2))+((r22*x14797))+(((-1.0)*cj1*x14801)));
evalcond[5]=((((-1.0)*x14799*x14803))+(((-1.0)*cj1*sj2))+((r12*x14797))+((r11*x14806))+(((-1.0)*sj1*x14801)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14808 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x14808)==0){
continue;
}
IkReal x14807=pow(x14808,-0.5);
CheckValue<IkReal> x14809 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14809.valid){
continue;
}
IkReal gconst48=((-1.0)*(x14809.value));
IkReal gconst49=((-1.0)*r21*x14807);
IkReal gconst50=(r20*x14807);
CheckValue<IkReal> x14810 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14810.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14810.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x14813 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14813.valid){
continue;
}
IkReal x14811=((-1.0)*(x14813.value));
IkReal x14812=x14807;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst49;
cj5=gconst50;
j5=x14811;
IkReal gconst48=x14811;
IkReal gconst49=((-1.0)*r21*x14812);
IkReal gconst50=(r20*x14812);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14816 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14816.valid){
continue;
}
IkReal x14814=((-1.0)*(x14816.value));
IkReal x14815=x14807;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst49;
cj5=gconst50;
j5=x14814;
IkReal gconst48=x14814;
IkReal gconst49=((-1.0)*r21*x14815);
IkReal gconst50=(r20*x14815);
CheckValue<IkReal> x14824=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x14824.valid){
continue;
}
IkReal x14817=x14824.value;
IkReal x14818=(sj3*x14817);
IkReal x14819=(r11*x14818);
IkReal x14820=(r00*x14818);
IkReal x14821=(r01*x14818);
IkReal x14822=(r10*x14818);
IkReal x14823=(r20*r21*x14818);
j4eval[0]=IKsign((((r02*r12*sj3))+((r00*r20*r21*x14819))+((r01*x14819*(r21*r21)))+((r10*r20*r21*x14821))+((r10*x14820*(r20*r20)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14825=gconst49*gconst49;
IkReal x14826=gconst50*gconst50;
IkReal x14827=((1.0)*cj3);
IkReal x14828=(gconst50*r01);
IkReal x14829=(gconst49*r10);
IkReal x14830=(r12*sj3);
IkReal x14831=(gconst49*r00);
IkReal x14832=(r00*sj3);
IkReal x14833=(r11*x14825);
IkReal x14834=(r10*x14826);
CheckValue<IkReal> x14835=IKPowWithIntegerCheck(IKsign((((cj3*gconst50*r11*x14831))+((cj3*x14828*x14829))+(((-1.0)*r02*r12*x14827))+(((-1.0)*r01*x14827*x14833))+(((-1.0)*r00*x14827*x14834)))),-1);
if(!x14835.valid){
continue;
}
CheckValue<IkReal> x14836 = IKatan2WithCheck(IkReal((((x14830*x14831))+((x14828*x14830)))),IkReal((((x14832*x14833))+(((-1.0)*gconst50*x14829*x14832))+(((-1.0)*r01*sj3*x14834))+((gconst49*r11*sj3*x14828)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14836.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14835.value)))+(x14836.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14837=IKsin(j4);
IkReal x14838=IKcos(j4);
IkReal x14839=(sj1*sj2);
IkReal x14840=(gconst50*r20);
IkReal x14841=(gconst50*sj3);
IkReal x14842=(cj3*r01);
IkReal x14843=(gconst50*r10);
IkReal x14844=(gconst49*sj3);
IkReal x14845=((1.0)*cj2);
IkReal x14846=(cj1*sj2);
IkReal x14847=(cj3*r11);
IkReal x14848=(gconst50*r00);
IkReal x14849=(cj3*r21);
IkReal x14850=(cj3*gconst49);
IkReal x14851=(cj1*x14845);
IkReal x14852=((1.0)*x14838);
IkReal x14853=((1.0)*x14837);
IkReal x14854=(gconst49*x14837);
IkReal x14855=(gconst49*x14838);
IkReal x14856=(cj3*x14837);
evalcond[0]=(((r21*x14854))+(((-1.0)*x14840*x14853))+(((-1.0)*r22*x14852)));
evalcond[1]=(((r11*x14854))+(((-1.0)*x14843*x14853))+(((-1.0)*r12*x14852)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x14852))+(((-1.0)*x14848*x14853))+((r01*x14854)));
evalcond[3]=(((r02*x14856))+((r01*x14841))+((x14842*x14855))+((r00*x14844))+(((-1.0)*cj3*x14848*x14852)));
evalcond[4]=((((-1.0)*r02*sj3*x14853))+(((-1.0)*r01*x14844*x14852))+((r00*x14838*x14841))+((gconst50*x14842))+((r00*x14850)));
evalcond[5]=(((r20*x14844))+((cj2*sj1))+(((-1.0)*cj3*x14840*x14852))+x14846+((r22*x14856))+((x14849*x14855))+((r21*x14841)));
evalcond[6]=((((-1.0)*cj3*x14843*x14852))+x14839+((r11*x14841))+((x14847*x14855))+((r10*x14844))+((r12*x14856))+(((-1.0)*x14851)));
evalcond[7]=((((-1.0)*r22*sj3*x14853))+((sj3*x14838*x14840))+((r20*x14850))+x14839+((gconst50*x14849))+(((-1.0)*x14851))+(((-1.0)*r21*x14844*x14852)));
evalcond[8]=((((-1.0)*x14846))+(((-1.0)*sj1*x14845))+((r10*x14838*x14841))+((r10*x14850))+((gconst50*x14847))+(((-1.0)*r12*sj3*x14853))+(((-1.0)*r11*x14844*x14852)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14857=gconst49*gconst49;
IkReal x14858=gconst50*gconst50;
IkReal x14859=(cj3*r12);
IkReal x14860=(gconst49*r00);
IkReal x14861=(r01*r11);
IkReal x14862=(r00*r11);
IkReal x14863=(cj3*gconst50);
IkReal x14864=((1.0)*r01*r10);
IkReal x14865=(gconst49*gconst50*sj3);
CheckValue<IkReal> x14866=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*gconst50*r11*sj3*x14860))+((r00*r10*sj3*x14858))+(((-1.0)*x14864*x14865))+((sj3*x14857*x14861)))),-1);
if(!x14866.valid){
continue;
}
CheckValue<IkReal> x14867 = IKatan2WithCheck(IkReal((((x14859*x14860))+((gconst50*r01*x14859)))),IkReal((((cj3*x14857*x14862))+((gconst49*x14861*x14863))+(((-1.0)*r10*x14860*x14863))+(((-1.0)*cj3*x14858*x14864)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14867.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14866.value)))+(x14867.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14868=IKsin(j4);
IkReal x14869=IKcos(j4);
IkReal x14870=(sj1*sj2);
IkReal x14871=(gconst50*r20);
IkReal x14872=(gconst50*sj3);
IkReal x14873=(cj3*r01);
IkReal x14874=(gconst50*r10);
IkReal x14875=(gconst49*sj3);
IkReal x14876=((1.0)*cj2);
IkReal x14877=(cj1*sj2);
IkReal x14878=(cj3*r11);
IkReal x14879=(gconst50*r00);
IkReal x14880=(cj3*r21);
IkReal x14881=(cj3*gconst49);
IkReal x14882=(cj1*x14876);
IkReal x14883=((1.0)*x14869);
IkReal x14884=((1.0)*x14868);
IkReal x14885=(gconst49*x14868);
IkReal x14886=(gconst49*x14869);
IkReal x14887=(cj3*x14868);
evalcond[0]=((((-1.0)*r22*x14883))+((r21*x14885))+(((-1.0)*x14871*x14884)));
evalcond[1]=(((r11*x14885))+(((-1.0)*r12*x14883))+(((-1.0)*x14874*x14884)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x14883))+(((-1.0)*x14879*x14884))+((r01*x14885)));
evalcond[3]=(((x14873*x14886))+((r00*x14875))+((r01*x14872))+(((-1.0)*cj3*x14879*x14883))+((r02*x14887)));
evalcond[4]=((((-1.0)*r01*x14875*x14883))+((r00*x14881))+((gconst50*x14873))+(((-1.0)*r02*sj3*x14884))+((r00*x14869*x14872)));
evalcond[5]=(((cj2*sj1))+((r22*x14887))+(((-1.0)*cj3*x14871*x14883))+x14877+((r21*x14872))+((x14880*x14886))+((r20*x14875)));
evalcond[6]=(((r11*x14872))+((r10*x14875))+((x14878*x14886))+((r12*x14887))+x14870+(((-1.0)*cj3*x14874*x14883))+(((-1.0)*x14882)));
evalcond[7]=((((-1.0)*r22*sj3*x14884))+x14870+((sj3*x14869*x14871))+((gconst50*x14880))+(((-1.0)*x14882))+((r20*x14881))+(((-1.0)*r21*x14875*x14883)));
evalcond[8]=((((-1.0)*r11*x14875*x14883))+((r10*x14881))+(((-1.0)*r12*sj3*x14884))+((gconst50*x14878))+((r10*x14869*x14872))+(((-1.0)*x14877))+(((-1.0)*sj1*x14876)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14888=((1.0)*gconst50);
CheckValue<IkReal> x14889=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst49*r10))+(((-1.0)*r11*x14888)))),-1);
if(!x14889.valid){
continue;
}
CheckValue<IkReal> x14890 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst49*r21))+(((-1.0)*r20*x14888)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14890.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14889.value)))+(x14890.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14891=IKsin(j4);
IkReal x14892=IKcos(j4);
IkReal x14893=(sj1*sj2);
IkReal x14894=(gconst50*r20);
IkReal x14895=(gconst50*sj3);
IkReal x14896=(cj3*r01);
IkReal x14897=(gconst50*r10);
IkReal x14898=(gconst49*sj3);
IkReal x14899=((1.0)*cj2);
IkReal x14900=(cj1*sj2);
IkReal x14901=(cj3*r11);
IkReal x14902=(gconst50*r00);
IkReal x14903=(cj3*r21);
IkReal x14904=(cj3*gconst49);
IkReal x14905=(cj1*x14899);
IkReal x14906=((1.0)*x14892);
IkReal x14907=((1.0)*x14891);
IkReal x14908=(gconst49*x14891);
IkReal x14909=(gconst49*x14892);
IkReal x14910=(cj3*x14891);
evalcond[0]=(((r21*x14908))+(((-1.0)*r22*x14906))+(((-1.0)*x14894*x14907)));
evalcond[1]=((((-1.0)*r12*x14906))+((r11*x14908))+(((-1.0)*x14897*x14907)));
evalcond[2]=((-1.0)+((r01*x14908))+(((-1.0)*r02*x14906))+(((-1.0)*x14902*x14907)));
evalcond[3]=(((r02*x14910))+((r01*x14895))+((r00*x14898))+(((-1.0)*cj3*x14902*x14906))+((x14896*x14909)));
evalcond[4]=(((r00*x14904))+(((-1.0)*r01*x14898*x14906))+((gconst50*x14896))+((r00*x14892*x14895))+(((-1.0)*r02*sj3*x14907)));
evalcond[5]=(((cj2*sj1))+((r22*x14910))+(((-1.0)*cj3*x14894*x14906))+x14900+((r21*x14895))+((x14903*x14909))+((r20*x14898)));
evalcond[6]=(((r10*x14898))+((r11*x14895))+(((-1.0)*x14905))+x14893+((x14901*x14909))+((r12*x14910))+(((-1.0)*cj3*x14897*x14906)));
evalcond[7]=(((sj3*x14892*x14894))+(((-1.0)*x14905))+x14893+(((-1.0)*r22*sj3*x14907))+(((-1.0)*r21*x14898*x14906))+((r20*x14904))+((gconst50*x14903)));
evalcond[8]=((((-1.0)*sj1*x14899))+(((-1.0)*x14900))+(((-1.0)*r11*x14898*x14906))+((r10*x14892*x14895))+((gconst50*x14901))+(((-1.0)*r12*sj3*x14907))+((r10*x14904)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14912 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x14912)==0){
continue;
}
IkReal x14911=pow(x14912,-0.5);
CheckValue<IkReal> x14913 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14913.valid){
continue;
}
IkReal gconst51=((3.14159265358979)+(((-1.0)*(x14913.value))));
IkReal gconst52=((1.0)*r21*x14911);
IkReal gconst53=((-1.0)*r20*x14911);
CheckValue<IkReal> x14914 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14914.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14914.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x14917 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14917.valid){
continue;
}
IkReal x14915=((1.0)*(x14917.value));
IkReal x14916=x14911;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst52;
cj5=gconst53;
j5=((3.14159265)+(((-1.0)*x14915)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x14915)));
IkReal gconst52=((1.0)*r21*x14916);
IkReal gconst53=((-1.0)*r20*x14916);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14920 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14920.valid){
continue;
}
IkReal x14918=((1.0)*(x14920.value));
IkReal x14919=x14911;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst52;
cj5=gconst53;
j5=((3.14159265)+(((-1.0)*x14918)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x14918)));
IkReal gconst52=((1.0)*r21*x14919);
IkReal gconst53=((-1.0)*r20*x14919);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x14923 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14923.valid){
continue;
}
IkReal x14921=((1.0)*(x14923.value));
IkReal x14922=x14911;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst52;
cj5=gconst53;
j5=((3.14159265)+(((-1.0)*x14921)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x14921)));
IkReal gconst52=((1.0)*r21*x14922);
IkReal gconst53=((-1.0)*r20*x14922);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14924=gconst52*gconst52;
IkReal x14925=gconst53*gconst53;
IkReal x14926=(gconst53*r01);
IkReal x14927=(cj3*r20);
IkReal x14928=(r22*sj3);
IkReal x14929=((1.0)*cj3);
IkReal x14930=(gconst52*sj3);
IkReal x14931=((1.0)*r00);
IkReal x14932=(gconst52*r00);
IkReal x14933=(r21*x14924);
CheckValue<IkReal> x14934 = IKatan2WithCheck(IkReal((((x14928*x14932))+((x14926*x14928)))),IkReal((((r00*sj3*x14933))+(((-1.0)*gconst53*r20*x14930*x14931))+(((-1.0)*r01*r20*sj3*x14925))+((r21*x14926*x14930)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14934.valid){
continue;
}
CheckValue<IkReal> x14935=IKPowWithIntegerCheck(IKsign((((cj3*gconst53*r21*x14932))+((gconst52*x14926*x14927))+(((-1.0)*r02*r22*x14929))+(((-1.0)*x14925*x14927*x14931))+(((-1.0)*r01*x14929*x14933)))),-1);
if(!x14935.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14934.value)+(((1.5707963267949)*(x14935.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14936=IKsin(j4);
IkReal x14937=IKcos(j4);
IkReal x14938=(sj1*sj2);
IkReal x14939=((1.0)*cj1);
IkReal x14940=(cj3*gconst52);
IkReal x14941=(gconst53*sj3);
IkReal x14942=(cj3*gconst53);
IkReal x14943=(cj2*sj1);
IkReal x14944=(gconst52*sj3);
IkReal x14945=(cj2*x14939);
IkReal x14946=((1.0)*x14937);
IkReal x14947=((1.0)*x14936);
IkReal x14948=(gconst52*x14936);
IkReal x14949=(cj3*x14936);
evalcond[0]=((((-1.0)*gconst53*r20*x14947))+((r21*x14948))+(((-1.0)*r22*x14946)));
evalcond[1]=((((-1.0)*r12*x14946))+(((-1.0)*gconst53*r10*x14947))+((r11*x14948)));
evalcond[2]=((-1.0)+((r01*x14948))+(((-1.0)*r02*x14946))+(((-1.0)*gconst53*r00*x14947)));
evalcond[3]=(((r00*x14944))+((r01*x14941))+((r01*x14937*x14940))+((r02*x14949))+(((-1.0)*r00*x14942*x14946)));
evalcond[4]=((((-1.0)*r01*x14944*x14946))+(((-1.0)*r02*sj3*x14947))+((r00*x14940))+((r01*x14942))+((r00*x14937*x14941)));
evalcond[5]=(x14943+((r22*x14949))+((cj1*sj2))+((r21*x14937*x14940))+((r21*x14941))+(((-1.0)*r20*x14942*x14946))+((r20*x14944)));
evalcond[6]=(((r12*x14949))+x14938+((r10*x14944))+(((-1.0)*r10*x14942*x14946))+(((-1.0)*x14945))+((r11*x14937*x14940))+((r11*x14941)));
evalcond[7]=(x14938+(((-1.0)*r21*x14944*x14946))+(((-1.0)*x14945))+((r20*x14937*x14941))+(((-1.0)*r22*sj3*x14947))+((r21*x14942))+((r20*x14940)));
evalcond[8]=(((r10*x14940))+(((-1.0)*r12*sj3*x14947))+(((-1.0)*x14943))+((r10*x14937*x14941))+(((-1.0)*sj2*x14939))+(((-1.0)*r11*x14944*x14946))+((r11*x14942)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14950=((1.0)*gconst53);
CheckValue<IkReal> x14951 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x14950))+((gconst52*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14951.valid){
continue;
}
CheckValue<IkReal> x14952=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x14950))+(((-1.0)*gconst52*r10)))),-1);
if(!x14952.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14951.value)+(((1.5707963267949)*(x14952.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14953=IKsin(j4);
IkReal x14954=IKcos(j4);
IkReal x14955=(sj1*sj2);
IkReal x14956=((1.0)*cj1);
IkReal x14957=(cj3*gconst52);
IkReal x14958=(gconst53*sj3);
IkReal x14959=(cj3*gconst53);
IkReal x14960=(cj2*sj1);
IkReal x14961=(gconst52*sj3);
IkReal x14962=(cj2*x14956);
IkReal x14963=((1.0)*x14954);
IkReal x14964=((1.0)*x14953);
IkReal x14965=(gconst52*x14953);
IkReal x14966=(cj3*x14953);
evalcond[0]=((((-1.0)*r22*x14963))+((r21*x14965))+(((-1.0)*gconst53*r20*x14964)));
evalcond[1]=((((-1.0)*r12*x14963))+((r11*x14965))+(((-1.0)*gconst53*r10*x14964)));
evalcond[2]=((-1.0)+((r01*x14965))+(((-1.0)*r02*x14963))+(((-1.0)*gconst53*r00*x14964)));
evalcond[3]=(((r01*x14954*x14957))+((r01*x14958))+((r02*x14966))+(((-1.0)*r00*x14959*x14963))+((r00*x14961)));
evalcond[4]=(((r01*x14959))+(((-1.0)*r02*sj3*x14964))+((r00*x14957))+(((-1.0)*r01*x14961*x14963))+((r00*x14954*x14958)));
evalcond[5]=((((-1.0)*r20*x14959*x14963))+((r22*x14966))+x14960+((cj1*sj2))+((r21*x14954*x14957))+((r21*x14958))+((r20*x14961)));
evalcond[6]=(x14955+((r12*x14966))+(((-1.0)*x14962))+(((-1.0)*r10*x14959*x14963))+((r10*x14961))+((r11*x14954*x14957))+((r11*x14958)));
evalcond[7]=((((-1.0)*r21*x14961*x14963))+x14955+(((-1.0)*r22*sj3*x14964))+(((-1.0)*x14962))+((r20*x14954*x14958))+((r21*x14959))+((r20*x14957)));
evalcond[8]=((((-1.0)*x14960))+(((-1.0)*sj2*x14956))+((r10*x14957))+(((-1.0)*r11*x14961*x14963))+((r10*x14954*x14958))+(((-1.0)*r12*sj3*x14964))+((r11*x14959)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14967 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst53*r10))+((gconst52*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14967.valid){
continue;
}
CheckValue<IkReal> x14968=IKPowWithIntegerCheck(IKsign((((gconst53*r21))+((gconst52*r20)))),-1);
if(!x14968.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14967.value)+(((1.5707963267949)*(x14968.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14969=IKsin(j4);
IkReal x14970=IKcos(j4);
IkReal x14971=(sj1*sj2);
IkReal x14972=((1.0)*cj1);
IkReal x14973=(cj3*gconst52);
IkReal x14974=(gconst53*sj3);
IkReal x14975=(cj3*gconst53);
IkReal x14976=(cj2*sj1);
IkReal x14977=(gconst52*sj3);
IkReal x14978=(cj2*x14972);
IkReal x14979=((1.0)*x14970);
IkReal x14980=((1.0)*x14969);
IkReal x14981=(gconst52*x14969);
IkReal x14982=(cj3*x14969);
evalcond[0]=((((-1.0)*r22*x14979))+(((-1.0)*gconst53*r20*x14980))+((r21*x14981)));
evalcond[1]=((((-1.0)*gconst53*r10*x14980))+(((-1.0)*r12*x14979))+((r11*x14981)));
evalcond[2]=((-1.0)+((r01*x14981))+(((-1.0)*gconst53*r00*x14980))+(((-1.0)*r02*x14979)));
evalcond[3]=(((r01*x14970*x14973))+(((-1.0)*r00*x14975*x14979))+((r02*x14982))+((r01*x14974))+((r00*x14977)));
evalcond[4]=((((-1.0)*r01*x14977*x14979))+((r00*x14970*x14974))+(((-1.0)*r02*sj3*x14980))+((r01*x14975))+((r00*x14973)));
evalcond[5]=(x14976+((cj1*sj2))+(((-1.0)*r20*x14975*x14979))+((r21*x14970*x14973))+((r22*x14982))+((r20*x14977))+((r21*x14974)));
evalcond[6]=((((-1.0)*r10*x14975*x14979))+x14971+(((-1.0)*x14978))+((r11*x14974))+((r11*x14970*x14973))+((r12*x14982))+((r10*x14977)));
evalcond[7]=((((-1.0)*r22*sj3*x14980))+x14971+(((-1.0)*x14978))+((r20*x14973))+((r21*x14975))+((r20*x14970*x14974))+(((-1.0)*r21*x14977*x14979)));
evalcond[8]=((((-1.0)*sj2*x14972))+(((-1.0)*x14976))+(((-1.0)*r12*sj3*x14980))+((r11*x14975))+(((-1.0)*r11*x14977*x14979))+((r10*x14973))+((r10*x14970*x14974)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14983=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14983);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14983);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x14984=(r01*sj5);
IkReal x14985=((1.0)*cj5*r00);
j4eval[0]=(x14984+(((-1.0)*x14985)));
j4eval[1]=((((-1.0)*cj3*x14985))+((cj3*x14984)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14986=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14986);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14986);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x14987=(cj5*r00);
IkReal x14988=(r01*sj5);
j4eval[0]=(x14988+(((-1.0)*x14987)));
j4eval[1]=(((sj3*x14987))+(((-1.0)*sj3*x14988)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14989=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14989);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14989);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
j4eval[2]=(((cj3*r01*sj5))+(((-1.0)*cj3*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14990=((1.0)*r00);
CheckValue<IkReal> x14991=IKPowWithIntegerCheck(cj3,-1);
if(!x14991.valid){
continue;
}
CheckValue<IkReal> x14992=IKPowWithIntegerCheck(r22,-1);
if(!x14992.valid){
continue;
}
CheckValue<IkReal> x14993=IKPowWithIntegerCheck((((cj3*r01*sj5))+(((-1.0)*cj3*cj5*x14990))),-1);
if(!x14993.valid){
continue;
}
if( IKabs(((x14991.value)*(x14992.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14993.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x14990)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14991.value)*(x14992.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((x14993.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x14990))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14991.value)*(x14992.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))), ((x14993.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x14990))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14994=IKsin(j4);
IkReal x14995=IKcos(j4);
IkReal x14996=(sj1*sj2);
IkReal x14997=(cj5*sj3);
IkReal x14998=(r11*sj5);
IkReal x14999=(cj3*cj5);
IkReal x15000=((1.0)*cj1);
IkReal x15001=(cj3*sj5);
IkReal x15002=(sj3*sj5);
IkReal x15003=(cj2*sj1);
IkReal x15004=(r01*sj5);
IkReal x15005=((1.0)*sj3);
IkReal x15006=(cj2*x15000);
IkReal x15007=(r10*x14995);
IkReal x15008=(r22*x14994);
IkReal x15009=(cj3*x14995);
IkReal x15010=((1.0)*cj5*x14994);
evalcond[0]=((-1.0)*r22*x14995);
evalcond[1]=(((cj1*sj2))+x15003+((cj3*x15008)));
evalcond[2]=((((-1.0)*r10*x15010))+((x14994*x14998)));
evalcond[3]=((-1.0)+((x14994*x15004))+(((-1.0)*r00*x15010)));
evalcond[4]=(x14996+(((-1.0)*x15005*x15008))+(((-1.0)*x15006)));
evalcond[5]=(((r01*x14995*x15001))+((r00*x15002))+(((-1.0)*r00*x14995*x14999))+((r01*x14997)));
evalcond[6]=(((r00*x15001))+(((-1.0)*r01*x14995*x15002))+((r00*x14995*x14997))+((r01*x14999)));
evalcond[7]=((((-1.0)*x14999*x15007))+x14996+((x14998*x15009))+((r10*x15002))+((r11*x14997))+(((-1.0)*x15006)));
evalcond[8]=((((-1.0)*sj2*x15000))+(((-1.0)*x15003))+((r10*x15001))+((r11*x14999))+((x14997*x15007))+(((-1.0)*x14995*x14998*x15005)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15011=((1.0)*cj3);
IkReal x15012=(cj5*r00);
IkReal x15013=(r01*sj5);
CheckValue<IkReal> x15014=IKPowWithIntegerCheck(((((-1.0)*x15012))+x15013),-1);
if(!x15014.valid){
continue;
}
CheckValue<IkReal> x15015=IKPowWithIntegerCheck((((sj3*x15012))+(((-1.0)*sj3*x15013))),-1);
if(!x15015.valid){
continue;
}
if( IKabs(x15014.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15015.value)*(((((-1.0)*r00*sj5*x15011))+(((-1.0)*cj5*r01*x15011)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x15014.value)+IKsqr(((x15015.value)*(((((-1.0)*r00*sj5*x15011))+(((-1.0)*cj5*r01*x15011))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x15014.value, ((x15015.value)*(((((-1.0)*r00*sj5*x15011))+(((-1.0)*cj5*r01*x15011))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15016=IKsin(j4);
IkReal x15017=IKcos(j4);
IkReal x15018=(sj1*sj2);
IkReal x15019=(cj5*sj3);
IkReal x15020=(r11*sj5);
IkReal x15021=(cj3*cj5);
IkReal x15022=((1.0)*cj1);
IkReal x15023=(cj3*sj5);
IkReal x15024=(sj3*sj5);
IkReal x15025=(cj2*sj1);
IkReal x15026=(r01*sj5);
IkReal x15027=((1.0)*sj3);
IkReal x15028=(cj2*x15022);
IkReal x15029=(r10*x15017);
IkReal x15030=(r22*x15016);
IkReal x15031=(cj3*x15017);
IkReal x15032=((1.0)*cj5*x15016);
evalcond[0]=((-1.0)*r22*x15017);
evalcond[1]=(((cj1*sj2))+x15025+((cj3*x15030)));
evalcond[2]=(((x15016*x15020))+(((-1.0)*r10*x15032)));
evalcond[3]=((-1.0)+((x15016*x15026))+(((-1.0)*r00*x15032)));
evalcond[4]=(x15018+(((-1.0)*x15028))+(((-1.0)*x15027*x15030)));
evalcond[5]=(((r00*x15024))+(((-1.0)*r00*x15017*x15021))+((r01*x15019))+((r01*x15017*x15023)));
evalcond[6]=(((r00*x15017*x15019))+((r00*x15023))+(((-1.0)*r01*x15017*x15024))+((r01*x15021)));
evalcond[7]=(((r10*x15024))+x15018+((x15020*x15031))+(((-1.0)*x15028))+((r11*x15019))+(((-1.0)*x15021*x15029)));
evalcond[8]=((((-1.0)*x15025))+((r10*x15023))+((x15019*x15029))+(((-1.0)*sj2*x15022))+((r11*x15021))+(((-1.0)*x15017*x15020*x15027)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15033=((1.0)*sj3);
IkReal x15034=(r01*sj5);
IkReal x15035=((1.0)*cj5*r00);
CheckValue<IkReal> x15036=IKPowWithIntegerCheck(((((-1.0)*x15035))+x15034),-1);
if(!x15036.valid){
continue;
}
CheckValue<IkReal> x15037=IKPowWithIntegerCheck((((cj3*x15034))+(((-1.0)*cj3*x15035))),-1);
if(!x15037.valid){
continue;
}
if( IKabs(x15036.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15037.value)*(((((-1.0)*r00*sj5*x15033))+(((-1.0)*cj5*r01*x15033)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x15036.value)+IKsqr(((x15037.value)*(((((-1.0)*r00*sj5*x15033))+(((-1.0)*cj5*r01*x15033))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x15036.value, ((x15037.value)*(((((-1.0)*r00*sj5*x15033))+(((-1.0)*cj5*r01*x15033))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15038=IKsin(j4);
IkReal x15039=IKcos(j4);
IkReal x15040=(sj1*sj2);
IkReal x15041=(cj5*sj3);
IkReal x15042=(r11*sj5);
IkReal x15043=(cj3*cj5);
IkReal x15044=((1.0)*cj1);
IkReal x15045=(cj3*sj5);
IkReal x15046=(sj3*sj5);
IkReal x15047=(cj2*sj1);
IkReal x15048=(r01*sj5);
IkReal x15049=((1.0)*sj3);
IkReal x15050=(cj2*x15044);
IkReal x15051=(r10*x15039);
IkReal x15052=(r22*x15038);
IkReal x15053=(cj3*x15039);
IkReal x15054=((1.0)*cj5*x15038);
evalcond[0]=((-1.0)*r22*x15039);
evalcond[1]=(((cj1*sj2))+x15047+((cj3*x15052)));
evalcond[2]=(((x15038*x15042))+(((-1.0)*r10*x15054)));
evalcond[3]=((-1.0)+((x15038*x15048))+(((-1.0)*r00*x15054)));
evalcond[4]=((((-1.0)*x15049*x15052))+x15040+(((-1.0)*x15050)));
evalcond[5]=(((r00*x15046))+((r01*x15041))+(((-1.0)*r00*x15039*x15043))+((r01*x15039*x15045)));
evalcond[6]=(((r00*x15045))+((r01*x15043))+(((-1.0)*r01*x15039*x15046))+((r00*x15039*x15041)));
evalcond[7]=((((-1.0)*x15043*x15051))+((x15042*x15053))+((r11*x15041))+x15040+(((-1.0)*x15050))+((r10*x15046)));
evalcond[8]=((((-1.0)*x15039*x15042*x15049))+(((-1.0)*sj2*x15044))+((r11*x15043))+(((-1.0)*x15047))+((r10*x15045))+((x15041*x15051)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15055=cj5*cj5;
IkReal x15056=(cj3*r20);
IkReal x15057=(r21*sj3);
IkReal x15058=((1.0)*cj3);
IkReal x15059=(r01*r21);
IkReal x15060=(r01*sj3);
IkReal x15061=(r00*sj5);
IkReal x15062=(cj5*r01*sj5);
IkReal x15063=((1.0)*x15055);
CheckValue<IkReal> x15064 = IKatan2WithCheck(IkReal((((r22*sj3*x15061))+((cj5*r22*x15060)))),IkReal(((((-1.0)*cj5*r20*sj3*x15061))+(((-1.0)*r20*x15060*x15063))+(((-1.0)*r00*x15057*x15063))+((x15057*x15062))+((r00*x15057)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15064.valid){
continue;
}
CheckValue<IkReal> x15065=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22*x15058))+(((-1.0)*r00*x15056*x15063))+(((-1.0)*x15058*x15059))+((cj3*x15055*x15059))+((x15056*x15062))+((cj3*cj5*r21*x15061)))),-1);
if(!x15065.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15064.value)+(((1.5707963267949)*(x15065.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15066=IKsin(j4);
IkReal x15067=IKcos(j4);
IkReal x15068=(sj1*sj2);
IkReal x15069=(r11*sj5);
IkReal x15070=(cj5*r10);
IkReal x15071=(cj5*r01);
IkReal x15072=(cj5*r00);
IkReal x15073=((1.0)*cj1);
IkReal x15074=(cj3*sj5);
IkReal x15075=(r21*sj5);
IkReal x15076=(cj5*sj3);
IkReal x15077=(sj3*sj5);
IkReal x15078=(cj2*sj1);
IkReal x15079=(r01*sj5);
IkReal x15080=(cj3*cj5);
IkReal x15081=(cj5*r20);
IkReal x15082=(cj2*x15073);
IkReal x15083=((1.0)*x15067);
IkReal x15084=((1.0)*x15066);
IkReal x15085=(cj3*x15067);
IkReal x15086=(sj3*x15067);
IkReal x15087=(cj3*x15066);
evalcond[0]=((((-1.0)*r22*x15083))+((x15066*x15075))+(((-1.0)*x15081*x15084)));
evalcond[1]=(((x15066*x15069))+(((-1.0)*r12*x15083))+(((-1.0)*x15070*x15084)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x15083))+((x15066*x15079))+(((-1.0)*x15072*x15084)));
evalcond[3]=((((-1.0)*cj3*x15072*x15083))+((r02*x15087))+((r00*x15077))+((sj3*x15071))+((r01*x15067*x15074)));
evalcond[4]=(((r00*x15074))+((cj3*x15071))+(((-1.0)*r02*sj3*x15084))+((x15072*x15086))+(((-1.0)*r01*x15077*x15083)));
evalcond[5]=((((-1.0)*r20*x15080*x15083))+((cj1*sj2))+((r21*x15067*x15074))+((r22*x15087))+x15078+((r20*x15077))+((r21*x15076)));
evalcond[6]=(((r12*x15087))+(((-1.0)*cj3*x15070*x15083))+(((-1.0)*x15082))+((r11*x15076))+x15068+((r10*x15077))+((x15069*x15085)));
evalcond[7]=((((-1.0)*sj3*x15075*x15083))+(((-1.0)*x15082))+x15068+((r20*x15074))+((r21*x15080))+((r20*x15067*x15076))+(((-1.0)*r22*sj3*x15084)));
evalcond[8]=((((-1.0)*sj2*x15073))+(((-1.0)*sj3*x15069*x15083))+(((-1.0)*x15078))+((r10*x15074))+(((-1.0)*r12*sj3*x15084))+((r11*x15080))+((x15070*x15086)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15088=((1.0)*cj5);
CheckValue<IkReal> x15089=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x15088)))),-1);
if(!x15089.valid){
continue;
}
CheckValue<IkReal> x15090 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x15088)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15090.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15089.value)))+(x15090.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15091=IKsin(j4);
IkReal x15092=IKcos(j4);
IkReal x15093=(sj1*sj2);
IkReal x15094=(r11*sj5);
IkReal x15095=(cj5*r10);
IkReal x15096=(cj5*r01);
IkReal x15097=(cj5*r00);
IkReal x15098=((1.0)*cj1);
IkReal x15099=(cj3*sj5);
IkReal x15100=(r21*sj5);
IkReal x15101=(cj5*sj3);
IkReal x15102=(sj3*sj5);
IkReal x15103=(cj2*sj1);
IkReal x15104=(r01*sj5);
IkReal x15105=(cj3*cj5);
IkReal x15106=(cj5*r20);
IkReal x15107=(cj2*x15098);
IkReal x15108=((1.0)*x15092);
IkReal x15109=((1.0)*x15091);
IkReal x15110=(cj3*x15092);
IkReal x15111=(sj3*x15092);
IkReal x15112=(cj3*x15091);
evalcond[0]=(((x15091*x15100))+(((-1.0)*r22*x15108))+(((-1.0)*x15106*x15109)));
evalcond[1]=((((-1.0)*r12*x15108))+(((-1.0)*x15095*x15109))+((x15091*x15094)));
evalcond[2]=((-1.0)+((x15091*x15104))+(((-1.0)*x15097*x15109))+(((-1.0)*r02*x15108)));
evalcond[3]=(((sj3*x15096))+((r00*x15102))+(((-1.0)*cj3*x15097*x15108))+((r01*x15092*x15099))+((r02*x15112)));
evalcond[4]=(((r00*x15099))+((cj3*x15096))+(((-1.0)*r02*sj3*x15109))+((x15097*x15111))+(((-1.0)*r01*x15102*x15108)));
evalcond[5]=((((-1.0)*r20*x15105*x15108))+((cj1*sj2))+((r21*x15101))+x15103+((r20*x15102))+((r22*x15112))+((r21*x15092*x15099)));
evalcond[6]=((((-1.0)*cj3*x15095*x15108))+x15093+((r10*x15102))+((r12*x15112))+(((-1.0)*x15107))+((x15094*x15110))+((r11*x15101)));
evalcond[7]=((((-1.0)*sj3*x15100*x15108))+((r20*x15099))+((r21*x15105))+x15093+((r20*x15092*x15101))+(((-1.0)*r22*sj3*x15109))+(((-1.0)*x15107)));
evalcond[8]=(((r10*x15099))+((x15095*x15111))+(((-1.0)*r12*sj3*x15109))+(((-1.0)*x15103))+(((-1.0)*sj3*x15094*x15108))+(((-1.0)*sj2*x15098))+((r11*x15105)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15113=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x15113.valid){
continue;
}
CheckValue<IkReal> x15114 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15114.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15113.value)))+(x15114.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15115=IKsin(j4);
IkReal x15116=IKcos(j4);
IkReal x15117=(sj1*sj2);
IkReal x15118=(r11*sj5);
IkReal x15119=(cj5*r10);
IkReal x15120=(cj5*r01);
IkReal x15121=(cj5*r00);
IkReal x15122=((1.0)*cj1);
IkReal x15123=(cj3*sj5);
IkReal x15124=(r21*sj5);
IkReal x15125=(cj5*sj3);
IkReal x15126=(sj3*sj5);
IkReal x15127=(cj2*sj1);
IkReal x15128=(r01*sj5);
IkReal x15129=(cj3*cj5);
IkReal x15130=(cj5*r20);
IkReal x15131=(cj2*x15122);
IkReal x15132=((1.0)*x15116);
IkReal x15133=((1.0)*x15115);
IkReal x15134=(cj3*x15116);
IkReal x15135=(sj3*x15116);
IkReal x15136=(cj3*x15115);
evalcond[0]=(((x15115*x15124))+(((-1.0)*r22*x15132))+(((-1.0)*x15130*x15133)));
evalcond[1]=((((-1.0)*r12*x15132))+(((-1.0)*x15119*x15133))+((x15115*x15118)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x15132))+((x15115*x15128))+(((-1.0)*x15121*x15133)));
evalcond[3]=(((r01*x15116*x15123))+((sj3*x15120))+((r00*x15126))+(((-1.0)*cj3*x15121*x15132))+((r02*x15136)));
evalcond[4]=(((x15121*x15135))+(((-1.0)*r02*sj3*x15133))+((r00*x15123))+(((-1.0)*r01*x15126*x15132))+((cj3*x15120)));
evalcond[5]=(((r20*x15126))+((r21*x15125))+((cj1*sj2))+((r22*x15136))+((r21*x15116*x15123))+x15127+(((-1.0)*r20*x15129*x15132)));
evalcond[6]=((((-1.0)*cj3*x15119*x15132))+(((-1.0)*x15131))+x15117+((x15118*x15134))+((r12*x15136))+((r10*x15126))+((r11*x15125)));
evalcond[7]=(((r20*x15123))+((r20*x15116*x15125))+((r21*x15129))+(((-1.0)*x15131))+(((-1.0)*r22*sj3*x15133))+x15117+(((-1.0)*sj3*x15124*x15132)));
evalcond[8]=((((-1.0)*r12*sj3*x15133))+(((-1.0)*sj3*x15118*x15132))+((x15119*x15135))+(((-1.0)*x15127))+((r10*x15123))+(((-1.0)*sj2*x15122))+((r11*x15129)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x15137=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x15137;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x15137);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x15138=((1.0)*cj5);
IkReal x15139=((((-1.0)*r21*x15138))+(((-1.0)*r20*sj5)));
j4eval[0]=x15139;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x15138))+((r11*sj5))))));
j4eval[2]=IKsign(x15139);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x15140=cj5*cj5;
IkReal x15141=(cj3*r01);
IkReal x15142=(cj5*sj5);
IkReal x15143=((1.0)*cj3);
IkReal x15144=(((cj3*r00*r21*x15142))+(((-1.0)*r02*r22*x15143))+(((-1.0)*r00*r20*x15140*x15143))+((r20*x15141*x15142))+(((-1.0)*r21*x15141))+((r21*x15140*x15141)));
j4eval[0]=x15144;
j4eval[1]=IKsign(x15144);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15145=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x15145;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x15145);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15146=((1.0)*cj5);
IkReal x15147=((((-1.0)*r21*x15146))+(((-1.0)*r20*sj5)));
j4eval[0]=x15147;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x15146))+((r11*sj5))))));
j4eval[2]=IKsign(x15147);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15148=cj5*cj5;
IkReal x15149=r01*r01;
IkReal x15150=(cj5*r00);
IkReal x15151=(r01*sj5);
IkReal x15152=(((x15148*(r00*r00)))+x15149+(((-2.0)*x15150*x15151))+(((-1.0)*x15148*x15149))+(r02*r02));
j4eval[0]=x15152;
j4eval[1]=((IKabs(r02))+(IKabs((x15150+(((-1.0)*x15151))))));
j4eval[2]=IKsign(x15152);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15153=cj5*cj5;
IkReal x15154=r01*r01;
IkReal x15155=(r01*sj5);
IkReal x15156=(cj5*r00);
CheckValue<IkReal> x15157=IKPowWithIntegerCheck(IKsign(((((-1.0)*x15153*x15154))+x15154+(((-2.0)*x15155*x15156))+(r02*r02)+((x15153*(r00*r00))))),-1);
if(!x15157.valid){
continue;
}
CheckValue<IkReal> x15158 = IKatan2WithCheck(IkReal((x15156+(((-1.0)*x15155)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x15158.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15157.value)))+(x15158.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15159=IKsin(j4);
IkReal x15160=IKcos(j4);
IkReal x15161=(cj5*r10);
IkReal x15162=(r01*sj5);
IkReal x15163=(cj5*r00);
IkReal x15164=(cj5*r20);
IkReal x15165=((1.0)*x15160);
IkReal x15166=((1.0)*x15159);
IkReal x15167=(sj5*x15159);
evalcond[0]=(((r21*x15167))+(((-1.0)*r22*x15165))+(((-1.0)*x15164*x15166)));
evalcond[1]=(((r11*x15167))+(((-1.0)*x15161*x15166))+(((-1.0)*r12*x15165)));
evalcond[2]=((((-1.0)*x15162*x15165))+(((-1.0)*r02*x15166))+((x15160*x15163)));
evalcond[3]=((1.0)+(((-1.0)*x15163*x15166))+((x15159*x15162))+(((-1.0)*r02*x15165)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r11*sj5*x15165))+(((-1.0)*r12*x15166))+((x15160*x15161)));
evalcond[5]=((((-1.0)*r21*sj5*x15165))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x15166))+((x15160*x15164)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15168=((1.0)*cj5);
CheckValue<IkReal> x15169 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x15168)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15169.valid){
continue;
}
CheckValue<IkReal> x15170=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15168))+(((-1.0)*r20*sj5)))),-1);
if(!x15170.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15169.value)+(((1.5707963267949)*(x15170.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15171=IKsin(j4);
IkReal x15172=IKcos(j4);
IkReal x15173=(cj5*r10);
IkReal x15174=(r01*sj5);
IkReal x15175=(cj5*r00);
IkReal x15176=(cj5*r20);
IkReal x15177=((1.0)*x15172);
IkReal x15178=((1.0)*x15171);
IkReal x15179=(sj5*x15171);
evalcond[0]=((((-1.0)*x15176*x15178))+((r21*x15179))+(((-1.0)*r22*x15177)));
evalcond[1]=((((-1.0)*x15173*x15178))+((r11*x15179))+(((-1.0)*r12*x15177)));
evalcond[2]=(((x15172*x15175))+(((-1.0)*x15174*x15177))+(((-1.0)*r02*x15178)));
evalcond[3]=((1.0)+((x15171*x15174))+(((-1.0)*x15175*x15178))+(((-1.0)*r02*x15177)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r11*sj5*x15177))+((x15172*x15173))+(((-1.0)*r12*x15178)));
evalcond[5]=((((-1.0)*r21*sj5*x15177))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x15172*x15176))+(((-1.0)*r22*x15178)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15180 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15180.valid){
continue;
}
CheckValue<IkReal> x15181=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x15181.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15180.value)+(((1.5707963267949)*(x15181.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15182=IKsin(j4);
IkReal x15183=IKcos(j4);
IkReal x15184=(cj5*r10);
IkReal x15185=(r01*sj5);
IkReal x15186=(cj5*r00);
IkReal x15187=(cj5*r20);
IkReal x15188=((1.0)*x15183);
IkReal x15189=((1.0)*x15182);
IkReal x15190=(sj5*x15182);
evalcond[0]=(((r21*x15190))+(((-1.0)*x15187*x15189))+(((-1.0)*r22*x15188)));
evalcond[1]=(((r11*x15190))+(((-1.0)*x15184*x15189))+(((-1.0)*r12*x15188)));
evalcond[2]=((((-1.0)*x15185*x15188))+(((-1.0)*r02*x15189))+((x15183*x15186)));
evalcond[3]=((1.0)+(((-1.0)*r02*x15188))+((x15182*x15185))+(((-1.0)*x15186*x15189)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r11*sj5*x15188))+((cj1*sj2))+((x15183*x15184))+(((-1.0)*r12*x15189)));
evalcond[5]=((((-1.0)*r21*sj5*x15188))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x15183*x15187))+(((-1.0)*r22*x15189)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15191=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x15191;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x15191);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15192=((1.0)*cj5);
IkReal x15193=((((-1.0)*r21*x15192))+(((-1.0)*r20*sj5)));
j4eval[0]=x15193;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x15192))+((r11*sj5))))));
j4eval[2]=IKsign(x15193);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15194=cj5*cj5;
IkReal x15195=r01*r01;
IkReal x15196=(r01*sj5);
IkReal x15197=(cj5*r00);
IkReal x15198=((((2.0)*x15196*x15197))+(((-1.0)*x15194*(r00*r00)))+(((-1.0)*(r02*r02)))+((x15194*x15195))+(((-1.0)*x15195)));
j4eval[0]=x15198;
j4eval[1]=IKsign(x15198);
j4eval[2]=((IKabs(r02))+(IKabs((x15196+(((-1.0)*x15197))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15199=cj5*cj5;
IkReal x15200=r01*r01;
IkReal x15201=(r01*sj5);
IkReal x15202=(cj5*r00);
CheckValue<IkReal> x15203 = IKatan2WithCheck(IkReal(((((-1.0)*x15202))+x15201)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x15203.valid){
continue;
}
CheckValue<IkReal> x15204=IKPowWithIntegerCheck(IKsign(((((-1.0)*x15199*(r00*r00)))+(((-1.0)*x15200))+(((-1.0)*(r02*r02)))+(((2.0)*x15201*x15202))+((x15199*x15200)))),-1);
if(!x15204.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15203.value)+(((1.5707963267949)*(x15204.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15205=IKcos(j4);
IkReal x15206=IKsin(j4);
IkReal x15207=(cj5*r00);
IkReal x15208=(cj5*r10);
IkReal x15209=(r21*sj5);
IkReal x15210=(cj5*r20);
IkReal x15211=((1.0)*x15205);
IkReal x15212=((1.0)*x15206);
IkReal x15213=(sj5*x15206);
IkReal x15214=(sj5*x15205);
evalcond[0]=(((r01*x15214))+(((-1.0)*x15207*x15211))+((r02*x15206)));
evalcond[1]=((((-1.0)*x15210*x15212))+((x15206*x15209))+(((-1.0)*r22*x15211)));
evalcond[2]=((((-1.0)*x15208*x15212))+((r11*x15213))+(((-1.0)*r12*x15211)));
evalcond[3]=((1.0)+(((-1.0)*r02*x15211))+((r01*x15213))+(((-1.0)*x15207*x15212)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x15208*x15211))+((cj1*sj2))+((r11*x15214))+((r12*x15206)));
evalcond[5]=((((-1.0)*x15210*x15211))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x15206))+((x15205*x15209)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15215=((1.0)*cj5);
CheckValue<IkReal> x15216=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15215))+(((-1.0)*r20*sj5)))),-1);
if(!x15216.valid){
continue;
}
CheckValue<IkReal> x15217 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x15215)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15217.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15216.value)))+(x15217.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15218=IKcos(j4);
IkReal x15219=IKsin(j4);
IkReal x15220=(cj5*r00);
IkReal x15221=(cj5*r10);
IkReal x15222=(r21*sj5);
IkReal x15223=(cj5*r20);
IkReal x15224=((1.0)*x15218);
IkReal x15225=((1.0)*x15219);
IkReal x15226=(sj5*x15219);
IkReal x15227=(sj5*x15218);
evalcond[0]=((((-1.0)*x15220*x15224))+((r02*x15219))+((r01*x15227)));
evalcond[1]=((((-1.0)*r22*x15224))+((x15219*x15222))+(((-1.0)*x15223*x15225)));
evalcond[2]=((((-1.0)*r12*x15224))+(((-1.0)*x15221*x15225))+((r11*x15226)));
evalcond[3]=((1.0)+(((-1.0)*x15220*x15225))+(((-1.0)*r02*x15224))+((r01*x15226)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x15221*x15224))+((cj1*sj2))+((r12*x15219))+((r11*x15227)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x15219))+((x15218*x15222))+(((-1.0)*x15223*x15224)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15228 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15228.valid){
continue;
}
CheckValue<IkReal> x15229=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x15229.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15228.value)+(((1.5707963267949)*(x15229.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15230=IKcos(j4);
IkReal x15231=IKsin(j4);
IkReal x15232=(cj5*r00);
IkReal x15233=(cj5*r10);
IkReal x15234=(r21*sj5);
IkReal x15235=(cj5*r20);
IkReal x15236=((1.0)*x15230);
IkReal x15237=((1.0)*x15231);
IkReal x15238=(sj5*x15231);
IkReal x15239=(sj5*x15230);
evalcond[0]=(((r02*x15231))+(((-1.0)*x15232*x15236))+((r01*x15239)));
evalcond[1]=((((-1.0)*r22*x15236))+((x15231*x15234))+(((-1.0)*x15235*x15237)));
evalcond[2]=((((-1.0)*x15233*x15237))+(((-1.0)*r12*x15236))+((r11*x15238)));
evalcond[3]=((1.0)+(((-1.0)*x15232*x15237))+((r01*x15238))+(((-1.0)*r02*x15236)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x15233*x15236))+((cj1*sj2))+((r12*x15231))+((r11*x15239)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x15231))+((x15230*x15234))+(((-1.0)*x15235*x15236)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15241 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x15241)==0){
continue;
}
IkReal x15240=pow(x15241,-0.5);
CheckValue<IkReal> x15242 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15242.valid){
continue;
}
IkReal gconst60=((-1.0)*(x15242.value));
IkReal gconst61=((-1.0)*r11*x15240);
IkReal gconst62=(r10*x15240);
CheckValue<IkReal> x15243 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15243.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x15243.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x15246 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15246.valid){
continue;
}
IkReal x15244=((-1.0)*(x15246.value));
IkReal x15245=x15240;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst61;
cj5=gconst62;
j5=x15244;
IkReal gconst60=x15244;
IkReal gconst61=((-1.0)*r11*x15245);
IkReal gconst62=(r10*x15245);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x15249 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15249.valid){
continue;
}
IkReal x15247=((-1.0)*(x15249.value));
IkReal x15248=x15240;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst61;
cj5=gconst62;
j5=x15247;
IkReal gconst60=x15247;
IkReal gconst61=((-1.0)*r11*x15248);
IkReal gconst62=(r10*x15248);
CheckValue<IkReal> x15257=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x15257.valid){
continue;
}
IkReal x15250=x15257.value;
IkReal x15251=(sj3*x15250);
IkReal x15252=(r20*x15251);
IkReal x15253=(r00*x15251);
IkReal x15254=(r01*x15251);
IkReal x15255=(r21*x15251);
IkReal x15256=(r10*r11*x15251);
j4eval[0]=IKsign((((r21*x15254*(r11*r11)))+((r10*r11*r21*x15253))+((r01*r10*r11*x15252))+((r02*r22*sj3))+((r00*x15252*(r10*r10)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15258=gconst61*gconst61;
IkReal x15259=gconst62*gconst62;
IkReal x15260=(cj3*r01);
IkReal x15261=(r22*sj3);
IkReal x15262=(gconst61*r00);
IkReal x15263=((1.0)*cj3);
IkReal x15264=(gconst62*r01);
IkReal x15265=((1.0)*sj3);
IkReal x15266=(gconst61*gconst62*r20);
IkReal x15267=(r21*x15258);
IkReal x15268=(r20*x15259);
CheckValue<IkReal> x15269=IKPowWithIntegerCheck(IKsign((((cj3*gconst62*r21*x15262))+((x15260*x15266))+(((-1.0)*r00*x15263*x15268))+(((-1.0)*r02*r22*x15263))+(((-1.0)*x15260*x15267)))),-1);
if(!x15269.valid){
continue;
}
CheckValue<IkReal> x15270 = IKatan2WithCheck(IkReal((((x15261*x15262))+((x15261*x15264)))),IkReal((((r00*sj3*x15267))+(((-1.0)*gconst62*r20*x15262*x15265))+(((-1.0)*r01*x15265*x15268))+((gconst61*r21*sj3*x15264)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15270.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15269.value)))+(x15270.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15271=IKsin(j4);
IkReal x15272=IKcos(j4);
IkReal x15273=(cj2*sj1);
IkReal x15274=(cj1*sj2);
IkReal x15275=(gconst61*sj3);
IkReal x15276=(cj3*gconst61);
IkReal x15277=(cj3*gconst62);
IkReal x15278=(sj1*sj2);
IkReal x15279=(gconst62*sj3);
IkReal x15280=(cj1*cj2);
IkReal x15281=((1.0)*x15272);
IkReal x15282=((1.0)*x15271);
IkReal x15283=(gconst61*x15271);
IkReal x15284=(cj3*x15271);
IkReal x15285=(x15273+x15274);
evalcond[0]=((((-1.0)*gconst62*r20*x15282))+(((-1.0)*r22*x15281))+((r21*x15283)));
evalcond[1]=((((-1.0)*r12*x15281))+((r11*x15283))+(((-1.0)*gconst62*r10*x15282)));
evalcond[2]=((1.0)+((r01*x15283))+(((-1.0)*gconst62*r00*x15282))+(((-1.0)*r02*x15281)));
evalcond[3]=(((r01*x15272*x15276))+((r02*x15284))+(((-1.0)*r00*x15277*x15281))+((r01*x15279))+((r00*x15275)));
evalcond[4]=(((r00*x15272*x15279))+(((-1.0)*r02*sj3*x15282))+(((-1.0)*r01*x15275*x15281))+((r01*x15277))+((r00*x15276)));
evalcond[5]=(((r22*x15284))+x15285+(((-1.0)*r20*x15277*x15281))+((r20*x15275))+((r21*x15279))+((r21*x15272*x15276)));
evalcond[6]=((((-1.0)*r10*x15277*x15281))+((r11*x15279))+x15280+((r11*x15272*x15276))+((r10*x15275))+(((-1.0)*x15278))+((r12*x15284)));
evalcond[7]=(((r11*x15277))+(((-1.0)*r12*sj3*x15282))+x15285+((r10*x15276))+((r10*x15272*x15279))+(((-1.0)*r11*x15275*x15281)));
evalcond[8]=((((-1.0)*r22*sj3*x15282))+x15278+((r20*x15272*x15279))+((r20*x15276))+((r21*x15277))+(((-1.0)*r21*x15275*x15281))+(((-1.0)*x15280)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15286=gconst61*gconst61;
IkReal x15287=gconst62*gconst62;
IkReal x15288=(cj3*r22);
IkReal x15289=(gconst62*r01);
IkReal x15290=(gconst61*r00);
IkReal x15291=((1.0)*r20);
IkReal x15292=(cj3*r21);
IkReal x15293=(r21*sj3);
CheckValue<IkReal> x15294 = IKatan2WithCheck(IkReal((((x15288*x15289))+((x15288*x15290)))),IkReal((((r00*x15286*x15292))+((gconst61*x15289*x15292))+(((-1.0)*cj3*r01*x15287*x15291))+(((-1.0)*cj3*gconst62*x15290*x15291)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15294.valid){
continue;
}
CheckValue<IkReal> x15295=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst62*x15290*x15293))+(((-1.0)*gconst61*sj3*x15289*x15291))+((r01*x15286*x15293))+((r00*r20*sj3*x15287))+((r02*r22*sj3)))),-1);
if(!x15295.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15294.value)+(((1.5707963267949)*(x15295.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15296=IKsin(j4);
IkReal x15297=IKcos(j4);
IkReal x15298=(cj2*sj1);
IkReal x15299=(cj1*sj2);
IkReal x15300=(gconst61*sj3);
IkReal x15301=(cj3*gconst61);
IkReal x15302=(cj3*gconst62);
IkReal x15303=(sj1*sj2);
IkReal x15304=(gconst62*sj3);
IkReal x15305=(cj1*cj2);
IkReal x15306=((1.0)*x15297);
IkReal x15307=((1.0)*x15296);
IkReal x15308=(gconst61*x15296);
IkReal x15309=(cj3*x15296);
IkReal x15310=(x15298+x15299);
evalcond[0]=((((-1.0)*gconst62*r20*x15307))+((r21*x15308))+(((-1.0)*r22*x15306)));
evalcond[1]=((((-1.0)*gconst62*r10*x15307))+(((-1.0)*r12*x15306))+((r11*x15308)));
evalcond[2]=((1.0)+((r01*x15308))+(((-1.0)*r02*x15306))+(((-1.0)*gconst62*r00*x15307)));
evalcond[3]=(((r02*x15309))+((r00*x15300))+((r01*x15304))+(((-1.0)*r00*x15302*x15306))+((r01*x15297*x15301)));
evalcond[4]=((((-1.0)*r01*x15300*x15306))+(((-1.0)*r02*sj3*x15307))+((r00*x15301))+((r01*x15302))+((r00*x15297*x15304)));
evalcond[5]=(((r21*x15297*x15301))+(((-1.0)*r20*x15302*x15306))+((r20*x15300))+((r21*x15304))+x15310+((r22*x15309)));
evalcond[6]=((((-1.0)*x15303))+((r11*x15297*x15301))+x15305+((r10*x15300))+(((-1.0)*r10*x15302*x15306))+((r12*x15309))+((r11*x15304)));
evalcond[7]=((((-1.0)*r11*x15300*x15306))+(((-1.0)*r12*sj3*x15307))+x15310+((r10*x15297*x15304))+((r10*x15301))+((r11*x15302)));
evalcond[8]=(((r20*x15301))+(((-1.0)*x15305))+((r21*x15302))+x15303+(((-1.0)*r21*x15300*x15306))+(((-1.0)*r22*sj3*x15307))+((r20*x15297*x15304)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15311=((1.0)*gconst62);
CheckValue<IkReal> x15312 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst61*r11))+(((-1.0)*r10*x15311)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15312.valid){
continue;
}
CheckValue<IkReal> x15313=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst61*r20))+(((-1.0)*r21*x15311)))),-1);
if(!x15313.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15312.value)+(((1.5707963267949)*(x15313.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15314=IKsin(j4);
IkReal x15315=IKcos(j4);
IkReal x15316=(cj2*sj1);
IkReal x15317=(cj1*sj2);
IkReal x15318=(gconst61*sj3);
IkReal x15319=(cj3*gconst61);
IkReal x15320=(cj3*gconst62);
IkReal x15321=(sj1*sj2);
IkReal x15322=(gconst62*sj3);
IkReal x15323=(cj1*cj2);
IkReal x15324=((1.0)*x15315);
IkReal x15325=((1.0)*x15314);
IkReal x15326=(gconst61*x15314);
IkReal x15327=(cj3*x15314);
IkReal x15328=(x15317+x15316);
evalcond[0]=((((-1.0)*gconst62*r20*x15325))+((r21*x15326))+(((-1.0)*r22*x15324)));
evalcond[1]=(((r11*x15326))+(((-1.0)*gconst62*r10*x15325))+(((-1.0)*r12*x15324)));
evalcond[2]=((1.0)+(((-1.0)*gconst62*r00*x15325))+((r01*x15326))+(((-1.0)*r02*x15324)));
evalcond[3]=(((r00*x15318))+((r01*x15322))+((r01*x15315*x15319))+((r02*x15327))+(((-1.0)*r00*x15320*x15324)));
evalcond[4]=(((r00*x15319))+((r01*x15320))+((r00*x15315*x15322))+(((-1.0)*r01*x15318*x15324))+(((-1.0)*r02*sj3*x15325)));
evalcond[5]=(((r22*x15327))+x15328+((r21*x15315*x15319))+(((-1.0)*r20*x15320*x15324))+((r21*x15322))+((r20*x15318)));
evalcond[6]=(((r11*x15315*x15319))+(((-1.0)*r10*x15320*x15324))+((r11*x15322))+(((-1.0)*x15321))+((r12*x15327))+x15323+((r10*x15318)));
evalcond[7]=(((r11*x15320))+x15328+(((-1.0)*r12*sj3*x15325))+((r10*x15319))+(((-1.0)*r11*x15318*x15324))+((r10*x15315*x15322)));
evalcond[8]=((((-1.0)*x15323))+x15321+(((-1.0)*r21*x15318*x15324))+(((-1.0)*r22*sj3*x15325))+((r21*x15320))+((r20*x15319))+((r20*x15315*x15322)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15330 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x15330)==0){
continue;
}
IkReal x15329=pow(x15330,-0.5);
CheckValue<IkReal> x15331 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15331.valid){
continue;
}
IkReal gconst63=((3.14159265358979)+(((-1.0)*(x15331.value))));
IkReal gconst64=((1.0)*r11*x15329);
IkReal gconst65=((-1.0)*r10*x15329);
CheckValue<IkReal> x15332 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15332.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x15332.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x15335 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15335.valid){
continue;
}
IkReal x15333=((1.0)*(x15335.value));
IkReal x15334=x15329;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst64;
cj5=gconst65;
j5=((3.14159265)+(((-1.0)*x15333)));
IkReal gconst63=((3.14159265358979)+(((-1.0)*x15333)));
IkReal gconst64=((1.0)*r11*x15334);
IkReal gconst65=((-1.0)*r10*x15334);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15336=gconst64*gconst64;
IkReal x15337=gconst65*gconst65;
IkReal x15338=(gconst65*r01);
IkReal x15339=(cj3*r22);
IkReal x15340=(gconst64*r00);
IkReal x15341=(cj3*r21);
IkReal x15342=((1.0)*gconst64*sj3);
IkReal x15343=((1.0)*cj3*r20);
CheckValue<IkReal> x15344 = IKatan2WithCheck(IkReal((((x15339*x15340))+((x15338*x15339)))),IkReal((((r00*x15336*x15341))+(((-1.0)*r01*x15337*x15343))+(((-1.0)*gconst65*x15340*x15343))+((gconst64*x15338*x15341)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15344.valid){
continue;
}
CheckValue<IkReal> x15345=IKPowWithIntegerCheck(IKsign((((r01*r21*sj3*x15336))+((r00*r20*sj3*x15337))+(((-1.0)*gconst65*r21*sj3*x15340))+(((-1.0)*r20*x15338*x15342))+((r02*r22*sj3)))),-1);
if(!x15345.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15344.value)+(((1.5707963267949)*(x15345.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15346=IKsin(j4);
IkReal x15347=IKcos(j4);
IkReal x15348=(cj2*sj1);
IkReal x15349=(cj1*sj2);
IkReal x15350=(cj3*gconst64);
IkReal x15351=(gconst65*r21);
IkReal x15352=(sj1*sj2);
IkReal x15353=(gconst65*sj3);
IkReal x15354=(gconst64*sj3);
IkReal x15355=(cj3*gconst65);
IkReal x15356=(cj1*cj2);
IkReal x15357=((1.0)*x15347);
IkReal x15358=((1.0)*x15346);
IkReal x15359=(cj3*x15346);
IkReal x15360=(gconst64*x15346);
IkReal x15361=(x15348+x15349);
evalcond[0]=((((-1.0)*r22*x15357))+(((-1.0)*gconst65*r20*x15358))+((r21*x15360)));
evalcond[1]=((((-1.0)*r12*x15357))+((r11*x15360))+(((-1.0)*gconst65*r10*x15358)));
evalcond[2]=((1.0)+(((-1.0)*gconst65*r00*x15358))+(((-1.0)*r02*x15357))+((r01*x15360)));
evalcond[3]=((((-1.0)*r00*x15355*x15357))+((r01*x15347*x15350))+((r02*x15359))+((r01*x15353))+((r00*x15354)));
evalcond[4]=((((-1.0)*r01*x15354*x15357))+((r00*x15347*x15353))+((r01*x15355))+(((-1.0)*r02*sj3*x15358))+((r00*x15350)));
evalcond[5]=(((r22*x15359))+x15361+(((-1.0)*r20*x15355*x15357))+((r20*x15354))+((sj3*x15351))+((r21*x15347*x15350)));
evalcond[6]=(((r10*x15354))+((r11*x15347*x15350))+((r12*x15359))+x15356+(((-1.0)*r10*x15355*x15357))+((r11*x15353))+(((-1.0)*x15352)));
evalcond[7]=(((r10*x15347*x15353))+(((-1.0)*r12*sj3*x15358))+((r10*x15350))+x15361+(((-1.0)*r11*x15354*x15357))+((r11*x15355)));
evalcond[8]=((((-1.0)*r22*sj3*x15358))+((cj3*x15351))+x15352+((r20*x15347*x15353))+(((-1.0)*r21*x15354*x15357))+((r20*x15350))+(((-1.0)*x15356)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15362=((1.0)*gconst65);
CheckValue<IkReal> x15363=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst64*r20))+(((-1.0)*r21*x15362)))),-1);
if(!x15363.valid){
continue;
}
CheckValue<IkReal> x15364 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x15362))+((gconst64*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15364.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15363.value)))+(x15364.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15365=IKsin(j4);
IkReal x15366=IKcos(j4);
IkReal x15367=(cj2*sj1);
IkReal x15368=(cj1*sj2);
IkReal x15369=(cj3*gconst64);
IkReal x15370=(gconst65*r21);
IkReal x15371=(sj1*sj2);
IkReal x15372=(gconst65*sj3);
IkReal x15373=(gconst64*sj3);
IkReal x15374=(cj3*gconst65);
IkReal x15375=(cj1*cj2);
IkReal x15376=((1.0)*x15366);
IkReal x15377=((1.0)*x15365);
IkReal x15378=(cj3*x15365);
IkReal x15379=(gconst64*x15365);
IkReal x15380=(x15368+x15367);
evalcond[0]=(((r21*x15379))+(((-1.0)*gconst65*r20*x15377))+(((-1.0)*r22*x15376)));
evalcond[1]=((((-1.0)*gconst65*r10*x15377))+(((-1.0)*r12*x15376))+((r11*x15379)));
evalcond[2]=((1.0)+((r01*x15379))+(((-1.0)*gconst65*r00*x15377))+(((-1.0)*r02*x15376)));
evalcond[3]=(((r02*x15378))+(((-1.0)*r00*x15374*x15376))+((r00*x15373))+((r01*x15372))+((r01*x15366*x15369)));
evalcond[4]=((((-1.0)*r02*sj3*x15377))+((r01*x15374))+((r00*x15366*x15372))+(((-1.0)*r01*x15373*x15376))+((r00*x15369)));
evalcond[5]=(((r21*x15366*x15369))+((r20*x15373))+(((-1.0)*r20*x15374*x15376))+((sj3*x15370))+x15380+((r22*x15378)));
evalcond[6]=((((-1.0)*r10*x15374*x15376))+((r11*x15366*x15369))+(((-1.0)*x15371))+x15375+((r10*x15373))+((r12*x15378))+((r11*x15372)));
evalcond[7]=((((-1.0)*r11*x15373*x15376))+((r10*x15366*x15372))+((r10*x15369))+(((-1.0)*r12*sj3*x15377))+x15380+((r11*x15374)));
evalcond[8]=((((-1.0)*r21*x15373*x15376))+((r20*x15366*x15372))+(((-1.0)*x15375))+x15371+((cj3*x15370))+((r20*x15369))+(((-1.0)*r22*sj3*x15377)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15381=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15381);
rxp0_2=(py*r00);
rxp1_0=(r21*x15381);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x15382=(r01*sj5);
IkReal x15383=((1.0)*cj5*r00);
j4eval[0]=(x15382+(((-1.0)*x15383)));
j4eval[1]=(((cj3*x15382))+(((-1.0)*cj3*x15383)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15384=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15384);
rxp0_2=(py*r00);
rxp1_0=(r21*x15384);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x15385=(cj5*r00);
IkReal x15386=(r01*sj5);
j4eval[0]=(x15386+(((-1.0)*x15385)));
j4eval[1]=((((-1.0)*sj3*x15386))+((sj3*x15385)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15387=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15387);
rxp0_2=(py*r00);
rxp1_0=(r21*x15387);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=(((cj3*r01*sj5))+(((-1.0)*cj3*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15388=((1.0)*r00);
CheckValue<IkReal> x15389=IKPowWithIntegerCheck(cj3,-1);
if(!x15389.valid){
continue;
}
CheckValue<IkReal> x15390=IKPowWithIntegerCheck(r12,-1);
if(!x15390.valid){
continue;
}
CheckValue<IkReal> x15391=IKPowWithIntegerCheck((((cj3*r01*sj5))+(((-1.0)*cj3*cj5*x15388))),-1);
if(!x15391.valid){
continue;
}
if( IKabs(((x15389.value)*(x15390.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15391.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15388)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15389.value)*(x15390.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x15391.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15388))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15389.value)*(x15390.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x15391.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15388))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15392=IKsin(j4);
IkReal x15393=IKcos(j4);
IkReal x15394=(cj2*sj1);
IkReal x15395=(cj1*sj2);
IkReal x15396=(sj1*sj2);
IkReal x15397=(cj5*sj3);
IkReal x15398=(cj3*cj5);
IkReal x15399=(r21*sj5);
IkReal x15400=(cj1*cj2);
IkReal x15401=(r00*sj5);
IkReal x15402=(r01*sj5);
IkReal x15403=(r20*sj5);
IkReal x15404=((1.0)*x15392);
IkReal x15405=(r20*x15393);
IkReal x15406=(r00*x15393);
IkReal x15407=(cj3*x15393);
IkReal x15408=(x15395+x15394);
IkReal x15409=((1.0)*sj3*x15393);
evalcond[0]=((-1.0)*r12*x15393);
evalcond[1]=(((x15392*x15399))+(((-1.0)*cj5*r20*x15404)));
evalcond[2]=(x15400+(((-1.0)*x15396))+((cj3*r12*x15392)));
evalcond[3]=(x15408+(((-1.0)*r12*sj3*x15404)));
evalcond[4]=((1.0)+(((-1.0)*cj5*r00*x15404))+((x15392*x15402)));
evalcond[5]=(((sj3*x15401))+(((-1.0)*x15398*x15406))+((x15402*x15407))+((r01*x15397)));
evalcond[6]=(((x15397*x15406))+(((-1.0)*x15402*x15409))+((r01*x15398))+((cj3*x15401)));
evalcond[7]=(((r21*x15397))+((sj3*x15403))+((x15399*x15407))+(((-1.0)*x15398*x15405))+x15408);
evalcond[8]=((((-1.0)*x15400))+((x15397*x15405))+((r21*x15398))+x15396+(((-1.0)*x15399*x15409))+((cj3*x15403)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15410=((1.0)*r01);
IkReal x15411=(cj5*r00);
CheckValue<IkReal> x15412=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*x15411))),-1);
if(!x15412.valid){
continue;
}
CheckValue<IkReal> x15413=IKPowWithIntegerCheck(((((-1.0)*sj3*sj5*x15410))+((sj3*x15411))),-1);
if(!x15413.valid){
continue;
}
if( IKabs(((-1.0)*(x15412.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15413.value)*(((((-1.0)*cj3*r00*sj5))+(((-1.0)*cj3*cj5*x15410)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x15412.value)))+IKsqr(((x15413.value)*(((((-1.0)*cj3*r00*sj5))+(((-1.0)*cj3*cj5*x15410))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x15412.value)), ((x15413.value)*(((((-1.0)*cj3*r00*sj5))+(((-1.0)*cj3*cj5*x15410))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15414=IKsin(j4);
IkReal x15415=IKcos(j4);
IkReal x15416=(cj2*sj1);
IkReal x15417=(cj1*sj2);
IkReal x15418=(sj1*sj2);
IkReal x15419=(cj5*sj3);
IkReal x15420=(cj3*cj5);
IkReal x15421=(r21*sj5);
IkReal x15422=(cj1*cj2);
IkReal x15423=(r00*sj5);
IkReal x15424=(r01*sj5);
IkReal x15425=(r20*sj5);
IkReal x15426=((1.0)*x15414);
IkReal x15427=(r20*x15415);
IkReal x15428=(r00*x15415);
IkReal x15429=(cj3*x15415);
IkReal x15430=(x15416+x15417);
IkReal x15431=((1.0)*sj3*x15415);
evalcond[0]=((-1.0)*r12*x15415);
evalcond[1]=(((x15414*x15421))+(((-1.0)*cj5*r20*x15426)));
evalcond[2]=((((-1.0)*x15418))+x15422+((cj3*r12*x15414)));
evalcond[3]=((((-1.0)*r12*sj3*x15426))+x15430);
evalcond[4]=((1.0)+(((-1.0)*cj5*r00*x15426))+((x15414*x15424)));
evalcond[5]=(((x15424*x15429))+((sj3*x15423))+(((-1.0)*x15420*x15428))+((r01*x15419)));
evalcond[6]=(((cj3*x15423))+((x15419*x15428))+(((-1.0)*x15424*x15431))+((r01*x15420)));
evalcond[7]=(((sj3*x15425))+(((-1.0)*x15420*x15427))+((x15421*x15429))+x15430+((r21*x15419)));
evalcond[8]=(((r21*x15420))+(((-1.0)*x15421*x15431))+(((-1.0)*x15422))+((cj3*x15425))+((x15419*x15427))+x15418);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15432=((1.0)*r00);
IkReal x15433=(r01*sj5);
CheckValue<IkReal> x15434=IKPowWithIntegerCheck(((((-1.0)*cj5*x15432))+x15433),-1);
if(!x15434.valid){
continue;
}
CheckValue<IkReal> x15435=IKPowWithIntegerCheck(((((-1.0)*cj3*cj5*x15432))+((cj3*x15433))),-1);
if(!x15435.valid){
continue;
}
if( IKabs(((-1.0)*(x15434.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15435.value)*(((((-1.0)*sj3*sj5*x15432))+(((-1.0)*cj5*r01*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x15434.value)))+IKsqr(((x15435.value)*(((((-1.0)*sj3*sj5*x15432))+(((-1.0)*cj5*r01*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x15434.value)), ((x15435.value)*(((((-1.0)*sj3*sj5*x15432))+(((-1.0)*cj5*r01*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15436=IKsin(j4);
IkReal x15437=IKcos(j4);
IkReal x15438=(cj2*sj1);
IkReal x15439=(cj1*sj2);
IkReal x15440=(sj1*sj2);
IkReal x15441=(cj5*sj3);
IkReal x15442=(cj3*cj5);
IkReal x15443=(r21*sj5);
IkReal x15444=(cj1*cj2);
IkReal x15445=(r00*sj5);
IkReal x15446=(r01*sj5);
IkReal x15447=(r20*sj5);
IkReal x15448=((1.0)*x15436);
IkReal x15449=(r20*x15437);
IkReal x15450=(r00*x15437);
IkReal x15451=(cj3*x15437);
IkReal x15452=(x15438+x15439);
IkReal x15453=((1.0)*sj3*x15437);
evalcond[0]=((-1.0)*r12*x15437);
evalcond[1]=(((x15436*x15443))+(((-1.0)*cj5*r20*x15448)));
evalcond[2]=(((cj3*r12*x15436))+x15444+(((-1.0)*x15440)));
evalcond[3]=(x15452+(((-1.0)*r12*sj3*x15448)));
evalcond[4]=((1.0)+(((-1.0)*cj5*r00*x15448))+((x15436*x15446)));
evalcond[5]=(((sj3*x15445))+((r01*x15441))+((x15446*x15451))+(((-1.0)*x15442*x15450)));
evalcond[6]=(((r01*x15442))+((x15441*x15450))+(((-1.0)*x15446*x15453))+((cj3*x15445)));
evalcond[7]=(((sj3*x15447))+(((-1.0)*x15442*x15449))+((x15443*x15451))+x15452+((r21*x15441)));
evalcond[8]=((((-1.0)*x15443*x15453))+x15440+((x15441*x15449))+(((-1.0)*x15444))+((r21*x15442))+((cj3*x15447)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15454=cj5*cj5;
IkReal x15455=(cj3*r20);
IkReal x15456=(r21*sj3);
IkReal x15457=((1.0)*cj3);
IkReal x15458=(r01*r21);
IkReal x15459=(r01*sj3);
IkReal x15460=(r00*sj5);
IkReal x15461=(cj5*r01*sj5);
IkReal x15462=((1.0)*x15454);
CheckValue<IkReal> x15463 = IKatan2WithCheck(IkReal((((cj5*r22*x15459))+((r22*sj3*x15460)))),IkReal((((r00*x15456))+(((-1.0)*cj5*r20*sj3*x15460))+(((-1.0)*r20*x15459*x15462))+((x15456*x15461))+(((-1.0)*r00*x15456*x15462)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15463.valid){
continue;
}
CheckValue<IkReal> x15464=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x15455*x15462))+((x15455*x15461))+(((-1.0)*x15457*x15458))+((cj3*cj5*r21*x15460))+((cj3*x15454*x15458))+(((-1.0)*r02*r22*x15457)))),-1);
if(!x15464.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15463.value)+(((1.5707963267949)*(x15464.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15465=IKsin(j4);
IkReal x15466=IKcos(j4);
IkReal x15467=(cj2*sj1);
IkReal x15468=(cj1*sj2);
IkReal x15469=(r11*sj5);
IkReal x15470=(cj5*r10);
IkReal x15471=(sj1*sj2);
IkReal x15472=(cj5*r01);
IkReal x15473=(cj5*r00);
IkReal x15474=(cj3*sj5);
IkReal x15475=(r21*sj5);
IkReal x15476=(cj1*cj2);
IkReal x15477=(cj5*sj3);
IkReal x15478=(sj3*sj5);
IkReal x15479=(r01*sj5);
IkReal x15480=(cj3*cj5);
IkReal x15481=(cj5*r20);
IkReal x15482=((1.0)*x15466);
IkReal x15483=((1.0)*x15465);
IkReal x15484=(cj3*x15466);
IkReal x15485=(sj3*x15466);
IkReal x15486=(cj3*x15465);
IkReal x15487=(x15468+x15467);
evalcond[0]=((((-1.0)*x15481*x15483))+((x15465*x15475))+(((-1.0)*r22*x15482)));
evalcond[1]=((((-1.0)*r12*x15482))+(((-1.0)*x15470*x15483))+((x15465*x15469)));
evalcond[2]=((1.0)+(((-1.0)*r02*x15482))+(((-1.0)*x15473*x15483))+((x15465*x15479)));
evalcond[3]=(((r02*x15486))+(((-1.0)*cj3*x15473*x15482))+((r00*x15478))+((r01*x15466*x15474))+((sj3*x15472)));
evalcond[4]=(((x15473*x15485))+(((-1.0)*r01*x15478*x15482))+((r00*x15474))+(((-1.0)*r02*sj3*x15483))+((cj3*x15472)));
evalcond[5]=(((r21*x15466*x15474))+((r22*x15486))+((r21*x15477))+(((-1.0)*r20*x15480*x15482))+x15487+((r20*x15478)));
evalcond[6]=((((-1.0)*cj3*x15470*x15482))+(((-1.0)*x15471))+((x15469*x15484))+((r12*x15486))+x15476+((r11*x15477))+((r10*x15478)));
evalcond[7]=((((-1.0)*r12*sj3*x15483))+((x15470*x15485))+((r11*x15480))+x15487+((r10*x15474))+(((-1.0)*sj3*x15469*x15482)));
evalcond[8]=(((r20*x15466*x15477))+((r21*x15480))+(((-1.0)*x15476))+(((-1.0)*r22*sj3*x15483))+x15471+((r20*x15474))+(((-1.0)*sj3*x15475*x15482)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15488=((1.0)*cj5);
CheckValue<IkReal> x15489=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15488))+(((-1.0)*r20*sj5)))),-1);
if(!x15489.valid){
continue;
}
CheckValue<IkReal> x15490 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x15488)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15490.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15489.value)))+(x15490.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15491=IKsin(j4);
IkReal x15492=IKcos(j4);
IkReal x15493=(cj2*sj1);
IkReal x15494=(cj1*sj2);
IkReal x15495=(r11*sj5);
IkReal x15496=(cj5*r10);
IkReal x15497=(sj1*sj2);
IkReal x15498=(cj5*r01);
IkReal x15499=(cj5*r00);
IkReal x15500=(cj3*sj5);
IkReal x15501=(r21*sj5);
IkReal x15502=(cj1*cj2);
IkReal x15503=(cj5*sj3);
IkReal x15504=(sj3*sj5);
IkReal x15505=(r01*sj5);
IkReal x15506=(cj3*cj5);
IkReal x15507=(cj5*r20);
IkReal x15508=((1.0)*x15492);
IkReal x15509=((1.0)*x15491);
IkReal x15510=(cj3*x15492);
IkReal x15511=(sj3*x15492);
IkReal x15512=(cj3*x15491);
IkReal x15513=(x15494+x15493);
evalcond[0]=((((-1.0)*r22*x15508))+((x15491*x15501))+(((-1.0)*x15507*x15509)));
evalcond[1]=(((x15491*x15495))+(((-1.0)*x15496*x15509))+(((-1.0)*r12*x15508)));
evalcond[2]=((1.0)+((x15491*x15505))+(((-1.0)*r02*x15508))+(((-1.0)*x15499*x15509)));
evalcond[3]=(((r00*x15504))+((r01*x15492*x15500))+((r02*x15512))+(((-1.0)*cj3*x15499*x15508))+((sj3*x15498)));
evalcond[4]=((((-1.0)*r02*sj3*x15509))+((r00*x15500))+((cj3*x15498))+((x15499*x15511))+(((-1.0)*r01*x15504*x15508)));
evalcond[5]=((((-1.0)*r20*x15506*x15508))+((r21*x15492*x15500))+((r21*x15503))+x15513+((r20*x15504))+((r22*x15512)));
evalcond[6]=((((-1.0)*cj3*x15496*x15508))+((r10*x15504))+((r11*x15503))+((r12*x15512))+((x15495*x15510))+x15502+(((-1.0)*x15497)));
evalcond[7]=((((-1.0)*sj3*x15495*x15508))+((x15496*x15511))+((r10*x15500))+((r11*x15506))+(((-1.0)*r12*sj3*x15509))+x15513);
evalcond[8]=((((-1.0)*r22*sj3*x15509))+x15497+(((-1.0)*x15502))+((r21*x15506))+(((-1.0)*sj3*x15501*x15508))+((r20*x15500))+((r20*x15492*x15503)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15514 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15514.valid){
continue;
}
CheckValue<IkReal> x15515=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x15515.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15514.value)+(((1.5707963267949)*(x15515.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15516=IKsin(j4);
IkReal x15517=IKcos(j4);
IkReal x15518=(cj2*sj1);
IkReal x15519=(cj1*sj2);
IkReal x15520=(r11*sj5);
IkReal x15521=(cj5*r10);
IkReal x15522=(sj1*sj2);
IkReal x15523=(cj5*r01);
IkReal x15524=(cj5*r00);
IkReal x15525=(cj3*sj5);
IkReal x15526=(r21*sj5);
IkReal x15527=(cj1*cj2);
IkReal x15528=(cj5*sj3);
IkReal x15529=(sj3*sj5);
IkReal x15530=(r01*sj5);
IkReal x15531=(cj3*cj5);
IkReal x15532=(cj5*r20);
IkReal x15533=((1.0)*x15517);
IkReal x15534=((1.0)*x15516);
IkReal x15535=(cj3*x15517);
IkReal x15536=(sj3*x15517);
IkReal x15537=(cj3*x15516);
IkReal x15538=(x15519+x15518);
evalcond[0]=((((-1.0)*x15532*x15534))+((x15516*x15526))+(((-1.0)*r22*x15533)));
evalcond[1]=((((-1.0)*r12*x15533))+(((-1.0)*x15521*x15534))+((x15516*x15520)));
evalcond[2]=((1.0)+((x15516*x15530))+(((-1.0)*r02*x15533))+(((-1.0)*x15524*x15534)));
evalcond[3]=(((r02*x15537))+((sj3*x15523))+((r00*x15529))+(((-1.0)*cj3*x15524*x15533))+((r01*x15517*x15525)));
evalcond[4]=((((-1.0)*r01*x15529*x15533))+((cj3*x15523))+((x15524*x15536))+((r00*x15525))+(((-1.0)*r02*sj3*x15534)));
evalcond[5]=(((r20*x15529))+((r21*x15528))+((r21*x15517*x15525))+(((-1.0)*r20*x15531*x15533))+x15538+((r22*x15537)));
evalcond[6]=(((r10*x15529))+(((-1.0)*cj3*x15521*x15533))+((x15520*x15535))+(((-1.0)*x15522))+((r12*x15537))+x15527+((r11*x15528)));
evalcond[7]=((((-1.0)*r12*sj3*x15534))+((r10*x15525))+((x15521*x15536))+(((-1.0)*sj3*x15520*x15533))+x15538+((r11*x15531)));
evalcond[8]=((((-1.0)*sj3*x15526*x15533))+((r20*x15525))+((r21*x15531))+(((-1.0)*x15527))+(((-1.0)*r22*sj3*x15534))+x15522+((r20*x15517*x15528)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15539=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15539);
rxp1_1=(px*r21);
rxp1_2=(r11*x15539);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15540=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15540);
rxp1_1=(px*r21);
rxp1_2=(r11*x15540);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x15541=((1.0)*cj5);
j4eval[0]=(((r11*sj5))+(((-1.0)*r10*x15541)));
j4eval[1]=(((cj3*r21*sj5))+(((-1.0)*cj3*r20*x15541)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15542=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15542);
rxp1_1=(px*r21);
rxp1_2=(r11*x15542);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x15543=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15543);
rxp1_1=(px*r21);
rxp1_2=(r11*x15543);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15544=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15544);
rxp1_1=(px*r21);
rxp1_2=(r11*x15544);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15545=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15545);
rxp1_1=(px*r21);
rxp1_2=(r11*x15545);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15548=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x15548.valid){
continue;
}
IkReal x15546=x15548.value;
IkReal x15547=(sj0*x15546);
cj4array[0]=(((cj2*sj1*x15547))+((cj1*sj2*x15547)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15549=IKsin(j4);
IkReal x15550=IKcos(j4);
IkReal x15551=(cj5*r20);
IkReal x15552=(r21*sj5);
IkReal x15553=((1.0)*x15549);
IkReal x15554=((1.0)*x15550);
evalcond[0]=((-1.0)*r02*x15549);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x15554)));
evalcond[2]=((((-1.0)*x15551*x15553))+((x15549*x15552)));
evalcond[3]=(((r11*sj5*x15549))+(((-1.0)*cj5*r10*x15553)));
evalcond[4]=(((x15550*x15551))+(((-1.0)*x15552*x15554))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15556=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x15556.valid){
continue;
}
IkReal x15555=x15556.value;
cj4array[0]=(((cj1*cj2*x15555))+(((-1.0)*sj1*sj2*x15555)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15557=IKsin(j4);
IkReal x15558=IKcos(j4);
IkReal x15559=(r11*sj5);
IkReal x15560=((1.0)*sj0);
IkReal x15561=((1.0)*x15558);
IkReal x15562=((1.0)*cj5*x15557);
evalcond[0]=((-1.0)*r02*x15557);
evalcond[1]=((((-1.0)*r02*x15561))+(((-1.0)*x15560)));
evalcond[2]=((((-1.0)*r20*x15562))+((r21*sj5*x15557)));
evalcond[3]=((((-1.0)*r10*x15562))+((x15557*x15559)));
evalcond[4]=(((cj5*r10*x15558))+(((-1.0)*cj1*sj2*x15560))+(((-1.0)*x15559*x15561))+(((-1.0)*cj2*sj1*x15560)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15563=IKPowWithIntegerCheck(r02,-1);
if(!x15563.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x15563.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15564=IKsin(j4);
IkReal x15565=IKcos(j4);
IkReal x15566=((1.0)*sj0);
IkReal x15567=(cj5*x15565);
IkReal x15568=(sj5*x15564);
IkReal x15569=((1.0)*sj5*x15565);
IkReal x15570=((1.0)*cj5*x15564);
evalcond[0]=((-1.0)*r02*x15564);
evalcond[1]=(((r21*x15568))+(((-1.0)*r20*x15570)));
evalcond[2]=((((-1.0)*r10*x15570))+((r11*x15568)));
evalcond[3]=((((-1.0)*r21*x15569))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x15567)));
evalcond[4]=((((-1.0)*r11*x15569))+((r10*x15567))+(((-1.0)*cj1*sj2*x15566))+(((-1.0)*cj2*sj1*x15566)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x15571=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15571);
rxp1_1=(px*r21);
rxp1_2=(r11*x15571);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15572=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15572);
rxp1_1=(px*r21);
rxp1_2=(r11*x15572);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15573=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15573);
rxp1_1=(px*r21);
rxp1_2=(r11*x15573);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15576=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x15576.valid){
continue;
}
IkReal x15574=x15576.value;
IkReal x15575=(sj0*x15574);
cj4array[0]=(((cj2*sj1*x15575))+((cj1*sj2*x15575)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15577=IKsin(j4);
IkReal x15578=IKcos(j4);
IkReal x15579=(r21*sj5);
IkReal x15580=((1.0)*cj5*r20);
evalcond[0]=(r02*x15577);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x15578)));
evalcond[2]=((((-1.0)*x15577*x15580))+((x15577*x15579)));
evalcond[3]=(((r11*sj5*x15577))+(((-1.0)*cj5*r10*x15577)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x15578*x15579))+(((-1.0)*x15578*x15580)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15582=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x15582.valid){
continue;
}
IkReal x15581=x15582.value;
cj4array[0]=((((-1.0)*sj1*sj2*x15581))+((cj1*cj2*x15581)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15583=IKsin(j4);
IkReal x15584=IKcos(j4);
IkReal x15585=((1.0)*sj0);
IkReal x15586=((1.0)*cj5);
IkReal x15587=(sj5*x15583);
evalcond[0]=(r02*x15583);
evalcond[1]=((((-1.0)*x15585))+(((-1.0)*r02*x15584)));
evalcond[2]=((((-1.0)*r20*x15583*x15586))+((r21*x15587)));
evalcond[3]=(((r11*x15587))+(((-1.0)*r10*x15583*x15586)));
evalcond[4]=((((-1.0)*cj1*sj2*x15585))+(((-1.0)*cj2*sj1*x15585))+(((-1.0)*r10*x15584*x15586))+((r11*sj5*x15584)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15588=IKPowWithIntegerCheck(r02,-1);
if(!x15588.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x15588.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15589=IKsin(j4);
IkReal x15590=IKcos(j4);
IkReal x15591=((1.0)*cj1);
IkReal x15592=(r21*sj5);
IkReal x15593=((1.0)*cj5);
IkReal x15594=(r11*sj5);
evalcond[0]=(r02*x15589);
evalcond[1]=((((-1.0)*r20*x15589*x15593))+((x15589*x15592)));
evalcond[2]=((((-1.0)*r10*x15589*x15593))+((x15589*x15594)));
evalcond[3]=((((-1.0)*cj2*x15591))+((x15590*x15592))+((sj1*sj2))+(((-1.0)*r20*x15590*x15593)));
evalcond[4]=(((x15590*x15594))+(((-1.0)*sj0*sj2*x15591))+(((-1.0)*cj2*sj0*sj1))+(((-1.0)*r10*x15590*x15593)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x15595 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15595.valid){
continue;
}
IkReal gconst66=((-1.0)*(x15595.value));
IkReal gconst67=r10;
IkReal gconst68=r11;
CheckValue<IkReal> x15596 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15596.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x15596.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15597=((-1.0)*r10);
CheckValue<IkReal> x15599 = IKatan2WithCheck(IkReal(x15597),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15599.valid){
continue;
}
IkReal x15598=((-1.0)*(x15599.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15597);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x15598;
IkReal gconst66=x15598;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15600=((-1.0)*r10);
CheckValue<IkReal> x15602 = IKatan2WithCheck(IkReal(x15600),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15602.valid){
continue;
}
IkReal x15601=((-1.0)*(x15602.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15600);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x15601;
IkReal gconst66=x15601;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15603=((-1.0)*r10);
CheckValue<IkReal> x15605 = IKatan2WithCheck(IkReal(x15603),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15605.valid){
continue;
}
IkReal x15604=((-1.0)*(x15605.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15603);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x15604;
IkReal gconst66=x15604;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=((((-1.0)*r10*r21*sj3))+((r11*r20*sj3)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15606=((1.0)*gconst67);
IkReal x15607=(cj1*cj2);
IkReal x15608=((1.0)*sj1*sj2);
CheckValue<IkReal> x15609=IKPowWithIntegerCheck(cj3,-1);
if(!x15609.valid){
continue;
}
CheckValue<IkReal> x15610=IKPowWithIntegerCheck(r02,-1);
if(!x15610.valid){
continue;
}
CheckValue<IkReal> x15611=IKPowWithIntegerCheck(((((-1.0)*r21*sj3*x15606))+((gconst68*r20*sj3))),-1);
if(!x15611.valid){
continue;
}
if( IKabs(((x15609.value)*(x15610.value)*((((cj0*x15607))+(((-1.0)*cj0*x15608)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15611.value)*(((((-1.0)*x15608))+x15607+(((-1.0)*cj3*r20*x15606))+(((-1.0)*cj3*gconst68*r21)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15609.value)*(x15610.value)*((((cj0*x15607))+(((-1.0)*cj0*x15608))))))+IKsqr(((x15611.value)*(((((-1.0)*x15608))+x15607+(((-1.0)*cj3*r20*x15606))+(((-1.0)*cj3*gconst68*r21))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15609.value)*(x15610.value)*((((cj0*x15607))+(((-1.0)*cj0*x15608))))), ((x15611.value)*(((((-1.0)*x15608))+x15607+(((-1.0)*cj3*r20*x15606))+(((-1.0)*cj3*gconst68*r21))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15612=IKsin(j4);
IkReal x15613=IKcos(j4);
IkReal x15614=(sj1*sj2);
IkReal x15615=(gconst68*sj3);
IkReal x15616=(gconst67*r11);
IkReal x15617=(gconst67*sj3);
IkReal x15618=((1.0)*gconst68);
IkReal x15619=(cj2*sj1);
IkReal x15620=((1.0)*cj0);
IkReal x15621=((1.0)*sj0);
IkReal x15622=(cj3*gconst67);
IkReal x15623=(cj3*gconst68);
IkReal x15624=(cj1*sj2);
IkReal x15625=(gconst67*r21);
IkReal x15626=((1.0)*cj1*cj2);
IkReal x15627=(cj3*x15613);
IkReal x15628=((1.0)*x15613);
IkReal x15629=(r02*x15612);
evalcond[0]=((((-1.0)*x15621))+(((-1.0)*r02*x15628)));
evalcond[1]=((((-1.0)*r20*x15612*x15618))+((x15612*x15625)));
evalcond[2]=(cj0+(((-1.0)*r10*x15612*x15618))+((x15612*x15616)));
evalcond[3]=(((cj0*x15614))+((cj3*x15629))+(((-1.0)*cj1*cj2*x15620)));
evalcond[4]=((((-1.0)*x15620*x15624))+(((-1.0)*x15619*x15620))+(((-1.0)*sj3*x15629)));
evalcond[5]=(((r21*x15615))+x15619+x15624+((r21*x15613*x15622))+((r20*x15617))+(((-1.0)*r20*x15618*x15627)));
evalcond[6]=(((r21*x15623))+(((-1.0)*x15626))+x15614+((r20*x15622))+((r20*x15613*x15615))+(((-1.0)*r21*x15617*x15628)));
evalcond[7]=(((sj0*x15614))+((x15616*x15627))+((r11*x15615))+((r10*x15617))+(((-1.0)*cj1*cj2*x15621))+(((-1.0)*r10*x15618*x15627)));
evalcond[8]=(((r10*x15613*x15615))+(((-1.0)*x15619*x15621))+(((-1.0)*x15621*x15624))+((r11*x15623))+((r10*x15622))+(((-1.0)*sj3*x15616*x15628)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15632=IKPowWithIntegerCheck(r02,-1);
if(!x15632.valid){
continue;
}
IkReal x15630=x15632.value;
IkReal x15631=((1.0)*cj0);
CheckValue<IkReal> x15633=IKPowWithIntegerCheck(sj3,-1);
if(!x15633.valid){
continue;
}
if( IKabs((x15630*(x15633.value)*(((((-1.0)*cj2*sj1*x15631))+(((-1.0)*cj1*sj2*x15631)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15630)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15630*(x15633.value)*(((((-1.0)*cj2*sj1*x15631))+(((-1.0)*cj1*sj2*x15631))))))+IKsqr(((-1.0)*sj0*x15630))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15630*(x15633.value)*(((((-1.0)*cj2*sj1*x15631))+(((-1.0)*cj1*sj2*x15631))))), ((-1.0)*sj0*x15630));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15634=IKsin(j4);
IkReal x15635=IKcos(j4);
IkReal x15636=(sj1*sj2);
IkReal x15637=(gconst68*sj3);
IkReal x15638=(gconst67*r11);
IkReal x15639=(gconst67*sj3);
IkReal x15640=((1.0)*gconst68);
IkReal x15641=(cj2*sj1);
IkReal x15642=((1.0)*cj0);
IkReal x15643=((1.0)*sj0);
IkReal x15644=(cj3*gconst67);
IkReal x15645=(cj3*gconst68);
IkReal x15646=(cj1*sj2);
IkReal x15647=(gconst67*r21);
IkReal x15648=((1.0)*cj1*cj2);
IkReal x15649=(cj3*x15635);
IkReal x15650=((1.0)*x15635);
IkReal x15651=(r02*x15634);
evalcond[0]=((((-1.0)*x15643))+(((-1.0)*r02*x15650)));
evalcond[1]=(((x15634*x15647))+(((-1.0)*r20*x15634*x15640)));
evalcond[2]=(cj0+((x15634*x15638))+(((-1.0)*r10*x15634*x15640)));
evalcond[3]=(((cj3*x15651))+((cj0*x15636))+(((-1.0)*cj1*cj2*x15642)));
evalcond[4]=((((-1.0)*x15641*x15642))+(((-1.0)*sj3*x15651))+(((-1.0)*x15642*x15646)));
evalcond[5]=(((r20*x15639))+(((-1.0)*r20*x15640*x15649))+((r21*x15635*x15644))+x15646+x15641+((r21*x15637)));
evalcond[6]=((((-1.0)*r21*x15639*x15650))+x15636+((r21*x15645))+(((-1.0)*x15648))+((r20*x15635*x15637))+((r20*x15644)));
evalcond[7]=((((-1.0)*r10*x15640*x15649))+((r11*x15637))+((sj0*x15636))+((r10*x15639))+(((-1.0)*cj1*cj2*x15643))+((x15638*x15649)));
evalcond[8]=((((-1.0)*x15641*x15643))+(((-1.0)*x15643*x15646))+((r10*x15635*x15637))+(((-1.0)*sj3*x15638*x15650))+((r11*x15645))+((r10*x15644)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15653=IKPowWithIntegerCheck(r02,-1);
if(!x15653.valid){
continue;
}
IkReal x15652=x15653.value;
CheckValue<IkReal> x15654=IKPowWithIntegerCheck(cj3,-1);
if(!x15654.valid){
continue;
}
if( IKabs((x15652*(x15654.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15652)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15652*(x15654.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x15652))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15652*(x15654.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x15652));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15655=IKsin(j4);
IkReal x15656=IKcos(j4);
IkReal x15657=(sj1*sj2);
IkReal x15658=(gconst68*sj3);
IkReal x15659=(gconst67*r11);
IkReal x15660=(gconst67*sj3);
IkReal x15661=((1.0)*gconst68);
IkReal x15662=(cj2*sj1);
IkReal x15663=((1.0)*cj0);
IkReal x15664=((1.0)*sj0);
IkReal x15665=(cj3*gconst67);
IkReal x15666=(cj3*gconst68);
IkReal x15667=(cj1*sj2);
IkReal x15668=(gconst67*r21);
IkReal x15669=((1.0)*cj1*cj2);
IkReal x15670=(cj3*x15656);
IkReal x15671=((1.0)*x15656);
IkReal x15672=(r02*x15655);
evalcond[0]=((((-1.0)*x15664))+(((-1.0)*r02*x15671)));
evalcond[1]=(((x15655*x15668))+(((-1.0)*r20*x15655*x15661)));
evalcond[2]=(cj0+((x15655*x15659))+(((-1.0)*r10*x15655*x15661)));
evalcond[3]=(((cj3*x15672))+(((-1.0)*cj1*cj2*x15663))+((cj0*x15657)));
evalcond[4]=((((-1.0)*x15662*x15663))+(((-1.0)*sj3*x15672))+(((-1.0)*x15663*x15667)));
evalcond[5]=(((r21*x15656*x15665))+(((-1.0)*r20*x15661*x15670))+((r20*x15660))+x15662+x15667+((r21*x15658)));
evalcond[6]=((((-1.0)*r21*x15660*x15671))+(((-1.0)*x15669))+((r20*x15665))+x15657+((r21*x15666))+((r20*x15656*x15658)));
evalcond[7]=(((r10*x15660))+((r11*x15658))+((x15659*x15670))+(((-1.0)*cj1*cj2*x15664))+((sj0*x15657))+(((-1.0)*r10*x15661*x15670)));
evalcond[8]=((((-1.0)*x15662*x15664))+(((-1.0)*sj3*x15659*x15671))+((r10*x15665))+(((-1.0)*x15664*x15667))+((r11*x15666))+((r10*x15656*x15658)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15673=((-1.0)*r10);
CheckValue<IkReal> x15674 = IKatan2WithCheck(IkReal(x15673),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15674.valid){
continue;
}
IkReal gconst69=((3.14159265358979)+(((-1.0)*(x15674.value))));
IkReal gconst70=x15673;
IkReal gconst71=((-1.0)*r11);
CheckValue<IkReal> x15675 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15675.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x15675.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15676=((-1.0)*r10);
IkReal x15677=((-1.0)*r11);
CheckValue<IkReal> x15679 = IKatan2WithCheck(IkReal(x15676),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15679.valid){
continue;
}
IkReal x15678=((1.0)*(x15679.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15676);
rxp1_1=(px*r21);
rxp1_2=(px*x15677);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x15678)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15678)));
IkReal gconst70=x15676;
IkReal gconst71=x15677;
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15680=((-1.0)*r10);
IkReal x15681=((-1.0)*r11);
CheckValue<IkReal> x15683 = IKatan2WithCheck(IkReal(x15680),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15683.valid){
continue;
}
IkReal x15682=((1.0)*(x15683.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15680);
rxp1_1=(px*r21);
rxp1_2=(px*x15681);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x15682)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15682)));
IkReal gconst70=x15680;
IkReal gconst71=x15681;
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15684=((-1.0)*r10);
IkReal x15685=((-1.0)*r11);
CheckValue<IkReal> x15687 = IKatan2WithCheck(IkReal(x15684),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15687.valid){
continue;
}
IkReal x15686=((1.0)*(x15687.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15684);
rxp1_1=(px*r21);
rxp1_2=(px*x15685);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x15686)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15686)));
IkReal gconst70=x15684;
IkReal gconst71=x15685;
IkReal x15688=((1.0)*sj3);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=(((r10*r21*x15688))+(((-1.0)*r11*r20*x15688)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15689=((1.0)*r21);
IkReal x15690=(cj1*cj2);
IkReal x15691=((1.0)*sj1*sj2);
CheckValue<IkReal> x15692=IKPowWithIntegerCheck(cj3,-1);
if(!x15692.valid){
continue;
}
CheckValue<IkReal> x15693=IKPowWithIntegerCheck(r02,-1);
if(!x15693.valid){
continue;
}
CheckValue<IkReal> x15694=IKPowWithIntegerCheck(((((-1.0)*gconst70*sj3*x15689))+((gconst71*r20*sj3))),-1);
if(!x15694.valid){
continue;
}
if( IKabs(((x15692.value)*(x15693.value)*((((cj0*x15690))+(((-1.0)*cj0*x15691)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15694.value)*(((((-1.0)*x15691))+(((-1.0)*cj3*gconst71*x15689))+x15690+(((-1.0)*cj3*gconst70*r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15692.value)*(x15693.value)*((((cj0*x15690))+(((-1.0)*cj0*x15691))))))+IKsqr(((x15694.value)*(((((-1.0)*x15691))+(((-1.0)*cj3*gconst71*x15689))+x15690+(((-1.0)*cj3*gconst70*r20))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15692.value)*(x15693.value)*((((cj0*x15690))+(((-1.0)*cj0*x15691))))), ((x15694.value)*(((((-1.0)*x15691))+(((-1.0)*cj3*gconst71*x15689))+x15690+(((-1.0)*cj3*gconst70*r20))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15695=IKsin(j4);
IkReal x15696=IKcos(j4);
IkReal x15697=(cj3*gconst70);
IkReal x15698=(sj1*sj2);
IkReal x15699=((1.0)*gconst71);
IkReal x15700=(gconst71*sj3);
IkReal x15701=(cj2*sj1);
IkReal x15702=((1.0)*sj0);
IkReal x15703=(gconst70*r11);
IkReal x15704=(gconst70*sj3);
IkReal x15705=((1.0)*cj0);
IkReal x15706=(cj3*gconst71);
IkReal x15707=(cj1*sj2);
IkReal x15708=((1.0)*cj1*cj2);
IkReal x15709=(r21*x15696);
IkReal x15710=(r10*x15696);
IkReal x15711=((1.0)*x15696);
IkReal x15712=(r02*x15695);
IkReal x15713=(r20*x15696);
evalcond[0]=((((-1.0)*x15702))+(((-1.0)*r02*x15711)));
evalcond[1]=((((-1.0)*r20*x15695*x15699))+((gconst70*r21*x15695)));
evalcond[2]=((((-1.0)*r10*x15695*x15699))+cj0+((x15695*x15703)));
evalcond[3]=((((-1.0)*cj1*cj2*x15705))+((cj3*x15712))+((cj0*x15698)));
evalcond[4]=((((-1.0)*x15705*x15707))+(((-1.0)*x15701*x15705))+(((-1.0)*sj3*x15712)));
evalcond[5]=(((x15697*x15709))+((r20*x15704))+x15701+x15707+((r21*x15700))+(((-1.0)*cj3*x15699*x15713)));
evalcond[6]=((((-1.0)*x15708))+((r20*x15697))+((x15700*x15713))+x15698+((r21*x15706))+(((-1.0)*x15704*x15709)));
evalcond[7]=(((r11*x15700))+((sj0*x15698))+(((-1.0)*cj1*cj2*x15702))+((r10*x15704))+(((-1.0)*cj3*x15699*x15710))+((r11*x15696*x15697)));
evalcond[8]=(((r11*x15706))+((r10*x15697))+(((-1.0)*x15701*x15702))+((x15700*x15710))+(((-1.0)*x15702*x15707))+(((-1.0)*sj3*x15703*x15711)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15716=IKPowWithIntegerCheck(r02,-1);
if(!x15716.valid){
continue;
}
IkReal x15714=x15716.value;
IkReal x15715=((1.0)*cj0);
CheckValue<IkReal> x15717=IKPowWithIntegerCheck(sj3,-1);
if(!x15717.valid){
continue;
}
if( IKabs((x15714*(x15717.value)*(((((-1.0)*cj2*sj1*x15715))+(((-1.0)*cj1*sj2*x15715)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15714)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15714*(x15717.value)*(((((-1.0)*cj2*sj1*x15715))+(((-1.0)*cj1*sj2*x15715))))))+IKsqr(((-1.0)*sj0*x15714))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15714*(x15717.value)*(((((-1.0)*cj2*sj1*x15715))+(((-1.0)*cj1*sj2*x15715))))), ((-1.0)*sj0*x15714));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15718=IKsin(j4);
IkReal x15719=IKcos(j4);
IkReal x15720=(cj3*gconst70);
IkReal x15721=(sj1*sj2);
IkReal x15722=((1.0)*gconst71);
IkReal x15723=(gconst71*sj3);
IkReal x15724=(cj2*sj1);
IkReal x15725=((1.0)*sj0);
IkReal x15726=(gconst70*r11);
IkReal x15727=(gconst70*sj3);
IkReal x15728=((1.0)*cj0);
IkReal x15729=(cj3*gconst71);
IkReal x15730=(cj1*sj2);
IkReal x15731=((1.0)*cj1*cj2);
IkReal x15732=(r21*x15719);
IkReal x15733=(r10*x15719);
IkReal x15734=((1.0)*x15719);
IkReal x15735=(r02*x15718);
IkReal x15736=(r20*x15719);
evalcond[0]=((((-1.0)*x15725))+(((-1.0)*r02*x15734)));
evalcond[1]=((((-1.0)*r20*x15718*x15722))+((gconst70*r21*x15718)));
evalcond[2]=(((x15718*x15726))+cj0+(((-1.0)*r10*x15718*x15722)));
evalcond[3]=((((-1.0)*cj1*cj2*x15728))+((cj0*x15721))+((cj3*x15735)));
evalcond[4]=((((-1.0)*sj3*x15735))+(((-1.0)*x15724*x15728))+(((-1.0)*x15728*x15730)));
evalcond[5]=((((-1.0)*cj3*x15722*x15736))+((r20*x15727))+((r21*x15723))+((x15720*x15732))+x15730+x15724);
evalcond[6]=(((x15723*x15736))+(((-1.0)*x15731))+((r20*x15720))+(((-1.0)*x15727*x15732))+((r21*x15729))+x15721);
evalcond[7]=((((-1.0)*cj3*x15722*x15733))+((r11*x15723))+((r11*x15719*x15720))+(((-1.0)*cj1*cj2*x15725))+((sj0*x15721))+((r10*x15727)));
evalcond[8]=(((x15723*x15733))+((r11*x15729))+(((-1.0)*x15725*x15730))+(((-1.0)*x15724*x15725))+((r10*x15720))+(((-1.0)*sj3*x15726*x15734)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15738=IKPowWithIntegerCheck(r02,-1);
if(!x15738.valid){
continue;
}
IkReal x15737=x15738.value;
CheckValue<IkReal> x15739=IKPowWithIntegerCheck(cj3,-1);
if(!x15739.valid){
continue;
}
if( IKabs((x15737*(x15739.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15737)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15737*(x15739.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x15737))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15737*(x15739.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x15737));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15740=IKsin(j4);
IkReal x15741=IKcos(j4);
IkReal x15742=(cj3*gconst70);
IkReal x15743=(sj1*sj2);
IkReal x15744=((1.0)*gconst71);
IkReal x15745=(gconst71*sj3);
IkReal x15746=(cj2*sj1);
IkReal x15747=((1.0)*sj0);
IkReal x15748=(gconst70*r11);
IkReal x15749=(gconst70*sj3);
IkReal x15750=((1.0)*cj0);
IkReal x15751=(cj3*gconst71);
IkReal x15752=(cj1*sj2);
IkReal x15753=((1.0)*cj1*cj2);
IkReal x15754=(r21*x15741);
IkReal x15755=(r10*x15741);
IkReal x15756=((1.0)*x15741);
IkReal x15757=(r02*x15740);
IkReal x15758=(r20*x15741);
evalcond[0]=((((-1.0)*x15747))+(((-1.0)*r02*x15756)));
evalcond[1]=((((-1.0)*r20*x15740*x15744))+((gconst70*r21*x15740)));
evalcond[2]=(((x15740*x15748))+cj0+(((-1.0)*r10*x15740*x15744)));
evalcond[3]=(((cj3*x15757))+((cj0*x15743))+(((-1.0)*cj1*cj2*x15750)));
evalcond[4]=((((-1.0)*x15746*x15750))+(((-1.0)*x15750*x15752))+(((-1.0)*sj3*x15757)));
evalcond[5]=((((-1.0)*cj3*x15744*x15758))+((x15742*x15754))+((r21*x15745))+x15746+x15752+((r20*x15749)));
evalcond[6]=((((-1.0)*x15753))+((r21*x15751))+x15743+((r20*x15742))+((x15745*x15758))+(((-1.0)*x15749*x15754)));
evalcond[7]=((((-1.0)*cj3*x15744*x15755))+((r11*x15745))+((sj0*x15743))+((r11*x15741*x15742))+(((-1.0)*cj1*cj2*x15747))+((r10*x15749)));
evalcond[8]=(((x15745*x15755))+((r11*x15751))+(((-1.0)*x15746*x15747))+(((-1.0)*x15747*x15752))+((r10*x15742))+(((-1.0)*sj3*x15748*x15756)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15760=IKPowWithIntegerCheck(r02,-1);
if(!x15760.valid){
continue;
}
IkReal x15759=x15760.value;
CheckValue<IkReal> x15761=IKPowWithIntegerCheck(cj3,-1);
if(!x15761.valid){
continue;
}
if( IKabs((x15759*(x15761.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15759)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15759*(x15761.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x15759))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15759*(x15761.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x15759));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15762=IKsin(j4);
IkReal x15763=IKcos(j4);
IkReal x15764=(cj5*r10);
IkReal x15765=(sj1*sj2);
IkReal x15766=(cj5*sj3);
IkReal x15767=(r11*sj5);
IkReal x15768=(cj3*cj5);
IkReal x15769=(cj3*sj5);
IkReal x15770=(r21*sj5);
IkReal x15771=(cj2*sj1);
IkReal x15772=((1.0)*sj0);
IkReal x15773=((1.0)*cj0);
IkReal x15774=(sj3*sj5);
IkReal x15775=(cj1*sj2);
IkReal x15776=((1.0)*cj1*cj2);
IkReal x15777=((1.0)*x15762);
IkReal x15778=(r20*x15763);
IkReal x15779=(cj3*x15763);
IkReal x15780=(sj3*x15763);
evalcond[0]=((((-1.0)*r02*x15763))+(((-1.0)*x15772)));
evalcond[1]=(((x15762*x15770))+(((-1.0)*cj5*r20*x15777)));
evalcond[2]=(cj0+(((-1.0)*x15764*x15777))+((x15762*x15767)));
evalcond[3]=(((cj0*x15765))+(((-1.0)*cj1*cj2*x15773))+((cj3*r02*x15762)));
evalcond[4]=((((-1.0)*x15773*x15775))+(((-1.0)*r02*sj3*x15777))+(((-1.0)*x15771*x15773)));
evalcond[5]=(((r21*x15763*x15769))+((r21*x15766))+((r20*x15774))+x15775+x15771+(((-1.0)*x15768*x15778)));
evalcond[6]=(((r21*x15768))+((x15766*x15778))+(((-1.0)*x15776))+((r20*x15769))+x15765+(((-1.0)*x15770*x15780)));
evalcond[7]=(((x15767*x15779))+((r10*x15774))+((sj0*x15765))+(((-1.0)*x15764*x15779))+(((-1.0)*cj1*cj2*x15772))+((r11*x15766)));
evalcond[8]=((((-1.0)*x15767*x15780))+((r10*x15769))+(((-1.0)*x15772*x15775))+((x15764*x15780))+((r11*x15768))+(((-1.0)*x15771*x15772)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15781=((1.0)*sj3);
IkReal x15782=((1.0)*cj5);
CheckValue<IkReal> x15783=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*r10*x15782))),-1);
if(!x15783.valid){
continue;
}
CheckValue<IkReal> x15784=IKPowWithIntegerCheck((((cj3*r21*sj5))+(((-1.0)*cj3*r20*x15782))),-1);
if(!x15784.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x15783.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15784.value)*(((((-1.0)*r20*sj5*x15781))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*cj5*r21*x15781)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x15783.value)))+IKsqr(((x15784.value)*(((((-1.0)*r20*sj5*x15781))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*cj5*r21*x15781))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x15783.value)), ((x15784.value)*(((((-1.0)*r20*sj5*x15781))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*cj5*r21*x15781))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15785=IKsin(j4);
IkReal x15786=IKcos(j4);
IkReal x15787=(cj5*r10);
IkReal x15788=(sj1*sj2);
IkReal x15789=(cj5*sj3);
IkReal x15790=(r11*sj5);
IkReal x15791=(cj3*cj5);
IkReal x15792=(cj3*sj5);
IkReal x15793=(r21*sj5);
IkReal x15794=(cj2*sj1);
IkReal x15795=((1.0)*sj0);
IkReal x15796=((1.0)*cj0);
IkReal x15797=(sj3*sj5);
IkReal x15798=(cj1*sj2);
IkReal x15799=((1.0)*cj1*cj2);
IkReal x15800=((1.0)*x15785);
IkReal x15801=(r20*x15786);
IkReal x15802=(cj3*x15786);
IkReal x15803=(sj3*x15786);
evalcond[0]=((((-1.0)*x15795))+(((-1.0)*r02*x15786)));
evalcond[1]=((((-1.0)*cj5*r20*x15800))+((x15785*x15793)));
evalcond[2]=(cj0+(((-1.0)*x15787*x15800))+((x15785*x15790)));
evalcond[3]=(((cj3*r02*x15785))+(((-1.0)*cj1*cj2*x15796))+((cj0*x15788)));
evalcond[4]=((((-1.0)*x15794*x15796))+(((-1.0)*x15796*x15798))+(((-1.0)*r02*sj3*x15800)));
evalcond[5]=((((-1.0)*x15791*x15801))+((r21*x15789))+((r21*x15786*x15792))+((r20*x15797))+x15794+x15798);
evalcond[6]=((((-1.0)*x15799))+((x15789*x15801))+((r20*x15792))+((r21*x15791))+x15788+(((-1.0)*x15793*x15803)));
evalcond[7]=(((sj0*x15788))+(((-1.0)*cj1*cj2*x15795))+((x15790*x15802))+((r10*x15797))+(((-1.0)*x15787*x15802))+((r11*x15789)));
evalcond[8]=(((r11*x15791))+(((-1.0)*x15794*x15795))+(((-1.0)*x15795*x15798))+((r10*x15792))+((x15787*x15803))+(((-1.0)*x15790*x15803)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15804=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x15804.valid){
continue;
}
CheckValue<IkReal> x15805=IKPowWithIntegerCheck(r02,-1);
if(!x15805.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x15804.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x15805.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x15804.value)))+IKsqr(((-1.0)*sj0*(x15805.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x15804.value)), ((-1.0)*sj0*(x15805.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15806=IKsin(j4);
IkReal x15807=IKcos(j4);
IkReal x15808=(cj5*r10);
IkReal x15809=(sj1*sj2);
IkReal x15810=(cj5*sj3);
IkReal x15811=(r11*sj5);
IkReal x15812=(cj3*cj5);
IkReal x15813=(cj3*sj5);
IkReal x15814=(r21*sj5);
IkReal x15815=(cj2*sj1);
IkReal x15816=((1.0)*sj0);
IkReal x15817=((1.0)*cj0);
IkReal x15818=(sj3*sj5);
IkReal x15819=(cj1*sj2);
IkReal x15820=((1.0)*cj1*cj2);
IkReal x15821=((1.0)*x15806);
IkReal x15822=(r20*x15807);
IkReal x15823=(cj3*x15807);
IkReal x15824=(sj3*x15807);
evalcond[0]=((((-1.0)*x15816))+(((-1.0)*r02*x15807)));
evalcond[1]=((((-1.0)*cj5*r20*x15821))+((x15806*x15814)));
evalcond[2]=(cj0+(((-1.0)*x15808*x15821))+((x15806*x15811)));
evalcond[3]=((((-1.0)*cj1*cj2*x15817))+((cj0*x15809))+((cj3*r02*x15806)));
evalcond[4]=((((-1.0)*r02*sj3*x15821))+(((-1.0)*x15817*x15819))+(((-1.0)*x15815*x15817)));
evalcond[5]=((((-1.0)*x15812*x15822))+((r21*x15807*x15813))+((r21*x15810))+((r20*x15818))+x15819+x15815);
evalcond[6]=((((-1.0)*x15814*x15824))+(((-1.0)*x15820))+((x15810*x15822))+((r21*x15812))+((r20*x15813))+x15809);
evalcond[7]=(((r11*x15810))+(((-1.0)*cj1*cj2*x15816))+((r10*x15818))+(((-1.0)*x15808*x15823))+((x15811*x15823))+((sj0*x15809)));
evalcond[8]=(((x15808*x15824))+((r11*x15812))+((r10*x15813))+(((-1.0)*x15816*x15819))+(((-1.0)*x15811*x15824))+(((-1.0)*x15815*x15816)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15825=((1.0)*sj0);
IkReal x15826=((1.0)*cj0);
CheckValue<IkReal> x15827 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x15826))+(((-1.0)*r12*x15825)))),IkReal((((cj0*cj5*r00))+(((-1.0)*r11*sj5*x15825))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x15826)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15827.valid){
continue;
}
CheckValue<IkReal> x15828=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x15828.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15827.value)+(((1.5707963267949)*(x15828.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15829=IKsin(j4);
IkReal x15830=IKcos(j4);
IkReal x15831=(r11*sj5);
IkReal x15832=(cj5*r10);
IkReal x15833=(sj1*sj2);
IkReal x15834=(cj5*sj3);
IkReal x15835=((1.0)*sj0);
IkReal x15836=(cj3*cj5);
IkReal x15837=(cj3*sj5);
IkReal x15838=(r21*sj5);
IkReal x15839=(cj2*sj1);
IkReal x15840=(sj3*sj5);
IkReal x15841=(r01*sj5);
IkReal x15842=((1.0)*cj0);
IkReal x15843=(cj1*sj2);
IkReal x15844=((1.0)*x15830);
IkReal x15845=((1.0)*x15829);
IkReal x15846=(cj3*x15830);
IkReal x15847=((1.0)*cj1*cj2);
IkReal x15848=(cj3*x15829);
evalcond[0]=((((-1.0)*cj5*r20*x15845))+((x15829*x15838))+(((-1.0)*r22*x15844)));
evalcond[1]=(cj0+((x15829*x15831))+(((-1.0)*x15832*x15845))+(((-1.0)*r12*x15844)));
evalcond[2]=(((x15829*x15841))+(((-1.0)*cj5*r00*x15845))+(((-1.0)*x15835))+(((-1.0)*r02*x15844)));
evalcond[3]=(((r21*x15830*x15837))+((r20*x15840))+(((-1.0)*r20*x15836*x15844))+((r22*x15848))+x15839+x15843+((r21*x15834)));
evalcond[4]=((((-1.0)*sj3*x15838*x15844))+((r20*x15837))+(((-1.0)*r22*sj3*x15845))+(((-1.0)*x15847))+x15833+((r20*x15830*x15834))+((r21*x15836)));
evalcond[5]=(((r00*x15840))+((cj0*x15833))+(((-1.0)*cj1*cj2*x15842))+((r01*x15834))+((r02*x15848))+((r01*x15830*x15837))+(((-1.0)*r00*x15836*x15844)));
evalcond[6]=(((sj0*x15833))+((r11*x15834))+((r10*x15840))+(((-1.0)*cj3*x15832*x15844))+(((-1.0)*cj1*cj2*x15835))+((r12*x15848))+((x15831*x15846)));
evalcond[7]=((((-1.0)*r02*sj3*x15845))+(((-1.0)*r01*x15840*x15844))+((r00*x15830*x15834))+((r01*x15836))+((r00*x15837))+(((-1.0)*x15839*x15842))+(((-1.0)*x15842*x15843)));
evalcond[8]=(((r10*x15837))+(((-1.0)*x15835*x15843))+((sj3*x15830*x15832))+((r11*x15836))+(((-1.0)*r12*sj3*x15845))+(((-1.0)*x15835*x15839))+(((-1.0)*sj3*x15831*x15844)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15849=((1.0)*cj5);
CheckValue<IkReal> x15850=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x15849)))),-1);
if(!x15850.valid){
continue;
}
CheckValue<IkReal> x15851 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x15849)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15851.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15850.value)))+(x15851.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15852=IKsin(j4);
IkReal x15853=IKcos(j4);
IkReal x15854=(r11*sj5);
IkReal x15855=(cj5*r10);
IkReal x15856=(sj1*sj2);
IkReal x15857=(cj5*sj3);
IkReal x15858=((1.0)*sj0);
IkReal x15859=(cj3*cj5);
IkReal x15860=(cj3*sj5);
IkReal x15861=(r21*sj5);
IkReal x15862=(cj2*sj1);
IkReal x15863=(sj3*sj5);
IkReal x15864=(r01*sj5);
IkReal x15865=((1.0)*cj0);
IkReal x15866=(cj1*sj2);
IkReal x15867=((1.0)*x15853);
IkReal x15868=((1.0)*x15852);
IkReal x15869=(cj3*x15853);
IkReal x15870=((1.0)*cj1*cj2);
IkReal x15871=(cj3*x15852);
evalcond[0]=((((-1.0)*r22*x15867))+(((-1.0)*cj5*r20*x15868))+((x15852*x15861)));
evalcond[1]=(cj0+((x15852*x15854))+(((-1.0)*x15855*x15868))+(((-1.0)*r12*x15867)));
evalcond[2]=((((-1.0)*cj5*r00*x15868))+(((-1.0)*r02*x15867))+(((-1.0)*x15858))+((x15852*x15864)));
evalcond[3]=((((-1.0)*r20*x15859*x15867))+((r21*x15857))+((r22*x15871))+((r21*x15853*x15860))+((r20*x15863))+x15866+x15862);
evalcond[4]=((((-1.0)*r22*sj3*x15868))+((r20*x15853*x15857))+(((-1.0)*x15870))+((r21*x15859))+((r20*x15860))+x15856+(((-1.0)*sj3*x15861*x15867)));
evalcond[5]=(((cj0*x15856))+((r01*x15857))+((r00*x15863))+((r02*x15871))+((r01*x15853*x15860))+(((-1.0)*cj1*cj2*x15865))+(((-1.0)*r00*x15859*x15867)));
evalcond[6]=(((x15854*x15869))+(((-1.0)*cj3*x15855*x15867))+(((-1.0)*cj1*cj2*x15858))+((r11*x15857))+((r12*x15871))+((r10*x15863))+((sj0*x15856)));
evalcond[7]=(((r00*x15853*x15857))+(((-1.0)*x15862*x15865))+((r01*x15859))+(((-1.0)*r02*sj3*x15868))+(((-1.0)*x15865*x15866))+((r00*x15860))+(((-1.0)*r01*x15863*x15867)));
evalcond[8]=(((sj3*x15853*x15855))+(((-1.0)*x15858*x15862))+(((-1.0)*x15858*x15866))+((r11*x15859))+(((-1.0)*sj3*x15854*x15867))+(((-1.0)*r12*sj3*x15868))+((r10*x15860)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15872=((1.0)*cj5);
CheckValue<IkReal> x15873=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x15872)))),-1);
if(!x15873.valid){
continue;
}
CheckValue<IkReal> x15874 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x15872))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15874.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15873.value)))+(x15874.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15875=IKsin(j4);
IkReal x15876=IKcos(j4);
IkReal x15877=(r11*sj5);
IkReal x15878=(cj5*r10);
IkReal x15879=(sj1*sj2);
IkReal x15880=(cj5*sj3);
IkReal x15881=((1.0)*sj0);
IkReal x15882=(cj3*cj5);
IkReal x15883=(cj3*sj5);
IkReal x15884=(r21*sj5);
IkReal x15885=(cj2*sj1);
IkReal x15886=(sj3*sj5);
IkReal x15887=(r01*sj5);
IkReal x15888=((1.0)*cj0);
IkReal x15889=(cj1*sj2);
IkReal x15890=((1.0)*x15876);
IkReal x15891=((1.0)*x15875);
IkReal x15892=(cj3*x15876);
IkReal x15893=((1.0)*cj1*cj2);
IkReal x15894=(cj3*x15875);
evalcond[0]=((((-1.0)*cj5*r20*x15891))+(((-1.0)*r22*x15890))+((x15875*x15884)));
evalcond[1]=(cj0+((x15875*x15877))+(((-1.0)*x15878*x15891))+(((-1.0)*r12*x15890)));
evalcond[2]=((((-1.0)*r02*x15890))+(((-1.0)*x15881))+((x15875*x15887))+(((-1.0)*cj5*r00*x15891)));
evalcond[3]=((((-1.0)*r20*x15882*x15890))+((r20*x15886))+((r22*x15894))+x15885+x15889+((r21*x15876*x15883))+((r21*x15880)));
evalcond[4]=(((r20*x15883))+(((-1.0)*sj3*x15884*x15890))+(((-1.0)*x15893))+(((-1.0)*r22*sj3*x15891))+x15879+((r21*x15882))+((r20*x15876*x15880)));
evalcond[5]=(((r00*x15886))+((r01*x15880))+((r01*x15876*x15883))+(((-1.0)*cj1*cj2*x15888))+((r02*x15894))+(((-1.0)*r00*x15882*x15890))+((cj0*x15879)));
evalcond[6]=(((r10*x15886))+((x15877*x15892))+((r12*x15894))+((r11*x15880))+(((-1.0)*cj1*cj2*x15881))+((sj0*x15879))+(((-1.0)*cj3*x15878*x15890)));
evalcond[7]=((((-1.0)*r01*x15886*x15890))+(((-1.0)*x15885*x15888))+((r00*x15883))+((r01*x15882))+(((-1.0)*x15888*x15889))+((r00*x15876*x15880))+(((-1.0)*r02*sj3*x15891)));
evalcond[8]=(((r10*x15883))+(((-1.0)*sj3*x15877*x15890))+((sj3*x15876*x15878))+(((-1.0)*x15881*x15889))+(((-1.0)*x15881*x15885))+((r11*x15882))+(((-1.0)*r12*sj3*x15891)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15895=cj5*cj5;
IkReal x15896=r21*r21;
IkReal x15897=r20*r20;
IkReal x15898=(r20*r21);
IkReal x15899=((1.0)*cj3);
IkReal x15900=((1.0)*cj5);
IkReal x15901=(cj1*sj2);
IkReal x15902=(cj5*sj5);
IkReal x15903=(sj3*sj5);
IkReal x15904=(cj2*sj1);
IkReal x15905=(r21*sj5);
CheckValue<IkReal> x15906 = IKatan2WithCheck(IkReal((((r22*x15904))+((r22*x15901))+((cj5*r21*r22*sj3))+((r20*r22*x15903)))),IkReal(((((-1.0)*r20*x15900*x15904))+(((-1.0)*r20*x15900*x15901))+(((-2.0)*sj3*x15895*x15898))+((x15901*x15905))+((x15904*x15905))+((sj3*x15896*x15902))+((sj3*x15898))+(((-1.0)*x15897*x15900*x15903)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15906.valid){
continue;
}
CheckValue<IkReal> x15907=IKPowWithIntegerCheck(IKsign((((cj3*x15895*x15896))+(((-1.0)*x15896*x15899))+(((-1.0)*x15895*x15897*x15899))+(((-1.0)*x15899*(r22*r22)))+(((2.0)*cj3*x15898*x15902)))),-1);
if(!x15907.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15906.value)+(((1.5707963267949)*(x15907.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x15908=IKsin(j4);
IkReal x15909=IKcos(j4);
IkReal x15910=(cj3*r21);
IkReal x15911=(r21*sj5);
IkReal x15912=(r20*sj5);
IkReal x15913=(cj5*r20);
IkReal x15914=((1.0)*x15909);
IkReal x15915=((1.0)*x15908);
evalcond[0]=(((x15908*x15911))+(((-1.0)*x15913*x15915))+(((-1.0)*r22*x15914)));
evalcond[1]=(((cj2*sj1))+((sj3*x15912))+((cj5*r21*sj3))+((cj1*sj2))+((cj3*r22*x15908))+(((-1.0)*cj3*x15913*x15914))+((sj5*x15909*x15910)));
evalcond[2]=(((sj3*x15909*x15913))+((cj5*x15910))+(((-1.0)*sj3*x15911*x15914))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*x15915))+((cj3*x15912)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15916=(cj5*sj4);
IkReal x15917=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x15917))+(((-1.0)*r00*x15916)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x15916))+(((-1.0)*r11*x15917))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x15917))+(((-1.0)*r00*x15916))))+IKsqr((((r10*x15916))+(((-1.0)*r11*x15917))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x15917))+(((-1.0)*r00*x15916))), (((r10*x15916))+(((-1.0)*r11*x15917))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x15918=IKcos(j0);
IkReal x15919=IKsin(j0);
IkReal x15920=(r02*sj4);
IkReal x15921=((1.0)*sj3);
IkReal x15922=(r12*sj4);
IkReal x15923=((1.0)*cj3);
IkReal x15924=(sj1*sj2);
IkReal x15925=(r11*sj5);
IkReal x15926=(cj5*r01);
IkReal x15927=(r00*sj5);
IkReal x15928=(cj5*r11);
IkReal x15929=(cj1*cj2);
IkReal x15930=(cj2*sj1);
IkReal x15931=((0.244)*cj1);
IkReal x15932=(r10*sj5);
IkReal x15933=((1.0)*cj4);
IkReal x15934=(cj4*cj5*r00);
IkReal x15935=((0.213)*x15918);
IkReal x15936=(cj4*cj5*r10);
IkReal x15937=(cj4*r01*sj5);
IkReal x15938=((1.0)*x15918);
IkReal x15939=((1.0)*x15919);
IkReal x15940=((0.213)*x15919);
IkReal x15941=((1.0)*cj5*sj4);
IkReal x15942=(cj1*x15939);
evalcond[0]=((((-1.0)*r12*x15933))+(((-1.0)*r10*x15941))+((sj4*x15925))+x15918);
evalcond[1]=((((-1.0)*r00*x15941))+((r01*sj4*sj5))+(((-1.0)*r02*x15933))+(((-1.0)*x15939)));
evalcond[2]=(((x15918*x15931))+(((-1.0)*px))+((x15929*x15935))+(((-1.0)*x15924*x15935))+(((-0.131)*x15919))+(((-0.085)*x15927))+(((-0.085)*x15926)));
evalcond[3]=(((x15929*x15940))+(((0.131)*x15918))+(((-1.0)*py))+(((-1.0)*x15924*x15940))+(((-0.085)*x15932))+(((-0.085)*x15928))+((x15919*x15931)));
evalcond[4]=(((sj3*x15927))+((sj3*x15926))+((cj3*x15920))+(((-1.0)*x15923*x15934))+((cj3*x15937))+(((-1.0)*x15929*x15938))+((x15918*x15924)));
evalcond[5]=(((sj3*x15928))+((cj3*x15922))+((cj3*cj4*x15925))+(((-1.0)*x15923*x15936))+(((-1.0)*x15929*x15939))+((sj3*x15932))+((x15919*x15924)));
evalcond[6]=((((-1.0)*x15920*x15921))+((cj3*x15927))+((cj3*x15926))+(((-1.0)*x15930*x15938))+(((-1.0)*x15921*x15937))+((sj3*x15934))+(((-1.0)*cj1*sj2*x15938)));
evalcond[7]=((((-1.0)*x15921*x15922))+((cj3*x15928))+(((-1.0)*sj2*x15942))+((cj3*x15932))+(((-1.0)*x15930*x15939))+(((-1.0)*cj4*x15921*x15925))+((sj3*x15936)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15943=cj5*cj5;
IkReal x15944=r21*r21;
IkReal x15945=r20*r20;
IkReal x15946=(r20*r21);
IkReal x15947=(sj1*sj2);
IkReal x15948=(r21*sj5);
IkReal x15949=(cj1*cj2);
IkReal x15950=(cj5*r20);
IkReal x15951=(cj5*sj5);
IkReal x15952=(cj3*r22);
IkReal x15953=(sj3*x15944);
CheckValue<IkReal> x15954 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x15949))+((r20*sj5*x15952))+((cj5*r21*x15952))+((r22*x15947)))),IkReal((((cj3*x15946))+(((-1.0)*x15948*x15949))+((x15949*x15950))+(((-1.0)*cj3*x15945*x15951))+(((-2.0)*cj3*x15943*x15946))+((cj3*x15944*x15951))+((x15947*x15948))+(((-1.0)*x15947*x15950)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15954.valid){
continue;
}
CheckValue<IkReal> x15955=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+(((-1.0)*x15943*x15953))+(((-2.0)*sj3*x15946*x15951))+((sj3*x15943*x15945))+x15953)),-1);
if(!x15955.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15954.value)+(((1.5707963267949)*(x15955.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x15956=IKsin(j4);
IkReal x15957=IKcos(j4);
IkReal x15958=(cj3*r21);
IkReal x15959=(r21*sj5);
IkReal x15960=(r20*sj5);
IkReal x15961=(cj5*r20);
IkReal x15962=((1.0)*x15957);
IkReal x15963=((1.0)*x15956);
evalcond[0]=(((x15956*x15959))+(((-1.0)*x15961*x15963))+(((-1.0)*r22*x15962)));
evalcond[1]=(((cj2*sj1))+((cj5*r21*sj3))+((sj5*x15957*x15958))+((cj1*sj2))+(((-1.0)*cj3*x15961*x15962))+((cj3*r22*x15956))+((sj3*x15960)));
evalcond[2]=(((sj3*x15957*x15961))+(((-1.0)*r22*sj3*x15963))+((cj5*x15958))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*sj3*x15959*x15962))+((cj3*x15960)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15964=(cj5*sj4);
IkReal x15965=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x15965))+(((-1.0)*r00*x15964)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x15965))+((r10*x15964))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x15965))+(((-1.0)*r00*x15964))))+IKsqr(((((-1.0)*r11*x15965))+((r10*x15964))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x15965))+(((-1.0)*r00*x15964))), ((((-1.0)*r11*x15965))+((r10*x15964))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x15966=IKcos(j0);
IkReal x15967=IKsin(j0);
IkReal x15968=(r02*sj4);
IkReal x15969=((1.0)*sj3);
IkReal x15970=(r12*sj4);
IkReal x15971=((1.0)*cj3);
IkReal x15972=(sj1*sj2);
IkReal x15973=(r11*sj5);
IkReal x15974=(cj5*r01);
IkReal x15975=(r00*sj5);
IkReal x15976=(cj5*r11);
IkReal x15977=(cj1*cj2);
IkReal x15978=(cj2*sj1);
IkReal x15979=((0.244)*cj1);
IkReal x15980=(r10*sj5);
IkReal x15981=((1.0)*cj4);
IkReal x15982=(cj4*cj5*r00);
IkReal x15983=((0.213)*x15966);
IkReal x15984=(cj4*cj5*r10);
IkReal x15985=(cj4*r01*sj5);
IkReal x15986=((1.0)*x15966);
IkReal x15987=((1.0)*x15967);
IkReal x15988=((0.213)*x15967);
IkReal x15989=((1.0)*cj5*sj4);
IkReal x15990=(cj1*x15987);
evalcond[0]=(((sj4*x15973))+(((-1.0)*r12*x15981))+(((-1.0)*r10*x15989))+x15966);
evalcond[1]=((((-1.0)*x15987))+(((-1.0)*r02*x15981))+((r01*sj4*sj5))+(((-1.0)*r00*x15989)));
evalcond[2]=((((-0.085)*x15974))+(((-0.085)*x15975))+((x15977*x15983))+(((-1.0)*x15972*x15983))+(((-1.0)*px))+(((-0.131)*x15967))+((x15966*x15979)));
evalcond[3]=((((-0.085)*x15976))+((x15977*x15988))+(((-1.0)*x15972*x15988))+(((-0.085)*x15980))+(((-1.0)*py))+((x15967*x15979))+(((0.131)*x15966)));
evalcond[4]=(((cj3*x15985))+(((-1.0)*x15971*x15982))+(((-1.0)*x15977*x15986))+((sj3*x15974))+((sj3*x15975))+((x15966*x15972))+((cj3*x15968)));
evalcond[5]=((((-1.0)*x15971*x15984))+((cj3*cj4*x15973))+(((-1.0)*x15977*x15987))+((sj3*x15980))+((sj3*x15976))+((x15967*x15972))+((cj3*x15970)));
evalcond[6]=((((-1.0)*x15969*x15985))+((sj3*x15982))+(((-1.0)*cj1*sj2*x15986))+(((-1.0)*x15978*x15986))+((cj3*x15974))+((cj3*x15975))+(((-1.0)*x15968*x15969)));
evalcond[7]=(((cj3*x15980))+(((-1.0)*cj4*x15969*x15973))+((sj3*x15984))+(((-1.0)*x15978*x15987))+((cj3*x15976))+(((-1.0)*sj2*x15990))+(((-1.0)*x15969*x15970)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
template<int D>
static inline bool matrixinverse(IkReal* A)
{
    int n = D;
    int info;
    IkReal IKFAST_ALIGNED16(work[D*D*(D-1)]);
    int ipiv[D];
    dgetrf_(&n, &n, A, &n, &ipiv[0], &info);
    if( info != 0 ) {
        return false;
    }
    int worksize=D*D*(D-1);
    dgetri_(&n, A, &n, &ipiv[0], &work[0], &worksize, &info);
    return info==0;
}

/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "55fad7b03fcde4eaf88a2f218824c975"; }

IKFAST_API const char* GetIkFastVersion() { return "0x1000004a"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
